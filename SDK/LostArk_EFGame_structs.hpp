#pragma once

// LostArk (0.0.01) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x1)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Constants
//---------------------------------------------------------------------------

#define CONST_EVENT_LINK_MOUSE_OVER                              "linkMouseOver"
#define CONST_EVENT_PROGRESS_COMPLETE                            "progressComplete"
#define CONST_EVENT_FRAME_SHOW                                   "frameShow"
#define CONST_EVENT_FRAME_HIDE                                   "frameHide"
#define CONST_EVENT_FRAME_TOPMOST                                "frameTopmost"
#define CONST_EVENT_DROP                                         "drop"
#define CONST_EVENT_KEY_UP                                       "keyUp"
#define CONST_EFHOTKEY_MAJOR_VERSION                             5
#define CONST_EVENT_RIGHT_CLICK                                  "buttonRClick"
#define CONST_EVENT_BUTTON_SELECT                                "buttonSelect"
#define CONST_EFHOTKEY_MINOR_VERSION                             3
#define CONST_EFUITreeCtrl_EVENT_DATA_CHANGED                    "dataChanged"
#define CONST_EVENT_DRAG_END                                     "dragEnd"
#define CONST_EVENT_MOUSE_CLICK                                  "click"
#define CONST_EVENT_STATE_CHANGE                                 "stateChange"
#define CONST_EVENT_MOUSE_MIDDLE_DOWN                            "middleMouseDown"
#define CONST_EVENT_MOUSE_MIDDLE_CLICK                           "middleClick"
#define CONST_EVENT_MOUSE_DOUBLE_CLICK                           "doubleClick"
#define CONST_EVENT_CONTEXTMENU_CLOSE                            "contextMenuClose"
#define CONST_EVENT_VALIGN_BOTTOM                                "bottom"
#define CONST_EVENT_MOUSE_MIDDLE_UP                              "middleMouseUp"
#define CONST_EVENT_RESIZE                                       "resize"
#define CONST_EVENT_CHANGE                                       "change"
#define CONST_EVENT_CLICK                                        "buttonClick"
#define CONST_EVENT_MOUSE_DOWN                                   "mouseDown"
#define CONST_EVENT_MOUSE_MOVE                                   "mouseMove"
#define CONST_EVENT_MOUSE_OUT                                    "mouseOut"
#define CONST_EVENT_MOUSE_OVER                                   "mouseOver"
#define CONST_EVENT_SCROLL                                       "scroll"
#define CONST_EVENT_MOUSE_UP                                     "mouseUp"
#define CONST_EVENT_PROGRESS                                     "progress"
#define CONST_EVENT_MOUSE_WHEEL                                  "mouseWheel"
#define CONST_EVENT_MOUSE_RIGHT_CLICK                            "rightClick"
#define CONST_EVENT_VALIGN_TOP                                   "top"
#define CONST_EVENT_MOUSE_RIGHT_DOWN                             "rightMouseDown"
#define CONST_EVENT_MOUSE_RIGHT_UP                               "rightMouseUp"
#define CONST_EVENT_MOUSE_ROLL_OUT                               "rollOut"
#define CONST_EVENT_MOUSE_ROLL_OVER                              "rollOver"
#define CONST_EVENT_KEY_DOWN                                     "keyDown"
#define CONST_EVENT_INDEX_CHANGE                                 "clikIndexChange"
#define CONST_EVENT_SHOW                                         "show"
#define CONST_EVENT_HIDE                                         "hide"
#define CONST_EVENT_FOCUS_IN                                     "CLIK_focusIn"
#define CONST_EVENT_VALUE_CHANGE                                 "valueChange"
#define CONST_EVENT_FOCUS_OUT                                    "CLIK_focusOut"
#define CONST_EVENT_DRAG_START                                   "dragStart"
#define CONST_EVENT_PRESS                                        "buttonPress"
#define CONST_EVENT_LOAD_COMPLETE                                "loadComplete"
#define CONST_EVENT_DOUBLE_CLICK                                 "buttonDoubleClick"
#define CONST_EVENT_DIRECTION_VERTICAL                           "vertical"
#define CONST_EVENT_BUTTON_ROLLOVER                              "buttonRollOver"
#define CONST_EVENT_BUTTON_ROLLOUT                               "buttonRollOut"
#define CONST_EVENT_VALIGN_CENTER                                "center"
#define CONST_EVENT_DRAG_OVER                                    "dragOver"
#define CONST_EVENT_DRAG_OUT                                     "dragOut"
#define CONST_EVENT_RELEASE_OUTSIDE                              "releaseOutside"
#define CONST_EVENT_VALIGN_NONE                                  "none"
#define CONST_EVENT_ITEM_DOUBLE_CLICK                            "itemDoubleClick"
#define CONST_EVENT_DIRECTION_HORIZONTAL                         "horizontal"
#define CONST_EVENT_DEFAULT_GROUPNAME                            "default"
#define CONST_EVENT_TAB_SELECT                                   "tabSelect"
#define CONST_EVENT_INPUT                                        "input"
#define CONST_EVENT_PROGRESS_INTERRUPT                           "progressInterrupte"
#define CONST_EVENT_STATE_START                                  "stateStart"
#define CONST_EVENT_STATE_END                                    "stateEnd"
#define CONST_EVENT_LINK_MOUSE_OUT                               "linkMouseOut"
#define CONST_EVENT_PLAY_END                                     "playEnd"
#define CONST_EVENT_CONTEXTMENU_DISPLAY_CHILD                    "contextMenuDisplayChild"
#define CONST_EVENT_CONTEXTMENU_CLICK_MENU                       "contextMenuClick"
#define CONST_EVENT_CHECKBOX_CLICK                               "select"
#define CONST_EVENT_SLOT_ROLLOVER                                "slotRollOver"
#define CONST_EVENT_SLOT_CLICK                                   "slotClick"
#define CONST_EVENT_CHILDWINDOW_HIDE                             "childHide"
#define CONST_EVENT_RELEASE_OUTSIDE_TO_STAGE                     "releaseOutsideToStage"
#define CONST_EVENT_MOUSE_CLICK_CUSTOM                           "optionalClick"
#define CONST_EVENT_STEP_INDEX_CHANGE                            "clikStepIndexChange"
#define CONST_FUNCTION_SLOT_DRAG_START                           "nativeSlotDragStart"
#define CONST_FUNCTION_SLOT_DRAG_END                             "nativeSlotDragEnd"
#define CONST_FUNCTION_UNMOVABLE_SLOT_DRAG_START                 "nativeSlotDragStartUnMovable"
#define CONST_FUNCTION_UNMOVABLE_SLOT_DRAG_END                   "nativeSlotDragEndUnMovable"
#define CONST_FUNCTION_GET_TOOLTIP                               "nativeGetTooltip"
#define CONST_FUNCTION_SHOW_INFORMATION                          "nativeAddInformation"
#define CONST_FUNCTION_GET_WINDOW_TOOLTIP                        "nativeGetWindowTooltip"
#define CONST_FUNCTION_HIDE_TOOLTIP                              "nativeHideTooltip"
#define CONST_FUNCTION_GET_LOCALIZED_MESSAGE                     "nativeGetLocalizedMessage"
#define CONST_FUNCTION_TRACE_OUTPUT                              "nativeOutput"
#define CONST_FUNCTION_GET_XML                                   "nativeGetXML"
#define CONST_EVENT_ITEM_CLICK                                   "itemClick"
#define CONST_EVENT_ITEM_ROLL_OVER                               "itemRollOver"
#define CONST_EVENT_ITEM_ROLL_OUT                                "itemRollOut"
#define CONST_EVENT_ITEM_INDEX_CHANGE                            "listIndexChange"
#define CONST_EFUITree_EVENT_DATA_CHANGED                        "dataChanged"
#define CONST_EFUITree_EVENT_REFRESH                             "refresh"
#define CONST_EFUITreeCtrl_EVENT_REFRESH                         "refresh"
#define CONST_EVENT_WINDOW_SHOW                                  "windowShow"
#define CONST_EVENT_WINDOW_HIDE                                  "windowHide"
#define CONST_EVENT_WINDOW_TOPMOST                               "windowTopmost"

//---------------------------------------------------------------------------
//Enums
//---------------------------------------------------------------------------

// Enum EFGame.EFConst.AbilityTextBroadCastType
enum class EAbilityTextBroadCastType : uint8_t
{
	ABILITY_TEXT_BROADCAST_TYPE_NONE = 0,
	ABILITY_TEXT_BROADCAST_TYPE_ME = 1,
	ABILITY_TEXT_BROADCAST_TYPE_PARTY = 2,
	ABILITY_TEXT_BROADCAST_TYPE_ALL = 3,
	ABILITY_TEXT_BROADCAST_TYPE_MAX = 4
};


// Enum EFGame.EFConst.AbilityFeatureType
enum class EAbilityFeatureType : uint8_t
{
	ABILITY_FEATURE_TYPE_NONE      = 0,
	ABILITY_FEATURE_TYPE_POTION_JUNKIE = 1,
	ABILITY_FEATURE_TYPE_RUTHLESS  = 2,
	ABILITY_FEATURE_TYPE_SPIRIT_ABSORPTION = 3,
	ABILITY_FEATURE_TYPE_ETHER_JUNKIE = 4,
	ABILITY_FEATURE_TYPE_STEADY_STATE = 5,
	ABILITY_FEATURE_TYPE_AMPUTATION_MASTER = 6,
	ABILITY_FEATURE_TYPE_SPARKLE   = 7,
	ABILITY_FEATURE_TYPE_STRONG_BACK = 8,
	ABILITY_FEATURE_TYPE_LIVING_EXPERT = 9,
	ABILITY_FEATURE_TYPE_GRUDGE    = 10,
	ABILITY_FEATURE_TYPE_EVASION_EXPERT = 11,
	ABILITY_FEATURE_TYPE_SUPER_CHARGE = 12,
	ABILITY_FEATURE_TYPE_STUN_IMMUNITY = 13,
	ABILITY_FEATURE_TYPE_INDOMITABLE_WILL = 14,
	ABILITY_FEATURE_TYPE_FUGITIVE  = 15,
	ABILITY_FEATURE_TYPE_IDENTITY_BERSERKER_MADNESS = 16,
	ABILITY_FEATURE_TYPE_IDENTITY_BATTLE_MASTER_BUBBLE = 17,
	ABILITY_FEATURE_TYPE_IDENTITY_DEVIL_HUNTER_WEAPON = 18,
	ABILITY_FEATURE_TYPE_IDENTITY_BLASTER_OVERHAUL = 19,
	ABILITY_FEATURE_TYPE_LUCKY_MONSTER_KILLER = 20,
	ABILITY_FEATURE_TYPE_HARMONY   = 21,
	ABILITY_FEATURE_TYPE_ETHER_BOY = 22,
	ABILITY_FEATURE_TYPE_MONEY_EXPLOSION = 23,
	ABILITY_FEATURE_TYPE_GLUTTON   = 24,
	ABILITY_FEATURE_TYPE_SECRET_MAP = 25,
	ABILITY_FEATURE_TYPE_NEAR_DEATH_EXPERIENCE = 26,
	ABILITY_FEATURE_TYPE_MATT_CRITICAL = 27,
	ABILITY_FEATURE_TYPE_HEAVY_PUNCH = 28,
	ABILITY_FEATURE_TYPE_STONE_IMMUNITY = 29,
	ABILITY_FEATURE_TYPE_FREEZE_IMMUNITY = 30,
	ABILITY_FEATURE_TYPE_SILENCE_IMMUNITY = 31,
	ABILITY_FEATURE_TYPE_EARTHQUAKE_IMMUNITY = 32,
	ABILITY_FEATURE_TYPE_FEAR_IMMUNITY = 33,
	ABILITY_FEATURE_TYPE_BURN_IMMUNITY = 34,
	ABILITY_FEATURE_TYPE_SLOW_IMMUNITY = 35,
	ABILITY_FEATURE_TYPE_PENETRATION_MASTER = 36,
	ABILITY_FEATURE_TYPE_BLOW_MASTER = 37,
	ABILITY_FEATURE_TYPE_LIFE_DYNAMITE = 38,
	ABILITY_FEATURE_TYPE_LIFE_MINERS_INSTINCT = 39,
	ABILITY_FEATURE_TYPE_LIFE_LUCKYDAY = 40,
	ABILITY_FEATURE_TYPE_LIFE_GOLDEN_FISH = 41,
	ABILITY_FEATURE_TYPE_LIFE_FISHING_NET_EXPERT = 42,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_TOOL_MASTER = 43,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_EXTRA_HUGE = 44,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_SAPLING = 45,
	ABILITY_FEATURE_TYPE_LIFE_FOUR_LEAFED_CLOVER = 46,
	ABILITY_FEATURE_TYPE_LIFE_BUG_MASTER = 47,
	ABILITY_FEATURE_TYPE_LIFE_OLD_WILD_GINSENG = 48,
	ABILITY_FEATURE_TYPE_LIFE_HUNTING_PRO = 49,
	ABILITY_FEATURE_TYPE_LIFE_BUTCHER = 50,
	ABILITY_FEATURE_TYPE_LIFE_HOT_SPOT = 51,
	ABILITY_FEATURE_TYPE_LIFE_DELICATE_DIGGING = 52,
	ABILITY_FEATURE_TYPE_LIFE_CONCENTRATION = 53,
	ABILITY_FEATURE_TYPE_LIFE_HIGH_FREQUENCY = 54,
	ABILITY_FEATURE_TYPE_LIFE_PICKAXE_TIERUP = 55,
	ABILITY_FEATURE_TYPE_LIFE_MOONLIGHT_PENALTYOFF = 56,
	ABILITY_FEATURE_TYPE_LIFE_FASTBOMB = 57,
	ABILITY_FEATURE_TYPE_LIFE_FISHINGROD_TIERUP = 58,
	ABILITY_FEATURE_TYPE_LIFE_DOUBLE_POINT = 59,
	ABILITY_FEATURE_TYPE_LIFE_GOLDEN_BAIT = 60,
	ABILITY_FEATURE_TYPE_LIFE_AXE_TIERUP = 61,
	ABILITY_FEATURE_TYPE_LIFE_TREEKICK = 62,
	ABILITY_FEATURE_TYPE_LIFE_GLOVE_TIERUP = 63,
	ABILITY_FEATURE_TYPE_LIFE_FAKER_TOUCH = 64,
	ABILITY_FEATURE_TYPE_LIFE_MACHETE_TIERUP = 65,
	ABILITY_FEATURE_TYPE_LIFE_HEAVYPOISON = 66,
	ABILITY_FEATURE_TYPE_LIFE_GOLDENRABBIT = 67,
	ABILITY_FEATURE_TYPE_LIFE_SHOVEL_TIERUP = 68,
	ABILITY_FEATURE_TYPE_LIFE_TREASUREHENTER = 69,
	ABILITY_FEATURE_TYPE_LIFE_PROTAMER = 70,
	ABILITY_FEATURE_TYPE_ELECTROCUTION_IMMUNITY = 71,
	ABILITY_FEATURE_TYPE_VERMIN_IMMUNITY = 72,
	ABILITY_FEATURE_TYPE_SLEEP_IMMUNITY = 73,
	ABILITY_FEATURE_TYPE_CONFINEMENT_IMMUNITY = 74,
	ABILITY_FEATURE_TYPE_BLEEDING_IMMUNITY = 75,
	ABILITY_FEATURE_TYPE_POISONING_IMMUNITY = 76,
	ABILITY_FEATURE_TYPE_CURSE_IMMUNITY = 77,
	ABILITY_FEATURE_TYPE_SLOWNESS_IMMUNITY = 78,
	ABILITY_FEATURE_TYPE_DISARMING_IMMUNITY = 79,
	ABILITY_FEATURE_TYPE_ALL_SPEED_DOWN_IMMUNITY = 80,
	ABILITY_FEATURE_TYPE_DARKNESS_IMMUNITY = 81,
	ABILITY_FEATURE_TYPE_CHILL_IMMUNITY = 82,
	ABILITY_FEATURE_TYPE_IDENTITY_BERSERKER_RUSH_UP = 83,
	ABILITY_FEATURE_TYPE_IDENTITY_BATTLE_MASTER_ORIGINAL_INTENTION = 84,
	ABILITY_FEATURE_TYPE_IDENTITY_INFIGHTER_VIGOR_MASTER = 85,
	ABILITY_FEATURE_TYPE_IDENTITY_INFIGHTER_SHOCK_REGEN = 86,
	ABILITY_FEATURE_TYPE_IDENTITY_DEVIL_HUNTER_HAND_GUNNER = 87,
	ABILITY_FEATURE_TYPE_IDENTITY_BLASTER_FREE_BOMB_ARDMENT = 88,
	ABILITY_FEATURE_TYPE_IDENTITY_BARD_SWEET_SONG = 89,
	ABILITY_FEATURE_TYPE_IDENTITY_BARD_URGENT_RESCUE = 90,
	ABILITY_FEATURE_TYPE_IDENTITY_DESTROYER_ANGRY_HAMMER = 91,
	ABILITY_FEATURE_TYPE_IDENTITY_DESTROYER_GRAVITY_UP = 92,
	ABILITY_FEATURE_TYPE_IDENTITY_SUMMONER_SENIOR = 93,
	ABILITY_FEATURE_TYPE_IDENTITY_SUMMONER_ANCIENT_ENERGY = 94,
	ABILITY_FEATURE_TYPE_IDENTITY_ARCANA_EMPRESS_CARD = 95,
	ABILITY_FEATURE_TYPE_IDENTITY_ARCANA_EMPEROR_CARD = 96,
	ABILITY_FEATURE_TYPE_EMERGENCY_STANTUP = 97,
	ABILITY_FEATURE_TYPE_OUTSIDER  = 98,
	ABILITY_FEATURE_TYPE_TELESCOPE = 99,
	ABILITY_FEATURE_TYPE_IDENTITY_WARLORD_LIGHT_SHEILD = 100,
	ABILITY_FEATURE_TYPE_IDENTITY_WARLORD_LONELY_KNIGHT = 101,
	ABILITY_FEATURE_TYPE_TENACITY  = 102,
	ABILITY_FEATURE_TYPE_GRINDING_GLOVE = 103,
	ABILITY_FEATURE_TYPE_SHIELD_PENETRATION = 104,
	ABILITY_FEATURE_TYPE_STRENGTH_MASTER = 105,
	ABILITY_FEATURE_TYPE_PROTECTION_GODDESS = 106,
	ABILITY_FEATURE_TYPE_HEAVY_ARMOR = 107,
	ABILITY_FEATURE_TYPE_EXPLOSION_MASTER = 108,
	ABILITY_FEATURE_TYPE_UPGRADE_SHIELD = 109,
	ABILITY_FEATURE_TYPE_NECROMANCER = 110,
	ABILITY_FEATURE_TYPE_FIRST_CRITICAL = 111,
	ABILITY_FEATURE_TYPE_BROKEN_BONE = 112,
	ABILITY_FEATURE_TYPE_THUNDER_FURY = 113,
	ABILITY_FEATURE_TYPE_CURSED_TOY = 114,
	ABILITY_FEATURE_TYPE_GLADIATOR = 115,
	ABILITY_FEATURE_TYPE_BACKSTAB_MASTER = 116,
	ABILITY_FEATURE_TYPE_ETHER_EVAPORATION = 117,
	ABILITY_FEATURE_TYPE_MANA_FLOW = 118,
	ABILITY_FEATURE_TYPE_DOUBLE_JUMP = 119,
	ABILITY_FEATURE_TYPE_BARRICADE = 120,
	ABILITY_FEATURE_TYPE_TROOP_LEADER = 121,
	ABILITY_FEATURE_TYPE_AWAKENING = 122,
	ABILITY_FEATURE_TYPE_ANOTHER_SILVERHAWK = 123,
	ABILITY_FEATURE_TYPE_HANDLING_SILVERHAWK = 124,
	ABILITY_FEATURE_TYPE_RELEASED_QI = 125,
	ABILITY_FEATURE_TYPE_POWER_QI  = 126,
	ABILITY_FEATURE_TYPE_VF_CRUEL  = 127,
	ABILITY_FEATURE_TYPE_VF_BALANCE_HIT = 128,
	ABILITY_FEATURE_TYPE_VF_SOLIDARITY = 129,
	ABILITY_FEATURE_TYPE_VF_JOB_HUNTER = 130,
	ABILITY_FEATURE_TYPE_VF_HARDNESS = 131,
	ABILITY_FEATURE_TYPE_VF_WARMONGER = 132,
	ABILITY_FEATURE_TYPE_VF_ELEMENTAL_EFFECT = 133,
	ABILITY_FEATURE_TYPE_VF_QUICK_STAND = 134,
	ABILITY_FEATURE_TYPE_VF_SWIFT  = 135,
	ABILITY_FEATURE_TYPE_VF_COUNTER_CHANCE = 136,
	ABILITY_FEATURE_TYPE_VF_BUBBLE_FURY = 137,
	ABILITY_FEATURE_TYPE_VF_MADNESS_FOLLOWER = 138,
	ABILITY_FEATURE_TYPE_VF_FURY_TRAIN = 139,
	ABILITY_FEATURE_TYPE_VF_GUARDIAN_CAPE = 140,
	ABILITY_FEATURE_TYPE_VF_COUNTER_ATTACK = 141,
	ABILITY_FEATURE_TYPE_VF_ENDURANCE = 142,
	ABILITY_FEATURE_TYPE_VF_FURY_STIMULUS = 143,
	ABILITY_FEATURE_TYPE_VF_GIANT_BLOOD = 144,
	ABILITY_FEATURE_TYPE_VF_TOUGH_SKIN = 145,
	ABILITY_FEATURE_TYPE_VF_BLOOD_THIRSH = 146,
	ABILITY_FEATURE_TYPE_VF_BLOOD_WARRIOR = 147,
	ABILITY_FEATURE_TYPE_VF_EMERGENCY_HEAL = 148,
	ABILITY_FEATURE_TYPE_VF_CHASER = 149,
	ABILITY_FEATURE_TYPE_VF_STRONG_HIT = 150,
	ABILITY_FEATURE_TYPE_VF_SHARP_FOCUS = 151,
	ABILITY_FEATURE_TYPE_VF_BLOOD_FURY = 152,
	ABILITY_FEATURE_TYPE_VF_FRENZY = 153,
	ABILITY_FEATURE_TYPE_VF_IMPREGNABILITY = 154,
	ABILITY_FEATURE_TYPE_VF_DEFENSE_POSTURES = 155,
	ABILITY_FEATURE_TYPE_VF_IRON_SHIELD = 156,
	ABILITY_FEATURE_TYPE_VF_MAGIC_SHIELD = 157,
	ABILITY_FEATURE_TYPE_VF_ENDURANCE_HEAL = 158,
	ABILITY_FEATURE_TYPE_VF_RECOVER = 159,
	ABILITY_FEATURE_TYPE_VF_BATTLE_COMMANDER = 160,
	ABILITY_FEATURE_TYPE_VF_PUNISH = 161,
	ABILITY_FEATURE_TYPE_VF_IRON_WALL = 162,
	ABILITY_FEATURE_TYPE_VF_INCREMENT_GRAVITY = 163,
	ABILITY_FEATURE_TYPE_VF_REVERSE_GRAVITY = 164,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_POWER = 165,
	ABILITY_FEATURE_TYPE_VF_CREATE_GRAVITY = 166,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_HEAL = 167,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_RUSH = 168,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_ARMOR = 169,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_RECOVERY = 170,
	ABILITY_FEATURE_TYPE_VF_FIRE_ICE_TRAIN = 171,
	ABILITY_FEATURE_TYPE_VF_WIND_EARTH_ELEC_TRAIN = 172,
	ABILITY_FEATURE_TYPE_VF_DARK_HOLY_TRAIN = 173,
	ABILITY_FEATURE_TYPE_VF_CONDITION_SHIELD = 174,
	ABILITY_FEATURE_TYPE_VF_CREATE_BUBBLE = 175,
	ABILITY_FEATURE_TYPE_VF_SHARP_EVADE = 176,
	ABILITY_FEATURE_TYPE_VF_BUBBLE_HEAL = 177,
	ABILITY_FEATURE_TYPE_VF_BUBBLE_POWER = 178,
	ABILITY_FEATURE_TYPE_VF_MATCHLESS = 179,
	ABILITY_FEATURE_TYPE_VF_ACTIVATE_BUBBLE = 180,
	ABILITY_FEATURE_TYPE_VF_ENERGY_RECOVERY = 181,
	ABILITY_FEATURE_TYPE_VF_ENERGY_MORALE_CHARGE = 182,
	ABILITY_FEATURE_TYPE_VF_SHOCK_TRAIN = 183,
	ABILITY_FEATURE_TYPE_VF_CREATE_ENERGY = 184,
	ABILITY_FEATURE_TYPE_VF_SHOCK_RECOVERY = 185,
	ABILITY_FEATURE_TYPE_VF_SHARP_NERVE = 186,
	ABILITY_FEATURE_TYPE_VF_INTERNAL_INJURY = 187,
	ABILITY_FEATURE_TYPE_VF_DUCKING_MASTER = 188,
	ABILITY_FEATURE_TYPE_VF_BLITZ_GENERAL = 189,
	ABILITY_FEATURE_TYPE_VF_MANA_TRAIN = 190,
	ABILITY_FEATURE_TYPE_VF_ANCIENT_WILL = 191,
	ABILITY_FEATURE_TYPE_VF_ANCIENT_ESSENCE = 192,
	ABILITY_FEATURE_TYPE_VF_ANCIENT_POTENTIAL = 193,
	ABILITY_FEATURE_TYPE_VF_MANA_SHIELD = 194,
	ABILITY_FEATURE_TYPE_VF_SPRINT_BLESSING = 195,
	ABILITY_FEATURE_TYPE_VF_ELEMENTAL_CURSE = 196,
	ABILITY_FEATURE_TYPE_VF_SUMMON_MASTER = 197,
	ABILITY_FEATURE_TYPE_VF_PREPARE_POWER = 198,
	ABILITY_FEATURE_TYPE_VF_MANA_BOOSTER = 199,
	ABILITY_FEATURE_TYPE_VF_FAIRY_HARMONY = 200,
	ABILITY_FEATURE_TYPE_VF_ANCIENT_MAGIC = 201,
	ABILITY_FEATURE_TYPE_VF_ENDURANCE_SONG = 202,
	ABILITY_FEATURE_TYPE_VF_MASTER_SONG = 203,
	ABILITY_FEATURE_TYPE_VF_WIND_SONG = 204,
	ABILITY_FEATURE_TYPE_VF_GUARDIAN_SERENADE = 205,
	ABILITY_FEATURE_TYPE_VF_COUNTER_SERENADE = 206,
	ABILITY_FEATURE_TYPE_VF_INCREMENT_HEAL = 207,
	ABILITY_FEATURE_TYPE_VF_INCREMENT_MAGIC_SONG = 208,
	ABILITY_FEATURE_TYPE_VF_BLESSING_GODDESS = 209,
	ABILITY_FEATURE_TYPE_VF_GUARDIAN_ANGEL = 210,
	ABILITY_FEATURE_TYPE_VF_ACTIVE_CARD = 211,
	ABILITY_FEATURE_TYPE_VF_BONUS_CARD = 212,
	ABILITY_FEATURE_TYPE_VF_SHUFFLE_MASTER = 213,
	ABILITY_FEATURE_TYPE_VF_WARINESS = 214,
	ABILITY_FEATURE_TYPE_VF_HEAL_CARD = 215,
	ABILITY_FEATURE_TYPE_VF_WIND_WING = 216,
	ABILITY_FEATURE_TYPE_VF_RUIN_MASTER = 217,
	ABILITY_FEATURE_TYPE_VF_STACKED_MASTER = 218,
	ABILITY_FEATURE_TYPE_VF_CARD_COLLECTOR = 219,
	ABILITY_FEATURE_TYPE_VF_HANDGUN_MASTER = 220,
	ABILITY_FEATURE_TYPE_VF_SHOTGUN_MASTER = 221,
	ABILITY_FEATURE_TYPE_VF_RIFLE_MASTER = 222,
	ABILITY_FEATURE_TYPE_VF_GUN_GUARD = 223,
	ABILITY_FEATURE_TYPE_VF_AGILE  = 224,
	ABILITY_FEATURE_TYPE_VF_UNHINDERED_MOVE = 225,
	ABILITY_FEATURE_TYPE_VF_WEAKNESS_HUNT = 226,
	ABILITY_FEATURE_TYPE_VF_LONELY_HUNTER = 227,
	ABILITY_FEATURE_TYPE_VF_CALM_AIM = 228,
	ABILITY_FEATURE_TYPE_VF_GUN_MASTER = 229,
	ABILITY_FEATURE_TYPE_VF_BURNING_TIME = 230,
	ABILITY_FEATURE_TYPE_VF_FIREPOWER_CHARGE = 231,
	ABILITY_FEATURE_TYPE_VF_SAFETY_FIRE = 232,
	ABILITY_FEATURE_TYPE_VF_EFFECTIVE_FIREPOWER = 233,
	ABILITY_FEATURE_TYPE_VF_DEFENSE_MODULE = 234,
	ABILITY_FEATURE_TYPE_VF_GRAVITY_MODULE = 235,
	ABILITY_FEATURE_TYPE_VF_BATTLE_HEAT = 236,
	ABILITY_FEATURE_TYPE_VF_ATOMIC_BOMB = 237,
	ABILITY_FEATURE_TYPE_VF_QUICK_SILVERHAWK = 238,
	ABILITY_FEATURE_TYPE_VF_COMMUNION = 239,
	ABILITY_FEATURE_TYPE_VF_WIND_FURY = 240,
	ABILITY_FEATURE_TYPE_VF_MASTER_HUNTER = 241,
	ABILITY_FEATURE_TYPE_VF_HAWK_BLOW = 242,
	ABILITY_FEATURE_TYPE_VF_ENERGY_REGEN = 243,
	ABILITY_FEATURE_TYPE_VF_INC_ENERGY_EXPLOSION = 244,
	ABILITY_FEATURE_TYPE_VF_ENERGY_STABLE = 245,
	ABILITY_FEATURE_TYPE_VF_ENERGY_SHIELD = 246,
	ABILITY_FEATURE_TYPE_VF_ENERGY_CYCLE = 247,
	ABILITY_FEATURE_TYPE_VF_INC_ENERGY_ATTACK = 248,
	ABILITY_FEATURE_TYPE_VF_FIRE_ICE = 249,
	ABILITY_FEATURE_TYPE_VF_ENERGY_FURY = 250,
	ABILITY_FEATURE_TYPE_VF_ENERGY_COMPRESS = 251,
	ABILITY_FEATURE_TYPE_VF_STRONG_HEART = 252,
	ABILITY_FEATURE_TYPE_VF_LAST_BUBBLE = 253,
	ABILITY_FEATURE_TYPE_VF_CRITICAL_BUBBLE = 254,
	ABILITY_FEATURE_TYPE_VF_IRON_BUBBLE = 255,
	ABILITY_FEATURE_TYPE_VF_LAST_ENERGY = 256,
	ABILITY_FEATURE_TYPE_VF_RECHARGE_SERENADE = 257,
	ABILITY_FEATURE_TYPE_VF_HEAL_SERENADE = 258,
	ABILITY_FEATURE_TYPE_VF_AIERCE_ATTACK = 259,
	ABILITY_FEATURE_TYPE_VF_GIANT_HUNT = 260,
	ABILITY_FEATURE_TYPE_VF_HUNTER_EYES = 261,
	ABILITY_FEATURE_TYPE_VF_GIANT_SPEAR = 262,
	ABILITY_FEATURE_TYPE_VF_LIMIT_CONQUEST = 263,
	ABILITY_FEATURE_TYPE_VF_WARRIOR_INSTINCT = 264,
	ABILITY_FEATURE_TYPE_VF_LANCE_SPECIALIST = 265,
	ABILITY_FEATURE_TYPE_VF_QUICK_MOVE = 266,
	ABILITY_FEATURE_TYPE_VF_CORE_SUPPLY = 267,
	ABILITY_FEATURE_TYPE_VF_VITALITY_PROMOTION = 268,
	ABILITY_FEATURE_TYPE_VF_ENLIGHTENMENT = 269,
	ABILITY_FEATURE_TYPE_IDENTITY_LANCEMASTER_CLIMAX = 270,
	ABILITY_FEATURE_TYPE_IDENTITY_LANCEMASTER_SELFCONTROL = 271,
	ABILITY_FEATURE_TYPE_VF_DEATH_ORB = 272,
	ABILITY_FEATURE_TYPE_VF_ABSORB_ORB = 273,
	ABILITY_FEATURE_TYPE_VF_QUICK_ARTS = 274,
	ABILITY_FEATURE_TYPE_VF_PROTECT_ORB = 275,
	ABILITY_FEATURE_TYPE_VF_ORBELIXIR = 276,
	ABILITY_FEATURE_TYPE_VF_CHAIN_ATTACK = 277,
	ABILITY_FEATURE_TYPE_VF_BURST_STRIKE = 278,
	ABILITY_FEATURE_TYPE_VF_ARTS_RUSH = 279,
	ABILITY_FEATURE_TYPE_IDENTITY_DEMONIC_REPRESSION = 280,
	ABILITY_FEATURE_TYPE_IDENTITY_DEMONIC_IMPULSE = 281,
	ABILITY_FEATURE_TYPE_IDENTITY_BLADE_BURST = 282,
	ABILITY_FEATURE_TYPE_IDENTITY_BLADE_LINGER = 283,
	ABILITY_FEATURE_TYPE_VF_SKILL_UPGRADE = 284,
	ABILITY_FEATURE_TYPE_VF_MIND_CONTROL = 285,
	ABILITY_FEATURE_TYPE_VF_TIME_EXTENSION = 286,
	ABILITY_FEATURE_TYPE_VF_SELF_DEFENCE = 287,
	ABILITY_FEATURE_TYPE_VF_SKIN_REGENERATION = 288,
	ABILITY_FEATURE_TYPE_VF_FEVER_PITCH = 289,
	ABILITY_FEATURE_TYPE_VF_DEVIL_POWER = 290,
	ABILITY_FEATURE_TYPE_VF_REVOCATION = 291,
	ABILITY_FEATURE_TYPE_IDENTITY_HOLYKNIGHT_JUDGE = 292,
	ABILITY_FEATURE_TYPE_IDENTITY_HOLYKNIGHT_BLESS = 293,
	ABILITY_FEATURE_TYPE_LIFE_HERBALISM_SUPER_ARMOR = 294,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_SUPER_ARMOR = 295,
	ABILITY_FEATURE_TYPE_LIFE_MINING_SUPER_ARMOR = 296,
	ABILITY_FEATURE_TYPE_LIFE_HUNTING_SUPER_ARMOR = 297,
	ABILITY_FEATURE_TYPE_LIFE_FISHING_SUPER_ARMOR = 298,
	ABILITY_FEATURE_TYPE_LIFE_ARCHAEOLOGY_SUPER_ARMOR = 299,
	ABILITY_FEATURE_TYPE_LIFE_HERBALISM_ADD_BUFF = 300,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_ADD_BUFF = 301,
	ABILITY_FEATURE_TYPE_LIFE_MINING_ADD_BUFF = 302,
	ABILITY_FEATURE_TYPE_LIFE_HUNTING_ADD_BUFF = 303,
	ABILITY_FEATURE_TYPE_LIFE_FISHING_ADD_BUFF = 304,
	ABILITY_FEATURE_TYPE_LIFE_ARCHAEOLOGY_ADD_BUFF = 305,
	ABILITY_FEATURE_TYPE_LIFE_HERBALISM_SKILL_COOLDOWN = 306,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_SKILL_COOLDOWN = 307,
	ABILITY_FEATURE_TYPE_LIFE_MINING_SKILL_COOLDOWN = 308,
	ABILITY_FEATURE_TYPE_LIFE_HUNTING_SKILL_COOLDOWN = 309,
	ABILITY_FEATURE_TYPE_LIFE_FISHING_SKILL_COOLDOWN = 310,
	ABILITY_FEATURE_TYPE_LIFE_ARCHAEOLOGY_SKILL_COOLDOWN = 311,
	ABILITY_FEATURE_TYPE_LIFE_HERBALISM_CONDITION_LEVEL = 312,
	ABILITY_FEATURE_TYPE_LIFE_LUMBERING_CONDITION_LEVEL = 313,
	ABILITY_FEATURE_TYPE_LIFE_MINING_CONDITION_LEVEL = 314,
	ABILITY_FEATURE_TYPE_LIFE_HUNTING_CONDITION_LEVEL = 315,
	ABILITY_FEATURE_TYPE_LIFE_FISHING_CONDITION_LEVEL = 316,
	ABILITY_FEATURE_TYPE_LIFE_ARCHAEOLOGY_CONDITION_LEVEL = 317,
	ABILITY_FEATURE_TYPE_IDENTITY_SCOUTER_ARTHETINE = 318,
	ABILITY_FEATURE_TYPE_IDENTITY_SCOUTER_LEGACY = 319,
	ABILITY_FEATURE_TYPE_VOYAGE_SHIP_REPAIR_CHARGE_REDUCE = 320,
	ABILITY_FEATURE_TYPE_LIFE_ALL_PROFESSION_CONDITION_LEVEL = 321,
	ABILITY_FEATURE_TYPE_LIFE_ALL_MASTERY_LEVEL = 322,
	ABILITY_FEATURE_TYPE_IDENTITY_REAPER_MOON = 323,
	ABILITY_FEATURE_TYPE_IDENTITY_REAPER_THIRST = 324,
	ABILITY_FEATURE_TYPE_HEADATTACK_MASTER = 325,
	ABILITY_FEATURE_TYPE_IDENTITY_DEVIL_HUNTER_FEMALE_ENHANCE_STANCE = 326,
	ABILITY_FEATURE_TYPE_IDENTITY_DEVIL_HUNTER_FEMALE_HUNT_TIME = 327,
	ABILITY_FEATURE_TYPE_IDENTITY_BATTLE_MASTER_MALE_ONE_PUNCH = 328,
	ABILITY_FEATURE_TYPE_IDENTITY_BATTLE_MASTER_MALE_RAMPAGE = 329,
	ABILITY_FEATURE_TYPE_IDENTITY_ELEMENTAL_MASTER_IGNITION = 330,
	ABILITY_FEATURE_TYPE_IDENTITY_ELEMENTAL_MASTER_CIRCULATION = 331,
	ABILITY_FEATURE_TYPE_MANEUVER_ATTACK = 332,
	ABILITY_FEATURE_TYPE_NONDIRECTION_ATTACK = 333,
	ABILITY_FEATURE_TYPE_DAGGER_CRITICAL = 334,
	ABILITY_FEATURE_TYPE_SIGNATURE_MOVE = 335,
	ABILITY_FEATURE_TYPE_ADRENALINE = 336,
	ABILITY_FEATURE_TYPE_RESCUE    = 337,
	ABILITY_FEATURE_TYPE_UNTIL_OVER = 338,
	ABILITY_FEATURE_TYPE_GRAVITY_GLOVE = 339,
	ABILITY_FEATURE_TYPE_BILITZKRIEG = 340,
	ABILITY_FEATURE_TYPE_MAX       = 341
};


// Enum EFGame.EFConst.AdvTaskType
enum class EAdvTaskType : uint8_t
{
	ADV_TASK_TYPE_ITEM             = 0,
	ADV_TASK_TYPE_BOSS_MONSTER     = 1,
	ADV_TASK_TYPE_MONSTER          = 2,
	ADV_TASK_TYPE_QUEST            = 3,
	ADV_TASK_TYPE_SUB_QUEST        = 4,
	ADV_TASK_TYPE_NPC_FRIENDSHIP   = 5,
	ADV_TASK_TYPE_VIEW_POINT       = 6,
	ADV_TASK_TYPE_ZONE             = 7,
	ADV_TASK_TYPE_HIDDEN_STROY     = 8,
	ADV_TASK_TYPE_SQUARE_HOLE      = 9,
	ADV_TASK_TYPE_FOOD             = 10,
	ADV_TASK_TYPE_MAX              = 11
};


// Enum EFGame.EFConst.AdvRank
enum class EAdvRank : uint8_t
{
	ADV_RANK_NA                    = 0,
	ADV_RANK                       = 1,
	ADV_RANK01                     = 2,
	ADV_RANK02                     = 3,
	ADV_RANK03                     = 4,
	ADV_RANK04                     = 5,
	ADV_RANK05                     = 6,
	ADV_RANK06                     = 7,
	ADV_RANK07                     = 8,
	ADV_RANK08                     = 9,
	ADV_RANK09                     = 10,
	ADV_RANK_MAX                   = 11
};


// Enum EFGame.EFConst.AdvRewardType
enum class EAdvRewardType : uint8_t
{
	ADV_REWARD_TYPE_CHARACTER      = 0,
	ADV_REWARD_TYPE_EXPEDITION     = 1,
	ADV_REWARD_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.AdvRewardStatus
enum class EAdvRewardStatus : uint8_t
{
	ADV_REWARD_STATUS_NONE         = 0,
	ADV_REWARD_STATUS_READY        = 1,
	ADV_REWARD_STATUS_FINISHED     = 2,
	ADV_REWARD_STATUS_PARTIAL_RECEIPT = 3,
	ADV_REWARD_STATUS_MAX          = 4
};


// Enum EFGame.EFConst.AchievementCategoryType
enum class EAchievementCategoryType : uint8_t
{
	ACHIEVEMENT_CATEGORY_TYPE_NORMAL = 0,
	ACHIEVEMENT_CATEGORY_TYPE_COMBAT = 1,
	ACHIEVEMENT_CATEGORY_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.AchievementObjectiveActionType
enum class EAchievementObjectiveActionType : uint8_t
{
	ACHIEVEMENT_OBJECTIVE_ACTION_TYPE_NONE = 0,
	ACHIEVEMENT_OBJECTIVE_ACTION_TYPE_BACK_ATTACK = 1,
	ACHIEVEMENT_OBJECTIVE_ACTION_TYPE_HEAD_ATTACk = 2,
	ACHIEVEMENT_OBJECTIVE_ACTION_TYPE_MAX = 3
};


// Enum EFGame.EFConst.AbusePenaltyType
enum class EAbusePenaltyType : uint8_t
{
	ABUSE_PENALTY_TYPE_PLAY        = 0,
	ABUSE_PENALTY_TYPE_CHAT        = 1,
	ABUSE_PENALTY_TYPE_TRADE       = 2,
	ABUSE_PENALTY_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.AgeType
enum class EAgeType : uint8_t
{
	AGE_TYPE_NONE                  = 0,
	AGE_TYPE_LITTLE                = 1,
	AGE_TYPE_YOUNG                 = 2,
	AGE_TYPE_MIDDLE                = 3,
	AGE_TYPE_OLD                   = 4,
	AGE_TYPE_MAX                   = 5
};


// Enum EFGame.EFConst.AnnounceType
enum class EAnnounceType : uint8_t
{
	ANNOUNCE_TYPE_NONE             = 0,
	ANNOUNCE_TYPE_ISLAND_BOX       = 1,
	ANNOUNCE_TYPE_NPC_DEATH        = 2,
	ANNOUNCE_TYPE_WORLD_OBJECT_DESTROYED = 3,
	ANNOUNCE_TYPE_WORLD_OBJECT_APPEAR = 4,
	ANNOUNCE_TYPE_WORLD_OBJECT_STEP = 5,
	ANNOUNCE_TYPE_WORLD_OBJECT_PERCENT = 6,
	ANNOUNCE_TYPE_WORLD_OBJECT_SIGN = 7,
	ANNOUNCE_TYPE_SYLMAEL_FRAGMENT_RED = 8,
	ANNOUNCE_TYPE_SYLMAEL_FRAGMENT_BLUE = 9,
	ANNOUNCE_TYPE_SYLMAEL_FRAGMENT_NORMAL = 10,
	ANNOUNCE_TYPE_SYLMAEL_MINERAL  = 11,
	ANNOUNCE_TYPE_SYLMAEL_SPECIAL_BUFF = 12,
	ANNOUNCE_TYPE_DYNAMIC_ISLAND_FULL = 13,
	ANNOUNCE_TYPE_ENTRANCE_ADVANCE = 14,
	ANNOUNCE_TYPE_GUILD_HONOR_DONATION = 15,
	ANNOUNCE_TYPE_GUILD_RESEARCH_SPECIAL_SUPPORT = 16,
	ANNOUNCE_TYPE_BIG_GOLD_MOCOCO_GET = 17,
	ANNOUNCE_TYPE_DUNGEON_EXIT     = 18,
	ANNOUNCE_TYPE_WELCOME_BOOST_REWARD = 19,
	ANNOUNCE_TYPE_BIG_GOLD_MOCOCO_RARE_GET = 20,
	ANNOUNCE_TYPE_ESTHER_WEAPON_EVOLUTION = 21,
	ANNOUNCE_TYPE_MAX              = 22
};


// Enum EFGame.EFConst.AuxStatType
enum class EAuxStatType : uint8_t
{
	AUX_STAT_TYPE_DAM              = 0,
	AUX_STAT_TYPE_CRITICAL_RATIO   = 1,
	AUX_STAT_TYPE_CRITICAL_DAMAGE  = 2,
	AUX_STAT_TYPE_PENETRATION      = 3,
	AUX_STAT_TYPE_MANA_REDUCTION   = 4,
	AUX_STAT_TYPE_COOLDOWN_REDUCTION = 5,
	AUX_STAT_TYPE_DAM_ADDEND       = 6,
	AUX_STAT_TYPE_MAX              = 7
};


// Enum EFGame.EFConst.AuxStatTarget
enum class EAuxStatTarget : uint8_t
{
	AUX_STAT_TARGET_SKILL          = 0,
	AUX_STAT_TARGET_NPC_GRADE      = 1,
	AUX_STAT_TARGET_NPC_SPECIES    = 2,
	AUX_STAT_TARGET_NPC_ATTR       = 3,
	AUX_STAT_TARGET_SKILL_GROUP    = 4,
	AUX_STAT_TARGET_COMBAT_EFFECT  = 5,
	AUX_STAT_TARGET_MAX            = 6
};


// Enum EFGame.EFConst.AgeGroup
enum class EAgeGroup : uint8_t
{
	AGE_GROUP_CHILD                = 0,
	AGE_GROUP_ADULT                = 1,
	AGE_GROUP_NA                   = 2,
	AGE_GROUP_MAX                  = 3
};


// Enum EFGame.EFConst.AbnormalMoveGroupType
enum class EAbnormalMoveGroupType : uint8_t
{
	ABNORMAL_MOVE_GROUP_TYPE_NONE  = 0,
	ABNORMAL_MOVE_GROUP_TYPE_SWAY  = 1,
	ABNORMAL_MOVE_GROUP_TYPE_DOWN  = 2,
	ABNORMAL_MOVE_GROUP_TYPE_AIR   = 3,
	ABNORMAL_MOVE_GROUP_TYPE_PARALYZATION = 4,
	ABNORMAL_MOVE_GROUP_TYPE_MAX   = 5
};


// Enum EFGame.EFConst.AuxPasswordState
enum class EAuxPasswordState : uint8_t
{
	AUX_PASSWORD_STATE_VERIFIED    = 0,
	AUX_PASSWORD_STATE_DEFAULT     = 1,
	AUX_PASSWORD_STATE_NEW         = 2,
	AUX_PASSWORD_STATE_CHANGE      = 3,
	AUX_PASSWORD_STATE_LOCKED      = 4,
	AUX_PASSWORD_STATE_MAX         = 5
};


// Enum EFGame.EFConst.AuxPasswordContentsType
enum class EAuxPasswordContentsType : uint8_t
{
	AUX_PASSWORD_CONTENTS_TYPE_PC_SELECT = 0,
	AUX_PASSWORD_CONTENTS_TYPE_PC_DELETE = 1,
	AUX_PASSWORD_CONTENTS_TYPE_PAID_SHOP_BUY = 2,
	AUX_PASSWORD_CONTENTS_TYPE_STOCK_ADD = 3,
	AUX_PASSWORD_CONTENTS_TYPE_PC_JUMPING_MODE_USE = 4,
	AUX_PASSWORD_CONTENTS_TYPE_PC_EXPRESS_MARK = 5,
	AUX_PASSWORD_CONTENTS_TYPE_MAX = 6
};


// Enum EFGame.EFConst.AdminStateType
enum class EAdminStateType : uint8_t
{
	ADMIN_STATE_TYPE_IDENTITY      = 0,
	ADMIN_STATE_TYPE_HIDE          = 1,
	ADMIN_STATE_TYPE_INVINCIBLE    = 2,
	ADMIN_STATE_TYPE_COOLDOWN_DISABLED = 3,
	ADMIN_STATE_TYPE_TRACE         = 4,
	ADMIN_STATE_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.AstraSlot
enum class EAstraSlot : uint8_t
{
	ASTRA_SLOT_WILL                = 0,
	ASTRA_SLOT_BELIEF              = 1,
	ASTRA_SLOT_CONCENTRATION       = 2,
	ASTRA_SLOT_DESIRE              = 3,
	ASTRA_SLOT_MAX                 = 4
};


// Enum EFGame.EFConst.AcquireLimitType
enum class EAcquireLimitType : uint8_t
{
	ACQUIRE_LIMIT_TYPE_NONE        = 0,
	ACQUIRE_LIMIT_TYPE_SHOP        = 1,
	ACQUIRE_LIMIT_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.AcquireLimitRefreshType
enum class EAcquireLimitRefreshType : uint8_t
{
	ACQUIRE_LIMIT_REFRESH_TYPE_NONE = 0,
	ACQUIRE_LIMIT_REFRESH_TYPE_DAILY = 1,
	ACQUIRE_LIMIT_REFRESH_TYPE_WEEKLY = 2,
	ACQUIRE_LIMIT_REFRESH_TYPE_HOURLY = 3,
	ACQUIRE_LIMIT_REFRESH_TYPE_MAX = 4
};


// Enum EFGame.EFConst.AnchorVolumeType
enum class EAnchorVolumeType : uint8_t
{
	ANCHOR_VOLUME_TYPE_PUBLIC      = 0,
	ANCHOR_VOLUME_TYPE_PERSONAL    = 1,
	ANCHOR_VOLUME_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.AnchorCostType
enum class EAnchorCostType : uint8_t
{
	ANCHOR_COST_TYPE_NONE          = 0,
	ANCHOR_COST_TYPE_GOLD          = 1,
	ANCHOR_COST_TYPE_TRADE_GOLD    = 2,
	ANCHOR_COST_TYPE_PIRATE_COIN   = 3,
	ANCHOR_COST_TYPE_PAID_CASH     = 4,
	ANCHOR_COST_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.AuctionProductStatus
enum class EAuctionProductStatus : uint8_t
{
	AUCTION_PRODUCT_STATUS_NONE    = 0,
	AUCTION_PRODUCT_STATUS_READY   = 1,
	AUCTION_PRODUCT_STATUS_OVERDUE = 2,
	AUCTION_PRODUCT_STATUS_FAILED  = 3,
	AUCTION_PRODUCT_STATUS_SOLD_OUT = 4,
	AUCTION_PRODUCT_STATUS_CANCELED_BY_USER = 5,
	AUCTION_PRODUCT_STATUS_CANCELED_BY_GM = 6,
	AUCTION_PRODUCT_STATUS_MAX     = 7
};


// Enum EFGame.EFConst.AuctionDeadlineStatus
enum class EAuctionDeadlineStatus : uint8_t
{
	AUCTION_DEADLINE_STATUS_NONE   = 0,
	AUCTION_DEADLINE_STATUS_PHASE0 = 1,
	AUCTION_DEADLINE_STATUS_PHASE1 = 2,
	AUCTION_DEADLINE_STATUS_PHASE2 = 3,
	AUCTION_DEADLINE_STATUS_MAX    = 4
};


// Enum EFGame.EFConst.AuctionPeriod
enum class EAuctionPeriod : uint8_t
{
	AUCTION_PERIOD                 = 0,
	AUCTION_PERIOD01               = 1,
	AUCTION_PERIOD02               = 2,
	AUCTION_PERIOD03               = 3,
	AUCTION_PERIOD_MAX             = 4
};


// Enum EFGame.EFConst.AuctionSortType
enum class EAuctionSortType : uint8_t
{
	AUCTION_SORT_TYPE_USE_LEVEL    = 0,
	AUCTION_SORT_TYPE_ITEM_GRADE   = 1,
	AUCTION_SORT_TYPE_BID_PRICE    = 2,
	AUCTION_SORT_TYPE_BUY_PRICE    = 3,
	AUCTION_SORT_TYPE_ITEM_QUALITY = 4,
	AUCTION_SORT_TYPE_SOLD_OUT_TIME = 5,
	AUCTION_SORT_TYPE_REMAIN_TIME  = 6,
	AUCTION_SORT_TYPE_START_PRICE  = 7,
	AUCTION_SORT_TYPE_MAX          = 8
};


// Enum EFGame.EFConst.AuctionSortOrder
enum class EAuctionSortOrder : uint8_t
{
	AUCTION_SORT_ORDER_ASC         = 0,
	AUCTION_SORT_ORDER_DESC        = 1,
	AUCTION_SORT_ORDER_MAX         = 2
};


// Enum EFGame.EFConst.AuctionDetailType
enum class EAuctionDetailType : uint8_t
{
	AUCTION_DETAIL_TYPE_NONE       = 0,
	AUCTION_DETAIL_TYPE_STAT       = 1,
	AUCTION_DETAIL_TYPE_ABILITY    = 2,
	AUCTION_DETAIL_TYPE_SKILL_ID   = 3,
	AUCTION_DETAIL_TYPE_SKILL_FEATURE_LEVEL = 4,
	AUCTION_DETAIL_TYPE_SKILL_DAMAGE = 5,
	AUCTION_DETAIL_TYPE_SKILL_COOLDOWN = 6,
	AUCTION_DETAIL_TYPE_SKILL_GROUP_ID = 7,
	AUCTION_DETAIL_TYPE_SKILL_GROUP_DAMAGE = 8,
	AUCTION_DETAIL_TYPE_SKILL_GROUP_COOLDOWN = 9,
	AUCTION_DETAIL_TYPE_BRACELET_OPTION_COUNT_TOTAL = 10,
	AUCTION_DETAIL_TYPE_BRACELET_OPTION_COUNT_FIXED = 11,
	AUCTION_DETAIL_TYPE_BRACELET_OPTION_COUNT_RANDOM = 12,
	AUCTION_DETAIL_TYPE_PRIMARY_STAT = 13,
	AUCTION_DETAIL_TYPE_SECONDARY_STAT = 14,
	AUCTION_DETAIL_TYPE_OPTION_ALIAS = 15,
	AUCTION_DETAIL_TYPE_MAX        = 16
};


// Enum EFGame.EFConst.AncientOrbResearchStatus
enum class EAncientOrbResearchStatus : uint8_t
{
	ANCIENT_ORB_RESEARCH_STATUS_NONE = 0,
	ANCIENT_ORB_RESEARCH_STATUS_IN_PROGRESS = 1,
	ANCIENT_ORB_RESEARCH_STATUS_FINISHED = 2,
	ANCIENT_ORB_RESEARCH_STATUS_RECEIVED = 3,
	ANCIENT_ORB_RESEARCH_STATUS_MAX = 4
};


// Enum EFGame.EFConst.AntiTheftApplyReason
enum class EAntiTheftApplyReason : uint8_t
{
	ANTI_THEFT_APPLY_REASON_NONE   = 0,
	ANTI_THEFT_APPLY_REASON_GOLD_EXCHANGE = 1,
	ANTI_THEFT_APPLY_REASON_AUCTION_USE = 2,
	ANTI_THEFT_APPLY_REASON_SECURITY_THREAT = 3,
	ANTI_THEFT_APPLY_REASON_MANUAL_TIME = 4,
	ANTI_THEFT_APPLY_REASON_MANUAL_VERIFICATION = 5,
	ANTI_THEFT_APPLY_REASON_MAX    = 6
};


// Enum EFGame.EFConst.AntiTheftReleaseReason
enum class EAntiTheftReleaseReason : uint8_t
{
	ANTI_THEFT_RELEASE_REASON_NONE = 0,
	ANTI_THEFT_RELEASE_REASON_TIME_EXPIRED = 1,
	ANTI_THEFT_RELEASE_REASON_ADMIN = 2,
	ANTI_THEFT_RELEASE_REASON_SECURITY_SERVICE = 3,
	ANTI_THEFT_RELEASE_REASON_MAX  = 4
};


// Enum EFGame.EFConst.ArkPassSeasonType
enum class EArkPassSeasonType : uint8_t
{
	ARK_PASS_SEASON_TYPE_NONE      = 0,
	ARK_PASS_SEASON_TYPE_OPENED_SEASON = 1,
	ARK_PASS_SEASON_TYPE_OFF_SEASON = 2,
	ARK_PASS_SEASON_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.ArkPassMissionType
enum class EArkPassMissionType : uint8_t
{
	ARK_PASS_MISSION_TYPE_NONE     = 0,
	ARK_PASS_MISSION_TYPE_NORMAL   = 1,
	ARK_PASS_MISSION_TYPE_HIDDEN   = 2,
	ARK_PASS_MISSION_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ArkPassMissionObjectiveType
enum class EArkPassMissionObjectiveType : uint8_t
{
	ARK_PASS_MISSION_OBJECTIVE_TYPE_NONE = 0,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_DUNGEON_CLEARED = 1,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_RAID_CLEARED = 2,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_PROP_INTERACTION = 3,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_CUBE_STAGE_CLEARED = 4,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_BOSS_NPC_KILL = 5,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_LEVEL = 6,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_CUBE_REWARD_BOX = 7,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_CHAOS_DUNGEON_CLEARED = 8,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ZONE_VISITED = 9,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_QUEST_COMPLETE = 10,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_DUNGEON_CLEARED_WITH_LEVEL = 11,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_REVERSE_RUIN_STAGE_CLEARED = 12,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_LEVEL_UP = 13,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_CARVED = 14,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_SKILL_CUSTOMIZED = 15,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_GEM_MERGE = 16,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ROTATION_ISLAND_REWARD = 17,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_LIFE_ENERGY = 18,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_TOWN_ACTIVITY_POINT = 19,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_BOSS_RUSH_STAGE_CLEAR = 20,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_CHAOSGATE_CLEAR = 21,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_COLOSSEUM_STARTED = 22,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_ADDED = 23,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_DAILY_QUEST_COMPLETE_COUNT = 24,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_WEEKLY_QUEST_COMPLETE_COUNT = 25,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_TOWER_OF_SHADOW_STAGE_CLEAR = 26,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_COUNT = 27,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_SUCCESS_COUNT = 28,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_FAILURE_COUNT = 29,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_LOGIN = 30,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_ITEM_USED = 31,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_CONTINENT_MOVED = 32,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_MUSIC_PLAYED = 33,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_EQUIPMENT_REPAIRED = 34,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_SHIP_REPAIRED = 35,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_EPONA_TOKEN_EXCHANGED = 36,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_SELFIE_SCREEN_SHOT_SAVED = 37,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_TINT_CHANGED = 38,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_LOGIN_WITH_SECURITY_SERVICE = 39,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_GUILD_OCCUPY_EVENT_REWARD_GET = 40,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_TOWN_MISSION_DISPATCHED = 41,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_COUNTER_ATTACKED = 42,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_HEAD_ATTACKED = 43,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_BACK_ATTACKED = 44,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_COOP_QUEST_COMPLETE = 45,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_RAID_CLEAR_GUARDIAN_SPIRIT = 46,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_PERIOD_REWARD_RECEIVED = 47,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_GATEWAY_SAVED = 48,
	ARK_PASS_MISSION_OBJECTIVE_TYPE_MAX = 49
};


// Enum EFGame.EFConst.ArkPassMissionActionType
enum class EArkPassMissionActionType : uint8_t
{
	ARK_PASS_MISSION_ACTION_TYPE_NONE = 0,
	ARK_PASS_MISSION_ACTION_TYPE_BACK_ATTACK = 1,
	ARK_PASS_MISSION_ACTION_TYPE_HEAD_ATTACk = 2,
	ARK_PASS_MISSION_ACTION_TYPE_COUNTER_ATTACk = 3,
	ARK_PASS_MISSION_ACTION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.BanAccountType
enum class EBanAccountType : uint8_t
{
	BAN_ACCOUNT_TYPE_ADMIN_COMMAND = 0,
	BAN_ACCOUNT_TYPE_ACCOUNT_OWNER = 1,
	BAN_ACCOUNT_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.BasicActionType
enum class EBasicActionType : uint8_t
{
	BASIC_ACTION_TYPE_MOVE         = 0,
	BASIC_ACTION_TYPE_DEFAULT_SKILL = 1,
	BASIC_ACTION_TYPE_SKILL        = 2,
	BASIC_ACTION_TYPE_ITEM         = 3,
	BASIC_ACTION_TYPE_SKILL_FINISH = 4,
	BASIC_ACTION_TYPE_COMMON_ACTION_START = 5,
	BASIC_ACTION_TYPE_SKILL_EFFECT = 6,
	BASIC_ACTION_TYPE_MAX          = 7
};


// Enum EFGame.EFConst.BodyType
enum class EBodyType : uint8_t
{
	BODY_TYPE_NONE                 = 0,
	BODY_TYPE_THIN                 = 1,
	BODY_TYPE_REGULAR              = 2,
	BODY_TYPE_FAT                  = 3,
	BODY_TYPE_MAX                  = 4
};


// Enum EFGame.EFConst.BuddyBindType
enum class EBuddyBindType : uint8_t
{
	BUDDY_BIND_TYPE_CHARACTER      = 0,
	BUDDY_BIND_TYPE_EXPEDITION     = 1,
	BUDDY_BIND_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.BuddyState
enum class EBuddyState : uint8_t
{
	BUDDY_STATE_NONE               = 0,
	BUDDY_STATE_REQUEST_SENT       = 1,
	BUDDY_STATE_REQUEST_RECEIVED   = 2,
	BUDDY_STATE_ESTABLISHED        = 3,
	BUDDY_STATE_BLOCK_SENT         = 4,
	BUDDY_STATE_BLOCK_RECEIVED     = 5,
	BUDDY_STATE_BLOCK_BOTH         = 6,
	BUDDY_STATE_RECENT             = 7,
	BUDDY_STATE_EXPEDITION_REQUEST_SENT = 8,
	BUDDY_STATE_EXPEDITION_REQUEST_RECEIVED = 9,
	BUDDY_STATE_EXPEDITION_ESTABLISHED = 10,
	BUDDY_STATE_MAX                = 11
};


// Enum EFGame.EFConst.BuddyUpdateReason
enum class EBuddyUpdateReason : uint8_t
{
	BUDDY_UPDATE_ON_REQUEST        = 0,
	BUDDY_UPDATE_ON_LOGIN          = 1,
	BUDDY_UPDATE_ON_LOGOUT         = 2,
	BUDDY_UPDATE_ON_CHANGE_PLAYER_CLASS = 3,
	BUDDY_UPDATE_ON_CHANGE_PLAYER_LEVEL = 4,
	BUDDY_UPDATE_ON_CHANGE_NEWBIE  = 5,
	BUDDY_UPDATE_ON_CHANGE_PLAYER_STATE = 6,
	BUDDY_UPDATE_MAX               = 7
};


// Enum EFGame.EFConst.BuddyModifyType
enum class EBuddyModifyType : uint8_t
{
	BUDDY_MODIFY_TYPE_NONE         = 0,
	BUDDY_MODIFY_TYPE_GROUP        = 1,
	BUDDY_MODIFY_TYPE_MEMO         = 2,
	BUDDY_MODIFY_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.BattleSlotType
enum class EBattleSlotType : uint8_t
{
	BATTLE_SLOT_TYPE_POTION        = 0,
	BATTLE_SLOT_TYPE_BATTLE_ITEM   = 1,
	BATTLE_SLOT_AWAKENING_SKILL_USABLE = 2,
	BATTLE_SLOT_TYPE_FREE          = 3,
	BATTLE_SLOT_TYPE_MAX           = 4,
	BATTLE_SLOT_MAX                = 5
};


// Enum EFGame.EFConst.BattleSlotFreeTarget
enum class EBattleSlotFreeTarget : uint8_t
{
	BATTLE_SLOT_FREE_TARGET_NONE   = 0,
	BATTLE_SLOT_FREE_TARGET_ITEM   = 1,
	BATTLE_SLOT_FREE_TARGET_MUSIC  = 2,
	BATTLE_SLOT_FREE_TARGET_VEHICLE = 3,
	BATTLE_SLOT_FREE_TARGET_SOCIAL = 4,
	BATTLE_SLOT_FREE_TARGET_PET    = 5,
	BATTLE_SLOT_FREE_TARGET_EMOTICON = 6,
	BATTLE_SLOT_FREE_TARGET_MAX    = 7
};


// Enum EFGame.EFConst.BusinessEventType
enum class EBusinessEventType : uint8_t
{
	BUSINESS_EVENT_TYPE_ROLL_BOOK  = 0,
	BUSINESS_EVENT_TYPE_HOT_TIME   = 1,
	BUSINESS_EVENT_TYPE_ROLL_BOOK_NEW_USER = 2,
	BUSINESS_EVENT_TYPE_ROLL_BOOK_RETURN_USER = 3,
	BUSINESS_EVENT_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.BattlefieldRule
enum class EBattlefieldRule : uint8_t
{
	BATTLEFIELD_RULE_DEATH_MATCH   = 0,
	BATTLEFIELD_RULE_FIELD_BOSS    = 1,
	BATTLEFIELD_RULE_REALM         = 2,
	BATTLEFIELD_RULE_MAX           = 3
};


// Enum EFGame.EFConst.BattlefieldRuleMode
enum class EBattlefieldRuleMode : uint8_t
{
	BATTLEFIELD_RULE_MODE_GUILD    = 0,
	BATTLEFIELD_RULE_MODE_OPEN_MATCH = 1,
	BATTLEFIELD_RULE_MODE_OPEN_MATCH_FORT = 2,
	BATTLEFIELD_RULE_MODE_RVR      = 3,
	BATTLEFIELD_RULE_MODE_MAX      = 4
};


// Enum EFGame.EFConst.BattlefieldTeam
enum class EBattlefieldTeam : uint8_t
{
	BATTLEFIELD_TEAM_RED           = 0,
	BATTLEFIELD_TEAM_BLUE          = 1,
	BATTLEFIELD_TEAM_MAX           = 2
};


// Enum EFGame.EFConst.BattlefieldEvent
enum class EBattlefieldEvent : uint8_t
{
	BATTLEFIELD_EVENT_KILL         = 0,
	BATTLEFIELD_EVENT_DOUBLE_KILL  = 1,
	BATTLEFIELD_EVENT_TRIPLE_KILL  = 2,
	BATTLEFIELD_EVENT_QUARDRA_KILL = 3,
	BATTLEFIELD_EVENT_PENTA_KILL   = 4,
	BATTLEFIELD_EVENT_HEXA_KILL    = 5,
	BATTLEFIELD_EVENT_HEPTA_KILL   = 6,
	BATTLEFIELD_EVENT_OCTA_KILL    = 7,
	BATTLEFIELD_EVENT_HIGH_SCORE_TARGET_APPEAR = 8,
	BATTLEFIELD_EVENT_HIGH_SCORE_TARGET_RELEASE = 9,
	BATTLEFIELD_EVENT_PROP_INTERACTION_START = 10,
	BATTLEFIELD_EVENT_PROP_INTERACTION_FINISH = 11,
	BATTLEFIELD_EVENT_NPC_KILL     = 12,
	BATTLEFIELD_EVENT_GET_SCORE_SKILL_EFFECT = 13,
	BATTLEFIELD_EVENT_ADD_MAP_SYMBOL = 14,
	BATTLEFIELD_EVENT_REMOVE_MAP_SYMBOL = 15,
	BATTLEFIELD_EVENT_CHANGE_PROP_STATE = 16,
	BATTLEFIELD_EVENT_ASSIST_SCORE = 17,
	BATTLEFIELD_EVENT_MAX          = 18
};


// Enum EFGame.EFConst.BattlefieldState
enum class EBattlefieldState : uint8_t
{
	BATTLEFIELD_STATE_INIT         = 0,
	BATTLEFIELD_STATE_READY        = 1,
	BATTLEFIELD_STATE_PROGRESS     = 2,
	BATTLEFIELD_STATE_RESULT       = 3,
	BATTLEFIELD_STATE_FINALIZE     = 4,
	BATTLEFIELD_STATE_DESTROY      = 5,
	BATTLEFIELD_STATE_MAX          = 6
};


// Enum EFGame.EFConst.BattlefieldMercenaryRecruitJoinStatus
enum class EBattlefieldMercenaryRecruitJoinStatus : uint8_t
{
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_NONE = 0,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_WAIT = 1,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_ACCEPT = 2,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_REJECT = 3,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_COMPLETE = 4,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_HISTORY = 5,
	BATTLEFIELD_MERCENARY_RECRUIT_JOIN_STATUS_MAX = 6
};


// Enum EFGame.EFConst.BattlefieldResult
enum class EBattlefieldResult : uint8_t
{
	BATTLEFIELD_RESULT_WIN         = 0,
	BATTLEFIELD_RESULT_LOSE        = 1,
	BATTLEFIELD_RESULT_MAX         = 2
};


// Enum EFGame.EFConst.BattlefieldRankRewardCycleType
enum class EBattlefieldRankRewardCycleType : uint8_t
{
	BATTLEFIELD_RANK_REWARD_CYCLE_TYPE_NONE = 0,
	BATTLEFIELD_RANK_REWARD_CYCLE_TYPE_WEEK = 1,
	BATTLEFIELD_RANK_REWARD_CYCLE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.BattlefieldScheduleType
enum class EBattlefieldScheduleType : uint8_t
{
	BATTLEFIELD_SCHEDULE_TYPE_NONE = 0,
	BATTLEFIELD_SCHEDULE_TYPE_APPLICATION = 1,
	BATTLEFIELD_SCHEDULE_TYPE_ENTRANCE = 2,
	BATTLEFIELD_SCHEDULE_TYPE_OPEN = 3,
	BATTLEFIELD_SCHEDULE_TYPE_COOLDOWN = 4,
	BATTLEFIELD_SCHEDULE_TYPE_WEEKLY_RESET = 5,
	BATTLEFIELD_SCHEDULE_TYPE_BIDDING_RESULT = 6,
	BATTLEFIELD_SCHEDULE_TYPE_BIDDING_ENLIST_CANCEL = 7,
	BATTLEFIELD_SCHEDULE_TYPE_MAX  = 8
};


// Enum EFGame.EFConst.BattlefieldVoteType
enum class EBattlefieldVoteType : uint8_t
{
	BATTLEFIELD_VOTE_TYPE_SURRENDER = 0,
	BATTLEFIELD_VOTE_TYPE_MAX      = 1
};


// Enum EFGame.EFConst.BattlefieldRankType
enum class EBattlefieldRankType : uint8_t
{
	BATTLEFIELD_RANK_TYPE_NONE     = 0,
	BATTLEFIELD_RANK_TYPE_RANKING  = 1,
	BATTLEFIELD_RANK_TYPE_PERCENT  = 2,
	BATTLEFIELD_RANK_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.BattlefieldRunawayState
enum class EBattlefieldRunawayState : uint8_t
{
	BATTLEFIELD_RUNAWAY_STATE_AWAY = 0,
	BATTLEFIELD_RUNAWAY_STATE_RETURN = 1,
	BATTLEFIELD_RUNAWAY_STATE_CONFIRM = 2,
	BATTLEFIELD_RUNAWAY_STATE_MAX  = 3
};


// Enum EFGame.EFConst.BattlefieldInviteRejectType
enum class EBattlefieldInviteRejectType : uint8_t
{
	BATTLEFIELD_INVITE_REJECT_TYPE_SAY_NO = 0,
	BATTLEFIELD_INVITE_REJECT_TYPE_TIMEOUT = 1,
	BATTLEFIELD_INVITE_REJECT_TYPE_EXCEED = 2,
	BATTLEFIELD_INVITE_REJECT_TYPE_CUTSCENE = 3,
	BATTLEFIELD_INVITE_REJECT_TYPE_ENV_SETTING = 4,
	BATTLEFIELD_INVITE_REJECT_TYPE_DEAD = 5,
	BATTLEFIELD_INVITE_REJECT_TYPE_INTERACTION = 6,
	BATTLEFIELD_INVITE_REJECT_TYPE_PRACTICE = 7,
	BATTLEFIELD_INVITE_REJECT_TYPE_BLOCK = 8,
	BATTLEFIELD_INVITE_REJECT_TYPE_INVITE_ERROR = 9,
	BATTLEFIELD_INVITE_REJECT_TYPE_INVITE_IMPOSSIBLE = 10,
	BATTLEFIELD_INVITE_REJECT_TYPE_BLOCK_BY_ME = 11,
	BATTLEFIELD_INVITE_REJECT_TYPE_COMPETITION_QUEST = 12,
	BATTLEFIELD_INVITE_REJECT_TYPE_BATTLEFIELD = 13,
	BATTLEFIELD_INVITE_REJECT_TYPE_LOGOUT = 14,
	BATTLEFIELD_INVITE_REJECT_TYPE_PARTYBOARD = 15,
	BATTLEFIELD_INVITE_REJECT_TYPE_MAX = 16
};


// Enum EFGame.EFConst.BattlefieldDeathmatchPenaltyState
enum class EBattlefieldDeathmatchPenaltyState : uint8_t
{
	BATTLEFIELD_DEATHMATCH_PENALTY_STATE_NONE = 0,
	BATTLEFIELD_DEATHMATCH_PENALTY_STATE_WARNING = 1,
	BATTLEFIELD_DEATHMATCH_PENALTY_STATE_APPLY = 2,
	BATTLEFIELD_DEATHMATCH_PENALTY_STATE_MAX = 3
};


// Enum EFGame.EFConst.BattlefieldDeathmatchPenaltyTimeType
enum class EBattlefieldDeathmatchPenaltyTimeType : uint8_t
{
	BATTLEFIELD_DEATHMATCH_PENALTY_TIME_TYPE_ONE = 0,
	BATTLEFIELD_DEATHMATCH_PENALTY_TIME_TYPE_TWO = 1,
	BATTLEFIELD_DEATHMATCH_PENALTY_TIME_TYPE_THREE = 2,
	BATTLEFIELD_DEATHMATCH_PENALTY_TIME_TYPE_FOUR = 3,
	BATTLEFIELD_DEATHMATCH_PENALTY_TIME_TYPE_MAX = 4
};


// Enum EFGame.EFConst.BattlefieldDeathmatchNodeLinkType
enum class EBattlefieldDeathmatchNodeLinkType : uint8_t
{
	BATTLEFIELD_DEATHMATCH_NODE_LINE_TYPE_NONE = 0,
	BATTLEFIELD_DEATHMATCH_NODE_LINE_TYPE_MAIN = 1,
	BATTLEFIELD_DEATHMATCH_NODE_LINE_TYPE_SUB = 2,
	BATTLEFIELD_DEATHMATCH_NODE_LINE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.BladeBurstType
enum class EBladeBurstType : uint8_t
{
	BLADE_BURST_TYPE_SKILL         = 0,
	BLADE_BURST_TYPE_SKILL01       = 1,
	BLADE_BURST_TYPE_SKILL02       = 2,
	BLADE_BURST_TYPE_ENGRAVE       = 3,
	BLADE_BURST_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.BattlefieldMercenaryRecruitDestroyReason
enum class EBattlefieldMercenaryRecruitDestroyReason : uint8_t
{
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_NONE = 0,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_ADMIN = 1,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_GM = 2,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_USER = 3,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_ACCEPTED_FULL = 4,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_CANCELED_BY_BATTLEFIELD = 5,
	BATTLEFIELD_MERCENARY_RECRUIT_DESTROY_REASON_MAX = 6
};


// Enum EFGame.EFConst.BattlefieldEntranceType
enum class EBattlefieldEntranceType : uint8_t
{
	BATTLEFIELD_ENTRANCE_TYPE_NORMAL = 0,
	BATTLEFIELD_ENTRANCE_TYPE_BIDDING = 1,
	BATTLEFIELD_ENTRANCE_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.BattlefieldBiddingState
enum class EBattlefieldBiddingState : uint8_t
{
	BATTLEFIELD_BIDDING_STATE_NONE = 0,
	BATTLEFIELD_BIDDING_STATE_ACTIVE = 1,
	BATTLEFIELD_BIDDING_STATE_WIN  = 2,
	BATTLEFIELD_BIDDING_STATE_LOSE = 3,
	BATTLEFIELD_BIDDING_STATE_MAX  = 4
};


// Enum EFGame.EFConst.BusinessEventRecycleType
enum class EBusinessEventRecycleType : uint8_t
{
	BUSINESS_EVENT_RECYCLE_TYPE_NONE = 0,
	BUSINESS_EVENT_RECYCLE_TYPE_DAILY = 1,
	BUSINESS_EVENT_RECYCLE_TYPE_WEEKLY = 2,
	BUSINESS_EVENT_RECYCLE_TYPE_ONCE = 3,
	BUSINESS_EVENT_RECYCLE_TYPE_MAX = 4
};


// Enum EFGame.EFConst.ContentsMaskType
enum class EContentsMaskType : uint8_t
{
	CONTENTS_MASK_TYPE_NONE        = 0,
	CONTENTS_MASK_TYPE_PC_CLASS    = 1,
	CONTENTS_MASK_TYPE_CONTINENT   = 2,
	CONTENTS_MASK_TYPE_ZONE        = 3,
	CONTENTS_MASK_TYPE_CHAOS_DUNGEON = 4,
	CONTENTS_MASK_TYPE_CHAOS_GATE  = 5,
	CONTENTS_MASK_TYPE_RAID        = 6,
	CONTENTS_MASK_TYPE_MOD_CUBE    = 7,
	CONTENTS_MASK_TYPE_MOD_TOWER   = 8,
	CONTENTS_MASK_TYPE_MOD_PLATINUM_AREA = 9,
	CONTENTS_MASK_TYPE_MOD_BOSS_RUSH = 10,
	CONTENTS_MASK_TYPE_BF_DEATHMATCH = 11,
	CONTENTS_MASK_TYPE_BF_FIELDBOSS = 12,
	CONTENTS_MASK_TYPE_CO_TEAM_DEATHMATCH = 13,
	CONTENTS_MASK_TYPE_CO_FREE_FOR_ALL = 14,
	CONTENTS_MASK_TYPE_CO_ELIMINATION = 15,
	CONTENTS_MASK_TYPE_CO_TEAM_DEATHMATCH_RANK = 16,
	CONTENTS_MASK_TYPE_CONTENTS_LEVEL = 17,
	CONTENTS_MASK_TYPE_QUEST       = 18,
	CONTENTS_MASK_TYPE_ITEM        = 19,
	CONTENTS_MASK_TYPE_NPC         = 20,
	CONTENTS_MASK_TYPE_EVENT       = 21,
	CONTENTS_MASK_TYPE_COMMON      = 22,
	CONTENTS_MASK_TYPE_CARD_BATTLE = 23,
	CONTENTS_MASK_TYPE_DROP        = 24,
	CONTENTS_MASK_TYPE_PROP        = 25,
	CONTENTS_MASK_TYPE_SECRET_DUNGEON = 26,
	CONTENTS_MASK_TYPE_NIGHTMARE_DUNGEON = 27,
	CONTENTS_MASK_TYPE_BATTLEFIELD = 28,
	CONTENTS_MASK_TYPE_COLOSSEUM   = 29,
	CONTENTS_MASK_TYPE_PET         = 30,
	CONTENTS_MASK_TYPE_ITEM_ENHANCE = 31,
	CONTENTS_MASK_TYPE_REVERSE_RUIN = 32,
	CONTENTS_MASK_TYPE_GUILD       = 33,
	CONTENTS_MASK_TYPE_TROOP       = 34,
	CONTENTS_MASK_TYPE_BM          = 35,
	CONTENTS_MASK_TYPE_NATION      = 36,
	CONTENTS_MASK_TYPE_NOCOOK      = 37,
	CONTENTS_MASK_TYPE_JUMPING     = 38,
	CONTENTS_MASK_TYPE_TOWN        = 39,
	CONTENTS_MASK_TYPE_VEHICLE     = 40,
	CONTENTS_MASK_TYPE_VOYAGE      = 41,
	CONTENTS_MASK_TYPE_REWARD      = 42,
	CONTENTS_MASK_TYPE_TOWN_DRESS  = 43,
	CONTENTS_MASK_TYPE_ITEM_REGRESS = 44,
	CONTENTS_MASK_TYPE_MOD_WAY_OF_THRONE = 45,
	CONTENTS_MASK_TYPE_EMOTICON    = 46,
	CONTENTS_MASK_TYPE_MAX         = 47
};


// Enum EFGame.EFConst.ConditionCheckRule
enum class EConditionCheckRule : uint8_t
{
	CONDITION_CHECK_RULE_AND       = 0,
	CONDITION_CHECK_RULE_OR        = 1,
	CONDITION_CHECK_RULE_MAX       = 2
};


// Enum EFGame.EFConst.CombatStatus
enum class ECombatStatus : uint8_t
{
	COMBAT_STATUS_INACTIVE         = 0,
	COMBAT_STATUS_ACTIVE           = 1,
	COMBAT_STATUS_MAX              = 2
};


// Enum EFGame.EFConst.ChallengePresetApplyType
enum class EChallengePresetApplyType : uint8_t
{
	CHALLENGE_PRESET_APPLY_TYPE_NONE = 0,
	CHALLENGE_PRESET_APPLY_TYPE_ALL = 1,
	CHALLENGE_PRESET_APPLY_TYPE_SKILL_STAT = 2,
	CHALLENGE_PRESET_APPLY_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ChallengePresetType
enum class EChallengePresetType : uint8_t
{
	CHALLENGE_PRESET_TYPE_COLOSSEUM = 0,
	CHALLENGE_PRESET_TYPE_RAID     = 1,
	CHALLENGE_PRESET_TYPE_EPIC_GATE = 2,
	CHALLENGE_PRESET_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ChainSkillConditionType
enum class EChainSkillConditionType : uint8_t
{
	CHAIN_SKILL_CONDITION_NONE     = 0,
	CHAIN_SKILL_CONDITION_SUMMON_NPC = 1,
	CHAIN_SKILL_CONDITION_PROJECTILE = 2,
	CHAIN_SKILL_CONDITION_SUMMON_TRAP = 3,
	CHAIN_SKILL_CONDITION_USE_SKILL = 4,
	CHAIN_SKILL_CONDITION_MAX      = 5
};


// Enum EFGame.EFConst.ChannelSelectType
enum class EChannelSelectType : uint8_t
{
	CHANNEL_SELECT_TYPE_ALL        = 0,
	CHANNEL_SELECT_TYPE_APPOINTMENT = 1,
	CHANNEL_SELECT_TYPE_RANDOM     = 2,
	CHANNEL_SELECT_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.ChatType
enum class EChatType : uint8_t
{
	CHAT_TYPE_NORMAL               = 0,
	CHAT_TYPE_SOCIAL_ACTION        = 1,
	CHAT_TYPE_WHISPER              = 2,
	CHAT_TYPE_PARTY                = 3,
	CHAT_TYPE_GUILD                = 4,
	CHAT_TYPE_ZONE                 = 5,
	CHAT_TYPE_ZONE_GROUP           = 6,
	CHAT_TYPE_YELL                 = 7,
	CHAT_TYPE_GUILD_MASTER         = 8,
	CHAT_TYPE_TROOP                = 9,
	CHAT_TYPE_TROOP_COMMANDER      = 10,
	CHAT_TYPE_COLOSSEUM_ROOM       = 11,
	CHAT_TYPE_PARTY_ROOM           = 12,
	CHAT_TYPE_OPEN_CHAT            = 13,
	CHAT_TYPE_MAX                  = 14
};


// Enum EFGame.EFConst.ChatBlobType
enum class EChatBlobType : uint8_t
{
	CHAT_BLOB_TYPE_NONE            = 0,
	CHAT_BLOB_TYPE_SDMAP_SHARE_REQUEST = 1,
	CHAT_BLOB_TYPE_SDMAP_SHARE_RESPONSE = 2,
	CHAT_BLOB_TYPE_MAP_MARKER      = 3,
	CHAT_BLOB_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.ChatMacroType
enum class EChatMacroType : uint8_t
{
	CHAT_MACRO_TYPE_SHORTCUT       = 0,
	CHAT_MACRO_TYPE_SMARTPING      = 1,
	CHAT_MACRO_TYPE_AUTO           = 2,
	CHAT_MACRO_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.ChangePropPropertyType
enum class EChangePropPropertyType : uint8_t
{
	CHANGE_PROP_PROPERTY_TYPE_ENABLE = 0,
	CHANGE_PROP_PROPERTY_TYPE_DISABLE = 1,
	CHANGE_PROP_PROPERTY_TYPE_VISIBLE = 2,
	CHANGE_PROP_PROPERTY_TYPE_INVISIBLE = 3,
	CHANGE_PROP_PROPERTY_TYPE_BLOCKABLE = 4,
	CHANGE_PROP_PROPERTY_TYPE_UNBLOCKABLE = 5,
	CHANGE_PROP_PROPERTY_TYPE_SPAWN_ANIM = 6,
	CHANGE_PROP_PROPERTY_TYPE_MAX  = 7
};


// Enum EFGame.EFConst.ChangeTowerPropertyType
enum class EChangeTowerPropertyType : uint8_t
{
	CHANGE_TOWER_PROPERTY_TYPE_ENABLE = 0,
	CHANGE_TOWER_PROPERTY_TYPE_DISABLE = 1,
	CHANGE_TOWER_PROPERTY_TYPE_MAX = 2
};


// Enum EFGame.EFConst.CharacterCustomizingType
enum class ECharacterCustomizingType : uint8_t
{
	CHARACTER_CUSTOMIZING_TYPE_FACE = 0,
	CHARACTER_CUSTOMIZING_TYPE_HAIR = 1,
	CHARACTER_CUSTOMIZING_TYPE_DECORATION = 2,
	CHARACTER_CUSTOMIZING_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ChaosGateState
enum class EChaosGateState : uint8_t
{
	CHAOS_GATE_STATE_SIGN          = 0,
	CHAOS_GATE_STATE_CREATE        = 1,
	CHAOS_GATE_STATE_DESTROY       = 2,
	CHAOS_GATE_STATE_MAX           = 3
};


// Enum EFGame.EFConst.ChaosGateCorps
enum class EChaosGateCorps : uint8_t
{
	CHAOS_GATE_CORPS_MAD           = 0,
	CHAOS_GATE_CORPS_DISEASE       = 1,
	CHAOS_GATE_CORPS_DARK          = 2,
	CHAOS_GATE_CORPS_DESIRE        = 3,
	CHAOS_GATE_CORPS_FANTASY       = 4,
	CHAOS_GATE_CORPS_EVENT         = 5,
	CHAOS_GATE_CORPS_MAX           = 6
};


// Enum EFGame.EFConst.ChaosGateResult
enum class EChaosGateResult : uint8_t
{
	CHAOS_GATE_RESULT_PLAYING      = 0,
	CHAOS_GATE_RESULT_WIN          = 1,
	CHAOS_GATE_RESULT_DEFEAT       = 2,
	CHAOS_GATE_RESULT_AUCTION      = 3,
	CHAOS_GATE_RESULT_MAX          = 4
};


// Enum EFGame.EFConst.ChaosGateAnnounceType
enum class EChaosGateAnnounceType : uint8_t
{
	CHAOS_GATE_ANNOUNCE_TYPE_VICTORY = 0,
	CHAOS_GATE_ANNOUNCE_TYPE_FINISH = 1,
	CHAOS_GATE_ANNOUNCE_TYPE_ZONE_BUFF = 2,
	CHAOS_GATE_ANNOUNCE_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.CheckMoveType
enum class ECheckMoveType : uint8_t
{
	CHECK_MOVE_TYPE_NONE           = 0,
	CHECK_MOVE_TYPE_KNOCK_DOWN     = 1,
	CHECK_MOVE_TYPE_TWIST_KNOCK_DOWN = 2,
	CHECK_MOVE_TYPE_BOUND          = 3,
	CHECK_MOVE_TYPE_BRING_DOWN     = 4,
	CHECK_MOVE_TYPE_ALL            = 5,
	CHECK_MOVE_TYPE_MAX            = 6
};


// Enum EFGame.EFConst.CounterAttackType
enum class ECounterAttackType : uint8_t
{
	COUNTER_ATTACK_TYPE_PARALYZATION = 0,
	COUNTER_ATTACK_TYPE_GROGGY     = 1,
	COUNTER_ATTACK_TYPE_FORCE_USE_SKILL = 2,
	COUNTER_ATTACK_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.CollisionShapeType
enum class ECollisionShapeType : uint8_t
{
	COLLISION_SHAPE_TYPE_NONE      = 0,
	COLLISION_SHAPE_TYPE_BOX       = 1,
	COLLISION_SHAPE_TYPE_CYLINDER  = 2,
	COLLISION_SHAPE_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.CoopQuestTriggerCondType
enum class ECoopQuestTriggerCondType : uint8_t
{
	COOP_QUEST_TRIGGER_COND_TYPE_NONE = 0,
	COOP_QUEST_TRIGGER_COND_TYPE_TIME = 1,
	COOP_QUEST_TRIGGER_COND_TYPE_ATTAIN_RATE = 2,
	COOP_QUEST_TRIGGER_COND_TYPE_MAX = 3
};


// Enum EFGame.EFConst.CoopQuestTriggerCondOp
enum class ECoopQuestTriggerCondOp : uint8_t
{
	COOP_QUEST_TRIGGER_COND_OP_EQUAL = 0,
	COOP_QUEST_TRIGGER_COND_OP_GREATER = 1,
	COOP_QUEST_TRIGGER_COND_OP_LESS = 2,
	COOP_QUEST_TRIGGER_COND_OP_MAX = 3
};


// Enum EFGame.EFConst.CommonActionCategory
enum class ECommonActionCategory : uint8_t
{
	COMMON_ACTION_CATEGORY_LIFE    = 0,
	COMMON_ACTION_CATEGORY_SOCIAL  = 1,
	COMMON_ACTION_CATEGORY_COMMON  = 2,
	COMMON_ACTION_CATEGORY_VOYAGE  = 3,
	COMMON_ACTION_CATEGORY_MAX     = 4
};


// Enum EFGame.EFConst.CommonActionType
enum class ECommonActionType : uint8_t
{
	COMMON_ACTION_TYPE_NONE        = 0,
	COMMON_ACTION_TYPE_ITEM_USE    = 1,
	COMMON_ACTION_TYPE_PROP_TOUCH  = 2,
	COMMON_ACTION_TYPE_PROP_PICKUP = 3,
	COMMON_ACTION_TYPE_PROP_DROP   = 4,
	COMMON_ACTION_TYPE_VEHICLE_ENTER = 5,
	COMMON_ACTION_TYPE_VEHICLE_LEAVE = 6,
	COMMON_ACTION_TYPE_VEHICLE_UNSUMMON = 7,
	COMMON_ACTION_TYPE_VEHICLE_SUMMON = 8,
	COMMON_ACTION_TYPE_PROP_THROW  = 9,
	COMMON_ACTION_TYPE_PROP_VOLUMEACTIVATE = 10,
	COMMON_ACTION_TYPE_LIFESKILL_USE = 11,
	COMMON_ACTION_TYPE_SOCIALSKILL_USE = 12,
	COMMON_ACTION_TYPE_MUSIC_PLAY  = 13,
	COMMON_ACTION_TYPE_NPC_CLICK   = 14,
	COMMON_ACTION_TYPE_QUEST_ITEM_USE = 15,
	COMMON_ACTION_TYPE_SHIP_CONTROL = 16,
	COMMON_ACTION_TYPE_SHIP_SKILL_USE = 17,
	COMMON_ACTION_TYPE_PRIVATE_ACTION_SYNC = 18,
	COMMON_ACTION_TYPE_EFFECT_APPLY = 19,
	COMMON_ACTION_TYPE_EPIC_SKILL_USE = 20,
	COMMON_ACTION_TYPE_MAX         = 21
};


// Enum EFGame.EFConst.CommonActionCancelType
enum class ECommonActionCancelType : uint8_t
{
	COMMON_ACTION_CANCEL_TYPE_NONE = 0,
	COMMON_ACTION_CANCEL_TYPE_CLIENT = 1,
	COMMON_ACTION_CANCEL_TYPE_FORCED = 2,
	COMMON_ACTION_CANCEL_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.CommonActionCancelForcedReason
enum class ECommonActionCancelForcedReason : uint8_t
{
	COMMON_ACTION_CANCEL_FORCED_REASON_NONE = 0,
	COMMON_ACTION_CANCEL_FORCED_REASON_NEW_COMMON_ACTION = 1,
	COMMON_ACTION_CANCEL_FORCED_REASON_EQUIP_CHANGE = 2,
	COMMON_ACTION_CANCEL_FORCED_REASON_REMOVE_PICKUP = 3,
	COMMON_ACTION_CANCEL_FORCED_REASON_WARP = 4,
	COMMON_ACTION_CANCEL_FORCED_REASON_TELEPORT = 5,
	COMMON_ACTION_CANCEL_FORCED_REASON_MOVE_DISABLED = 6,
	COMMON_ACTION_CANCEL_FORCED_REASON_LEAVE_ZONE = 7,
	COMMON_ACTION_CANCEL_FORCED_REASON_MOVE = 8,
	COMMON_ACTION_CANCEL_FORCED_REASON_TAKE_DAMAGE = 9,
	COMMON_ACTION_CANCEL_FORCED_REASON_ABNORMAL_STATUS_EFFECT = 10,
	COMMON_ACTION_CANCEL_FORCED_REASON_BE_KILLED = 11,
	COMMON_ACTION_CANCEL_FORCED_REASON_START_SKILL = 12,
	COMMON_ACTION_CANCEL_FORCED_REASON_JOINT_STATE_ON = 13,
	COMMON_ACTION_CANCEL_FORCED_REASON_JOINT_STATE_OFF = 14,
	COMMON_ACTION_CANCEL_FORCED_REASON_JOINT_EXPIRED = 15,
	COMMON_ACTION_CANCEL_FORCED_REASON_JOINT_DETACH = 16,
	COMMON_ACTION_CANCEL_FORCED_REASON_NO_LIFE_TOOL = 17,
	COMMON_ACTION_CANCEL_FORCED_REASON_ROTATOR_FINISH = 18,
	COMMON_ACTION_CANCEL_FORCED_REASON_TRANSIT_STOP = 19,
	COMMON_ACTION_CANCEL_FORCED_REASON_PROP_INVISIBLE_OR_DISABLED = 20,
	COMMON_ACTION_CANCEL_FORCED_REASON_START_TRACK_MOVE = 21,
	COMMON_ACTION_CANCEL_FORCED_REASON_TRIGGER_ACTION = 22,
	COMMON_ACTION_CANCEL_FORCED_REASON_CUTSCENE_INVINCIBLE = 23,
	COMMON_ACTION_CANCEL_FORCED_REASON_EXE_TRACK_MOVE = 24,
	COMMON_ACTION_CANCEL_FORCED_REASON_DISABLED_BY_SKILL_EFFECT = 25,
	COMMON_ACTION_CANCEL_FORCED_REASON_SHIP_WRECK = 26,
	COMMON_ACTION_CANCEL_FORCED_REASON_ADMIN = 27,
	COMMON_ACTION_CANCEL_FORCED_REASON_DESPAWN_BY_SKILL_EFFECT = 28,
	COMMON_ACTION_CANCEL_FORCED_REASON_TRIGGER_CUTSCENE_START = 29,
	COMMON_ACTION_CANCEL_FORCED_REASON_MAX = 30
};


// Enum EFGame.EFConst.CommonActionLearnType
enum class ECommonActionLearnType : uint8_t
{
	COMMON_ACTION_LEARN_TYPE_NONE  = 0,
	COMMON_ACTION_LEARN_TYPE_AUTO  = 1,
	COMMON_ACTION_LEARN_TYPE_REWARD = 2,
	COMMON_ACTION_LEARN_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.CommonActionOnVehicle
enum class ECommonActionOnVehicle : uint8_t
{
	COMMON_ACTION_ON_VEHICLE_ALLOW = 0,
	COMMON_ACTION_ON_VEHICLE_BAN   = 1,
	COMMON_ACTION_ON_VEHICLE_GET_OFF = 2,
	COMMON_ACTION_ON_VEHICLE_MAX   = 3
};


// Enum EFGame.EFConst.CommonActionOnStance
enum class ECommonActionOnStance : uint8_t
{
	COMMON_ACTION_ON_STANCE_ALLOW  = 0,
	COMMON_ACTION_ON_STANCE_BAN    = 1,
	COMMON_ACTION_ON_STANCE_RESET  = 2,
	COMMON_ACTION_ON_STANCE_MAX    = 3
};


// Enum EFGame.EFConst.CommonActionConditionType
enum class ECommonActionConditionType : uint8_t
{
	COMMON_ACTION_CONDITION_TYPE_NONE = 0,
	COMMON_ACTION_CONDITION_TYPE_EQUIP_ITEM = 1,
	COMMON_ACTION_CONDITION_TYPE_STATUS_EFFECT = 2,
	COMMON_ACTION_CONDITION_TYPE_POLYMORPH = 3,
	COMMON_ACTION_CONDITION_TYPE_ON_VOYAGE = 4,
	COMMON_ACTION_CONDITION_TYPE_MAX = 5
};


// Enum EFGame.EFConst.CommonActionRuleType
enum class ECommonActionRuleType : uint8_t
{
	COMMON_ACTION_RULE_TYPE_REPLACE = 0,
	COMMON_ACTION_RULE_TYPE_CONSTRAINT = 1,
	COMMON_ACTION_RULE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.CombatEffectActorType
enum class ECombatEffectActorType : uint8_t
{
	COMBAT_EFFECT_ACTOR_TYPE_NONE  = 0,
	COMBAT_EFFECT_ACTOR_TYPE_SELF  = 1,
	COMBAT_EFFECT_ACTOR_TYPE_TARGET = 2,
	COMBAT_EFFECT_ACTOR_TYPE_CASTER = 3,
	COMBAT_EFFECT_ACTOR_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.CombatEffectConditionType
enum class ECombatEffectConditionType : uint8_t
{
	COMBAT_EFFECT_CONDITION_TYPE_NONE = 0,
	COMBAT_EFFECT_CONDITION_TYPE_CURRENT_SKILL = 1,
	COMBAT_EFFECT_CONDITION_TYPE_HP_LESS = 2,
	COMBAT_EFFECT_CONDITION_TYPE_HP_GREATER = 3,
	COMBAT_EFFECT_CONDITION_TYPE_MP_LESS = 4,
	COMBAT_EFFECT_CONDITION_TYPE_MP_GREATER = 5,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_GRADE_LESS = 6,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_GRADE_GREATER = 7,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_GRADE_EQUAL = 8,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_SPECIES = 9,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_ATTR = 10,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_MOVE = 11,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_STATUS = 12,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_MOVE_IMMUNE = 13,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_STATUS_IMMUNE = 14,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_MOVE_ALL = 15,
	COMBAT_EFFECT_CONDITION_TYPE_PC = 16,
	COMBAT_EFFECT_CONDITION_TYPE_SKILL_EFFECT_ID = 17,
	COMBAT_EFFECT_CONDITION_TYPE_IDENTITY_STACK_COUNT = 18,
	COMBAT_EFFECT_CONDITION_TYPE_STATUS_EFFECT_IMMUNETYPE = 19,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_NOT_MOVE = 20,
	COMBAT_EFFECT_CONDITION_TYPE_TARGET_COUNT = 21,
	COMBAT_EFFECT_CONDITION_TYPE_SKILL_IDENTITY_CATEGORY = 22,
	COMBAT_EFFECT_CONDITION_TYPE_IDENTITY_ELEMENT_VALUE = 23,
	COMBAT_EFFECT_CONDITION_TYPE_DIRECTIONAL_ATTACK = 24,
	COMBAT_EFFECT_CONDITION_TYPE_CURRENT_SKILL_GROUP = 25,
	COMBAT_EFFECT_CONDITION_TYPE_ABNORMAL_MOVE_STATUS_ALL = 26,
	COMBAT_EFFECT_CONDITION_TYPE_IDENTITY_STANCE = 27,
	COMBAT_EFFECT_CONDITION_TYPE_PC_SKILL = 28,
	COMBAT_EFFECT_CONDITION_TYPE_SKILL_EFFECT_GROUP_SET = 29,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_ID = 30,
	COMBAT_EFFECT_CONDITION_TYPE_IDENTITY_ELEMENT_VALUE_LESS = 31,
	COMBAT_EFFECT_CONDITION_TYPE_PC_WITHOUT_ME = 32,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_SCALED_LEVEL_EQUAL = 33,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_SCALED_LEVEL_LESS = 34,
	COMBAT_EFFECT_CONDITION_TYPE_NPC_SCALED_LEVEL_GREATER = 35,
	COMBAT_EFFECT_CONDITION_TYPE_NOT_SKILL_EFFECT_ID = 36,
	COMBAT_EFFECT_CONDITION_TYPE_MAX = 37
};


// Enum EFGame.EFConst.CombatEffectActionType
enum class ECombatEffectActionType : uint8_t
{
	COMBAT_EFFECT_ACTION_TYPE_NONE = 0,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_DAMAGE = 1,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_FINAL_DAMAGE = 2,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_CRITICAL_RATIO = 3,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_CRITICAL_MULTIPLIER = 4,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_PENETRATION = 5,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_PENETRATION_WHEN_CRITICAL = 6,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_ACTIVE_EFFECT_WHEN_DAMAGE = 7,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_ACTIVE_EFFECT_WHEN_CRITICAL = 8,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_REACTIVE_EFFECT_WHEN_MISS = 9,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_REACTIVE_EFFECT_WHEN_DAMAGE = 10,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_REACTIVE_EFFECT_WHEN_CRITICAL = 11,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_AFTER_EFFECT = 12,
	COMBAT_EFFECT_ACTION_TYPE_EXEC_AFTER_SKILL = 13,
	COMBAT_EFFECT_ACTION_TYPE_APPLY_HEAL = 14,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_REACTIVE_DAMAGE = 15,
	COMBAT_EFFECT_ACTION_TYPE_MODIFY_DAMAGE_SHIELD_MULTIPLIER = 16,
	COMBAT_EFFECT_ACTION_TYPE_MAX  = 17
};


// Enum EFGame.EFConst.ContentsUnlockType
enum class EContentsUnlockType : uint8_t
{
	CONTENTS_UNLOCK_TYPE_NONE      = 0,
	CONTENTS_UNLOCK_TYPE_MUSIC_PLAY = 1,
	CONTENTS_UNLOCK_TYPE_ADV_BOOK  = 2,
	CONTENTS_UNLOCK_TYPE_PROFESSION = 3,
	CONTENTS_UNLOCK_TYPE_WORLD_MAP = 4,
	CONTENTS_UNLOCK_TYPE_AWAKENING = 5,
	CONTENTS_UNLOCK_TYPE_INTIMATE  = 6,
	CONTENTS_UNLOCK_TYPE_GUILD     = 7,
	CONTENTS_UNLOCK_TYPE_COLOSSEUM = 8,
	CONTENTS_UNLOCK_TYPE_RAID      = 9,
	CONTENTS_UNLOCK_TYPE_MESSENGER_MEDAL = 10,
	CONTENTS_UNLOCK_TYPE_CHAOS_GATE = 11,
	CONTENTS_UNLOCK_TYPE_VOYAGE    = 12,
	CONTENTS_UNLOCK_TYPE_VEHICLE   = 13,
	CONTENTS_UNLOCK_TYPE_TOWN      = 14,
	CONTENTS_UNLOCK_TYPE_PERIODIC_QUEST = 15,
	CONTENTS_UNLOCK_TYPE_MILESTONE = 16,
	CONTENTS_UNLOCK_TYPE_CHAOS_DUNGEON = 17,
	CONTENTS_UNLOCK_TYPE_ENGRAVE   = 18,
	CONTENTS_UNLOCK_TYPE_AVATAR_REFORM = 19,
	CONTENTS_UNLOCK_TYPE_AVATAR_DISASSEMBLY = 20,
	CONTENTS_UNLOCK_TYPE_MOCOCO_REWARD = 21,
	CONTENTS_UNLOCK_TYPE_ISLANDHEARTS_REWARD = 22,
	CONTENTS_UNLOCK_TYPE_GIANTHEARTS_REWARD = 23,
	CONTENTS_UNLOCK_TYPE_GREATPICTURES_REWARD = 24,
	CONTENTS_UNLOCK_TYPE_ITEM_ENHANCE = 25,
	CONTENTS_UNLOCK_TYPE_ANTARES_NIGHTMARE = 26,
	CONTENTS_UNLOCK_TYPE_EDEN_GATE = 27,
	CONTENTS_UNLOCK_TYPE_MOD_CUBE  = 28,
	CONTENTS_UNLOCK_TYPE_MOD_TOWER_SHADOW = 29,
	CONTENTS_UNLOCK_TYPE_MOD_TOWER_FATE = 30,
	CONTENTS_UNLOCK_TYPE_MOD_PLATINUM_FIELD = 31,
	CONTENTS_UNLOCK_TYPE_MOD_BOSS_RUSH = 32,
	CONTENTS_UNLOCK_TYPE_EPIC_GATE = 33,
	CONTENTS_UNLOCK_TYPE_RAID_ABYSS = 34,
	CONTENTS_UNLOCK_TYPE_TOWN_COMMUNITY = 35,
	CONTENTS_UNLOCK_TYPE_CHALLENGE_PRESET = 36,
	CONTENTS_UNLOCK_TYPE_EPIC_GATE_COMMANDER = 37,
	CONTENTS_UNLOCK_TYPE_GEM       = 38,
	CONTENTS_UNLOCK_TYPE_MARKET    = 39,
	CONTENTS_UNLOCK_TYPE_SCENE_REPLAY_MODE = 40,
	CONTENTS_UNLOCK_TYPE_MOD_WAY_OF_THRONE = 41,
	CONTENTS_UNLOCK_TYPE_TOWN_FARM = 42,
	CONTENTS_UNLOCK_TYPE_TOWN_JUMPING = 43,
	CONTENTS_UNLOCK_TYPE_CONTENTS_GUIDE_MODE = 44,
	CONTENTS_UNLOCK_TYPE_ARK_PASS  = 45,
	CONTENTS_UNLOCK_TYPE_SELECT_RVR_FACTION = 46,
	CONTENTS_UNLOCK_TYPE_COMBINED_PRESET = 47,
	CONTENTS_UNLOCK_TYPE_PET_FARM  = 48,
	CONTENTS_UNLOCK_TYPE_ESTHER_WEAPON_ENHANCE = 49,
	CONTENTS_UNLOCK_TYPE_MAX       = 50
};


// Enum EFGame.EFConst.ContentsUnlockBindType
enum class EContentsUnlockBindType : uint8_t
{
	CONTENTS_UNLOCK_BIND_TYPE_CHARACTER = 0,
	CONTENTS_UNLOCK_BIND_TYPE_EXPEDITION = 1,
	CONTENTS_UNLOCK_BIND_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.ContentsRequireType
enum class EContentsRequireType : uint8_t
{
	CONTENTS_REQUIRE_TYPE_NONE     = 0,
	CONTENTS_REQUIRE_TYPE_MIN_PC_LEVEL = 1,
	CONTENTS_REQUIRE_TYPE_MAX_PC_LEVEL = 2,
	CONTENTS_REQUIRE_TYPE_MIN_PERSONNEL = 3,
	CONTENTS_REQUIRE_TYPE_MAX_PERSONNEL = 4,
	CONTENTS_REQUIRE_TYPE_MIN_ATTAINED_ITEM_LEVEL = 5,
	CONTENTS_REQUIRE_TYPE_QUEST_ACTIVE = 6,
	CONTENTS_REQUIRE_TYPE_QUEST_COMPLETED = 7,
	CONTENTS_REQUIRE_TYPE_CONSUME_ITEM = 8,
	CONTENTS_REQUIRE_TYPE_LEADER_CONSUME_ITEM = 9,
	CONTENTS_REQUIRE_TYPE_FRIENDSHIP = 10,
	CONTENTS_REQUIRE_TYPE_CARD_BATTLE_COUNT = 11,
	CONTENTS_REQUIRE_TYPE_CARD_BATTLE_WIN = 12,
	CONTENTS_REQUIRE_TYPE_RAID_LICENSE_GRADE = 13,
	CONTENTS_REQUIRE_TYPE_COMPLETE_NORMAL_CUBE = 14,
	CONTENTS_REQUIRE_TYPE_COMPLETE_TOWER_SHADOW = 15,
	CONTENTS_REQUIRE_TYPE_CONTENTS_TIME_TABLE = 16,
	CONTENTS_REQUIRE_TYPE_MIN_CURRENT_ITEM_LEVEL = 17,
	CONTENTS_REQUIRE_TYPE_MAX_CURRENT_ITEM_LEVEL = 18,
	CONTENTS_REQUIRE_TYPE_CONSUME_MONEY_TYPE = 19,
	CONTENTS_REQUIRE_TYPE_SAME_CLASS_OVER = 20,
	CONTENTS_REQUIRE_TYPE_MIN_GUILD_RATING = 21,
	CONTENTS_REQUIRE_TYPE_MAX_GUILD_RATING = 22,
	CONTENTS_REQUIRE_TYPE_DEPART_FROM_OCEAN = 23,
	CONTENTS_REQUIRE_TYPE_CONTENTS_UNLOCK = 24,
	CONTENTS_REQUIRE_TYPE_LIFE_TOOL = 25,
	CONTENTS_REQUIRE_TYPE_MATCHING_MIN_CURRENT_ITEM_LEVEL = 26,
	CONTENTS_REQUIRE_TYPE_MAX      = 27
};


// Enum EFGame.EFConst.ColosseumCustomGameType
enum class EColosseumCustomGameType : uint8_t
{
	COLOSSEUM_CUSTOM_GAME_TYPE_NONE = 0,
	COLOSSEUM_CUSTOM_GAME_TYPE_FRIENDLY = 1,
	COLOSSEUM_CUSTOM_GAME_TYPE_COMPETITION = 2,
	COLOSSEUM_CUSTOM_GAME_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ColosseumRuleType
enum class EColosseumRuleType : uint8_t
{
	COLOSSEUM_RULE_TYPE_ELIMINATION = 0,
	COLOSSEUM_RULE_TYPE_TEAM_FIGHT = 1,
	COLOSSEUM_RULE_TYPE_TEAM_DEATHMATCH = 2,
	COLOSSEUM_RULE_TYPE_FREE_FOR_ALL = 3,
	COLOSSEUM_RULE_TYPE_TEAM_DEATHMATCH_RANK = 4,
	COLOSSEUM_RULE_TYPE_OPEN_MATCH = 5,
	COLOSSEUM_RULE_TYPE_MAX        = 6
};


// Enum EFGame.EFConst.ColosseumTeamType
enum class EColosseumTeamType : uint8_t
{
	COLOSSEUM_TEAM_TYPE_RED        = 0,
	COLOSSEUM_TEAM_TYPE_BLUE       = 1,
	COLOSSEUM_TEAM_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.ColosseumLeaveReason
enum class EColosseumLeaveReason : uint8_t
{
	COLOSSEUM_LEAVE_REASON_NONE    = 0,
	COLOSSEUM_LEAVE_REASON_PARTY_INFO_CHANGED = 1,
	COLOSSEUM_LEAVE_REASON_DESTROYED = 2,
	COLOSSEUM_LEAVE_REASON_MEMBER_REJECT = 3,
	COLOSSEUM_LEAVE_REASON_PARTY_INVITE = 4,
	COLOSSEUM_LEAVE_REASON_PARTY_JOIN = 5,
	COLOSSEUM_LEAVE_REASON_MEMBER_CONDITION_TIMEOUT = 6,
	COLOSSEUM_LEAVE_REASON_MEMBER_CONDITION_BAD = 7,
	COLOSSEUM_LEAVE_REASON_MEMBER_ENTER_DUNGEON = 8,
	COLOSSEUM_LEAVE_REASON_TOO_MANY_ENTER_ZONE = 9,
	COLOSSEUM_LEAVE_REASON_MEMBER_LOGOUT = 10,
	COLOSSEUM_LEAVE_REASON_NO_ENTRY_ZONE = 11,
	COLOSSEUM_LEAVE_REASON_CARD_BATTLE = 12,
	COLOSSEUM_LEAVE_REASON_TROOP_INFO_CHANGE = 13,
	COLOSSEUM_LEAVE_REASON_TROOP_INVITE = 14,
	COLOSSEUM_LEAVE_REASON_TROOP_CREATE = 15,
	COLOSSEUM_LEAVE_REASON_TROOP_ACCEPT = 16,
	COLOSSEUM_LEAVE_REASON_WARP    = 17,
	COLOSSEUM_LEAVE_REASON_MAX     = 18
};


// Enum EFGame.EFConst.ColosseumState
enum class EColosseumState : uint8_t
{
	COLOSSEUM_STATE_PREPARING      = 0,
	COLOSSEUM_STATE_WARM_UP        = 1,
	COLOSSEUM_STATE_INTRO          = 2,
	COLOSSEUM_STATE_WAIT_FOR_REFEREE = 3,
	COLOSSEUM_STATE_READY          = 4,
	COLOSSEUM_STATE_ROUND_START    = 5,
	COLOSSEUM_STATE_ACTIVE         = 6,
	COLOSSEUM_STATE_ROUND_FINISH   = 7,
	COLOSSEUM_STATE_RESULT         = 8,
	COLOSSEUM_STATE_OUTRO          = 9,
	COLOSSEUM_STATE_REPORTING      = 10,
	COLOSSEUM_STATE_INACTIVE       = 11,
	COLOSSEUM_STATE_MAX            = 12
};


// Enum EFGame.EFConst.ColosseumActiveState
enum class EColosseumActiveState : uint8_t
{
	COLOSSEUM_ACTIVE_STATE_NORMAL  = 0,
	COLOSSEUM_ACTIVE_STATE_OVER_TIME = 1,
	COLOSSEUM_ACTIVE_STATE_GOLDEN_KILL_TIME = 2,
	COLOSSEUM_ACTIVE_STATE_MAX     = 3
};


// Enum EFGame.EFConst.ColosseumResult
enum class EColosseumResult : uint8_t
{
	COLOSSEUM_RESULT_LOSE          = 0,
	COLOSSEUM_RESULT_WIN           = 1,
	COLOSSEUM_RESULT_DRAW          = 2,
	COLOSSEUM_RESULT_MAX           = 3
};


// Enum EFGame.EFConst.ColosseumStatType
enum class EColosseumStatType : uint8_t
{
	COLOSSEUM_STAT_TYPE_AVERAGE_KILL = 0,
	COLOSSEUM_STAT_TYPE_AVERAGE_DAMAGE = 1,
	COLOSSEUM_STAT_TYPE_CHAIN_VICTORY = 2,
	COLOSSEUM_STAT_TYPE_FIRST_PICK_VICTORY = 3,
	COLOSSEUM_STAT_TYPE_SECOND_PICK_VICTORY = 4,
	COLOSSEUM_STAT_TYPE_THIRD_PICK_VICTORY = 5,
	COLOSSEUM_STAT_TYPE_DOUBLE_KILL_COUNT = 6,
	COLOSSEUM_STAT_TYPE_TRIPLE_KILL_COUNT = 7,
	COLOSSEUM_STAT_TYPE_PLAY_COUNT = 8,
	COLOSSEUM_STAT_TYPE_MAX        = 9
};


// Enum EFGame.EFConst.ColosseumMemberState
enum class EColosseumMemberState : uint8_t
{
	COLOSSEUM_MEMBER_STATE_IDLE    = 0,
	COLOSSEUM_MEMBER_STATE_ACTIVE  = 1,
	COLOSSEUM_MEMBER_STATE_DEFEATED = 2,
	COLOSSEUM_MEMBER_STATE_MAX     = 3
};


// Enum EFGame.EFConst.ColosseumKillType
enum class EColosseumKillType : uint8_t
{
	COLOSSEUM_KILL_TYPE_NONE       = 0,
	COLOSSEUM_KILL_TYPE_DOUBLE     = 1,
	COLOSSEUM_KILL_TYPE_TRIPLE     = 2,
	COLOSSEUM_KILL_TYPE_QUAD       = 3,
	COLOSSEUM_KILL_TYPE_PENTA      = 4,
	COLOSSEUM_KILL_TYPE_MAX        = 5
};


// Enum EFGame.EFConst.ColosseumSeasonType
enum class EColosseumSeasonType : uint8_t
{
	COLOSSEUM_SEASON_TYPE_NONE     = 0,
	COLOSSEUM_SEASON_TYPE_OFF_SEASON = 1,
	COLOSSEUM_SEASON_TYPE_OPENED_SEASON = 2,
	COLOSSEUM_SEASON_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ColosseumObserverCommandType
enum class EColosseumObserverCommandType : uint8_t
{
	COLOSSEUM_OBSERVER_COMMAND_TYPE_NONE = 0,
	COLOSSEUM_OBSERVER_COMMAND_TYPE_START = 1,
	COLOSSEUM_OBSERVER_COMMAND_TYPE_STOP = 2,
	COLOSSEUM_OBSERVER_COMMAND_TYPE_LEAVE = 3,
	COLOSSEUM_OBSERVER_COMMAND_TYPE_MAX = 4
};


// Enum EFGame.EFConst.ColosseumObserverStatusType
enum class EColosseumObserverStatusType : uint8_t
{
	COLOSSEUM_OBSERVER_STATUS_TYPE_NONE = 0,
	COLOSSEUM_OBSERVER_STATUS_TYPE_ENTER = 1,
	COLOSSEUM_OBSERVER_STATUS_TYPE_LEAVE = 2,
	COLOSSEUM_OBSERVER_STATUS_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ColosseumInviteRejectType
enum class EColosseumInviteRejectType : uint8_t
{
	COLOSSEUM_INVITE_REJECT_TYPE_SAY_NO = 0,
	COLOSSEUM_INVITE_REJECT_TYPE_TIMEOUT = 1,
	COLOSSEUM_INVITE_REJECT_TYPE_EXCEED = 2,
	COLOSSEUM_INVITE_REJECT_TYPE_CUTSCENE = 3,
	COLOSSEUM_INVITE_REJECT_TYPE_ENV_SETTING = 4,
	COLOSSEUM_INVITE_REJECT_TYPE_DEAD = 5,
	COLOSSEUM_INVITE_REJECT_TYPE_INTERACTION = 6,
	COLOSSEUM_INVITE_REJECT_TYPE_PRACTICE = 7,
	COLOSSEUM_INVITE_REJECT_TYPE_BLOCK = 8,
	COLOSSEUM_INVITE_REJECT_TYPE_INVITE_ERROR = 9,
	COLOSSEUM_INVITE_REJECT_TYPE_INVITE_IMPOSSIBLE = 10,
	COLOSSEUM_INVITE_REJECT_TYPE_BLOCK_BY_ME = 11,
	COLOSSEUM_INVITE_REJECT_TYPE_COMPETITION_QUEST = 12,
	COLOSSEUM_INVITE_REJECT_TYPE_BATTLEFIELD = 13,
	COLOSSEUM_INVITE_REJECT_TYPE_JOIN_ELSE = 14,
	COLOSSEUM_INVITE_REJECT_TYPE_LOGOUT = 15,
	COLOSSEUM_INVITE_REJECT_TYPE_PARTYBOARD = 16,
	COLOSSEUM_INVITE_REJECT_TYPE_MAX = 17
};


// Enum EFGame.EFConst.ColosseumRoomLeaveReason
enum class EColosseumRoomLeaveReason : uint8_t
{
	COLOSSEUMROOM_LEAVE_REASON_NONE = 0,
	COLOSSEUMROOM_LEAVE_REASON_SELF_LEAVE = 1,
	COLOSSEUMROOM_LEAVE_REASON_KICKED = 2,
	COLOSSEUMROOM_LEAVE_REASON_WARP = 3,
	COLOSSEUMROOM_LEAVE_REASON_LOGOUT = 4,
	COLOSSEUMROOM_LEAVE_REASON_DESTROYED = 5,
	COLOSSEUMROOM_LEAVE_REASON_MAX = 6
};


// Enum EFGame.EFConst.ColosseumRoomDestroyReason
enum class EColosseumRoomDestroyReason : uint8_t
{
	COLOSSEUMROOM_DESTROY_REASON_HOST_REQUEST = 0,
	COLOSSEUMROOM_DESTROY_REASON_HOST_WARP = 1,
	COLOSSEUMROOM_DESTROY_REASON_HOST_LOGOUT = 2,
	COLOSSEUMROOM_DESTROY_REASON_START = 3,
	COLOSSEUMROOM_DESTROY_REASON_MAX = 4
};


// Enum EFGame.EFConst.PvPResultRewardType
enum class EPvPResultRewardType : uint8_t
{
	PVP_RESULT_REWARD_TYPE_LOSE    = 0,
	PVP_RESULT_REWARD_TYPE_WIN     = 1,
	PVP_RESULT_REWARD_TYPE_EVENT_LOSE = 2,
	PVP_RESULT_REWARD_TYPE_EVENT_WIN = 3,
	PVP_RESULT_REWARD_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.PvPRankValueType
enum class EPvPRankValueType : uint8_t
{
	PVP_RANK_VALUE_TYPE_MMR        = 0,
	PVP_RANK_VALUE_TYPE_RANKING    = 1,
	PVP_RANK_VALUE_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.PvPLevelType
enum class EPvPLevelType : uint8_t
{
	PVP_LEVEL_TYPE_ABSOLUTE        = 0,
	PVP_LEVEL_TYPE_RELATIVE        = 1,
	PVP_LEVEL_TYPE_MAX             = 2
};


// Enum EFGame.EFConst.CoopQuestType
enum class ECoopQuestType : uint8_t
{
	COOP_QUEST_TYPE_NORMAL         = 0,
	COOP_QUEST_TYPE_CHAOS_GATE     = 1,
	COOP_QUEST_TYPE_COMPETITION    = 2,
	COOP_QUEST_TYPE_TEAM_COMPETITION = 3,
	COOP_QUEST_TYPE_DUNGEON        = 4,
	COOP_QUEST_TYPE_MAX            = 5
};


// Enum EFGame.EFConst.CoopQuestStatus
enum class ECoopQuestStatus : uint8_t
{
	COOP_QUEST_STATUS_NONE         = 0,
	COOP_QUEST_STATUS_PREPARE      = 1,
	COOP_QUEST_STATUS_READY        = 2,
	COOP_QUEST_STATUS_STARTED      = 3,
	COOP_QUEST_STATUS_REWARD       = 4,
	COOP_QUEST_STATUS_MAX          = 5
};


// Enum EFGame.EFConst.CoopResultGrade
enum class ECoopResultGrade : uint8_t
{
	COOP_RESULT_GRADE_BRONZE       = 0,
	COOP_RESULT_GRADE_SILVER       = 1,
	COOP_RESULT_GRADE_GOLD         = 2,
	COOP_RESULT_GRADE_PLATINUM     = 3,
	COOP_RESULT_GRADE_MAX          = 4
};


// Enum EFGame.EFConst.CoopQuestContribution
enum class ECoopQuestContribution : uint8_t
{
	COOP_QUEST_CONTRIBUTION_NORMAL = 0,
	COOP_QUEST_CONTRIBUTION_LACK   = 1,
	COOP_QUEST_CONTRIBUTION_BELOW  = 2,
	COOP_QUEST_CONTRIBUTION_ZERO   = 3,
	COOP_QUEST_CONTRIBUTION_MAX    = 4
};


// Enum EFGame.EFConst.CoopQuestContributionCheckRule
enum class ECoopQuestContributionCheckRule : uint8_t
{
	COOP_QUEST_CONTRIBUTION_RULE_COUNT_RATE = 0,
	COOP_QUEST_CONTRIBUTION_RULE_COUNT_INTEGER = 1,
	COOP_QUEST_CONTRIBUTION_RULE_TIME = 2,
	COOP_QUEST_CONTRIBUTION_RULE_KILL_CONTRIBUTION = 3,
	COOP_QUEST_CONTRIBUTION_RULE_MAX = 4
};


// Enum EFGame.EFConst.CoopQuestCompetitionRewardMemberType
enum class ECoopQuestCompetitionRewardMemberType : uint8_t
{
	COOP_QUEST_COMPETITION_REWARD_MEMBER_TYPE_NONE = 0,
	COOP_QUEST_COMPETITION_REWARD_MEMBER_TYPE_ALL = 1,
	COOP_QUEST_COMPETITION_REWARD_MEMBER_TYPE_WIN_TEAM = 2,
	COOP_QUEST_COMPETITION_REWARD_MEMBER_TYPE_DEFEAT_TEAM = 3,
	COOP_QUEST_COMPETITION_REWARD_MEMBER_TYPE_MAX = 4
};


// Enum EFGame.EFConst.CoopQuestTeamType
enum class ECoopQuestTeamType : uint8_t
{
	COOP_QUEST_TEAM_TYPE_PERSONAL  = 0,
	COOP_QUEST_TEAM_TYPE_TEAM_A    = 1,
	COOP_QUEST_TEAM_TYPE_TEAM_B    = 2,
	COOP_QUEST_TEAM_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.CommonActionStageType
enum class ECommonActionStageType : uint8_t
{
	COMMON_ACTION_STAGE_START      = 0,
	COMMON_ACTION_STAGE_EXECUTE    = 1,
	COMMON_ACTION_STAGE_FINISH     = 2,
	COMMON_ACTION_STAGE_MAX        = 3
};


// Enum EFGame.EFConst.CommonActionUseType
enum class ECommonActionUseType : uint8_t
{
	COMMON_ACTION_USE_TYPE_NONE    = 0,
	COMMON_ACTION_USE_TYPE_PASSIVE = 1,
	COMMON_ACTION_USE_TYPE_ACTIVE  = 2,
	COMMON_ACTION_USE_TYPE_TOGGLE  = 3,
	COMMON_ACTION_USE_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.CommonActionEffectType
enum class ECommonActionEffectType : uint8_t
{
	COMMON_ACTION_EFFECT_TYPE_NONE = 0,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_EAT_UNCOOKED = 1,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_LIFE_ETHER = 2,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_EXPERT_COLLECT = 3,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_BARE_HANDS = 4,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_CAMOUFLAGE = 5,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_SURVIVE = 6,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_FLORIST = 7,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_GOLDEN_FINGER = 8,
	COMMON_ACTION_EFFECT_TYPE_MINING_ADD_SUCCESS_RATE = 9,
	COMMON_ACTION_EFFECT_TYPE_MINING_SUCCESS_BUFF = 10,
	COMMON_ACTION_EFFECT_TYPE_MINING_START_BUFF = 11,
	COMMON_ACTION_EFFECT_TYPE_MINING_INSTALL_BOMB = 12,
	COMMON_ACTION_EFFECT_TYPE_MINING_MOON_LIGHT = 13,
	COMMON_ACTION_EFFECT_TYPE_MINING_ROCK_SKIN = 14,
	COMMON_ACTION_EFFECT_TYPE_MINING_FIND_LODE = 15,
	COMMON_ACTION_EFFECT_TYPE_MINING_PERFECT_TIMING = 16,
	COMMON_ACTION_EFFECT_TYPE_MINING_COLLECTING_PEBBLE = 17,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_EXPERT_LOGGER = 18,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_AXE_SPECIALIZE = 19,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_SAW_SPECIALIZE = 20,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_SHARPEN = 21,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_FAST_GROW = 22,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_FIND_TREE = 23,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_CONCENTRATION = 24,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_COOPERATION = 25,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_KICK_TREE = 26,
	COMMON_ACTION_EFFECT_TYPE_LUMBERING_COOPERATION_BONUS = 27,
	COMMON_ACTION_EFFECT_TYPE_FISHING_POLE = 28,
	COMMON_ACTION_EFFECT_TYPE_FISHING_NET = 29,
	COMMON_ACTION_EFFECT_TYPE_FISHING_SPECIALIZE = 30,
	COMMON_ACTION_EFFECT_TYPE_FISHING_BARE_HANDS = 31,
	COMMON_ACTION_EFFECT_TYPE_FISHING_CAST_BAIT = 32,
	COMMON_ACTION_EFFECT_TYPE_FISHING_FISH_POT = 33,
	COMMON_ACTION_EFFECT_TYPE_FISHING_OBSERVE_FISH = 34,
	COMMON_ACTION_EFFECT_TYPE_FISHING_AQUARIUM_FISH = 35,
	COMMON_ACTION_EFFECT_TYPE_FISHING_POINT_FISHING = 36,
	COMMON_ACTION_EFFECT_TYPE_FISHING_SUCCESS_DROP = 37,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_DELICATE_HANDS = 38,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_MUSHROOM = 39,
	COMMON_ACTION_EFFECT_TYPE_HERBALISM_QUICK_EYE = 40,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_EXPERT = 41,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_CARVE = 42,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_THROW = 43,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_TRAP = 44,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_OBSERVE = 45,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_BURROW = 46,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_CHASE = 47,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_TRACK_DOWN = 48,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_POISON_MACHETE = 49,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_DISASSEMBLE = 50,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_DELICATE_FINISH = 51,
	COMMON_ACTION_EFFECT_TYPE_HUNTING_HUNTER_EYES = 52,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_INTUITION = 53,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_GEOLOGY = 54,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_CONCENTRATION = 55,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_DETECTION = 56,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_TREASURE_HUNTER = 57,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_TRACE_HISTORY = 58,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_EXCAVATION = 59,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_SENSE = 60,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_ANCIENT_GIFT = 61,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_DETECTION_DOG = 62,
	COMMON_ACTION_EFFECT_TYPE_ARCHEOLOGY_EXCAVATION_PASSIVE = 63,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_SPREAD_NET = 64,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_TREASURE_SALVATION = 65,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_DIVING = 66,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_GOODLUCK = 67,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_OCEAN_HUNTING = 68,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_CANNON = 69,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_COOKING_ON_BOARD = 70,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_QUICK_CHARGE = 71,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_SEARCH = 72,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_THROW_SUPPLY = 73,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_LIGHT_NET = 74,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_REQUITE_GOODLUCK = 75,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_BOOSTER_SPEED = 76,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_BOOSTER_GAUGE_FLOATINGMATTER = 77,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_FISHING_SCHOOL = 78,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_FLOATINGMATTER_RANGEUP = 79,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_ENCOUNTER_BUFF_GHOST = 80,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_ENCOUNTER_BUFF_WRECKED = 81,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_NATIVE_COMMUNICATION = 82,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_BOOSTER_PAYBACK = 83,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_BOOSTER_GAUGE_UP = 84,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_TREASURE_GREAT_UP = 85,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_COOP_TREASURE_GREAT_UP = 86,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_FISHINGSCHOOL_GREAT_UP = 87,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_DIVING_DEPTH_UP = 88,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_HUNTING_DAMAGE_UP = 89,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_FLOATINGMATTER_UP = 90,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_NEUROTOXIN = 91,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_AUTOROUTE_BOOSTER = 92,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_SHIPWRECK_REVIVE = 93,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_CREW_MEMBER_BONUS = 94,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_GOLD_FLOATINGMATTER = 95,
	COMMON_ACTION_EFFECT_TYPE_REDUCE_COOLDOWN_ON_ACTION = 96,
	COMMON_ACTION_EFFECT_TYPE_ADD_BUFF = 97,
	COMMON_ACTION_EFFECT_TYPE_LIFE_INCREASE_DROP_TYPE_REWARD = 98,
	COMMON_ACTION_EFFECT_TYPE_LIFE_INCREASE_PROP_TYPE_REWARD = 99,
	COMMON_ACTION_EFFECT_TYPE_LIFE_INCREASE_METHOD_GRADE_REWARD = 100,
	COMMON_ACTION_EFFECT_TYPE_LIFE_REDUCE_COOLDOWN_ACTIVE_SKILL = 101,
	COMMON_ACTION_EFFECT_TYPE_LIFE_REDUCE_COOLDOWN_ON_ACTION = 102,
	COMMON_ACTION_EFFECT_TYPE_LIFE_MASTERY_INCREASE_EXTRA_DROP_RATE = 103,
	COMMON_ACTION_EFFECT_TYPE_LIFE_MASTERY_DECREASE_DURABILITY_RATE = 104,
	COMMON_ACTION_EFFECT_TYPE_LIFE_MASTERY_INCREASE_CASTING_SPEED = 105,
	COMMON_ACTION_EFFECT_TYPE_VOYAGE_IMMUNE_EVENTS = 106,
	COMMON_ACTION_EFFECT_TYPE_INVOKE_EPIC_SKILL = 107,
	COMMON_ACTION_EFFECT_TYPE_MAX  = 108
};


// Enum EFGame.EFConst.CinematicDungeonType
enum class ECinematicDungeonType : uint8_t
{
	CINEMATIC_DUNGEON_TYPE_NONE    = 0,
	CINEMATIC_DUNGEON_TYPE_PARTY   = 1,
	CINEMATIC_DUNGEON_TYPE_ARK     = 2,
	CINEMATIC_DUNGEON_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.ContinentType
enum class EContinentType : uint8_t
{
	CONTINENT_TYPE_NA              = 0,
	CONTINENT_TYPE_ARTHEMIS        = 1,
	CONTINENT_TYPE_TORTOYK         = 2,
	CONTINENT_TYPE_ANIHC           = 3,
	CONTINENT_TYPE_ARTHETINE       = 4,
	CONTINENT_TYPE_PLECCE          = 5,
	CONTINENT_TYPE_SHUSHIRE        = 6,
	CONTINENT_TYPE_YORN            = 7,
	CONTINENT_TYPE_PAPUNIKA        = 8,
	CONTINENT_TYPE_LOHENDEL        = 9,
	CONTINENT_TYPE_FATON           = 10,
	CONTINENT_TYPE_BERN_A          = 11,
	CONTINENT_TYPE_ERGASIA         = 12,
	CONTINENT_TYPE_KURZAN          = 13,
	CONTINENT_TYPE_LUTERAN_WEST    = 14,
	CONTINENT_TYPE_LUTERAN_EAST    = 15,
	CONTINENT_TYPE_LUTERAN_PORT    = 16,
	CONTINENT_TYPE_EUDIA           = 17,
	CONTINENT_TYPE_VOYAGE          = 18,
	CONTINENT_TYPE_BERN_B          = 19,
	CONTINENT_TYPE_LIMLAKE_NORTH   = 20,
	CONTINENT_TYPE_LIMLAKE_SOUTH   = 21,
	CONTINENT_TYPE_TRISION         = 22,
	CONTINENT_TYPE_ARKRASIA        = 23,
	CONTINENT_TYPE_LOWEN           = 24,
	CONTINENT_TYPE_MAX             = 25
};


// Enum EFGame.EFConst.CardEntryType
enum class ECardEntryType : uint8_t
{
	CARD_ENTRY_TYPE_PC             = 0,
	CARD_ENTRY_TYPE_NPC            = 1,
	CARD_ENTRY_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.CardGrade
enum class ECardGrade : uint8_t
{
	CARD_GRADE_NONE                = 0,
	CARD_GRADE_COMMON              = 1,
	CARD_GRADE_UNCOMMON            = 2,
	CARD_GRADE_RARE                = 3,
	CARD_GRADE_EPIC                = 4,
	CARD_GRADE_LEGEND              = 5,
	CARD_GRADE_MAX                 = 6
};


// Enum EFGame.EFConst.CardManage
enum class ECardManage : uint8_t
{
	CARD_MANAGE_EXPAND_STORAGE     = 0,
	CARD_MANAGE_EXPAND_DECK        = 1,
	CARD_MANAGE_SKILL_INHERIT      = 2,
	CARD_MANAGE_MAX                = 3
};


// Enum EFGame.EFConst.CardManageCost
enum class ECardManageCost : uint8_t
{
	CARD_MANAGE_COST_NONE          = 0,
	CARD_MANAGE_COST_MONEY         = 1,
	CARD_MANAGE_COST_ITEM          = 2,
	CARD_MANAGE_COST_MAX           = 3
};


// Enum EFGame.EFConst.CardSkillType
enum class ECardSkillType : uint8_t
{
	CARD_SKILL_TYPE_ACTIVE         = 0,
	CARD_SKILL_TYPE_PASSIVE        = 1,
	CARD_SKILL_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.CardBattleState
enum class ECardBattleState : uint8_t
{
	CARD_BATTLE_STATE_NONE         = 0,
	CARD_BATTLE_STATE_IN_BATTLE    = 1,
	CARD_BATTLE_STATE_WIN          = 2,
	CARD_BATTLE_STATE_DEFEAT       = 3,
	CARD_BATTLE_STATE_MAX          = 4
};


// Enum EFGame.EFConst.CardBattleResultReason
enum class ECardBattleResultReason : uint8_t
{
	CARD_BATTLE_RESULT_REASON_NONE = 0,
	CARD_BATTLE_RESULT_REASON_WIN  = 1,
	CARD_BATTLE_RESULT_REASON_DEFEAT = 2,
	CARD_BATTLE_RESULT_REASON_TURNOVER = 3,
	CARD_BATTLE_RESULT_REASON_SURRENDER = 4,
	CARD_BATTLE_RESULT_REASON_ETC  = 5,
	CARD_BATTLE_RESULT_REASON_MAX  = 6
};


// Enum EFGame.EFConst.CardAbnormalStatus
enum class ECardAbnormalStatus : uint8_t
{
	CARD_ABNORMAL_STATUS_NONE      = 0,
	CARD_ABNORMAL_STATUS_FREEZE    = 1,
	CARD_ABNORMAL_STATUS_STONE     = 2,
	CARD_ABNORMAL_STATUS_STUN      = 3,
	CARD_ABNORMAL_STATUS_FEAR      = 4,
	CARD_ABNORMAL_STATUS_EARTHQUAKE = 5,
	CARD_ABNORMAL_STATUS_ELECTROCUTION = 6,
	CARD_ABNORMAL_STATUS_VERMIN    = 7,
	CARD_ABNORMAL_STATUS_BURN      = 8,
	CARD_ABNORMAL_STATUS_BLEEDING  = 9,
	CARD_ABNORMAL_STATUS_POISONING = 10,
	CARD_ABNORMAL_STATUS_CURSE     = 11,
	CARD_ABNORMAL_STATUS_MAX       = 12
};


// Enum EFGame.EFConst.CardSkillApplyMoment
enum class ECardSkillApplyMoment : uint8_t
{
	CARD_SKILL_APPLY_MOMENT_INIT_DECK = 0,
	CARD_SKILL_APPLY_MOMENT_START_BATTLE = 1,
	CARD_SKILL_APPLY_MOMENT_WIN_BATTLE = 2,
	CARD_SKILL_APPLY_MOMENT_LOSE_BATTLE = 3,
	CARD_SKILL_APPLY_MOMENT_AT_TURN = 4,
	CARD_SKILL_APPLY_MOMENT_FOR_EACH_TURN = 5,
	CARD_SKILL_APPLY_MOMENT_MAX    = 6
};


// Enum EFGame.EFConst.CardSkillApplyTarget
enum class ECardSkillApplyTarget : uint8_t
{
	CARD_SKILL_APPLY_TARGET_NONE   = 0,
	CARD_SKILL_APPLY_TARGET_SELF   = 1,
	CARD_SKILL_APPLY_TARGET_BOTH_SIDE_INCLUD_SELF = 2,
	CARD_SKILL_APPLY_TARGET_BOTH_SIDE_EXCLUDE_SELF = 3,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_ALL = 4,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_EXCLUDE_SELF = 5,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_FIRST = 6,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_SECOND = 7,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_THIRD = 8,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_FOURTH = 9,
	CARD_SKILL_APPLY_TARGET_FRIENDLY_FIFTH = 10,
	CARD_SKILL_APPLY_TARGET_ENEMY  = 11,
	CARD_SKILL_APPLY_TARGET_ENEMY_ALL = 12,
	CARD_SKILL_APPLY_TARGET_ENEMY_FIRST = 13,
	CARD_SKILL_APPLY_TARGET_ENEMY_SECOND = 14,
	CARD_SKILL_APPLY_TARGET_ENEMY_THIRD = 15,
	CARD_SKILL_APPLY_TARGET_ENEMY_FOURTH = 16,
	CARD_SKILL_APPLY_TARGET_ENEMY_FIFTH = 17,
	CARD_SKILL_APPLY_TARGET_MAX    = 18
};


// Enum EFGame.EFConst.CardSkillApplyCondition
enum class ECardSkillApplyCondition : uint8_t
{
	CARD_SKILL_APPLY_CONDITION_NONE = 0,
	CARD_SKILL_APPLY_CONDITION_ELEMENT = 1,
	CARD_SKILL_APPLY_CONDITION_SPECIES = 2,
	CARD_SKILL_APPLY_CONDITION_ATTACK = 3,
	CARD_SKILL_APPLY_CONDITION_HP  = 4,
	CARD_SKILL_APPLY_CONDITION_DECK_COST = 5,
	CARD_SKILL_APPLY_CONDITION_MAX = 6
};


// Enum EFGame.EFConst.CardSkillApplyJudge
enum class ECardSkillApplyJudge : uint8_t
{
	CARD_SKILL_APPLY_JUDGE_NONE    = 0,
	CARD_SKILL_APPLY_JUDGE_GREATER = 1,
	CARD_SKILL_APPLY_JUDGE_LESS    = 2,
	CARD_SKILL_APPLY_JUDGE_EQUAL   = 3,
	CARD_SKILL_APPLY_JUDGE_ODD_NUMBER = 4,
	CARD_SKILL_APPLY_JUDGE_EVEN_NUMBER = 5,
	CARD_SKILL_APPLY_JUDGE_GREATER_SUM = 6,
	CARD_SKILL_APPLY_JUDGE_LESS_SUM = 7,
	CARD_SKILL_APPLY_JUDGE_EQUAL_SUM = 8,
	CARD_SKILL_APPLY_JUDGE_GREATER_SELF = 9,
	CARD_SKILL_APPLY_JUDGE_LESS_SELF = 10,
	CARD_SKILL_APPLY_JUDGE_EQUAL_SELF = 11,
	CARD_SKILL_APPLY_JUDGE_MAX     = 12
};


// Enum EFGame.EFConst.CardJudgement
enum class ECardJudgement : uint8_t
{
	CARD_JUDGEMENT_ORDINARY_HIT    = 0,
	CARD_JUDGEMENT_CRITICAL_HIT    = 1,
	CARD_JUDGEMENT_MISS            = 2,
	CARD_JUDGEMENT_DODGE           = 3,
	CARD_JUDGEMENT_MAX             = 4
};


// Enum EFGame.EFConst.CardBattleAction
enum class ECardBattleAction : uint8_t
{
	CARD_BATTLE_ACTION_ATTACK      = 0,
	CARD_BATTLE_ACTION_SKILL       = 1,
	CARD_BATTLE_ACTION_MAX         = 2
};


// Enum EFGame.EFConst.CardInvokeEffectType
enum class ECardInvokeEffectType : uint8_t
{
	CARD_INVOKE_EFFECT_SKILL_STUCK = 0,
	CARD_INVOKE_EFFECT_SKILL_INSTANT = 1,
	CARD_INVOKE_EFFECT_SKILL_DURATION = 2,
	CARD_INVOKE_EFFECT_SKILL_DURATION_EFFECT_APPLY = 3,
	CARD_INVOKE_EFFECT_SKILL_DURATION_EFFECT_REMOVE = 4,
	CARD_INVOKE_EFFECT_ABNORMALSTATUS = 5,
	CARD_INVOKE_EFFECT_ATTACK      = 6,
	CARD_INVOKE_EFFECT_MAX         = 7
};


// Enum EFGame.EFConst.CardRemoveType
enum class ECardRemoveType : uint8_t
{
	CARD_REMOVE_TYPE_DELETE        = 0,
	CARD_REMOVE_TYPE_GROW          = 1,
	CARD_REMOVE_TYPE_INHERIT       = 2,
	CARD_REMOVE_TYPE_AWAKE         = 3,
	CARD_REMOVE_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.CardType
enum class ECardType : uint8_t
{
	CARD_TYPE_NORMAL               = 0,
	CARD_TYPE_HERO                 = 1,
	CARD_TYPE_MAX                  = 2
};


// Enum EFGame.EFConst.CardField
enum class ECardField : uint8_t
{
	CARD_FIELD_DAY                 = 0,
	CARD_FIELD_NIGHT               = 1,
	CARD_FIELD_DAWN                = 2,
	CARD_FIELD_ALL                 = 3,
	CARD_FIELD_MAX                 = 4
};


// Enum EFGame.EFConst.CardSpecies
enum class ECardSpecies : uint8_t
{
	CARD_SPECIES_NONE              = 0,
	CARD_SPECIES_HUMAN             = 1,
	CARD_SPECIES_DEVIL             = 2,
	CARD_SPECIES_SUBSTANCE         = 3,
	CARD_SPECIES_UNDEAD            = 4,
	CARD_SPECIES_PLANT             = 5,
	CARD_SPECIES_INSECT            = 6,
	CARD_SPECIES_SPIRIT            = 7,
	CARD_SPECIES_BEAST             = 8,
	CARD_SPECIES_MECHANIC          = 9,
	CARD_SPECIES_EXP               = 10,
	CARD_SPECIES_ANCIENT           = 11,
	CARD_SPECIES_GOD               = 12,
	CARD_SPECIES_ARCHFIEND         = 13,
	CARD_SPECIES_MAX               = 14
};


// Enum EFGame.EFConst.CardElement
enum class ECardElement : uint8_t
{
	CARD_ELEMENT_NONE              = 0,
	CARD_ELEMENT_FIRE              = 1,
	CARD_ELEMENT_WATER             = 2,
	CARD_ELEMENT_LIGHTNING         = 3,
	CARD_ELEMENT_EARTH             = 4,
	CARD_ELEMENT_HOLY              = 5,
	CARD_ELEMENT_DARK              = 6,
	CARD_ELEMENT_NO_ATTRIBUTE      = 7,
	CARD_ELEMENT_MAX               = 8
};


// Enum EFGame.EFConst.CardBattleResult
enum class ECardBattleResult : uint8_t
{
	CARD_BATTLE_RESULT_WIN         = 0,
	CARD_BATTLE_RESULT_LOSE        = 1,
	CARD_BATTLE_RESULT_MAX         = 2
};


// Enum EFGame.EFConst.CardAbilityType
enum class ECardAbilityType : uint8_t
{
	CARD_ABILITY_TYPE_INCREASE_ATTACK = 0,
	CARD_ABILITY_TYPE_DECREASE_ATTACK = 1,
	CARD_ABILITY_TYPE_VICTORY      = 2,
	CARD_ABILITY_TYPE_REMOVE_CARD  = 3,
	CARD_ABILITY_TYPE_REMOVE_SLOT  = 4,
	CARD_ABILITY_TYPE_SUMMON_CARD  = 5,
	CARD_ABILITY_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.CardPatternType
enum class ECardPatternType : uint8_t
{
	CARD_PATTERN_TYPE_BATTLE_CRY   = 0,
	CARD_PATTERN_TYPE_ECHO_OF_DEATH = 1,
	CARD_PATTERN_TYPE_SHOUTS_OF_VICTORY = 2,
	CARD_PATTERN_TYPE_AURA         = 3,
	CARD_PATTERN_TYPE_SPECIAL      = 4,
	CARD_PATTERN_TYPE_HEROIC       = 5,
	CARD_PATTERN_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.CardAbilityConditionType
enum class ECardAbilityConditionType : uint8_t
{
	CARD_ABILITY_CONDITION_TYPE_NONE = 0,
	CARD_ABILITY_CONDITION_TYPE_FIELD = 1,
	CARD_ABILITY_CONDITION_TYPE_FIRST_DEPLOYED = 2,
	CARD_ABILITY_CONDITION_TYPE_SIDE_SPECIES = 3,
	CARD_ABILITY_CONDITION_TYPE_SIDE_ELEMENT = 4,
	CARD_ABILITY_CONDITION_TYPE_TARGET_SPECIES = 5,
	CARD_ABILITY_CONDITION_TYPE_TARGET_ELEMENT = 6,
	CARD_ABILITY_CONDITION_TYPE_MAX = 7
};


// Enum EFGame.EFConst.CardAbilityExecType
enum class ECardAbilityExecType : uint8_t
{
	CARD_ABILITY_EXEC_TYPE_DEPLOYED = 0,
	CARD_ABILITY_EXEC_TYPE_DEFEATED = 1,
	CARD_ABILITY_EXEC_TYPE_VICTORY = 2,
	CARD_ABILITY_EXEC_TYPE_AURA    = 3,
	CARD_ABILITY_EXEC_TYPE_BATTLE_START = 4,
	CARD_ABILITY_EXEC_TYPE_ALL_MANA_ACQUIRED = 5,
	CARD_ABILITY_EXEC_TYPE_MAX     = 6
};


// Enum EFGame.EFConst.CardAbilityFilter
enum class ECardAbilityFilter : uint8_t
{
	CARD_ABILITY_FILTER_NONE       = 0,
	CARD_ABILITY_FILTER_MY_CARD_DEPLOYED_BEFORE = 1,
	CARD_ABILITY_FILTER_MY_CARD    = 2,
	CARD_ABILITY_FILTER_TARGET_CARD = 3,
	CARD_ABILITY_FILTER_MAX        = 4
};


// Enum EFGame.EFConst.CardAbilityTargetPosition
enum class ECardAbilityTargetPosition : uint8_t
{
	CARD_ABILITY_TARGET_POSITION_FRONT = 0,
	CARD_ABILITY_TARGET_POSITION_SIDE = 1,
	CARD_ABILITY_TARGET_POSITION_ALL = 2,
	CARD_ABILITY_TARGET_POSITION_MAX = 3
};


// Enum EFGame.EFConst.CardSortType
enum class ECardSortType : uint8_t
{
	CARD_SORT_TYPE_NONE            = 0,
	CARD_SORT_TYPE_GRADE_ASC       = 1,
	CARD_SORT_TYPE_GRADE_DESC      = 2,
	CARD_SORT_TYPE_DECK_COST_ASC   = 3,
	CARD_SORT_TYPE_DECK_COST_DESC  = 4,
	CARD_SORT_TYPE_AWAKE_STEP_ASC  = 5,
	CARD_SORT_TYPE_AWAKE_STEP_DESC = 6,
	CARD_SORT_TYPE_ATTACK_ASC      = 7,
	CARD_SORT_TYPE_ATTACK_DESC     = 8,
	CARD_SORT_TYPE_HP_ASC          = 9,
	CARD_SORT_TYPE_HP_DESC         = 10,
	CARD_SORT_TYPE_MAX             = 11
};


// Enum EFGame.EFConst.CardSecondSortType
enum class ECardSecondSortType : uint8_t
{
	CARD_SECOND_SORT_TYPE_NONE     = 0,
	CARD_SECOND_SORT_TYPE_ATTACK_ASC = 1,
	CARD_SECOND_SORT_TYPE_ATTACK_DESC = 2,
	CARD_SECOND_SORT_TYPE_HP_ASC   = 3,
	CARD_SECOND_SORT_TYPE_HP_DESC  = 4,
	CARD_SECOND_SORT_TYPE_MAX      = 5
};


// Enum EFGame.EFConst.CrewGrade
enum class ECrewGrade : uint8_t
{
	CREW_GRADE_COMMON              = 0,
	CREW_GRADE_UNCOMMON            = 1,
	CREW_GRADE_RARE                = 2,
	CREW_GRADE_EPIC                = 3,
	CREW_GRADE_LEGEND              = 4,
	CREW_GRADE_RELIC               = 5,
	CREW_GRADE_MAX                 = 6
};


// Enum EFGame.EFConst.CinematicSyncType
enum class ECinematicSyncType : uint8_t
{
	CINEMATIC_SYNC_TYPE_NONE       = 0,
	CINEMATIC_SYNC_TYPE_PLAYER     = 1,
	CINEMATIC_SYNC_TYPE_ACTIVATOR  = 2,
	CINEMATIC_SYNC_TYPE_PARTYLEADER = 3,
	CINEMATIC_SYNC_TYPE_PARTYMEMBER = 4,
	CINEMATIC_SYNC_TYPE_NPC        = 5,
	CINEMATIC_SYNC_TYPE_DRIVENVEHICLE = 6,
	CINEMATIC_SYNC_TYPE_VEHICLE    = 7,
	CINEMATIC_SYNC_TYPE_WEAPON1    = 8,
	CINEMATIC_SYNC_TYPE_WEAPON2    = 9,
	CINEMATIC_SYNC_TYPE_WEAPON3    = 10,
	CINEMATIC_SYNC_TYPE_MAX        = 11
};


// Enum EFGame.EFConst.ContentsBookmarkType
enum class EContentsBookmarkType : uint8_t
{
	CONTENTS_BOOKMARK_TYPE_MARKET_SEARCH = 0,
	CONTENTS_BOOKMARK_TYPE_AUCTION_SEARCH = 1,
	CONTENTS_BOOKMARK_TYPE_ACCOUNT_CARD_ID = 2,
	CONTENTS_BOOKMARK_TYPE_ACCOUNT_CARD_BOOK = 3,
	CONTENTS_BOOKMARK_TYPE_MARKET_WATCH = 4,
	CONTENTS_BOOKMARK_TYPE_ENGRAVE = 5,
	CONTENTS_BOOKMARK_TYPE_MAX     = 6
};


// Enum EFGame.EFConst.ContentsConfigType
enum class EContentsConfigType : uint8_t
{
	CONTENTS_CONFIG_TYPE_QUEST     = 0,
	CONTENTS_CONFIG_TYPE_RECIPE_FAVORITE = 1,
	CONTENTS_CONFIG_TYPE_CALENDAR  = 2,
	CONTENTS_CONFIG_TYPE_TOWN_RECIPE_FAVORITE = 3,
	CONTENTS_CONFIG_TYPE_WIDGET    = 4,
	CONTENTS_CONFIG_TYPE_TUTORIAL  = 5,
	CONTENTS_CONFIG_TYPE_WIDGET_COUNT = 6,
	CONTENTS_CONFIG_TYPE_ITEM_AUTO_DISASSEMBLY = 7,
	CONTENTS_CONFIG_TYPE_WIDGET_VERSION = 8,
	CONTENTS_CONFIG_TYPE_TOKEN_ITEM = 9,
	CONTENTS_CONFIG_TYPE_UNUSED    = 10,
	CONTENTS_CONFIG_TYPE_GEM_AUTO_MERGE = 11,
	CONTENTS_CONFIG_TYPE_CHAT_MACRO = 12,
	CONTENTS_CONFIG_TYPE_MAX       = 13
};


// Enum EFGame.EFConst.ContentsDateType
enum class EContentsDateType : uint8_t
{
	CONTENTS_DATE_TYPE_NONE        = 0,
	CONTENTS_DATE_TYPE_BATTLEFIELD_WEEKLY_RESET = 1,
	CONTENTS_DATE_TYPE_GUILD_DISTRIBUTION = 2,
	CONTENTS_DATE_TYPE_GUILD_DAILY_INIT = 3,
	CONTENTS_DATE_TYPE_MAX         = 4
};


// Enum EFGame.EFConst.CharacterTendencyType
enum class ECharacterTendencyType : uint8_t
{
	CHARACTER_TENDENCY_TYPE_NONE   = 0,
	CHARACTER_TENDENCY_TYPE_INTELLECT = 1,
	CHARACTER_TENDENCY_TYPE_COURAGE = 2,
	CHARACTER_TENDENCY_TYPE_CHARM  = 3,
	CHARACTER_TENDENCY_TYPE_KINDNESS = 4,
	CHARACTER_TENDENCY_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.CharacterTendencyContentsType
enum class ECharacterTendencyContentsType : uint8_t
{
	CHARACTER_TENDENCY_CONTENTS_TYPE_NONE = 0,
	CHARACTER_TENDENCY_CONTENTS_TYPE_QUEST = 1,
	CHARACTER_TENDENCY_CONTENTS_TYPE_MAX = 2
};


// Enum EFGame.EFConst.ClientSummonSyncMoveType
enum class EClientSummonSyncMoveType : uint8_t
{
	CLIENT_SUMMON_SYNC_MOVE_TYPE_ENABLE = 0,
	CLIENT_SUMMON_SYNC_MOVE_TYPE_CTOS = 1,
	CLIENT_SUMMON_SYNC_MOVE_TYPE_DISABLE = 2,
	CLIENT_SUMMON_SYNC_MOVE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ClientSummonSyncSkillType
enum class EClientSummonSyncSkillType : uint8_t
{
	CLIENT_SUMMON_SYNC_SKILL_TYPE_ENABLE = 0,
	CLIENT_SUMMON_SYNC_SKILL_TYPE_CTOS = 1,
	CLIENT_SUMMON_SYNC_SKILL_TYPE_DISABLE = 2,
	CLIENT_SUMMON_SYNC_SKILL_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ClientSummonDetectType
enum class EClientSummonDetectType : uint8_t
{
	CLIENT_SUMMON_DETECT_TYPE_ALL  = 0,
	CLIENT_SUMMON_DETECT_TYPE_ENEMY = 1,
	CLIENT_SUMMON_DETECT_TYPE_ARCHAEOLOGY = 2,
	CLIENT_SUMMON_DETECT_TYPE_DISABLE = 3,
	CLIENT_SUMMON_DETECT_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.CurrencyMask
enum class ECurrencyMask : uint8_t
{
	CURRENCY_MASK_NONE             = 0,
	CURRENCY_MASK_BOTH             = 1,
	CURRENCY_MASK_CASH_ONLY        = 2,
	CURRENCY_MASK_MONEY_ONLY       = 3,
	CURRENCY_MASK_MAX              = 4
};


// Enum EFGame.EFConst.CoopPeopleLevel
enum class ECoopPeopleLevel : uint8_t
{
	COOP_PEOPLE_LEVEL_NONE         = 0,
	COOP_PEOPLE_LEVEL              = 1,
	COOP_PEOPLE_LEVEL01            = 2,
	COOP_PEOPLE_LEVEL02            = 3,
	COOP_PEOPLE_LEVEL03            = 4,
	COOP_PEOPLE_LEVEL04            = 5,
	COOP_PEOPLE_LEVEL_MAX          = 6
};


// Enum EFGame.EFConst.CoopQuestLeaveReason
enum class ECoopQuestLeaveReason : uint8_t
{
	COOP_QUEST_LEAVE_REASON_NONE   = 0,
	COOP_QUEST_LEAVE_REASON_USER   = 1,
	COOP_QUEST_LEAVE_REASON_SHIP_WRECK = 2,
	COOP_QUEST_LEAVE_REASON_PARTY_JOINED = 3,
	COOP_QUEST_LEAVE_REASON_MAX    = 4
};


// Enum EFGame.EFConst.CalendarContentsType
enum class ECalendarContentsType : uint8_t
{
	CALENDAR_CONTENTS_TYPE_NONE    = 0,
	CALENDAR_CONTENTS_TYPE_WORLD_EVENT = 1,
	CALENDAR_CONTENTS_TYPE_HOT_TIME = 2,
	CALENDAR_CONTENTS_TYPE_ETC     = 3,
	CALENDAR_CONTENTS_TYPE_BATTLEFIELD = 4,
	CALENDAR_CONTENTS_TYPE_MAX     = 5
};


// Enum EFGame.EFConst.CalendarCommandType
enum class ECalendarCommandType : uint8_t
{
	CALENDAR_COMMAND_TYPE_NONE     = 0,
	CALENDAR_COMMAND_TYPE_CREATE   = 1,
	CALENDAR_COMMAND_TYPE_UPDATE   = 2,
	CALENDAR_COMMAND_TYPE_DELETE   = 3,
	CALENDAR_COMMAND_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.ConsumeRecordType
enum class EConsumeRecordType : uint8_t
{
	CONSUME_RECORD_TYPE_NONE       = 0,
	CONSUME_RECORD_TYPE_REVERSE_RUIN_COST = 1,
	CONSUME_RECORD_TYPE_REVERSE_RUIN_REST = 2,
	CONSUME_RECORD_TYPE_EPIC_GATE_ENTER_COST = 3,
	CONSUME_RECORD_TYPE_ABYSS_RAID_ENTER_COST = 4,
	CONSUME_RECORD_TYPE_NORMAL_RAID_REWARD = 5,
	CONSUME_RECORD_TYPE_DIFFICULTY_RAID_REWARD = 6,
	CONSUME_RECORD_TYPE_NORMAL_RAID_REST_GAUGE = 7,
	CONSUME_RECORD_TYPE_EPIC_GATE_CHECKPOINT = 8,
	CONSUME_RECORD_TYPE_MAX        = 9
};


// Enum EFGame.EFConst.DevShapeType
enum class EDevShapeType : uint8_t
{
	DEV_SHAPE_TYPE_LINE            = 0,
	DEV_SHAPE_TYPE_SPHERE          = 1,
	DEV_SHAPE_TYPE_BOX             = 2,
	DEV_SHAPE_TYPE_PIE             = 3,
	DEV_SHAPE_TYPE_CAPSULE         = 4,
	DEV_SHAPE_TYPE_MAX             = 5
};


// Enum EFGame.EFConst.DevMessageType
enum class EDevMessageType : uint8_t
{
	DEV_MESSAGE_TYPE_THREAT        = 0,
	DEV_MESSAGE_TYPE_VOYAGE_EVENT_GAUGE = 1,
	DEV_MESSAGE_TYPE_BOSSRUSH_REWARD = 2,
	DEV_MESSAGE_TYPE_PVP_DATA      = 3,
	DEV_MESSAGE_TYPE_PVP_DATA_AUX_DAMAGE = 4,
	DEV_MESSAGE_TYPE_PVP_DATA_AUX_DOWN_TIME = 5,
	DEV_MESSAGE_TYPE_BUFF          = 6,
	DEV_MESSAGE_TYPE_PROP_CONTRIBUTION = 7,
	DEV_MESSAGE_TYPE_PROBABILITY   = 8,
	DEV_MESSAGE_TYPE_STAT          = 9,
	DEV_MESSAGE_TYPE_NPC_INFO      = 10,
	DEV_MESSAGE_TYPE_MAX           = 11
};


// Enum EFGame.EFConst.DamageType
enum class EDamageType : uint8_t
{
	DAMAGE_TYPE_PHYSICS            = 0,
	DAMAGE_TYPE_MAGIC              = 1,
	DAMAGE_TYPE_MAX                = 2
};


// Enum EFGame.EFConst.DamageAttr
enum class EDamageAttr : uint8_t
{
	DAMAGE_ATTR_NONE               = 0,
	DAMAGE_ATTR_FIRE               = 1,
	DAMAGE_ATTR_ICE                = 2,
	DAMAGE_ATTR_ELECTRICITY        = 3,
	DAMAGE_ATTR_WIND               = 4,
	DAMAGE_ATTR_EARTH              = 5,
	DAMAGE_ATTR_DARK               = 6,
	DAMAGE_ATTR_HOLY               = 7,
	DAMAGE_ATTR_MAX                = 8
};


// Enum EFGame.EFConst.DamageApplyMethod
enum class EDamageApplyMethod : uint8_t
{
	DAMAGE_APPLY_METHOD_NORMAL     = 0,
	DAMAGE_APPLY_METHOD_COUNT      = 1,
	DAMAGE_APPLY_METHOD_MAX        = 2
};


// Enum EFGame.EFConst.DamageSharingType
enum class EDamageSharingType : uint8_t
{
	DAMAGE_SHARING_TYPE_NONE       = 0,
	DAMAGE_SHARING_TYPE_MASTER     = 1,
	DAMAGE_SHARING_TYPE_SLAVE      = 2,
	DAMAGE_SHARING_TYPE_SHARING    = 3,
	DAMAGE_SHARING_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.DayOfWeekType
enum class EDayOfWeekType : uint8_t
{
	DAY_OF_WEEK_TYPE_NONE          = 0,
	DAY_OF_WEEK_TYPE_MONDAY        = 1,
	DAY_OF_WEEK_TYPE_TUESDAY       = 2,
	DAY_OF_WEEK_TYPE_WEDNESDAY     = 3,
	DAY_OF_WEEK_TYPE_THURSDAY      = 4,
	DAY_OF_WEEK_TYPE_FRIDAY        = 5,
	DAY_OF_WEEK_TYPE_SATURDAY      = 6,
	DAY_OF_WEEK_TYPE_SUNDAY        = 7,
	DAY_OF_WEEK_TYPE_MAX           = 8
};


// Enum EFGame.EFConst.DeathAttrType
enum class EDeathAttrType : uint8_t
{
	DEATH_ATTR_TYPE_NORMAL         = 0,
	DEATH_ATTR_TYPE_FREEZE         = 1,
	DEATH_ATTR_TYPE_STONE          = 2,
	DEATH_ATTR_TYPE_POISON         = 3,
	DEATH_ATTR_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.DialogActionType
enum class EDialogActionType : uint8_t
{
	DIALOG_ACTION_TYPE_TALK        = 0,
	DIALOG_ACTION_TYPE_OFFER_STAGEOPTION = 1,
	DIALOG_ACTION_TYPE_SHOP        = 2,
	DIALOG_ACTION_TYPE_CONVOY      = 3,
	DIALOG_ACTION_TYPE_MAX         = 4
};


// Enum EFGame.EFConst.DisposeIdType
enum class EDisposeIdType : uint8_t
{
	DISPOSE_ID_TYPE_NONE           = 0,
	DISPOSE_ID_TYPE_ITEM           = 1,
	DISPOSE_ID_TYPE_QUEST          = 2,
	DISPOSE_ID_TYPE_ZONE           = 3,
	DISPOSE_ID_TYPE_SKILL          = 4,
	DISPOSE_ID_TYPE_MAX            = 5
};


// Enum EFGame.EFConst.DropEntityType
enum class EDropEntityType : uint8_t
{
	DROP_ENTITY_TYPE_NA            = 0,
	DROP_ENTITY_TYPE_ITEM          = 1,
	DROP_ENTITY_TYPE_MONEY         = 2,
	DROP_ENTITY_TYPE_ETHER         = 3,
	DROP_ENTITY_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.DuelResultType
enum class EDuelResultType : uint8_t
{
	DUEL_RESULT_TYPE_NONE          = 0,
	DUEL_RESULT_TYPE_OUTOFRANGE    = 1,
	DUEL_RESULT_TYPE_GIVEUP        = 2,
	DUEL_RESULT_TYPE_DRAW_TIMEOUT  = 3,
	DUEL_RESULT_TYPE_NPC           = 4,
	DUEL_RESULT_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.DungeonEnterType
enum class EDungeonEnterType : uint8_t
{
	DUNGEON_ENTER_TYPE_NONE        = 0,
	DUNGEON_ENTER_TYPE_DIRECT      = 1,
	DUNGEON_ENTER_TYPE_MATCH       = 2,
	DUNGEON_ENTER_TYPE_DIRECT_MATCH = 3,
	DUNGEON_ENTER_TYPE_MAX         = 4
};


// Enum EFGame.EFConst.DungeonEntryCostType
enum class EDungeonEntryCostType : uint8_t
{
	DUNGEON_ENTRY_COST_TYPE_MEMBER = 0,
	DUNGEON_ENTRY_COST_TYPE_PARTY_LEADER = 1,
	DUNGEON_ENTRY_COST_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.DungeonPartyBalanceType
enum class EDungeonPartyBalanceType : uint8_t
{
	DUNGEON_PARTY_BALANCE_TYPE_NONE = 0,
	DUNGEON_PARTY_BALANCE_TYPE_FINAL_DMG_RATE = 1,
	DUNGEON_PARTY_BALANCE_TYPE_HP_RATE = 2,
	DUNGEON_PARTY_BALANCE_TYPE_PARALYZATION_RATE = 3,
	DUNGEON_PARTY_BALANCE_TYPE_EXP_RATE = 4,
	DUNGEON_PARTY_BALANCE_TYPE_MONEY_RATE = 5,
	DUNGEON_PARTY_BALANCE_TYPE_ITEM_DROP_RATE = 6,
	DUNGEON_PARTY_BALANCE_TYPE_MONEY_DROP_RATE = 7,
	DUNGEON_PARTY_BALANCE_TYPE_GROGGY_POINT_RATE = 8,
	DUNGEON_PARTY_BALANCE_TYPE_PARALYZATION_HIT_CHECK_TICK_RATE = 9,
	DUNGEON_PARTY_BALANCE_TYPE_PARALYZATION_DECREASE_RATE = 10,
	DUNGEON_PARTY_BALANCE_TYPE_GROGGY_MAINTAINING_TIME_RATE = 11,
	DUNGEON_PARTY_BALANCE_TYPE_GROGGY_DECREMENT_RATE = 12,
	DUNGEON_PARTY_BALANCE_TYPE_PARTS_HP_RATE = 13,
	DUNGEON_PARTY_BALANCE_TYPE_MAX = 14
};


// Enum EFGame.EFConst.DropBaseRewardType
enum class EDropBaseRewardType : uint8_t
{
	DROPBASE_REWARD_TYPE_ENTITY    = 0,
	DROPBASE_REWARD_TYPE_SMART     = 1,
	DROPBASE_REWARD_TYPE_MAX       = 2
};


// Enum EFGame.EFConst.DropSourceType
enum class EDropSourceType : uint8_t
{
	DROP_SOURCE_TYPE_DEFAULT       = 0,
	DROP_SOURCE_TYPE_NPC           = 1,
	DROP_SOURCE_TYPE_PROP          = 2,
	DROP_SOURCE_TYPE_BOX           = 3,
	DROP_SOURCE_TYPE_VFM           = 4,
	DROP_SOURCE_TYPE_FAM_PRODUCT   = 5,
	DROP_SOURCE_TYPE_SHOP          = 6,
	DROP_SOURCE_TYPE_QUEST         = 7,
	DROP_SOURCE_TYPE_NPC_FRIENDSHIP = 8,
	DROP_SOURCE_TYPE_STAGE_PER_REWARD = 9,
	DROP_SOURCE_TYPE_PC_DROP       = 10,
	DROP_SOURCE_TYPE_MAX           = 11
};


// Enum EFGame.EFConst.DropLimitRefreshType
enum class EDropLimitRefreshType : uint8_t
{
	DROPLIMIT_REFRESH_TYPE_NONE    = 0,
	DROPLIMIT_REFRESH_TYPE_DAILY   = 1,
	DROPLIMIT_REFRESH_TYPE_HOURLY  = 2,
	DROPLIMIT_REFRESH_TYPE_WEEKLY  = 3,
	DROPLIMIT_REFRESH_TYPE_SEASON  = 4,
	DROPLIMIT_REFRESH_TYPE_MAX     = 5
};


// Enum EFGame.EFConst.DropBaseLimitRefreshType
enum class EDropBaseLimitRefreshType : uint8_t
{
	DROP_BASE_LIMIT_REFRESH_TYPE_NONE = 0,
	DROP_BASE_LIMIT_REFRESH_TYPE_DAILY = 1,
	DROP_BASE_LIMIT_REFRESH_TYPE_HOURLY = 2,
	DROP_BASE_LIMIT_REFRESH_TYPE_WEEKLY = 3,
	DROP_BASE_LIMIT_REFRESH_TYPE_PERMANENT = 4,
	DROP_BASE_LIMIT_REFRESH_TYPE_MAX = 5
};


// Enum EFGame.EFConst.DynamicIslandBeaconType
enum class EDynamicIslandBeaconType : uint8_t
{
	DYNAMIC_ISLAND_BEACON_TYPE_SIGN = 0,
	DYNAMIC_ISLAND_BEACON_TYPE_ENTRY = 1,
	DYNAMIC_ISLAND_BEACON_TYPE_MAX = 2
};


// Enum EFGame.EFConst.EquipSlot
enum class EquipSlot : uint8_t
{
	EQUIP_SLOT_WEAPON              = 0,
	EQUIP_SLOT_HEAD                = 1,
	EQUIP_SLOT_UPPER_BODY          = 2,
	EQUIP_SLOT_LOWER_BODY          = 3,
	EQUIP_SLOT_HAND                = 4,
	EQUIP_SLOT_SHOULDER            = 5,
	EQUIP_SLOT_NECK                = 6,
	EQUIP_SLOT_EAR1                = 7,
	EQUIP_SLOT_EAR2                = 8,
	EQUIP_SLOT_FINGER1             = 9,
	EQUIP_SLOT_FINGER2             = 10,
	EQUIP_SLOT_ABILITY_STONE       = 11,
	EQUIP_SLOT_AVATAR_WEAPON       = 12,
	EQUIP_SLOT_AVATAR_HEAD         = 13,
	EQUIP_SLOT_AVATAR_UPPER_BODY   = 14,
	EQUIP_SLOT_AVATAR_LOWER_BODY   = 15,
	EQUIP_SLOT_AVATAR_INSTRUMENT   = 16,
	EQUIP_SLOT_AVATAR_FACE1        = 17,
	EQUIP_SLOT_AVATAR_FACE2        = 18,
	EQUIP_SLOT_AVATAR_WEAPON_OUTFIT = 19,
	EQUIP_SLOT_AVATAR_HEAD_OUTFIT  = 20,
	EQUIP_SLOT_AVATAR_UPPER_BODY_OUTFIT = 21,
	EQUIP_SLOT_AVATAR_LOWER_BODY_OUTFIT = 22,
	EQUIP_SLOT_AVATAR_INSTRUMENT_OUTFIT = 23,
	EQUIP_SLOT_AVATAR_FACE1_OUTFIT = 24,
	EQUIP_SLOT_AVATAR_FACE2_OUTFIT = 25,
	EQUIP_SLOT_BRACELET            = 26,
	EQUIP_SLOT_ASSISTANCE_VOYAGE   = 27,
	EQUIP_SLOT_ASSISTANCE_LIFE     = 28,
	EQUIP_SLOT_ASSISTANCE_COMBAT   = 29,
	EQUIP_SLOT_MAX                 = 30
};


// Enum EFGame.EFConst.BasicEquipPresetIndex
enum class EBasicEquipPresetIndex : uint8_t
{
	BASIC_EQUIP_PRESET_INDEX_WEAPON = 0,
	BASIC_EQUIP_PRESET_INDEX_HEAD  = 1,
	BASIC_EQUIP_PRESET_INDEX_UPPER_BODY = 2,
	BASIC_EQUIP_PRESET_INDEX_LOWER_BODY = 3,
	BASIC_EQUIP_PRESET_INDEX_HAND  = 4,
	BASIC_EQUIP_PRESET_INDEX_SHOULDER = 5,
	BASIC_EQUIP_PRESET_INDEX_NECK  = 6,
	BASIC_EQUIP_PRESET_INDEX_EAR1  = 7,
	BASIC_EQUIP_PRESET_INDEX_EAR2  = 8,
	BASIC_EQUIP_PRESET_INDEX_FINGER1 = 9,
	BASIC_EQUIP_PRESET_INDEX_FINGER2 = 10,
	BASIC_EQUIP_PRESET_INDEX_ABILITY_STONE = 11,
	BASIC_EQUIP_PRESET_INDEX_BRACELET = 12,
	BASIC_EQUIP_PRESET_INDEX_VOYAGE = 13,
	BASIC_EQUIP_PRESET_INDEX_LIFE  = 14,
	BASIC_EQUIP_PRESET_INDEX_COMBAT = 15,
	BASIC_EQUIP_PRESET_INDEX_MAX   = 16
};


// Enum EFGame.EFConst.AvatarEquipPresetIndex
enum class EAvatarEquipPresetIndex : uint8_t
{
	AVATAR_EQUIP_PRESET_INDEX_WEAPON = 0,
	AVATAR_EQUIP_PRESET_INDEX_HEAD = 1,
	AVATAR_EQUIP_PRESET_INDEX_UPPER_BODY = 2,
	AVATAR_EQUIP_PRESET_INDEX_LOWER_BODY = 3,
	AVATAR_EQUIP_PRESET_INDEX_INSTRUMENT = 4,
	AVATAR_EQUIP_PRESET_INDEX_FACE1 = 5,
	AVATAR_EQUIP_PRESET_INDEX_FACE2 = 6,
	AVATAR_EQUIP_PRESET_INDEX_WEAPON_OUTFIT = 7,
	AVATAR_EQUIP_PRESET_INDEX_HEAD_OUTFIT = 8,
	AVATAR_EQUIP_PRESET_INDEX_UPPER_BODY_OUTFIT = 9,
	AVATAR_EQUIP_PRESET_INDEX_LOWER_BODY_OUTFIT = 10,
	AVATAR_EQUIP_PRESET_INDEX_INSTRUMENT_OUTFIT = 11,
	AVATAR_EQUIP_PRESET_INDEX_FACE1_OUTFIT = 12,
	AVATAR_EQUIP_PRESET_INDEX_FACE2_OUTFIT = 13,
	AVATAR_EQUIP_PRESET_INDEX_MAX  = 14
};


// Enum EFGame.EFConst.EngravePresetIndex
enum class EngravePresetIndex : uint8_t
{
	ENGRAVE_PRESET_INDEX           = 0,
	ENGRAVE_PRESET_INDEX01         = 1,
	ENGRAVE_PRESET_INDEX_MAX       = 2
};


// Enum EFGame.EFConst.EquipCategory
enum class EquipCategory : uint8_t
{
	EQUIP_CATEGORY_NA              = 0,
	EQUIP_CATEGORY_WEAPON          = 1,
	EQUIP_CATEGORY_ARMOR_HELMET    = 2,
	EQUIP_CATEGORY_ARMOR_TOP       = 3,
	EQUIP_CATEGORY_ARMOR_PANTS     = 4,
	EQUIP_CATEGORY_ARMOR_GLOVE     = 5,
	EQUIP_CATEGORY_ARMOR_PAULDRON  = 6,
	EQUIP_CATEGORY_ACCESSORY_NECKLACE = 7,
	EQUIP_CATEGORY_ACCESSORY_EARRING = 8,
	EQUIP_CATEGORY_ACCESSORY_RING  = 9,
	EQUIP_CATEGORY_ACCESSORY_BRACELET = 10,
	EQUIP_CATEGORY_ASSISTANCE_VOYGE = 11,
	EQUIP_CATEGORY_ASSISTANCE_LIFE = 12,
	EQUIP_CATEGORY_ASSISTANCE_COMBAT = 13,
	EQUIP_CATEGORY_MAX             = 14
};


// Enum EFGame.EFConst.EliteNpcAbilityType
enum class EliteNpcAbilityType : uint8_t
{
	ELITE_NPC_ABILITY_TYPE_INVINCIBILITY = 0,
	ELITE_NPC_ABILITY_TYPE_QUICKNESS = 1,
	ELITE_NPC_ABILITY_TYPE_SELF_CLONE = 2,
	ELITE_NPC_ABILITY_TYPE_SUPER_ARMOR = 3,
	ELITE_NPC_ABILITY_TYPE_INVISIBILITY = 4,
	ELITE_NPC_ABILITY_TYPE_DEATH_SUPER_ARMOR = 5,
	ELITE_NPC_ABILITY_TYPE_DEATH_RECOVERY = 6,
	ELITE_NPC_ABILITY_TYPE_DARK_PROJECTILE = 7,
	ELITE_NPC_ABILITY_TYPE_FEAR_PROJECTILE = 8,
	ELITE_NPC_ABILITY_TYPE_MAX     = 9
};


// Enum EFGame.EFConst.EFKEYSLOT
enum class EFKEYSLOT : uint8_t
{
	EFKEYSLOT_First                = 0,
	EFKEYSLOT_GamePad              = 1,
	EFKEYSLOT_MAX                  = 2
};


// Enum EFGame.EFConst.EFKEY_HotKeyUIType
enum class EFKEY_HotKeyUIType : uint8_t
{
	EFKEY_HotKeyUIType_Action      = 0,
	EFKEY_HotKeyUIType_Voyage      = 1,
	EFKEY_HotKeyUIType_Skill       = 2,
	EFKEY_HotKeyUIType_Item        = 3,
	EFKEY_HotKeyUIType_Menu        = 4,
	EFKEY_HotKeyUIType_System      = 5,
	EFKEY_HotKeyUIType_Town        = 6,
	EFKEY_HotKeyUIType_Max         = 7
};


// Enum EFGame.EFConst.EFHOTKEY_APPLY_MODE
enum class EFHOTKEY_APPLY_MODE : uint8_t
{
	EFHOTKEY_APPLY_MODE_BASESYSTEM = 0,
	EFHOTKEY_APPLY_MODE_ACTION     = 1,
	EFHOTKEY_APPLY_MODE_VOYAGE     = 2,
	EFHOTKEY_APPLY_MODE_BATTLEFILED_GUILD_MANAGER = 3,
	EFHOTKEY_APPLY_MODE_BATTLEFILED_GUILD_MEMBER = 4,
	EFHOTKEY_APPLY_MODE_BATTLEFILED_GUILD_COOPERATOR = 5,
	EFHOTKEY_APPLY_MODE_TOWN       = 6,
	EFHOTKEY_APPLY_MODE_ESTHER_SKILL = 7,
	EFHOTKEY_APPLY_MODE_TRAINING_ROOM = 8,
	EFHOTKEY_APPLY_MODE_MAX        = 9
};


// Enum EFGame.EFConst.EFKEY_Function
enum class EFKEY_Function : uint8_t
{
	EFKEY_n_None                   = 0,
	EFKEY_n_Action_Move            = 1,
	EFKEY_n_Action_Awakening_Skill = 2,
	EFKEY_n_Action_Attack          = 3,
	EFKEY_n_Action_Attack_Sub      = 4,
	EFKEY_n_Action_Attack_Max      = 5,
	EFKEY_n_Action_SpecialMove     = 6,
	EFKEY_n_Action_HUD_Change      = 7,
	EFKEY_n_Action_Identity        = 8,
	EFKEY_n_Action_Identity2       = 9,
	EFKEY_n_Action_CombatMode      = 10,
	EFKEY_n_Action_Summon_Vehicle  = 11,
	EFKEY_n_Action_AutoAdvance     = 12,
	EFKEY_n_Action_SummonNpc_AIControl = 13,
	EFKEY_n_Action_SmartPing       = 14,
	EFKEY_n_Action_BaseReturn      = 15,
	EFKEY_n_Menu_CharacterInfo     = 16,
	EFKEY_n_Menu_UtilityInfo       = 17,
	EFKEY_n_Menu_ShipInfo          = 18,
	EFKEY_n_Menu_PetInfo           = 19,
	EFKEY_n_Menu_Inventory         = 20,
	EFKEY_n_Menu_SkillBook         = 21,
	EFKEY_n_Menu_LifeSkill         = 22,
	EFKEY_n_Menu_SocialSkill       = 23,
	EFKEY_n_Menu_AllMap            = 24,
	EFKEY_n_Menu_Minimap           = 25,
	EFKEY_n_Menu_ExtandMinimap     = 26,
	EFKEY_n_Menu_Music             = 27,
	EFKEY_n_Menu_Guild             = 28,
	EFKEY_n_Menu_Party             = 29,
	EFKEY_n_Menu_Friends           = 30,
	EFKEY_n_Menu_ContentsWindow    = 31,
	EFKEY_n_Menu_Quest             = 32,
	EFKEY_n_Menu_Achievement       = 33,
	EFKEY_n_Menu_BookOfAdventure   = 34,
	EFKEY_n_Menu_Intimate          = 35,
	EFKEY_n_Menu_VictoryCrest      = 36,
	EFKEY_n_Menu_InGameShop        = 37,
	EFKEY_n_Menu_Card              = 38,
	EFKEY_n_Menu_ItemDictionary    = 39,
	EFKEY_n_Menu_MileStone         = 40,
	EFKEY_n_Menu_Fam               = 41,
	EFKEY_n_Menu_Engrave           = 42,
	EFKEY_n_Menu_PeriodQuest       = 43,
	EFKEY_n_Menu_HonorTitle        = 44,
	EFKEY_n_Menu_Vehicle           = 45,
	EFKEY_n_Menu_GuideBook         = 46,
	EFKEY_n_Menu_Calendar          = 47,
	EFKEY_n_Menu_Cumulative        = 48,
	EFKEY_n_Menu_TownQuestJournal  = 49,
	EFKEY_n_Menu_BattlefieldInfo   = 50,
	EFKEY_n_Menu_PartyMatching     = 51,
	EFKEY_n_Menu_PvPInfo           = 52,
	EFKEY_n_Menu_Pet               = 53,
	EFKEY_n_Menu_TroopEditor       = 54,
	EFKEY_n_Menu_Expedition        = 55,
	EFKEY_n_Menu_Warp              = 56,
	EFKEY_n_Menu_ItemSeal          = 57,
	EFKEY_n_Menu_GachaShop         = 58,
	EFKEY_n_Menu_TrainingMode      = 59,
	EFKEY_n_Menu_TownCommunity     = 60,
	EFKEY_n_Menu_ChallengePreset   = 61,
	EFKEY_n_Menu_Market            = 62,
	EFKEY_n_Menu_IntegratedPreset  = 63,
	EFKEY_n_SystemCancel           = 64,
	EFKEY_n_HUDShow                = 65,
	EFKEY_n_ScreenShot             = 66,
	EFKEY_n_ZoomIn                 = 67,
	EFKEY_n_ZoomOut                = 68,
	EFKEY_n_NameTag                = 69,
	EFKEY_n_DropItemNameTag        = 70,
	EFKEY_n_TargetInteraction      = 71,
	EFKEY_n_Interaction            = 72,
	EFKEY_n_Interaction2           = 73,
	EFKEY_n_MiniMap_ZoomIn         = 74,
	EFKEY_n_MiniMap_ZoomOut        = 75,
	EFKEY_n_ExtandMiniMap_Move     = 76,
	EFKEY_n_ExtandMiniMap_UseSquareHole = 77,
	EFKEY_n_LocalCameraRotation    = 78,
	EFKEY_n_Skill                  = 79,
	EFKEY_n_Skill01                = 80,
	EFKEY_n_Skill02                = 81,
	EFKEY_n_Skill03                = 82,
	EFKEY_n_Skill04                = 83,
	EFKEY_n_Skill05                = 84,
	EFKEY_n_Skill06                = 85,
	EFKEY_n_Skill07                = 86,
	EFKEY_n_Skill_Max              = 87,
	EFKEY_n_ConsumeItem            = 88,
	EFKEY_n_ConsumeItem_Max        = 89,
	EFKEY_n_BattleItem             = 90,
	EFKEY_n_BattleItem01           = 91,
	EFKEY_n_BattleItem02           = 92,
	EFKEY_n_BattleItem03           = 93,
	EFKEY_n_BattleItem_Max         = 94,
	EFKEY_n_QuestItem              = 95,
	EFKEY_n_QuestItem01            = 96,
	EFKEY_n_QuestItem02            = 97,
	EFKEY_n_QuestItem03            = 98,
	EFKEY_n_QuestItem04            = 99,
	EFKEY_n_QuestItem05            = 100,
	EFKEY_n_QuestItem06            = 101,
	EFKEY_n_QuestItem_Max          = 102,
	EFKEY_n_GuildSkill             = 103,
	EFKEY_n_GuildSkill01           = 104,
	EFKEY_n_GuildSkill02           = 105,
	EFKEY_n_GuildSkill03           = 106,
	EFKEY_n_GuildSkill04           = 107,
	EFKEY_n_GuildSkill05           = 108,
	EFKEY_n_GuildSkill06           = 109,
	EFKEY_n_GuildSkill_Max         = 110,
	EFKEY_n_Voyage_Move            = 111,
	EFKEY_n_Voyage_Booster         = 112,
	EFKEY_n_Voyage_Horn            = 113,
	EFKEY_n_Voyage_Anchor          = 114,
	EFKEY_n_Voyage_Cruise          = 115,
	EFKEY_n_Voyage_Avatar_Skill    = 116,
	EFKEY_n_VoiceChat_Ui           = 117,
	EFKEY_n_VoiceChat_Speak        = 118,
	EFKEY_n_VoiceChat_PartyChannel = 119,
	EFKEY_n_VoiceChat_ContentChannel = 120,
	EFKEY_n_VoiceChat_GuildChannel = 121,
	EFKEY_n_OpenChat_UI            = 122,
	EFKEY_n_MouseCursor_Up         = 123,
	EFKEY_n_MouseCursor_Down       = 124,
	EFKEY_n_Town_Placement         = 125,
	EFKEY_n_Town_Management        = 126,
	EFKEY_n_Town_DressRoom         = 127,
	EFKEY_n_Town_Panorama          = 128,
	EFKEY_n_ChatMacro              = 129,
	EFKEY_n_ChatMacro01            = 130,
	EFKEY_n_ChatMacro02            = 131,
	EFKEY_n_ChatMacro03            = 132,
	EFKEY_n_ChatMacro04            = 133,
	EFKEY_n_ChatMacro05            = 134,
	EFKEY_n_ChatMacro06            = 135,
	EFKEY_n_ChatMacro07            = 136,
	EFKEY_n_ChatMacro08            = 137,
	EFKEY_n_ChatMacro09            = 138,
	EFKEY_n_ChatMacro_Max          = 139,
	EFKEY_n_FreeSlot               = 140,
	EFKEY_n_FreeSlot01             = 141,
	EFKEY_n_FreeSlot02             = 142,
	EFKEY_n_FreeSlot03             = 143,
	EFKEY_n_FreeSlot04             = 144,
	EFKEY_n_FreeSlot05             = 145,
	EFKEY_n_FreeSlot_Max           = 146,
	EFKEY_n_ItemSlot_Preset        = 147,
	EFKEY_n_ItemSlot_Preset01      = 148,
	EFKEY_n_ItemSlot_Preset02      = 149,
	EFKEY_n_ItemSlot_Preset03      = 150,
	EFKEY_n_ItemSlot_Preset_Max    = 151,
	EFKEY_n_EpicSkill              = 152,
	EFKEY_n_EpicSkill01            = 153,
	EFKEY_n_EpicSkill02            = 154,
	EFKEY_n_EpicSkill_Max          = 155,
	EFKEY_n_Practice_DamageAnalyzer = 156,
	EFKEY_n_IntegratedPreset       = 157,
	EFKEY_n_IntegratedPreset01     = 158,
	EFKEY_n_IntegratedPreset02     = 159,
	EFKEY_n_IntegratedPreset03     = 160,
	EFKEY_n_IntegratedPreset04     = 161,
	EFKEY_n_MAX                    = 162
};


// Enum EFGame.EFConst.EFKEY_DEVAPPLY
enum class EFKEY_DEVAPPLY : uint8_t
{
	EFKEY_DEVAPPLY_1_DemoDev       = 0,
	EFKEY_DEVAPPLY_2_Dev           = 1,
	EFKEY_DEVAPPLY_3_Demo          = 2,
	EFKEY_DEVAPPLY_MAX             = 3
};


// Enum EFGame.EFConst.EnchantType
enum class EnchantType : uint8_t
{
	ENCHANT_TYPE_NONE              = 0,
	ENCHANT_TYPE_STAT              = 1,
	ENCHANT_TYPE_ATTR              = 2,
	ENCHANT_TYPE_SPECIES           = 3,
	ENCHANT_TYPE_IMMUNITY          = 4,
	ENCHANT_TYPE_ANY               = 5,
	ENCHANT_TYPE_MAX               = 6
};


// Enum EFGame.EFConst.EnchantSlotGrade
enum class EnchantSlotGrade : uint8_t
{
	ENCHANT_SLOT_GRADE_NONE        = 0,
	ENCHANT_SLOT_GRADE_NORMAL      = 1,
	ENCHANT_SLOT_GRADE_AMPLIFED    = 2,
	ENCHANT_SLOT_GRADE_MAX         = 3
};


// Enum EFGame.EFConst.EnchantSlotState
enum class EnchantSlotState : uint8_t
{
	ENCHANT_SLOT_STATE_LOCKED      = 0,
	ENCHANT_SLOT_STATE_NORMAL      = 1,
	ENCHANT_SLOT_STATE_MAX         = 2
};


// Enum EFGame.EFConst.EngraveType
enum class EngraveType : uint8_t
{
	ENGRAVE_TYPE_NONE              = 0,
	ENGRAVE_TYPE_NORMAL            = 1,
	ENGRAVE_TYPE_CLASS             = 2,
	ENGRAVE_TYPE_MAX               = 3
};


// Enum EFGame.EFConst.EngraveGrade
enum class EngraveGrade : uint8_t
{
	ENGRAVE_GRADE_NONE             = 0,
	ENGRAVE_GRADE_01               = 1,
	ENGRAVE_GRADE_02               = 2,
	ENGRAVE_GRADE_03               = 3,
	ENGRAVE_GRADE_04               = 4,
	ENGRAVE_GRADE_05               = 5,
	ENGRAVE_GRADE_MAX              = 6
};


// Enum EFGame.EFConst.EpicGateType
enum class EpicGateType : uint8_t
{
	EPIC_GATE_TYPE_NONE            = 0,
	EPIC_GATE_TYPE_NORMAL          = 1,
	EPIC_GATE_TYPE_HELL            = 2,
	EPIC_GATE_TYPE_COMMANDER       = 3,
	EPIC_GATE_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.ExcessPropertyType
enum class ExcessPropertyType : uint8_t
{
	EXCESS_PROPERTY_TYPE_NONE      = 0,
	EXCESS_PROPERTY_TYPE_ITEM      = 1,
	EXCESS_PROPERTY_TYPE_MONEY     = 2,
	EXCESS_PROPERTY_TYPE_CARD      = 3,
	EXCESS_PROPERTY_TYPE_MAX       = 4
};


// Enum EFGame.EFConst.ExcessPropertyBindType
enum class ExcessPropertyBindType : uint8_t
{
	EXCESS_PROPERTY_BIND_TYPE_CHARACTER = 0,
	EXCESS_PROPERTY_BIND_TYPE_EXPEDITION = 1,
	EXCESS_PROPERTY_BIND_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.ExcessPropertyInsertReason
enum class ExcessPropertyInsertReason : uint8_t
{
	EXCESS_PROPERTY_INSERT_REASON_PENDING_COMMAND = 0,
	EXCESS_PROPERTY_INSERT_REASON_ACHIEVEMENT = 1,
	EXCESS_PROPERTY_INSERT_REASON_MAX = 2
};


// Enum EFGame.EFConst.ExcessPropertyExpireType
enum class ExcessPropertyExpireType : uint8_t
{
	EXCESS_PROPERTY_EXPIRE_TYPE_NONE = 0,
	EXCESS_PROPERTY_EXPIRE_TYPE_INFINITE = 1,
	EXCESS_PROPERTY_EXPIRE_TYPE_DEADLINE = 2,
	EXCESS_PROPERTY_EXPIRE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ExcessPropertyRefTableType
enum class ExcessPropertyRefTableType : uint8_t
{
	EXCESS_PROPERTY_REF_TABLE_TYPE_NONE = 0,
	EXCESS_PROPERTY_REF_TABLE_TYPE_QUEST = 1,
	EXCESS_PROPERTY_REF_TABLE_TYPE_ZONEBASE = 2,
	EXCESS_PROPERTY_REF_TABLE_TYPE_ACHIEVEMENT = 3,
	EXCESS_PROPERTY_REF_TABLE_TYPE_ITEM = 4,
	EXCESS_PROPERTY_REF_TABLE_TYPE_NPC = 5,
	EXCESS_PROPERTY_REF_TABLE_TYPE_PROP = 6,
	EXCESS_PROPERTY_REF_TABLE_TYPE_PVP_LEVEL = 7,
	EXCESS_PROPERTY_REF_TABLE_TYPE_ZONELEVEL = 8,
	EXCESS_PROPERTY_REF_TABLE_TYPE_MAX = 9
};


// Enum EFGame.EFConst.ExpeditionQuestType
enum class ExpeditionQuestType : uint8_t
{
	EXPEDITION_QUEST_TYPE_NONE     = 0,
	EXPEDITION_QUEST_TYPE_PERIOD_DAILY = 1,
	EXPEDITION_QUEST_TYPE_INTIMATE = 2,
	EXPEDITION_QUEST_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ExpeditionLevelAdjustType
enum class ExpeditionLevelAdjustType : uint8_t
{
	EXPEDITION_LEVEL_ADJUST_TYPE_NONE = 0,
	EXPEDITION_LEVEL_ADJUST_TYPE_LEVEL_AND_REWARD = 1,
	EXPEDITION_LEVEL_ADJUST_TYPE_LEVEL = 2,
	EXPEDITION_LEVEL_ADJUST_TYPE_MAX = 3
};


// Enum EFGame.EFConst.EventMissionBindType
enum class EventMissionBindType : uint8_t
{
	EVENT_MISSION_BIND_TYPE_CHARACTER = 0,
	EVENT_MISSION_BIND_TYPE_EXPEDITION = 1,
	EVENT_MISSION_BIND_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.EventMissionCategoryUnlockType
enum class EventMissionCategoryUnlockType : uint8_t
{
	EVENT_MISSION_GATEGORY_UNLOCK_TYPE_NONE = 0,
	EVENT_MISSION_GATEGORY_UNLOCK_TYPE_ITEM_LEVEL = 1,
	EVENT_MISSION_GATEGORY_UNLOCK_TYPE_DATE = 2,
	EVENT_MISSION_GATEGORY_UNLOCK_TYPE_MAX = 3
};


// Enum EFGame.EFConst.EventMissionObjectiveType
enum class EventMissionObjectiveType : uint8_t
{
	EVENT_MISSION_OBJECTIVE_TYPE_NONE = 0,
	EVENT_MISSION_OBJECTIVE_TYPE_DUNGEON_CLEARED = 1,
	EVENT_MISSION_OBJECTIVE_TYPE_RAID_CLEARED = 2,
	EVENT_MISSION_OBJECTIVE_TYPE_PROP_INTERACTION = 3,
	EVENT_MISSION_OBJECTIVE_TYPE_CUBE_STAGE_CLEARED = 4,
	EVENT_MISSION_OBJECTIVE_TYPE_BOSS_NPC_KILL = 5,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_LEVEL = 6,
	EVENT_MISSION_OBJECTIVE_TYPE_CUBE_REWARD_BOX = 7,
	EVENT_MISSION_OBJECTIVE_TYPE_CHAOS_DUNGEON_CLEARED = 8,
	EVENT_MISSION_OBJECTIVE_TYPE_ZONE_VISITED = 9,
	EVENT_MISSION_OBJECTIVE_TYPE_QUEST_COMPLETE = 10,
	EVENT_MISSION_OBJECTIVE_TYPE_FRIENDSHIP_POINT = 11,
	EVENT_MISSION_OBJECTIVE_TYPE_DUNGEON_CLEARED_WITH_LEVEL = 12,
	EVENT_MISSION_OBJECTIVE_TYPE_REVERSE_RUIN_STAGE_CLEARED = 13,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_LEVEL_UP = 14,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_CARVED = 15,
	EVENT_MISSION_OBJECTIVE_TYPE_SKILL_CUSTOMIZED = 16,
	EVENT_MISSION_OBJECTIVE_TYPE_GEM_MERGE = 17,
	EVENT_MISSION_OBJECTIVE_TYPE_ROTATION_ISLAND_REWARD = 18,
	EVENT_MISSION_OBJECTIVE_TYPE_LIFE_ENERGY = 19,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_ACTIVITY_POINT = 20,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_SEAL = 21,
	EVENT_MISSION_OBJECTIVE_TYPE_BOSS_RUSH_STAGE_CLEAR = 22,
	EVENT_MISSION_OBJECTIVE_TYPE_CHAOSGATE_CLEAR = 23,
	EVENT_MISSION_OBJECTIVE_TYPE_COLOSSEUM_STARTED = 24,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ADDED = 25,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_INHERIT_COUNT = 26,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_INHERIT_QUALITY_SUM = 27,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_INHERIT_QUALITY_THRESHOLD = 28,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENHANCE_INHERIT_QUALITY_TARGET = 29,
	EVENT_MISSION_OBJECTIVE_TYPE_PLATINUM_RETURN_COUNT = 30,
	EVENT_MISSION_OBJECTIVE_TYPE_PLATINUM_COOPERATION_COUNT = 31,
	EVENT_MISSION_OBJECTIVE_TYPE_DAILY_QUEST_COMPLETE_COUNT = 32,
	EVENT_MISSION_OBJECTIVE_TYPE_WEEKLY_QUEST_COMPLETE_COUNT = 33,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWER_OF_SHADOW_STAGE_CLEAR = 34,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_COUNT = 35,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_SUCCESS_COUNT = 36,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_OPTION_EXTRACT_FAILURE_COUNT = 37,
	EVENT_MISSION_OBJECTIVE_TYPE_VOYAGE_SHIP_LEVEL_UP = 38,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_DISPATCH_MISSION_COMPLETE = 39,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_ITEM_ASSEMBLY = 40,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_BUILDING_LEVEL_ACHIEVE = 41,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_RESEARCH_COMPLETE = 42,
	EVENT_MISSION_OBJECTIVE_TYPE_CUMULATIVE_POINT_REWARD = 43,
	EVENT_MISSION_OBJECTIVE_TYPE_CUMULATIVE_POINT_TYPE_THRESHOLD = 44,
	EVENT_MISSION_OBJECTIVE_TYPE_ADV_BOOK_REWARD = 45,
	EVENT_MISSION_OBJECTIVE_TYPE_CONTENTS_UNLOCK = 46,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_USE = 47,
	EVENT_MISSION_OBJECTIVE_TYPE_TOWN_LEVEL = 48,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_BARTER = 49,
	EVENT_MISSION_OBJECTIVE_TYPE_EXPEDITION_REWARD = 50,
	EVENT_MISSION_OBJECTIVE_TYPE_DUNGEON_LEAVE_WITH_MUSIC = 51,
	EVENT_MISSION_OBJECTIVE_TYPE_EXPEDITION_MISSION_POINT = 52,
	EVENT_MISSION_OBJECTIVE_TYPE_CARD_DECK_SET_EFFECT = 53,
	EVENT_MISSION_OBJECTIVE_TYPE_ITEM_ENGRAVE_LEVEL = 54,
	EVENT_MISSION_OBJECTIVE_TYPE_COMBINED_PRESET_SAVE = 55,
	EVENT_MISSION_OBJECTIVE_TYPE_CHALLENGE_PRESET_SAVE = 56,
	EVENT_MISSION_OBJECTIVE_TYPE_TRIPOD_SETTING_SAVE = 57,
	EVENT_MISSION_OBJECTIVE_TYPE_COOP_QUEST_COMPLETE_COUNT = 58,
	EVENT_MISSION_OBJECTIVE_TYPE_MAX = 59
};


// Enum EFGame.EFConst.EventMissionAccountConditionType
enum class EventMissionAccountConditionType : uint8_t
{
	EVENT_MISSION_ACCOUNT_CONDITION_TYPE_NONE = 0,
	EVENT_MISSION_ACCOUNT_CONDITION_TYPE_NEW_USER = 1,
	EVENT_MISSION_ACCOUNT_CONDITION_TYPE_COMEBACK_USER = 2,
	EVENT_MISSION_ACCOUNT_CONDITION_TYPE_MAX = 3
};


// Enum EFGame.EFConst.EventMissionLevelConditionType
enum class EventMissionLevelConditionType : uint8_t
{
	EVENT_MISSION_LEVEL_CONDITION_TYPE_NONE = 0,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_ITEM_LEVEL_OVER = 1,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_ITEM_LEVEL_BELOW = 2,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_PCLEVEL_OVER = 3,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_PCLEVEL_BELOW = 4,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_EXPEDITION_ITEM_LEVEL_OVER = 5,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_EXPEDITION_ITEM_LEVEL_BELOW = 6,
	EVENT_MISSION_LEVEL_CONDITION_TYPE_MAX = 7
};


// Enum EFGame.EFConst.EventMissionNewExpeditionConditionType
enum class EventMissionNewExpeditionConditionType : uint8_t
{
	EVENT_MISSION_NEW_EXPEDITION_CONDITION_TYPE_NONE = 0,
	EVENT_MISSION_NEW_EXPEDITION_CONDITION_TYPE_NEW_EXPEDITION = 1,
	EVENT_MISSION_NEW_EXPEDITION_CONDITION_TYPE_OLD_EXPEDITION = 2,
	EVENT_MISSION_NEW_EXPEDITION_CONDITION_TYPE_MAX = 3
};


// Enum EFGame.EFConst.EventMissionPCEventType
enum class EventMissionPCEventType : uint8_t
{
	EVENT_MISSION_PC_EVENT_TYPE_NONE = 0,
	EVENT_MISSION_PC_EVENT_TYPE_EXPRESS = 1,
	EVENT_MISSION_PC_EVENT_TYPE_MAX = 2
};


// Enum EFGame.EFConst.EventMissionJumpingType
enum class EventMissionJumpingType : uint8_t
{
	EVENT_MISSION_JUMPING_TYPE_NONE = 0,
	EVENT_MISSION_JUMPING_TYPE_BM  = 1,
	EVENT_MISSION_JUMPING_TYPE_EVENT = 2,
	EVENT_MISSION_JUMPING_TYPE_ALL = 3,
	EVENT_MISSION_JUMPING_TYPE_MAX = 4
};


// Enum EFGame.EFConst.EventMissionRewardType
enum class EventMissionRewardType : uint8_t
{
	EVENT_MISSION_REWARD_TYPE_NONE = 0,
	EVENT_MISSION_REWARD_TYPE_ITEM = 1,
	EVENT_MISSION_REWARD_TYPE_MONEY = 2,
	EVENT_MISSION_REWARD_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.ExpeditionConfigType
enum class ExpeditionConfigType : uint8_t
{
	EXPEDITION_CONFIG_TYPE_CALENDAR = 0,
	EXPEDITION_CONFIG_TYPE_OPENCHAT = 1,
	EXPEDITION_CONFIG_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.ExpeditionRewardLimitType
enum class ExpeditionRewardLimitType : uint8_t
{
	EXPEDITION_REWARD_LIMIT_TYPE_NONE = 0,
	EXPEDITION_REWARD_LIMIT_TYPE_TRADE_GOLD = 1,
	EXPEDITION_REWARD_LIMIT_TYPE_ZONE_LEVEL_SPECIAL = 2,
	EXPEDITION_REWARD_LIMIT_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ExpeditionRewardLimitAcquireCode
enum class ExpeditionRewardLimitAcquireCode : uint8_t
{
	EXPEDITION_REWARD_LIMIT_ACQUIRE_NONE = 0,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_GOLD_NOT_EXIST = 1,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_PC_NEW = 2,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_PC_EXIST = 3,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_PC_NEW_FAILED = 4,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_UNLIMITED = 5,
	EXPEDITION_REWARD_LIMIT_ACQUIRE_MAX = 6
};


// Enum EFGame.EFConst.EmoticonLearnType
enum class EmoticonLearnType : uint8_t
{
	EMOTICON_LEARN_TYPE_NONE       = 0,
	EMOTICON_LEARN_TYPE_BUILT_IN   = 1,
	EMOTICON_LEARN_TYPE_ITEM_USED  = 2,
	EMOTICON_LEARN_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.EventContentsRewardType
enum class EventContentsRewardType : uint8_t
{
	EVENT_CONTENTS_REWARD_TYPE_NONE = 0,
	EVENT_CONTENTS_REWARD_TYPE_REVERSE_RUIN = 1,
	EVENT_CONTENTS_REWARD_TYPE_RAID_NORMAL = 2,
	EVENT_CONTENTS_REWARD_TYPE_RAID_ABYSS = 3,
	EVENT_CONTENTS_REWARD_TYPE_EPIC_GATE_NORMAL = 4,
	EVENT_CONTENTS_REWARD_TYPE_EPIC_GATE_COMMANDER = 5,
	EVENT_CONTENTS_REWARD_TYPE_EPIC_GATE_CHECKPOINT = 6,
	EVENT_CONTENTS_REWARD_TYPE_MAX = 7
};


// Enum EFGame.EFConst.FactionType
enum class EFactionType : uint8_t
{
	FACTION_TYPE_MONSTER           = 0,
	FACTION_TYPE_PLAYER            = 1,
	FACTION_TYPE_NEUTRAL           = 2,
	FACTION_TYPE_PUBLIC_ENEMY      = 3,
	FACTION_TYPE_PUBLIC_FRIEND     = 4,
	FACTION_TYPE_PVP_RED           = 5,
	FACTION_TYPE_PVP_BLUE          = 6,
	FACTION_TYPE_PVP_FREE          = 7,
	FACTION_TYPE_PARTY_FRIENDLY    = 8,
	FACTION_TYPE_MAX               = 9
};


// Enum EFGame.EFConst.FactionAffinity
enum class EFactionAffinity : uint8_t
{
	FACTION_AFFINITY_FRIENDLY      = 0,
	FACTION_AFFINITY_NEUTRAL       = 1,
	FACTION_AFFINITY_HOSTILE       = 2,
	FACTION_AFFINITY_MAX           = 3
};


// Enum EFGame.EFConst.FloatingMatterManageType
enum class EFloatingMatterManageType : uint8_t
{
	FLOATING_MATTER_MANAGE_TYPE_COLLECT = 0,
	FLOATING_MATTER_MANAGE_TYPE_CHANGE = 1,
	FLOATING_MATTER_MANAGE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.FloatingMatterCreateType
enum class EFloatingMatterCreateType : uint8_t
{
	FLOATING_MATTER_CREATE_TYPE_AUTO = 0,
	FLOATING_MATTER_CREATE_TYPE_MANUAL = 1,
	FLOATING_MATTER_CREATE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.FloatingMatterActionType
enum class EFloatingMatterActionType : uint8_t
{
	FLOATING_MATTER_ACTION_TYPE_NONE = 0,
	FLOATING_MATTER_ACTION_TYPE_GIVE_ITEM = 1,
	FLOATING_MATTER_ACTION_TYPE_ADD_BUFF = 2,
	FLOATING_MATTER_ACTION_TYPE_GIVE_GOLD = 3,
	FLOATING_MATTER_ACTION_TYPE_GIVE_DROP_ITEM = 4,
	FLOATING_MATTER_ACTION_TYPE_MAX = 5
};


// Enum EFGame.EFConst.FloatingMatterContentsType
enum class EFloatingMatterContentsType : uint8_t
{
	FLOATING_MATTER_CONTENTS_TYPE_NORMAL = 0,
	FLOATING_MATTER_CONTENTS_TYPE_GOLD = 1,
	FLOATING_MATTER_CONTENTS_TYPE_MAN = 2,
	FLOATING_MATTER_CONTENTS_TYPE_MAX = 3
};


// Enum EFGame.EFConst.FriendshipGrade
enum class EFriendshipGrade : uint8_t
{
	FRIENDSHIP_GRADE_NONE          = 0,
	FRIENDSHIP_GRADE_NORMAL        = 1,
	FRIENDSHIP_GRADE_INTEREST      = 2,
	FRIENDSHIP_GRADE_FRIENDLY      = 3,
	FRIENDSHIP_GRADE_TRUST         = 4,
	FRIENDSHIP_GRADE_AFFECTIONATE  = 5,
	FRIENDSHIP_GRADE_MAX           = 6
};


// Enum EFGame.EFConst.FriendshipSubGrade
enum class EFriendshipSubGrade : uint8_t
{
	FRIENDSHIP_SUB_GRADE           = 0,
	FRIENDSHIP_SUB_GRADE01         = 1,
	FRIENDSHIP_SUB_GRADE02         = 2,
	FRIENDSHIP_SUB_GRADE03         = 3,
	FRIENDSHIP_SUB_GRADE04         = 4,
	FRIENDSHIP_SUB_GRADE05         = 5,
	FRIENDSHIP_SUB_GRADE06         = 6,
	FRIENDSHIP_SUB_GRADE07         = 7,
	FRIENDSHIP_SUB_GRADE08         = 8,
	FRIENDSHIP_SUB_GRADE09         = 9,
	FRIENDSHIP_SUB_GRADE10         = 10,
	FRIENDSHIP_SUB_GRADE_MAX       = 11
};


// Enum EFGame.EFConst.FriendshipConditionType
enum class EFriendshipConditionType : uint8_t
{
	FRIENDSHIP_CONDITION_TYPE_NONE = 0,
	FRIENDSHIP_CONDITION_TYPE_QUEST = 1,
	FRIENDSHIP_CONDITION_TYPE_TENDENCY = 2,
	FRIENDSHIP_CONDITION_TYPE_FIRST_TRUST = 3,
	FRIENDSHIP_CONDITION_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.FriendshipActionType
enum class EFriendshipActionType : uint8_t
{
	FRIENDSHIP_ACTION_TYPE_NONE    = 0,
	FRIENDSHIP_ACTION_TYPE_ITEM    = 1,
	FRIENDSHIP_ACTION_TYPE_MOTION  = 2,
	FRIENDSHIP_ACTION_TYPE_MUSIC   = 3,
	FRIENDSHIP_ACTION_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.FriendshipReactionType
enum class EFriendshipReactionType : uint8_t
{
	FRIENDSHIP_REACTION_TYPE_NONE  = 0,
	FRIENDSHIP_REACTION_TYPE_LIKE  = 1,
	FRIENDSHIP_REACTION_TYPE_DISLIKE = 2,
	FRIENDSHIP_REACTION_TYPE_ZERO_POINT = 3,
	FRIENDSHIP_REACTION_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.FriendshipEventType
enum class EFriendshipEventType : uint8_t
{
	FRIENDSHIP_EVENT_TYPE_NONE     = 0,
	FRIENDSHIP_EVENT_TYPE_NEED_CONDITION = 1,
	FRIENDSHIP_EVENT_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.FriendshipPointReason
enum class EFriendshipPointReason : uint8_t
{
	FRIENDSHIP_POINT_REASON_NONE   = 0,
	FRIENDSHIP_POINT_REASON_ACTION = 1,
	FRIENDSHIP_POINT_REASON_RELATION = 2,
	FRIENDSHIP_POINT_REASON_ADMIN  = 3,
	FRIENDSHIP_POINT_REASON_QUEST  = 4,
	FRIENDSHIP_POINT_REASON_EVENT  = 5,
	FRIENDSHIP_POINT_REASON_TALK   = 6,
	FRIENDSHIP_POINT_REASON_AFFECTION_TALK = 7,
	FRIENDSHIP_POINT_REASON_MAX    = 8
};


// Enum EFGame.EFConst.GameConditionType
enum class EGameConditionType : uint8_t
{
	GAME_CONDITION_TYPE_DUMMY      = 0,
	GAME_CONDITION_TYPE_ITEM_COUNT_LESS = 1,
	GAME_CONDITION_TYPE_ITEM_COUNT_GREATER = 2,
	GAME_CONDITION_TYPE_QUEST_STATUS = 3,
	GAME_CONDITION_TYPE_QUEST_STAGE_INDEX = 4,
	GAME_CONDITION_TYPE_PLAYER_LEVEL_LESS = 5,
	GAME_CONDITION_TYPE_PLAYER_LEVEL_GREATER = 6,
	GAME_CONDITION_TYPE_PLAYER_CLASS = 7,
	GAME_CONDITION_TYPE_PLAYER_DIVISION = 8,
	GAME_CONDITION_TYPE_STATUS_EFFECT_ON = 9,
	GAME_CONDITION_TYPE_STATUS_EFFECT_OFF = 10,
	GAME_CONDITION_TYPE_IN_ZONE    = 11,
	GAME_CONDITION_TYPE_IN_VOLUME  = 12,
	GAME_CONDITION_TYPE_NPC_ID     = 13,
	GAME_CONDITION_TYPE_RIDING_VEHICLE = 14,
	GAME_CONDITION_TYPE_HP_LESS    = 15,
	GAME_CONDITION_TYPE_HP_GREATER = 16,
	GAME_CONDITION_TYPE_TRAP_SUMMONABLE = 17,
	GAME_CONDITION_TYPE_NPC_SUMMONABLE = 18,
	GAME_CONDITION_TYPE_PICKUP_PROP = 19,
	GAME_CONDITION_TYPE_IN_PARTY   = 20,
	GAME_CONDITION_TYPE_SHIP_OWNER = 21,
	GAME_CONDITION_TYPE_PLAYER_CLASS_PREVIEW = 22,
	GAME_CONDITION_TYPE_LIFE_LEVEL = 23,
	GAME_CONDITION_TYPE_LIFE_SKILL = 24,
	GAME_CONDITION_TYPE_LIFE_TOOL_GRADE = 25,
	GAME_CONDITION_TYPE_QUEST_ITEM_COUNT_LESS = 26,
	GAME_CONDITION_TYPE_QUEST_ITEM_COUNT_GREATER = 27,
	GAME_CONDITION_TYPE_MP_LESS    = 28,
	GAME_CONDITION_TYPE_IDENTITY_GAUGE_LESS = 29,
	GAME_CONDITION_TYPE_COOP_QUEST_STATUS = 30,
	GAME_CONDITION_TYPE_VOYAGE_STAT = 31,
	GAME_CONDITION_TYPE_SHIP_LAUNCHED = 32,
	GAME_CONDITION_TYPE_ZONE_TYPE  = 33,
	GAME_CONDITION_TYPE_VOYAGE_SUPPLY = 34,
	GAME_CONDITION_TYPE_SKILL_STACK_LESS = 35,
	GAME_CONDITION_TYPE_VOYAGE_SKILL = 36,
	GAME_CONDITION_TYPE_CHARACTER_TENDENCY = 37,
	GAME_CONDITION_TYPE_ADVBOOK    = 38,
	GAME_CONDITION_TYPE_LIFE_PROFESSION_TIER = 39,
	GAME_CONDITION_TYPE_LIFE_TECHNIQUE_TIER = 40,
	GAME_CONDITION_TYPE_FACTION    = 41,
	GAME_CONDITION_TYPE_PC_JUMPING_MODE = 42,
	GAME_CONDITION_TYPE_PLAYER_ITEM_LEVEL_LESS = 43,
	GAME_CONDITION_TYPE_PLAYER_ITEM_LEVEL_GREATER = 44,
	GAME_CONDITION_TYPE_NOT_IN_PARTY = 45,
	GAME_CONDITION_TYPE_PLAYER_ATTAINED_ITEM_LEVEL = 46,
	GAME_CONDITION_TYPE_TROOP_UNIT_INDEX = 47,
	GAME_CONDITION_TYPE_COOP_QUEST_JOINED = 48,
	GAME_CONDITION_TYPE_OWN_PET    = 49,
	GAME_CONDITION_TYPE_LIFE_MAX_EXP = 50,
	GAME_CONDITION_TYPE_TOWN_PERMISSION_FEAST = 51,
	GAME_CONDITION_TYPE_TOWN_PERMISSION_FARM = 52,
	GAME_CONDITION_TYPE_REALM      = 53,
	GAME_CONDITION_TYPE_MAX        = 54
};


// Enum EFGame.EFConst.GameActionType
enum class EGameActionType : uint8_t
{
	GAME_ACTION_TYPE_DUMMY         = 0,
	GAME_ACTION_TYPE_GIVE_ITEM     = 1,
	GAME_ACTION_TYPE_TAKE_ITEM     = 2,
	GAME_ACTION_TYPE_DROP_ITEM     = 3,
	GAME_ACTION_TYPE_SUMMON_NPC    = 4,
	GAME_ACTION_TYPE_SUMMON_PROP   = 5,
	GAME_ACTION_TYPE_SUMMON_TRAP   = 6,
	GAME_ACTION_TYPE_UNSUMMON_NPC  = 7,
	GAME_ACTION_TYPE_UNSUMMON_PROP = 8,
	GAME_ACTION_TYPE_UNSUMMON_TRAP = 9,
	GAME_ACTION_TYPE_EXEC_SKILL_EFFECT = 10,
	GAME_ACTION_TYPE_ADD_STATUS_EFFECT = 11,
	GAME_ACTION_TYPE_REMOVE_STATUS_EFFECT = 12,
	GAME_ACTION_TYPE_ADD_STATUS_EFFECT_PARTY = 13,
	GAME_ACTION_TYPE_REMOVE_STATUS_EFFECT_PARTY = 14,
	GAME_ACTION_TYPE_SET_PLAYER_CLASS = 15,
	GAME_ACTION_TYPE_KILL_NPC      = 16,
	GAME_ACTION_TYPE_NPC_START_FOLLOW = 17,
	GAME_ACTION_TYPE_NPC_FINISH_FOLLOW = 18,
	GAME_ACTION_TYPE_TELEPORT      = 19,
	GAME_ACTION_TYPE_SUMMON_VEHICLE = 20,
	GAME_ACTION_TYPE_PICKUP_PROP   = 21,
	GAME_ACTION_TYPE_MOVE_TRANSIT  = 22,
	GAME_ACTION_TYPE_WARP_TO_PORTAL = 23,
	GAME_ACTION_TYPE_WARP_TO_POSITION = 24,
	GAME_ACTION_TYPE_START_KISMET  = 25,
	GAME_ACTION_TYPE_EMIT_AI_SIGNAL = 26,
	GAME_ACTION_TYPE_OPEN_INTERFACE = 27,
	GAME_ACTION_TYPE_STOP_TRANSIT  = 28,
	GAME_ACTION_TYPE_ROTATE_TRANSIT = 29,
	GAME_ACTION_TYPE_GIVE_SHIP     = 30,
	GAME_ACTION_TYPE_START_TRACK_MOVE = 31,
	GAME_ACTION_TYPE_CANCEL_SKILL  = 32,
	GAME_ACTION_TYPE_CHANGE_PROP_STATE = 33,
	GAME_ACTION_TYPE_PREVIEW_PLAYER_CLASS = 34,
	GAME_ACTION_TYPE_ADD_NPC_WAVE  = 35,
	GAME_ACTION_TYPE_REMOVE_NPC_WAVE = 36,
	GAME_ACTION_TYPE_FINISH_NPC_WAVE = 37,
	GAME_ACTION_TYPE_CHANGE_PROP_PROPERTY = 38,
	GAME_ACTION_TYPE_CONFIRM_PLAYER_CLASS = 39,
	GAME_ACTION_TYPE_SEND_MAIL     = 40,
	GAME_ACTION_TYPE_EXPAND_STASH  = 41,
	GAME_ACTION_TYPE_EXPAND_ACCOUNT_STASH = 42,
	GAME_ACTION_TYPE_SET_LAST_POSITION = 43,
	GAME_ACTION_TYPE_EMIT_MOD_SIGNAL = 44,
	GAME_ACTION_TYPE_MAKE_LIFE_DROP_ITEM = 45,
	GAME_ACTION_TYPE_REPLACE_NPC   = 46,
	GAME_ACTION_TYPE_SET_MUSIC_RETURN_POSITION = 47,
	GAME_ACTION_TYPE_MINING_BOMB_EXPLODE = 48,
	GAME_ACTION_TYPE_ADD_ZONE_STATUS_EFFECT = 49,
	GAME_ACTION_TYPE_REMOVE_ZONE_STATUS_EFFECT = 50,
	GAME_ACTION_TYPE_ADD_MOD_SIGNET = 51,
	GAME_ACTION_TYPE_ADD_MOD_SIGNET_PARTY = 52,
	GAME_ACTION_TYPE_FIND_VIEW_POINT = 53,
	GAME_ACTION_TYPE_GIVE_EXP      = 54,
	GAME_ACTION_TYPE_OPEN_CINEMATIC_DUNGEON_UI = 55,
	GAME_ACTION_TYPE_OPEN_RAID_UI  = 56,
	GAME_ACTION_TYPE_LUMBERING_SPECIALIZE = 57,
	GAME_ACTION_TYPE_SET_PICKUP_PROP_GAUGE = 58,
	GAME_ACTION_TYPE_FIND_HIDDEN_STORY = 59,
	GAME_ACTION_TYPE_INIT_SKILL    = 60,
	GAME_ACTION_TYPE_INIT_LIFE_SKILL = 61,
	GAME_ACTION_TYPE_ADD_SKILL_POINT = 62,
	GAME_ACTION_TYPE_ADD_LIFE_SKILL_POINT = 63,
	GAME_ACTION_TYPE_ADD_REVIVE_COIN = 64,
	GAME_ACTION_TYPE_CONTENTS_UNLOCK = 65,
	GAME_ACTION_TYPE_DROP_PARTY_ITEM = 66,
	GAME_ACTION_TYPE_ADD_MESSENGER_MEDAL = 67,
	GAME_ACTION_TYPE_REMOVE_ALL_DEBUFF = 68,
	GAME_ACTION_TYPE_ACTIVATE_INTIMATE_NPC = 69,
	GAME_ACTION_TYPE_GET_OFF_VEHICLE = 70,
	GAME_ACTION_TYPE_LEARN_SKILL   = 71,
	GAME_ACTION_TYPE_CHANGE_WAY_POINT = 72,
	GAME_ACTION_TYPE_WARP_TO_LAST_POSITION = 73,
	GAME_ACTION_TYPE_REMOVE_PICKED_PROP = 74,
	GAME_ACTION_TYPE_JOIN_COOP_QUEST = 75,
	GAME_ACTION_TYPE_CHANGE_FACTION = 76,
	GAME_ACTION_TYPE_GIVE_MONEY    = 77,
	GAME_ACTION_TYPE_DROP_MONEY    = 78,
	GAME_ACTION_TYPE_GIVE_CASH     = 79,
	GAME_ACTION_TYPE_ANNOUNCE      = 80,
	GAME_ACTION_TYPE_DESPAWN       = 81,
	GAME_ACTION_TYPE_SPAWN_DYNAMIC_ISLAND = 82,
	GAME_ACTION_TYPE_VOYAGE_ADD_SUPPLY = 83,
	GAME_ACTION_TYPE_VOYAGE_ADD_FLOATING_MATTER = 84,
	GAME_ACTION_TYPE_VOYAGE_BLAST  = 85,
	GAME_ACTION_TYPE_ADD_SKILL_STACK = 86,
	GAME_ACTION_TYPE_GIVE_WALLPAPER = 87,
	GAME_ACTION_TYPE_START_VOTE_SECRET_DUNGEON = 88,
	GAME_ACTION_TYPE_VOYAGE_TAKE_SUPPLY = 89,
	GAME_ACTION_TYPE_VOYAGE_ADD_EVENT_GAUGE = 90,
	GAME_ACTION_TYPE_VOYAGE_SKILL_DROP = 91,
	GAME_ACTION_TYPE_ADD_VEHICLE_RESOURCE = 92,
	GAME_ACTION_TYPE_ADD_BRAVE_HEART = 93,
	GAME_ACTION_TYPE_GET_ON_SUMMON_VEHICLE = 94,
	GAME_ACTION_TYPE_LIFE_ENERGY_RECOVERY = 95,
	GAME_ACTION_TYPE_ADD_LIFE_EXP  = 96,
	GAME_ACTION_TYPE_ADD_LIFE_EXP_ALL = 97,
	GAME_ACTION_TYPE_EXTEND_PET_EFFECT = 98,
	GAME_ACTION_TYPE_EXTEND_PET_UTILITY_SKILL = 99,
	GAME_ACTION_TYPE_ADD_REVERSE_RUIN_COST = 100,
	GAME_ACTION_TYPE_ADD_REVERSE_RUIN_REST = 101,
	GAME_ACTION_TYPE_ADD_EPIC_GATE_ENTER_COST = 102,
	GAME_ACTION_TYPE_ADD_ABYSS_RAID_ENTER_COST = 103,
	GAME_ACTION_TYPE_ADD_EVENT_JUMPING_TOKEN = 104,
	GAME_ACTION_TYPE_REVERT_NORMAL_RAID_REWARD = 105,
	GAME_ACTION_TYPE_REVERT_DIFFICULTY_RAID_REWARD = 106,
	GAME_ACTION_TYPE_ADD_NORMAL_RAID_REST_GAUGE = 107,
	GAME_ACTION_TYPE_ADD_EVENT_PACKAGE = 108,
	GAME_ACTION_TYPE_ADD_EVENT_PC_NAME_TOKEN = 109,
	GAME_ACTION_TYPE_ADD_EVENT_PC_LOOK_TOKEN = 110,
	GAME_ACTION_TYPE_WARP_TO_PROP  = 111,
	GAME_ACTION_TYPE_RESET_EPIC_GATE_CHECKPOINT = 112,
	GAME_ACTION_TYPE_ADD_PAID_JUMPING_TOKEN = 113,
	GAME_ACTION_TYPE_EXTEND_PET_SKILL = 114,
	GAME_ACTION_TYPE_MAX           = 115
};


// Enum EFGame.EFConst.GameConditionTarget
enum class EGameConditionTarget : uint8_t
{
	GAME_CONDITION_TARGET_PC       = 0,
	GAME_CONDITION_TARGET_CONTEXT  = 1,
	GAME_CONDITION_TARGET_MAX      = 2
};


// Enum EFGame.EFConst.GameConditionEvalType
enum class EGameConditionEvalType : uint8_t
{
	GAME_CONDITION_EVAL_TYPE_AND   = 0,
	GAME_CONDITION_EVAL_TYPE_OR    = 1,
	GAME_CONDITION_EVAL_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.GameActionTarget
enum class EGameActionTarget : uint8_t
{
	GAME_ACTION_TARGET_PC          = 0,
	GAME_ACTION_TARGET_CONTEXT     = 1,
	GAME_ACTION_TARGET_MAX         = 2
};


// Enum EFGame.EFConst.GameActionExecType
enum class EGameActionExecType : uint8_t
{
	GAME_ACTION_EXEC_TYPE_ALL      = 0,
	GAME_ACTION_EXEC_TYPE_MERGED   = 1,
	GAME_ACTION_EXEC_TYPE_FOR_EACH = 2,
	GAME_ACTION_EXEC_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.GameActionModSignal
enum class EGameActionModSignal : uint8_t
{
	GAME_ACTION_MOD_SIGNAL_NONE    = 0,
	GAME_ACTION_MOD_SIGNAL_CUBE_TOUCH_BOX = 1,
	GAME_ACTION_MOD_SIGNAL_NPC_WAVE = 2,
	GAME_ACTION_MOD_SIGNAL_TELEPORT = 3,
	GAME_ACTION_MOD_SIGNAL_MAX     = 4
};


// Enum EFGame.EFConst.GameActionAiSignalTarget
enum class EGameActionAiSignalTarget : uint8_t
{
	GAME_ACTION_AI_SIGNAL_TARGET_ALL = 0,
	GAME_ACTION_AI_SIGNAL_TARGET_SUMMON = 1,
	GAME_ACTION_AI_SIGNAL_TARGET_MAX = 2
};


// Enum EFGame.EFConst.GamepadVibrationType
enum class EGamepadVibrationType : uint8_t
{
	GAMEPAD_VIBRATION_TYPE_NONE    = 0,
	GAMEPAD_VIBRATION_TYPE_LIFE_SKILL_BUFF = 1,
	GAMEPAD_VIBRATION_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.GenderType
enum class EGenderType : uint8_t
{
	GENDER_TYPE_NONE               = 0,
	GENDER_TYPE_FEMALE             = 1,
	GENDER_TYPE_MALE               = 2,
	GENDER_TYPE_MAX                = 3
};


// Enum EFGame.EFConst.GeneralErrorContentType
enum class EGeneralErrorContentType : uint8_t
{
	GENERAL_ERROR_CONTENT_TYPE_NONE = 0,
	GENERAL_ERROR_CONTENT_TYPE_SECRET_DUNGEON_START = 1,
	GENERAL_ERROR_CONTENT_TYPE_REVERSE_RUIN_START = 2,
	GENERAL_ERROR_CONTENT_TYPE_INSTANCE_OCEAN_ENTER = 3,
	GENERAL_ERROR_CONTENT_TYPE_ZONE_PHASE_RESUME = 4,
	GENERAL_ERROR_CONTENT_TYPE_MAX = 5
};


// Enum EFGame.EFConst.GuildMemberGrade
enum class EGuildMemberGrade : uint8_t
{
	GUILD_MEMBER_GRADE_MASTER      = 0,
	GUILD_MEMBER_GRADE_VICE_MASTER = 1,
	GUILD_MEMBER_GRADE_OFFICER     = 2,
	GUILD_MEMBER_GRADE_NORMAL      = 3,
	GUILD_MEMBER_GRADE_NEWBIE      = 4,
	GUILD_MEMBER_GRADE_MAX         = 5
};


// Enum EFGame.EFConst.GuildOperationType
enum class EGuildOperationType : uint8_t
{
	GUILD_OPERATION_TYPE_MANAGE    = 0,
	GUILD_OPERATION_TYPE_DISBAND   = 1,
	GUILD_OPERATION_TYPE_DELEGATE  = 2,
	GUILD_OPERATION_TYPE_PROMOTE   = 3,
	GUILD_OPERATION_TYPE_SET_NICKNAME = 4,
	GUILD_OPERATION_TYPE_SET_MARK  = 5,
	GUILD_OPERATION_TYPE_NOTICE    = 6,
	GUILD_OPERATION_TYPE_INTRODUCTION = 7,
	GUILD_OPERATION_TYPE_ANNOUNCE  = 8,
	GUILD_OPERATION_TYPE_ACCEPT_JOIN = 9,
	GUILD_OPERATION_TYPE_KICK      = 10,
	GUILD_OPERATION_TYPE_CONTIRIBUTION = 11,
	GUILD_OPERATION_TYPE_CHATTING  = 12,
	GUILD_OPERATION_TYPE_USE_CONTENTS = 13,
	GUILD_OPERATION_TYPE_RESEARCH  = 14,
	GUILD_OPERATION_TYPE_BUY_RESOURCE = 15,
	GUILD_OPERATION_TYPE_EQUIP_SKILL = 16,
	GUILD_OPERATION_TYPE_MAX       = 17
};


// Enum EFGame.EFConst.GuildDisbandStatus
enum class EGuildDisbandStatus : uint8_t
{
	GUILD_DISBAND_STATUS_NONE      = 0,
	GUILD_DISBAND_STATUS_CANCEL    = 1,
	GUILD_DISBAND_STATUS_BY_USER   = 2,
	GUILD_DISBAND_STATUS_BY_GM     = 3,
	GUILD_DISBAND_STATUS_MAX       = 4
};


// Enum EFGame.EFConst.GuildModifyCode
enum class EGuildModifyCode : uint8_t
{
	GUILD_MODIFIED_NONE            = 0,
	GUILD_MODIFIED_INSERT          = 1,
	GUILD_MODIFIED_UPDATE          = 2,
	GUILD_MODIFIED_DELETE          = 3,
	GUILD_MODIFIED_MAX             = 4
};


// Enum EFGame.EFConst.GuildHistoryEventType
enum class EGuildHistoryEventType : uint8_t
{
	GUILD_HISTORY_EVENT_TYPE_NONE  = 0,
	GUILD_HISTORY_EVENT_TYPE_CREATION = 1,
	GUILD_HISTORY_EVENT_TYPE_JOIN  = 2,
	GUILD_HISTORY_EVENT_TYPE_LEAVE = 3,
	GUILD_HISTORY_EVENT_TYPE_PROMOTE = 4,
	GUILD_HISTORY_EVENT_TYPE_LEVELUP = 5,
	GUILD_HISTORY_EVENT_TYPE_DELEGATE = 6,
	GUILD_HISTORY_EVENT_TYPE_KICK  = 7,
	GUILD_HISTORY_EVENT_TYPE_FORCED_DELEGATE = 8,
	GUILD_HISTORY_EVENT_TYPE_RESEARCH_COMPLETE = 9,
	GUILD_HISTORY_EVENT_TYPE_OBJECTIVE_COMPLETE = 10,
	GUILD_HISTORY_EVENT_TYPE_OBJECTIVE_FAIL = 11,
	GUILD_HISTORY_EVENT_TYPE_DISTRIBUTION_GOLD = 12,
	GUILD_HISTORY_EVENT_TYPE_BATTLEFIELD_REWARD_GOLD = 13,
	GUILD_HISTORY_EVENT_TYPE_EVENT_COMMISSION_GOLD = 14,
	GUILD_HISTORY_EVENT_TYPE_NAME_CHANGE = 15,
	GUILD_HISTORY_EVENT_TYPE_MAX   = 16
};


// Enum EFGame.EFConst.GuildBattlefieldHistoryEventType
enum class EGuildBattlefieldHistoryEventType : uint8_t
{
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_NONE = 0,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_DEATHMATCH = 1,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_FIELD_BOSS = 2,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_DEATHMATCH_RESULT = 3,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_DEATHMATCH_PENALTY_WARNING = 4,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_DEATHMATCH_PENALTY_APPLY = 5,
	GUILD_BATTLEFIELD_HISTORY_EVENT_TYPE_MAX = 6
};


// Enum EFGame.EFConst.GuildResourceHistoryType
enum class EGuildResourceHistoryType : uint8_t
{
	GUILD_RESOURCE_HISTORY_TYPE_NA = 0,
	GUILD_RESOURCE_HISTORY_TYPE_ADD = 1,
	GUILD_RESOURCE_HISTORY_TYPE_SUB = 2,
	GUILD_RESOURCE_HISTORY_TYPE_DISTRIBUTION = 3,
	GUILD_RESOURCE_HISTORY_TYPE_MAX = 4
};


// Enum EFGame.EFConst.GuildHistoryParamType
enum class EGuildHistoryParamType : uint8_t
{
	GUILD_HISTORY_PARAM_TYPE_NA    = 0,
	GUILD_HISTORY_PARAM_TYPE_DONATION_ID = 1,
	GUILD_HISTORY_PARAM_TYPE_MANA_STONE = 2,
	GUILD_HISTORY_PARAM_TYPE_RESEARCH_ID = 3,
	GUILD_HISTORY_PARAM_TYPE_RESEARCH_LEVEL = 4,
	GUILD_HISTORY_PARAM_TYPE_OBJECTIVE_CONTRIBUTION = 5,
	GUILD_HISTORY_PARAM_TYPE_AVG_WEEKLY_CONTRIBUTION = 6,
	GUILD_HISTORY_PARAM_TYPE_OBJECTIVE_CONTRIBUTION_AVG_ACHIEVEMENT_RATE = 7,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_MEMBER_COUNT = 8,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_AVG_AMOUNT_PER_MEMBER = 9,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_RATE = 10,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_AMOUNT_MEMBER = 11,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_AMOUNT_GUILD = 12,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_SCORE_DIFFERENCE = 13,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_RESULT = 14,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_ENTRANCE_ID = 15,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_CARRY_OVER_WEEKLY_COIN = 16,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_DEATHMATCH_PENALTY_RESET_DELAY = 17,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_DEATHMATCH_PENALTY_REMAIN_COUNT = 18,
	GUILD_HISTORY_PARAM_TYPE_BATTLEFIELD_DEATHMATCH_PENALTY_EXPIRE_DELAY = 19,
	GUILD_HISTORY_PARAM_TYPE_OBJECTIVE_ID = 20,
	GUILD_HISTORY_PARAM_TYPE_OBJECTIVE_LEVEL = 21,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_GOLD_WAY = 22,
	GUILD_HISTORY_PARAM_TYPE_DISTRIBUTION_GOLD_VALUE = 23,
	GUILD_HISTORY_PARAM_TYPE_REWARD_GOLD_VALUE = 24,
	GUILD_HISTORY_PARAM_TYPE_GUIRD_MARK_ID = 25,
	GUILD_HISTORY_PARAM_TYPE_GUIRD_MARK_FLAG_INDEX = 26,
	GUILD_HISTORY_PARAM_TYPE_MAX   = 27
};


// Enum EFGame.EFConst.GuildContentsType
enum class EGuildContentsType : uint8_t
{
	GUILD_CONTENTS_TYPE_DEATHMATCH = 0,
	GUILD_CONTENTS_TYPE_FIELD_BOSS = 1,
	GUILD_CONTENTS_TYPE_ETC        = 2,
	GUILD_CONTENTS_TYPE_OCCUPY_WAR = 3,
	GUILD_CONTENTS_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.GuildContentsJoinType
enum class EGuildContentsJoinType : uint8_t
{
	GUILD_CONTENTS_JOIN_TYPE_NONE  = 0,
	GUILD_CONTENTS_JOIN_TYPE_YES   = 1,
	GUILD_CONTENTS_JOIN_TYPE_NO    = 2,
	GUILD_CONTENTS_JOIN_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.GuildGoldDistributionType
enum class EGuildGoldDistributionType : uint8_t
{
	GUILD_GOLD_DISTRIBUTION_TYPE_NONE = 0,
	GUILD_GOLD_DISTRIBUTION_TYPE_EQUALITY = 1,
	GUILD_GOLD_DISTRIBUTION_TYPE_CONTRIBUTION = 2,
	GUILD_GOLD_DISTRIBUTION_TYPE_MASTER = 3,
	GUILD_GOLD_DISTRIBUTION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.GuildStashActionType
enum class EGuildStashActionType : uint8_t
{
	GUILD_STASH_ACTION_TYPE_DEPOSIT_ITEM = 0,
	GUILD_STASH_ACTION_TYPE_WITHDRAW_ITEM = 1,
	GUILD_STASH_ACTION_TYPE_DEPOSIT_MONEY = 2,
	GUILD_STASH_ACTION_TYPE_WITHDRAW_MONEY = 3,
	GUILD_STASH_ACTION_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.GuildStashHistoryAction
enum class EGuildStashHistoryAction : uint8_t
{
	GUILD_STASH_HISTORY_ACTION_ALL = 0,
	GUILD_STASH_HISTORY_ACTION_DEPOSIT = 1,
	GUILD_STASH_HISTORY_ACTION_WITHDRAW = 2,
	GUILD_STASH_HISTORY_ACTION_MAX = 3
};


// Enum EFGame.EFConst.GuildStashHistoryPeriod
enum class EGuildStashHistoryPeriod : uint8_t
{
	GUILD_STASH_HISTORY_PERIOD_DAY = 0,
	GUILD_STASH_HISTORY_PERIOD_WEEK = 1,
	GUILD_STASH_HISTORY_PERIOD_MONTH = 2,
	GUILD_STASH_HISTORY_PERIOD_MAX = 3
};


// Enum EFGame.EFConst.GuildStashHistoryTarget
enum class EGuildStashHistoryTarget : uint8_t
{
	GUILD_STASH_HISTORY_TARGET_ALL = 0,
	GUILD_STASH_HISTORY_TARGET_ITEM = 1,
	GUILD_STASH_HISTORY_TARGET_MONEY = 2,
	GUILD_STASH_HISTORY_TARGET_MAX = 3
};


// Enum EFGame.EFConst.GuildMarkType
enum class EGuildMarkType : uint8_t
{
	GUILD_MARK_TYPE_BACKGROUND     = 0,
	GUILD_MARK_TYPE_BACK_MARK      = 1,
	GUILD_MARK_TYPE_MAIN_MARK      = 2,
	GUILD_MARK_TYPE_SUB_MARK       = 3,
	GUILD_MARK_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.GuildMemberUpdateType
enum class EGuildMemberUpdateType : uint8_t
{
	GUILD_MEMBER_UPDATE_TYPE_NONE  = 0,
	GUILD_MEMBER_UPDATE_TYPE_NICKNAME = 1,
	GUILD_MEMBER_UPDATE_TYPE_PC_NAME = 2,
	GUILD_MEMBER_UPDATE_TYPE_MEMO  = 3,
	GUILD_MEMBER_UPDATE_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.GameReportType
enum class EGameReportType : uint8_t
{
	GAME_REPORT_TYPE_NONE          = 0,
	GAME_REPORT_TYPE_BASE_CLASS    = 1,
	GAME_REPORT_TYPE_FIRST_CLASS   = 2,
	GAME_REPORT_TYPE_SKILL_MAX_LEVEL = 3,
	GAME_REPORT_TYPE_MEDAL_QUEST_RANK = 4,
	GAME_REPORT_TYPE_MEDAL_QUEST_PLATINUM_COUNT = 5,
	GAME_REPORT_TYPE_RAID_BATTLE_ITEM = 6,
	GAME_REPORT_TYPE_MOD_BATTLE_ITEM = 7,
	GAME_REPORT_TYPE_VICTORY_CREST = 8,
	GAME_REPORT_TYPE_BATTLEFIELD_BATTLE_ITEM = 9,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_SELECT = 10,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_MASTER = 11,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_TRIPOD_TIER1 = 12,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_TRIPOD_TIER2 = 13,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_TRIPOD_TIER3 = 14,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_RUNE = 15,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_LEVEL = 16,
	GAME_REPORT_TYPE_CONTENTS_BY_AWAKENING_SKILL = 17,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_SELECT_NEW = 18,
	GAME_REPORT_TYPE_CONTENTS_BY_SKILL_MASTER_NEW = 19,
	GAME_REPORT_TYPE_MAX           = 20
};


// Enum EFGame.EFConst.GameReportContentsType
enum class EGameReportContentsType : uint8_t
{
	GAME_REPORT_CONTENTS_TYPE_NONE = 0,
	GAME_REPORT_CONTENTS_TYPE_RAID = 1,
	GAME_REPORT_CONTENTS_TYPE_MOD  = 2,
	GAME_REPORT_CONTENTS_TYPE_BATTLEFIELD = 3,
	GAME_REPORT_CONTENTS_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.GameReportSkillPresetType
enum class EGameReportSkillPresetType : uint8_t
{
	GAME_REPORT_SKILL_PRESET_TYPE_NONE = 0,
	GAME_REPORT_SKILL_PRESET_TYPE_RAID = 1,
	GAME_REPORT_SKILL_PRESET_TYPE_RAID_DIFFICULTY = 2,
	GAME_REPORT_SKILL_PRESET_TYPE_BOSS_RUSH = 3,
	GAME_REPORT_SKILL_PRESET_TYPE_CUBE = 4,
	GAME_REPORT_SKILL_PRESET_TYPE_REVERSE_RUIN = 5,
	GAME_REPORT_SKILL_PRESET_TYPE_COLOSSEUM = 6,
	GAME_REPORT_SKILL_PRESET_TYPE_TOWER = 7,
	GAME_REPORT_SKILL_PRESET_TYPE_EPIC_GATE = 8,
	GAME_REPORT_SKILL_PRESET_TYPE_EPIC_GATE_HELL = 9,
	GAME_REPORT_SKILL_PRESET_TYPE_WAY_OF_THRONE = 10,
	GAME_REPORT_SKILL_PRESET_TYPE_EPIC_GATE_GROUP = 11,
	GAME_REPORT_SKILL_PRESET_TYPE_EPIC_GATE_GROUP_HELL = 12,
	GAME_REPORT_SKILL_PRESET_TYPE_MAX = 13
};


// Enum EFGame.EFConst.GuildDisbandStateType
enum class EGuildDisbandStateType : uint8_t
{
	GUILD_DISBAND_STATE_TYPE_NONE  = 0,
	GUILD_DISBAND_STATE_TYPE_START = 1,
	GUILD_DISBAND_STATE_TYPE_WAITING = 2,
	GUILD_DISBAND_STATE_TYPE_COMPLETE = 3,
	GUILD_DISBAND_STATE_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.GuildSearchType
enum class EGuildSearchType : uint8_t
{
	GUILD_SEARCH_TYPE_NONE         = 0,
	GUILD_SEARCH_TYPE_NORMAL       = 1,
	GUILD_SEARCH_TYPE_NORMAL_FIND  = 2,
	GUILD_SEARCH_TYPE_NORMAL_INTRODUCTION_FIND = 3,
	GUILD_SEARCH_TYPE_RANK         = 4,
	GUILD_SEARCH_TYPE_RANK_FIND    = 5,
	GUILD_SEARCH_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.GuildJoinType
enum class EGuildJoinType : uint8_t
{
	GUILD_JOIN_TYPE_REQUEST        = 0,
	GUILD_JOIN_TYPE_IMMEDIATELY    = 1,
	GUILD_JOIN_TYPE_PASSWORD       = 2,
	GUILD_JOIN_TYPE_REJECTION      = 3,
	GUILD_JOIN_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.GuildSkillType
enum class EGuildSkillType : uint8_t
{
	GUILD_SKILL_TYPE_DEATH_MATCH   = 0,
	GUILD_SKILL_TYPE_FIELD_BOSS    = 1,
	GUILD_SKILL_TYPE_ALL           = 2,
	GUILD_SKILL_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.GuildSkillTarget
enum class EGuildSkillTarget : uint8_t
{
	GUILD_SKILL_TARGET_ALLY        = 0,
	GUILD_SKILL_TARGET_ENEMY       = 1,
	GUILD_SKILL_TARGET_USER        = 2,
	GUILD_SKILL_TARGET_MAX         = 3
};


// Enum EFGame.EFConst.GuildResearchType
enum class EGuildResearchType : uint8_t
{
	GUILD_RESEARCH_TYPE_BUFF_LEVELUP = 0,
	GUILD_RESEARCH_TYPE_SHOP       = 1,
	GUILD_RESEARCH_TYPE_ATTEND     = 2,
	GUILD_RESEARCH_TYPE_RESEARCH_SLOT = 3,
	GUILD_RESEARCH_TYPE_SKILL_SLOT = 4,
	GUILD_RESEARCH_TYPE_SKILL_LIMIT = 5,
	GUILD_RESEARCH_TYPE_SKILL_RESOURCE = 6,
	GUILD_RESEARCH_TYPE_GUILD_OBJ_SLOT = 7,
	GUILD_RESEARCH_TYPE_GUILD_OBJ_BATTLE = 8,
	GUILD_RESEARCH_TYPE_GUILD_OBJ_LIFE = 9,
	GUILD_RESEARCH_TYPE_GUILD_OBJ_VOYAGE = 10,
	GUILD_RESEARCH_TYPE_MAX_WEEKLY_DISTRIBUTE = 11,
	GUILD_RESEARCH_TYPE_MAX        = 12
};


// Enum EFGame.EFConst.GuildResourceType
enum class EGuildResourceType : uint8_t
{
	GUILD_RESOURCE_TYPE_NONE       = 0,
	GUILD_RESOURCE_TYPE_COIN       = 1,
	GUILD_RESOURCE_TYPE_WEEKLY_COIN = 2,
	GUILD_RESOURCE_TYPE_MANA_STONE = 3,
	GUILD_RESOURCE_TYPE_TRADE_GOLD = 4,
	GUILD_RESOURCE_TYPE_MAX        = 5
};


// Enum EFGame.EFConst.GuildDonationType
enum class EGuildDonationType : uint8_t
{
	GUILD_DONATION_TYPE_NONE       = 0,
	GUILD_DONATION_TYPE_MONEY      = 1,
	GUILD_DONATION_TYPE_ITEM       = 2,
	GUILD_DONATION_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.GuildObjectiveGroupType
enum class EGuildObjectiveGroupType : uint8_t
{
	GUILD_OBJECTIVE_GROUP_TYPE_BATTLE = 0,
	GUILD_OBJECTIVE_GROUP_TYPE_LIFE = 1,
	GUILD_OBJECTIVE_GROUP_TYPE_VOYAGE = 2,
	GUILD_OBJECTIVE_GROUP_TYPE_MAX = 3
};


// Enum EFGame.EFConst.GachaShopType
enum class EGachaShopType : uint8_t
{
	GACHA_SHOP_TYPE_NONE           = 0,
	GACHA_SHOP_TYPE_DEFAULT        = 1,
	GACHA_SHOP_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.GachaGrade
enum class EGachaGrade : uint8_t
{
	GACHA_GRADE_NONE               = 0,
	GACHA_GRADE_S                  = 1,
	GACHA_GRADE_A                  = 2,
	GACHA_GRADE_B                  = 3,
	GACHA_GRADE_MAX                = 4
};


// Enum EFGame.EFConst.GachaMoneyType
enum class EGachaMoneyType : uint8_t
{
	GACHA_MONEY_TYPE_NONE          = 0,
	GACHA_MONEY_TYPE_BOUND_CRYSTAL = 1,
	GACHA_MONEY_TYPE_GOLD          = 2,
	GACHA_MONEY_TYPE_TRADE_GOLD    = 3,
	GACHA_MONEY_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.GachaLimitType
enum class EGachaLimitType : uint8_t
{
	GACHA_LIMIT_TYPE_NONE          = 0,
	GACHA_LIMIT_TYPE_PC            = 1,
	GACHA_LIMIT_TYPE_EXPEDITION    = 2,
	GACHA_LIMIT_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.GachaDiscountType
enum class EGachaDiscountType : uint8_t
{
	GACHA_DISCOUNT_TYPE_NONE       = 0,
	GACHA_DISCOUNT_TYPE_RATE       = 1,
	GACHA_DISCOUNT_TYPE_VALUE      = 2,
	GACHA_DISCOUNT_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.HitFlag
enum class EHitFlag : uint8_t
{
	HIT_FLAG_NORMAL                = 0,
	HIT_FLAG_CRITICAL              = 1,
	HIT_FLAG_MISS                  = 2,
	HIT_FLAG_INVINCIBLE            = 3,
	HIT_FLAG_DOT                   = 4,
	HIT_FLAG_IMMUNE                = 5,
	HIT_FLAG_IMMUNE_SILENCED       = 6,
	HIT_FLAG_FONT_SILENCED         = 7,
	HIT_FLAG_DOT_CRITICAL          = 8,
	HIT_FLAG_DODGE                 = 9,
	HIT_FLAG_REFLECT               = 10,
	HIT_FLAG_DAMAGE_SHARE          = 11,
	HIT_FLAG_DODGE_HIT             = 12,
	HIT_FLAG_MAX                   = 13
};


// Enum EFGame.EFConst.HitOption
enum class EHitOption : uint8_t
{
	HIT_OPTION_BACK_ATTACK         = 0,
	HIT_OPTION_FRONTAL_ATTACK      = 1,
	HIT_OPTION_FLANK_ATTACK        = 2,
	HIT_OPTION_MAX                 = 3
};


// Enum EFGame.EFConst.HelpTargetType
enum class EHelpTargetType : uint8_t
{
	HELP_TARGET_TYPE_NONE          = 0,
	HELP_TARGET_TYPE_TRIBE         = 1,
	HELP_TARGET_TYPE_ALL           = 2,
	HELP_TARGET_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.HelpReactionType
enum class EHelpReactionType : uint8_t
{
	HELP_REACTION_TYPE_NONE        = 0,
	HELP_REACTION_TYPE_ACTION      = 1,
	HELP_REACTION_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.HittedSetUseType
enum class EHittedSetUseType : uint8_t
{
	HittedSetUseType_IGNORE        = 0,
	HittedSetUseType_WEAPON        = 1,
	HittedSetUseType_SKILL         = 2,
	HittedSetUseType_WEAPON_02     = 3,
	HittedSetUseType_Max           = 4
};


// Enum EFGame.EFConst.HonorTitleType
enum class EHonorTitleType : uint8_t
{
	HONOR_TITLE_TYPE_PREFIX        = 0,
	HONOR_TITLE_TYPE_POSTFIX       = 1,
	HONOR_TITLE_TYPE_COMPOUND      = 2,
	HONOR_TITLE_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.HonorTitleGrade
enum class EHonorTitleGrade : uint8_t
{
	HONOR_TITLE_GRADE_COMMON       = 0,
	HONOR_TITLE_GRADE_UNCOMMON     = 1,
	HONOR_TITLE_GRADE_RARE         = 2,
	HONOR_TITLE_GRADE_EPIC         = 3,
	HONOR_TITLE_GRADE_GAMEMASTER   = 4,
	HONOR_TITLE_GRADE_MAX          = 5
};


// Enum EFGame.EFConst.HideHelmetType
enum class EHideHelmetType : uint8_t
{
	HIDE_HELMET_EQUIP              = 0,
	HIDE_HELMET_AVATAR             = 1,
	HIDE_HELMET_MAX                = 2
};


// Enum EFGame.EFConst.HideAvatarType
enum class EHideAvatarType : uint8_t
{
	HIDE_AVATAR_FACE1              = 0,
	HIDE_AVATAR_FACE2              = 1,
	HIDE_AVATAR_HEAD               = 2,
	HIDE_AVATAR_UPPER_BODY         = 3,
	HIDE_AVATAR_LOWER_BODY         = 4,
	HIDE_AVATAR_WEAPON             = 5,
	HIDE_AVATAR_INSTRUMENT         = 6,
	HIDE_AVATAR_MAX                = 7
};


// Enum EFGame.EFConst.HotTimeType
enum class EHotTimeType : uint8_t
{
	HOT_TIME_TYPE_TIME_EVENT       = 0,
	HOT_TIME_TYPE_URL_EVENT        = 1,
	HOT_TIME_TYPE_URL_EVENT01      = 2,
	HOT_TIME_TYPE_MAX              = 3
};


// Enum EFGame.EFConst.IslandHeartCheckType
enum class EIslandHeartCheckType : uint8_t
{
	ISLAND_HEART_CHECK_TYPE_NONE   = 0,
	ISLAND_HEART_CHECK_TYPE_ACCOUNT_CHAR_NO_HAVE = 1,
	ISLAND_HEART_CHECK_TYPE_ACCOUNT_HAVE_CHAR_NO_HAVE = 2,
	ISLAND_HEART_CHECK_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.ItemProcessType
enum class EItemProcessType : uint8_t
{
	ITEM_PROCESS_TYPE_NONE         = 0,
	ITEM_PROCESS_TYPE_REMODELING   = 1,
	ITEM_PROCESS_TYPE_POLISH       = 2,
	ITEM_PROCESS_TYPE_ENGRAVE      = 3,
	ITEM_PROCESS_TYPE_ENCHANT      = 4,
	ITEM_PROCESS_TYPE_CARVE        = 5,
	ITEM_PROCESS_TYPE_REFORGING    = 6,
	ITEM_PROCESS_TYPE_ENHANCE_FEED = 7,
	ITEM_PROCESS_TYPE_ENHANCE_LEVELUP = 8,
	ITEM_PROCESS_TYPE_ENHANCE_OPTION_CHANGE = 9,
	ITEM_PROCESS_TYPE_ENHANCE_INHERIT = 10,
	ITEM_PROCESS_TYPE_MAGIC_SCROLL_APPLY = 11,
	ITEM_PROCESS_TYPE_MAGIC_SCROLL_EXTRACT = 12,
	ITEM_PROCESS_TYPE_MAGIC_SCROLL_ENHANCE = 13,
	ITEM_PROCESS_TYPE_GEM_INSTALL  = 14,
	ITEM_PROCESS_TYPE_GEM_TRANSFORM = 15,
	ITEM_PROCESS_TYPE_SOCKET_CHANGE = 16,
	ITEM_PROCESS_TYPE_SOCKET_AMPLIFY = 17,
	ITEM_PROCESS_TYPE_MAX          = 18
};


// Enum EFGame.EFConst.ItemRegressContentsType
enum class EItemRegressContentsType : uint8_t
{
	ITEM_REGRESS_CONTENTS_TYPE_NONE = 0,
	ITEM_REGRESS_CONTENTS_TYPE_EPIC_GATE = 1,
	ITEM_REGRESS_CONTENTS_TYPE_RAID = 2,
	ITEM_REGRESS_CONTENTS_TYPE_REVERSE_RUIN = 3,
	ITEM_REGRESS_CONTENTS_TYPE_MAX = 4
};


// Enum EFGame.EFConst.ItemSeasonType
enum class EItemSeasonType : uint8_t
{
	ITEM_SEASON_TYPE_NONE          = 0,
	ITEM_SEASON_TYPE_REVERSE_RUIN_EXPIRE_AT_END = 1,
	ITEM_SEASON_TYPE_REVERSE_RUIN_EXPIRE_AT_NEXT_END = 2,
	ITEM_SEASON_TYPE_COLOSSEUM_EXPIRE_AT_END = 3,
	ITEM_SEASON_TYPE_COLOSSEUM_EXPIRE_AT_NEXT_START = 4,
	ITEM_SEASON_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.ItemType
enum class EItemType : uint8_t
{
	ITEM_TYPE_NA                   = 0,
	ITEM_TYPE_EQUIP                = 1,
	ITEM_TYPE_LIFE                 = 2,
	ITEM_TYPE_USEUP                = 3,
	ITEM_TYPE_QUEST                = 4,
	ITEM_TYPE_INSTALL              = 5,
	ITEM_TYPE_GENERAL              = 6,
	ITEM_TYPE_MATERIAL             = 7,
	ITEM_TYPE_MUSIC                = 8,
	ITEM_TYPE_AVATAR               = 9,
	ITEM_TYPE_ASTRA                = 10,
	ITEM_TYPE_MAX                  = 11
};


// Enum EFGame.EFConst.TokenItemType
enum class ETokenItemType : uint8_t
{
	TOKEN_ITEM_COLLECT             = 0,
	TOKEN_ITEM_MOD                 = 1,
	TOKEN_ITEM_VOYAGE              = 2,
	TOKEN_ITEM_ISLAND              = 3,
	TOKEN_ITEM_TOWN                = 4,
	TOKEN_ITEM_LIFE_MATERIAL       = 5,
	TOKEN_ITEM_VOYAGE_MATERIAL     = 6,
	TOKEN_ITEM_FRIENDSHIP          = 7,
	TOKEN_ITEM_MAX                 = 8
};


// Enum EFGame.EFConst.TokenItemStorageType
enum class ETokenItemStorageType : uint8_t
{
	TOKEN_ITEM_STORAGE_TYPE_PC     = 0,
	TOKEN_ITEM_STORAGE_TYPE_ACCOUNT = 1,
	TOKEN_ITEM_STORAGE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.ItemGrade
enum class EItemGrade : uint8_t
{
	ITEM_GRADE_COMMON              = 0,
	ITEM_GRADE_UNCOMMON            = 1,
	ITEM_GRADE_RARE                = 2,
	ITEM_GRADE_EPIC                = 3,
	ITEM_GRADE_LEGEND              = 4,
	ITEM_GRADE_RELIC               = 5,
	ITEM_GRADE_ANCIENT             = 6,
	ITEM_GRADE_ESTHER              = 7,
	ITEM_GRADE_AVATAR              = 8,
	ITEM_GRADE_QUEST               = 9,
	ITEM_GRADE_MAX                 = 10
};


// Enum EFGame.EFConst.ItemOptionGroupGrade
enum class EItemOptionGroupGrade : uint8_t
{
	ITEM_OPTION_GROUP_GRADE_NORMAL = 0,
	ITEM_OPTION_GROUP_GRADE_SPECIAL = 1,
	ITEM_OPTION_GROUP_GRADE_MAX    = 2
};


// Enum EFGame.EFConst.ItemDurabilityType
enum class EItemDurabilityType : uint8_t
{
	ITEM_DURABILITY_TYPE_NORMAL    = 0,
	ITEM_DURABILITY_TYPE_UNBREAKABLE = 1,
	ITEM_DURABILITY_TYPE_NOT_REPAIRABLE = 2,
	ITEM_DURABILITY_TYPE_MAX_DOUBLE = 3,
	ITEM_DURABILITY_TYPE_MAX_HALF  = 4,
	ITEM_DURABILITY_TYPE_REPAIR_COST_DOUBLE = 5,
	ITEM_DURABILITY_TYPE_REPAIR_COST_HALF = 6,
	ITEM_DURABILITY_TYPE_MAX       = 7
};


// Enum EFGame.EFConst.ItemBindType
enum class EItemBindType : uint8_t
{
	ITEM_BIND_TYPE_NA              = 0,
	ITEM_BIND_TYPE_ON_EQUIP        = 1,
	ITEM_BIND_TYPE_ON_PICKUP       = 2,
	ITEM_BIND_TYPE_ON_CARVE        = 3,
	ITEM_BIND_TYPE_ON_ENCHANT      = 4,
	ITEM_BIND_TYPE_ON_PICKUP_RANDOM = 5,
	ITEM_BIND_TYPE_MAX             = 6
};


// Enum EFGame.EFConst.ItemBindTarget
enum class EItemBindTarget : uint8_t
{
	ITEM_BIND_TARGET_NA            = 0,
	ITEM_BIND_TARGET_PC            = 1,
	ITEM_BIND_TARGET_ACCOUNT       = 2,
	ITEM_BIND_TARGET_MAX           = 3
};


// Enum EFGame.EFConst.ItemExpireType
enum class EItemExpireType : uint8_t
{
	ITEM_EXPIRE_TYPE_NA            = 0,
	ITEM_EXPIRE_TYPE_ON_CREATE     = 1,
	ITEM_EXPIRE_TYPE_ON_EQUIP      = 2,
	ITEM_EXPIRE_TYPE_ON_DEADLINE   = 3,
	ITEM_EXPIRE_TYPE_ON_NEXT_TIME  = 4,
	ITEM_EXPIRE_TYPE_ON_NEXT_OPER  = 5,
	ITEM_EXPIRE_TYPE_MAX           = 6
};


// Enum EFGame.EFConst.ItemStorageType
enum class EItemStorageType : uint8_t
{
	ITEM_STORAGE_TYPE_INVEN        = 0,
	ITEM_STORAGE_TYPE_EQUIP        = 1,
	ITEM_STORAGE_TYPE_STASH        = 2,
	ITEM_STORAGE_TYPE_GUILD        = 3,
	ITEM_STORAGE_TYPE_QUEST        = 4,
	ITEM_STORAGE_TYPE_MAIL         = 5,
	ITEM_STORAGE_TYPE_VEHICLE_SLOT = 6,
	ITEM_STORAGE_TYPE_VOLATILE_SLOT = 7,
	ITEM_STORAGE_TYPE_LIFE_TOOL_S1 = 8,
	ITEM_STORAGE_TYPE_ACCOUNT_STASH = 9,
	ITEM_STORAGE_TYPE_SCRAP_LIST   = 10,
	ITEM_STORAGE_TYPE_POLISH_LIST  = 11,
	ITEM_STORAGE_TYPE_MARKET       = 12,
	ITEM_STORAGE_TYPE_PAID_ITEM_LIST = 13,
	ITEM_STORAGE_TYPE_MATERIAL_STASH = 14,
	ITEM_STORAGE_TYPE_AVATAR_STASH = 15,
	ITEM_STORAGE_TYPE_MARKET_TEMP  = 16,
	ITEM_STORAGE_TYPE_ASTRA_EQUIP  = 17,
	ITEM_STORAGE_TYPE_ACCOUNT_SECOND_STASH = 18,
	ITEM_STORAGE_TYPE_AUCTION      = 19,
	ITEM_STORAGE_TYPE_ACCOUNT_EQUIP = 20,
	ITEM_STORAGE_TYPE_LIFE_TOOL    = 21,
	ITEM_STORAGE_TYPE_TOWN_TEMP    = 22,
	ITEM_STORAGE_TYPE_LOST_SURVIVAL_INVEN = 23,
	ITEM_STORAGE_TYPE_GEM_EQUIP    = 24,
	ITEM_STORAGE_TYPE_MAX          = 25
};


// Enum EFGame.EFConst.ItemOptionType
enum class EItemOptionType : uint8_t
{
	ITEM_OPTION_TYPE_NONE          = 0,
	ITEM_OPTION_TYPE_EQUIP         = 1,
	ITEM_OPTION_TYPE_ABILITY_STONE = 2,
	ITEM_OPTION_TYPE_SECRET_DUNGEON_SEED = 3,
	ITEM_OPTION_TYPE_ASTRA         = 4,
	ITEM_OPTION_TYPE_EQUIP2        = 5,
	ITEM_OPTION_TYPE_ABILITY_STONE2 = 6,
	ITEM_OPTION_TYPE_GEM           = 7,
	ITEM_OPTION_TYPE_MAX           = 8
};


// Enum EFGame.EFConst.ItemDropSiteType
enum class EItemDropSiteType : uint8_t
{
	ITEM_DROP_SITE_TYPE_NONE       = 0,
	ITEM_DROP_SITE_TYPE_COMMON     = 1,
	ITEM_DROP_SITE_TYPE_RAID       = 2,
	ITEM_DROP_SITE_TYPE_REVERSE_RUIN = 3,
	ITEM_DROP_SITE_TYPE_BOSS_RUSH  = 4,
	ITEM_DROP_SITE_TYPE_RANDOM_BOX = 5,
	ITEM_DROP_SITE_TYPE_NPC_SHOP   = 6,
	ITEM_DROP_SITE_TYPE_READJUST   = 7,
	ITEM_DROP_SITE_TYPE_MAX        = 8
};


// Enum EFGame.EFConst.ItemUseInBattle
enum class EItemUseInBattle : uint8_t
{
	ITEM_USE_IN_BATTLE_NORMAL      = 0,
	ITEM_USE_IN_BATTLE_RESTRICTED  = 1,
	ITEM_USE_IN_BATTLE_ONLY        = 2,
	ITEM_USE_IN_BATTLE_MAX         = 3
};


// Enum EFGame.EFConst.ItemUseInOcean
enum class EItemUseInOcean : uint8_t
{
	ITEM_USE_IN_OCEAN_NONE         = 0,
	ITEM_USE_IN_OCEAN_ONLY         = 1,
	ITEM_USE_IN_OCEAN_NOT          = 2,
	ITEM_USE_IN_OCEAN_MAX          = 3
};


// Enum EFGame.EFConst.ItemPolishGrade
enum class EItemPolishGrade : uint8_t
{
	ITEM_POLISH_GRADE_NONE         = 0,
	ITEM_POLISH_GRADE_ZERO         = 1,
	ITEM_POLISH_GRADE_ONE          = 2,
	ITEM_POLISH_GRADE_TWO          = 3,
	ITEM_POLISH_GRADE_THREE        = 4,
	ITEM_POLISH_GRADE_FOUR         = 5,
	ITEM_POLISH_GRADE_FIVE         = 6,
	ITEM_POLISH_GRADE_MAX          = 7
};


// Enum EFGame.EFConst.ItemCooldownType
enum class EItemCooldownType : uint8_t
{
	ITEM_COOLDOWN_TYPE_NORMAL      = 0,
	ITEM_COOLDOWN_TYPE_DAILY       = 1,
	ITEM_COOLDOWN_TYPE_WEEKLY      = 2,
	ITEM_COOLDOWN_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.ItemTintGlossType
enum class EItemTintGlossType : uint8_t
{
	ITEM_TINT_GLOSS_TYPE_NONE      = 0,
	ITEM_TINT_GLOSS_TYPE           = 1,
	ITEM_TINT_GLOSS_TYPE01         = 2,
	ITEM_TINT_GLOSS_TYPE02         = 3,
	ITEM_TINT_GLOSS_TYPE_MAX       = 4
};


// Enum EFGame.EFConst.ItemTintPartType
enum class EItemTintPartType : uint8_t
{
	ITEM_TINT_PART_TYPE_A          = 0,
	ITEM_TINT_PART_TYPE_B          = 1,
	ITEM_TINT_PART_TYPE_C          = 2,
	ITEM_TINT_PART_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.IdentityCategory
enum class EIdentityCategory : uint8_t
{
	IDENTITY_CATEGORY_NONE         = 0,
	IDENTITY_CATEGORY_BERSERKER_NORMAL = 1,
	IDENTITY_CATEGORY_BERSERKER_RUSH = 2,
	IDENTITY_CATEGORY_WARLORD_NORMAL = 3,
	IDENTITY_CATEGORY_WARLORD_SHIELD_OF_BATTLEFIELD = 4,
	IDENTITY_CATEGORY_DESTROYER_NORMAL = 5,
	IDENTITY_CATEGORY_DESTROYER_FOCUS = 6,
	IDENTITY_CATEGORY_DESTROYER_RELEASE = 7,
	IDENTITY_CATEGORY_BATTLE_MASTER_NORMAL = 8,
	IDENTITY_CATEGORY_BATTLE_MASTER_BUBBLE = 9,
	IDENTITY_CATEGORY_INFIGHTER_NORMAL = 10,
	IDENTITY_CATEGORY_INFIGHTER_VIGOR = 11,
	IDENTITY_CATEGORY_INFIGHTER_SHOCK = 12,
	IDENTITY_CATEGORY_FORCEMASTER_NORMAL = 13,
	IDENTITY_CATEGORY_FORCEMASTER_SOUL = 14,
	IDENTITY_CATEGORY_LANCE_MASTER_NORMAL = 15,
	IDENTITY_CATEGORY_LANCE_MASTER_WILD = 16,
	IDENTITY_CATEGORY_LANCE_MASTER_FOCUS = 17,
	IDENTITY_CATEGORY_DEVIL_HUNTER_NORMAL = 18,
	IDENTITY_CATEGORY_DEVIL_HUNTER_PISTOL = 19,
	IDENTITY_CATEGORY_DEVIL_HUNTER_SHOTGUN = 20,
	IDENTITY_CATEGORY_DEVIL_HUNTER_RIFLE = 21,
	IDENTITY_CATEGORY_BLASTER_NORMAL = 22,
	IDENTITY_CATEGORY_BLASTER_CANNON = 23,
	IDENTITY_CATEGORY_HAWKEYE_NORMAL = 24,
	IDENTITY_CATEGORY_HAWKEYE_SUMMON = 25,
	IDENTITY_CATEGORY_SUMMONER_NORMAL = 26,
	IDENTITY_CATEGORY_SUMMONER_ANCIENT = 27,
	IDENTITY_CATEGORY_ARCANA_NORMAL = 28,
	IDENTITY_CATEGORY_ARCANA_STACK = 29,
	IDENTITY_CATEGORY_ARCANA_RUIN  = 30,
	IDENTITY_CATEGORY_ARCANA_CARD  = 31,
	IDENTITY_CATEGORY_BARD_NORMAL  = 32,
	IDENTITY_CATEGORY_BARD_SERENADE = 33,
	IDENTITY_CATEGORY_BLADE_BURST  = 34,
	IDENTITY_CATEGORY_HOLYKNIGHT_NORMAL = 35,
	IDENTITY_CATEGORY_HOLYKNIGHT_HOLY = 36,
	IDENTITY_CATEGORY_HOLYKNIGHT_RETRIBUTION = 37,
	IDENTITY_CATEGORY_DEMONIC_NORMAL = 38,
	IDENTITY_CATEGORY_DEMONIC_CAPTURE = 39,
	IDENTITY_CATEGORY_DEMONIC_DEMON = 40,
	IDENTITY_CATEGORY_WARLORD_LANCE = 41,
	IDENTITY_CATEGORY_REAPER_NORMAL = 42,
	IDENTITY_CATEGORY_REAPER_DAGGER = 43,
	IDENTITY_CATEGORY_REAPER_SHADOW = 44,
	IDENTITY_CATEGORY_REAPER_SWOOP = 45,
	IDENTITY_CATEGORY_SCOUTER_SCOUT = 46,
	IDENTITY_CATEGORY_SCOUTER_DRONE = 47,
	IDENTITY_CATEGORY_SCOUTER_HYPER_SYNC = 48,
	IDENTITY_CATEGORY_SCOUTER_FUSION = 49,
	IDENTITY_CATEGORY_BLADE_NORMAL = 50,
	IDENTITY_CATEGORY_ELEMENTAL_MASTER_NORMAL = 51,
	IDENTITY_CATEGORY_ELEMENTAL_MASTER_FIRE = 52,
	IDENTITY_CATEGORY_ELEMENTAL_MASTER_ELECTRICITY = 53,
	IDENTITY_CATEGORY_ELEMENTAL_MASTER_ICE = 54,
	IDENTITY_CATEGORY_YINYANGSHI_NORAML = 55,
	IDENTITY_CATEGORY_YINYANGSHI_PAINT = 56,
	IDENTITY_CATEGORY_YINYANGSHI_PAPER = 57,
	IDENTITY_CATEGORY_WEATHER_ARTIST_WEAPON = 58,
	IDENTITY_CATEGORY_WEATHER_ARTIST_WEATHER = 59,
	IDENTITY_CATEGORY_MAX          = 60
};


// Enum EFGame.EFConst.IdentityProcType
enum class EIdentityProcType : uint8_t
{
	IDENTITY_PROC_TYPE_NONE        = 0,
	IDENTITY_PROC_TYPE_BERSERKER_POINT = 1,
	IDENTITY_PROC_TYPE_BERSERKER_RUSH = 2,
	IDENTITY_PROC_TYPE_DEVIL_HUNTER_STANCE = 3,
	IDENTITY_PROC_TYPE_INFIGHTER_SHOCK_CONSUME = 4,
	IDENTITY_PROC_TYPE_INFIGHTER_SHOCK_OUTBURST = 5,
	IDENTITY_PROC_TYPE_INFIGHTER_SHOCK_CHARGE = 6,
	IDENTITY_PROC_TYPE_BATTLE_MASTER_POINT = 7,
	IDENTITY_PROC_TYPE_WARLORD_START_DEFENCE = 8,
	IDENTITY_PROC_TYPE_WARLORD_FINISH_DEFENCE = 9,
	IDENTITY_PROC_TYPE_WARLORD_START_PROTECT = 10,
	IDENTITY_PROC_TYPE_WARLORD_FINISH_PROTECT = 11,
	IDENTITY_PROC_TYPE_WARLORD_SHIELD_POINT = 12,
	IDENTITY_PROC_TYPE_ARCANA_DECK_POINT = 13,
	IDENTITY_PROC_TYPE_ARCANA_ADD_STACK = 14,
	IDENTITY_PROC_TYPE_ARCANA_CLEAR_STACK = 15,
	IDENTITY_PROC_TYPE_SUMMONER_ANCIENT_CORE = 16,
	IDENTITY_PROC_TYPE_DESTROYER_INCREASE_GRAVITY = 17,
	IDENTITY_PROC_TYPE_DESTROYER_GRAVITY_CORE = 18,
	IDENTITY_PROC_TYPE_FORCEMASTER_EXPLOSION = 19,
	IDENTITY_PROC_TYPE_BLASTER_CANNON_START = 20,
	IDENTITY_PROC_TYPE_BLASTER_CANNON_FINISH = 21,
	IDENTITY_PROC_TYPE_BLASTER_FIRE = 22,
	IDENTITY_PROC_TYPE_BARD_POINT  = 23,
	IDENTITY_PROC_TYPE_BARD_CAST_SENEDANE = 24,
	IDENTITY_PROC_TYPE_HAWKEYE_POINT = 25,
	IDENTITY_PROC_TYPE_HAWKEYE_START = 26,
	IDENTITY_PROC_TYPE_HAWKEYE_FINISH = 27,
	IDENTITY_PROC_TYPE_LANCE_MASTER_POINT = 28,
	IDENTITY_PROC_TYPE_LANCE_MASTER_STANCE = 29,
	IDENTITY_PROC_TYPE_LANCE_MASTER_BURN_OUT = 30,
	IDENTITY_PROC_TYPE_BLADE_POINT = 31,
	IDENTITY_PROC_TYPE_BLADE_ARTS  = 32,
	IDENTITY_PROC_TYPE_BLADE_BURST = 33,
	IDENTITY_PROC_TYPE_DEMONIC_POINT = 34,
	IDENTITY_PROC_TYPE_DEMONIC_DEMONIZATION = 35,
	IDENTITY_PROC_TYPE_DEMONIC_BURN_OUT = 36,
	IDENTITY_PROC_TYPE_DEMONIC_NORMALIZATION = 37,
	IDENTITY_PROC_TYPE_HOLYKNIGHT_POINT = 38,
	IDENTITY_PROC_TYPE_HOLYKNIGHT_STANCE = 39,
	IDENTITY_PROC_TYPE_DESTROYER_DECREASE_GRAVITY = 40,
	IDENTITY_PROC_TYPE_BARD_VALIANT_SERENADE = 41,
	IDENTITY_PROC_TYPE_REAPER_DARK_POINT = 42,
	IDENTITY_PROC_TYPE_REAPER_HEAT_POINT = 43,
	IDENTITY_PROC_TYPE_REAPER_PHANTOM_STANCE = 44,
	IDENTITY_PROC_TYPE_SCOUTER_HYPER_SYNC = 45,
	IDENTITY_PROC_TYPE_SCOUTER_ATTACH_DRONE = 46,
	IDENTITY_PROC_TYPE_SCOUTER_CORE_GAUGE = 47,
	IDENTITY_PROC_TYPE_SCOUTER_HYPER_SYNC_END = 48,
	IDENTITY_PROC_TYPE_SCOUTER_BATTERY_GAUGE = 49,
	IDENTITY_PROC_TYPE_SCOUTER_DESPAWN_DRONE = 50,
	IDENTITY_PROC_TYPE_ELEMENTAL_MASTER_STANCE = 51,
	IDENTITY_PROC_TYPE_ELEMENTAL_MASTER_GAUGE = 52,
	IDENTITY_PROC_TYPE_YINYANGSHI_POINT = 53,
	IDENTITY_PROC_TYPE_WEATHER_ARTIST_GAUGE = 54,
	IDENTITY_PROC_TYPE_WEATHER_ARTIST_RAIN = 55,
	IDENTITY_PROC_TYPE_WEATHER_ARTIST_TIMESTOP = 56,
	IDENTITY_PROC_TYPE_BERSERKER_BLACKENING = 57,
	IDENTITY_PROC_TYPE_BERSERKER_BLACKENING_END = 58,
	IDENTITY_PROC_TYPE_ELEMENTAL_MASTER_GAUGE_RESET = 59,
	IDENTITY_PROC_TYPE_MAX         = 60
};


// Enum EFGame.EFConst.IdentityResetType
enum class EIdentityResetType : uint8_t
{
	IDENTITY_RESET_TYPE_NONE       = 0,
	IDENTITY_RESET_TYPE_DEFAULT    = 1,
	IDENTITY_RESET_TYPE_FULL       = 2,
	IDENTITY_RESET_TYPE_FILL_EFFECT = 3,
	IDENTITY_RESET_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.IdentityBladeOrbType
enum class EIdentityBladeOrbType : uint8_t
{
	IDENTITY_BLADE_ORB_TYPE_NONE   = 0,
	IDENTITY_BLADE_ORB_TYPE_BLACK  = 1,
	IDENTITY_BLADE_ORB_TYPE_RED    = 2,
	IDENTITY_BLADE_ORB_TYPE_BLUE   = 3,
	IDENTITY_BLADE_ORB_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.InteractPhase
enum class EInteractPhase : uint8_t
{
	INTERACT_PHASE_BEGIN           = 0,
	INTERACT_PHASE_CANCEL          = 1,
	INTERACT_PHASE_FINISH          = 2,
	INTERACT_PHASE_MAX             = 3
};


// Enum EFGame.EFConst.InteractTargetType
enum class EInteractTargetType : uint8_t
{
	INTERACT_TARGET_TYPE_SELF      = 0,
	INTERACT_TARGET_TYPE_POSITION  = 1,
	INTERACT_TARGET_TYPE_NPC       = 2,
	INTERACT_TARGET_TYPE_PROP      = 3,
	INTERACT_TARGET_TYPE_DIRECTION = 4,
	INTERACT_TARGET_TYPE_EXPAND_MINIMAP_POSITION = 5,
	INTERACT_TARGET_TYPE_MAX       = 6
};


// Enum EFGame.EFConst.IndexFilterCliFuncType
enum class EIndexFilterCliFuncType : uint8_t
{
	INDEX_FILTER_CLI_FUNC_TYPE_NONE = 0,
	INDEX_FILTER_CLI_FUNC_TYPE_CASH_CHARGE = 1,
	INDEX_FILTER_CLI_FUNC_TYPE_CASHSHOP_TAKE = 2,
	INDEX_FILTER_CLI_FUNC_TYPE_MAX = 3
};


// Enum EFGame.EFConst.IndexFilterType
enum class EIndexFilterType : uint8_t
{
	INDEX_FILTER_TYPE_NONE         = 0,
	INDEX_FILTER_TYPE_ITEM_ID_FOR_NEW = 1,
	INDEX_FILTER_TYPE_DROP_INDEX   = 2,
	INDEX_FILTER_TYPE_PROP_DROP    = 3,
	INDEX_FILTER_TYPE_PROP_SPAWN   = 4,
	INDEX_FILTER_TYPE_NPC_DROP     = 5,
	INDEX_FILTER_TYPE_NPC_SPAWN    = 6,
	INDEX_FILTER_TYPE_ZONE_ID      = 7,
	INDEX_FILTER_TYPE_QUEST_ID     = 8,
	INDEX_FILTER_TYPE_RAID_ID      = 9,
	INDEX_FILTER_TYPE_BATTLEFIELD_ENTRANCE_ID = 10,
	INDEX_FILTER_TYPE_CHAOS_DUNGEON_ID = 11,
	INDEX_FILTER_TYPE_MUSIC_ID     = 12,
	INDEX_FILTER_TYPE_REVERSE_RUIN_ID = 13,
	INDEX_FILTER_TYPE_ITEM_ID_FOR_USE = 14,
	INDEX_FILTER_TYPE_ZONE_ID_WITH_LEVEL = 15,
	INDEX_FILTER_TYPE_EVENT_MISSION_MULTI_KEY = 16,
	INDEX_FILTER_TYPE_EVENT_MISSION_MULTI_KEY_FOR_REWARD = 17,
	INDEX_FILTER_TYPE_REVERSE_RUIN_CATEGORY = 18,
	INDEX_FILTER_TYPE_TOWN_RESEARCH_ID = 19,
	INDEX_FILTER_TYPE_TOWN_DISPATCH_MISSION_ID = 20,
	INDEX_FILTER_TYPE_ITEM_ID_FOR_ACCOUNT_STASH_IN = 21,
	INDEX_FILTER_TYPE_HOT_TIME_EVT_ID_FOR_REWARD = 22,
	INDEX_FILTER_TYPE_ROLL_BOOK_EVT_ID_FOR_REWARD = 23,
	INDEX_FILTER_TYPE_WORLD_EVT_GROUP_ID_SCHEDULE = 24,
	INDEX_FILTER_TYPE_SKILL_ID     = 25,
	INDEX_FILTER_TYPE_WAY_OF_THRONE_ID = 26,
	INDEX_FILTER_TYPE_CLIENT_FUNCTION = 27,
	INDEX_FILTER_TYPE_CARD         = 28,
	INDEX_FILTER_TYPE_ITEM_STORAGE_ACCOUNT_STASH = 29,
	INDEX_FILTER_TYPE_BATTLEFIELD_OCCUPY_EVENT_REWARD = 30,
	INDEX_FILTER_TYPE_ARK_PASS_MISSION_KEY = 31,
	INDEX_FILTER_TYPE_ARK_PASS_LEVEL_REWARD = 32,
	INDEX_FILTER_TYPE_EPIC_GATE_CHECKPOINT_INDEX = 33,
	INDEX_FILTER_TYPE_MAX          = 34
};


// Enum EFGame.EFConst.InvincibleReason
enum class EInvincibleReason : uint8_t
{
	INVINCIBLE_REASON_SKILL        = 0,
	INVINCIBLE_REASON_SPAWN        = 1,
	INVINCIBLE_REASON_RETURN       = 2,
	INVINCIBLE_REASON_GOD_MODE     = 3,
	INVINCIBLE_REASON_MASTER_ATTACK = 4,
	INVINCIBLE_REASON_AI_PAUSE     = 5,
	INVINCIBLE_REASON_CUTSCENE     = 6,
	INVINCIBLE_REASON_TOWER        = 7,
	INVINCIBLE_REASON_ABILITY_FEATURE = 8,
	INVINCIBLE_REASON_ADMIN_INVISIBILITY = 9,
	INVINCIBLE_REASON_ICE_SATUE    = 10,
	INVINCIBLE_REASON_COLOSSEUM    = 11,
	INVINCIBLE_REASON_QUEST        = 12,
	INVINCIBLE_REASON_ENTERING_ZONE = 13,
	INVINCIBLE_REASON_CLIENT_CUTSCENE = 14,
	INVINCIBLE_REASON_CONTENTS_GENERAL = 15,
	INVINCIBLE_REASON_PROP_VOLUME_ASSEMBLE = 16,
	INVINCIBLE_REASON_RAID_CLEAR   = 17,
	INVINCIBLE_REASON_DUEL_FINISH  = 18,
	INVINCIBLE_REASON_LFF_CHANGE   = 19,
	INVINCIBLE_REASON_MAX          = 20
};


// Enum EFGame.EFConst.IffActionType
enum class EIffActionType : uint8_t
{
	IFF_ACTION_TYPE_ADD            = 0,
	IFF_ACTION_TYPE_REMOVE         = 1,
	IFF_ACTION_TYPE_REMOVE_ALL     = 2,
	IFF_ACTION_TYPE_ADD_FRIEND     = 3,
	IFF_ACTION_TYPE_REMOVE_FRIEND  = 4,
	IFF_ACTION_TYPE_REMOVE_ALL_FRIEND = 5,
	IFF_ACTION_TYPE_MAX            = 6
};


// Enum EFGame.EFConst.ItemAddMaxCountType
enum class EItemAddMaxCountType : uint8_t
{
	ITEM_ADD_MAX_COUNT_TYPE_DAILY_RAID = 0,
	ITEM_ADD_MAX_COUNT_TYPE_WEEKLY_RAID = 1,
	ITEM_ADD_MAX_COUNT_TYPE_CHAOS_DUNGEON = 2,
	ITEM_ADD_MAX_COUNT_TYPE_DAILY_EPONA = 3,
	ITEM_ADD_MAX_COUNT_TYPE_WEEKLY_EPONA = 4,
	ITEM_ADD_MAX_COUNT_TYPE_EVENT_CHAOS_DUNGEON = 5,
	ITEM_ADD_MAX_COUNT_TYPE_EPIC_RAID = 6,
	ITEM_ADD_MAX_COUNT_TYPE_DAILY_FRIENDSHIP_PLAY_MUSIC = 7,
	ITEM_ADD_MAX_COUNT_TYPE_DAILY_FRIENDSHIP_SOCIAL_ACTION = 8,
	ITEM_ADD_MAX_COUNT_TYPE_MAX    = 9
};


// Enum EFGame.EFConst.ItemAssemblyType
enum class EItemAssemblyType : uint8_t
{
	ITEM_ASSEMBLY_TYPE_NORMAL      = 0,
	ITEM_ASSEMBLY_TYPE_EVOLUTION   = 1,
	ITEM_ASSEMBLY_TYPE_ESTHER_WEAPON = 2,
	ITEM_ASSEMBLY_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.ItemAssemblyGrade
enum class EItemAssemblyGrade : uint8_t
{
	ITEM_ASSEMBLY_GRADE_NONE       = 0,
	ITEM_ASSEMBLY_GRADE_BASIC      = 1,
	ITEM_ASSEMBLY_GRADE_ADVANCED   = 2,
	ITEM_ASSEMBLY_GRADE_EXPERT     = 3,
	ITEM_ASSEMBLY_GRADE_MAX        = 4
};


// Enum EFGame.EFConst.ItemAssemblyState
enum class EItemAssemblyState : uint8_t
{
	ITEM_ASSEMBLY_STATE_IN_PROGRESS = 0,
	ITEM_ASSEMBLY_STATE_FINISHED   = 1,
	ITEM_ASSEMBLY_STATE_RECEIVED   = 2,
	ITEM_ASSEMBLY_STATE_SEASON_EXPIRED = 3,
	ITEM_ASSEMBLY_STATE_MAX        = 4
};


// Enum EFGame.EFConst.ItemAssemblyOutputGrade
enum class EItemAssemblyOutputGrade : uint8_t
{
	ITEM_ASSEMBLY_OUTPUT_GRADE_NORMAL = 0,
	ITEM_ASSEMBLY_OUTPUT_GRADE_GOOD = 1,
	ITEM_ASSEMBLY_OUTPUT_GRADE_MAX = 2
};


// Enum EFGame.EFConst.ItemDisassemblyOutputGrade
enum class EItemDisassemblyOutputGrade : uint8_t
{
	ITEM_DISASSEMBLY_OUTPUT_GRADE_NORMAL = 0,
	ITEM_DISASSEMBLY_OUTPUT_GRADE_GOOD = 1,
	ITEM_DISASSEMBLY_OUTPUT_GRADE_MAX = 2
};


// Enum EFGame.EFConst.ItemPolishState
enum class EItemPolishState : uint8_t
{
	ITEM_POLISH_STATE_IN_PROGRESS  = 0,
	ITEM_POLISH_STATE_FINISHED     = 1,
	ITEM_POLISH_STATE_VERIFIED     = 2,
	ITEM_POLISH_STATE_RECEIVED     = 3,
	ITEM_POLISH_STATE_MAX          = 4
};


// Enum EFGame.EFConst.ItemExchangeType
enum class EItemExchangeType : uint8_t
{
	ITEM_EXCHANGE_TYPE_NONE        = 0,
	ITEM_EXCHANGE_TYPE_SECRET_MAP  = 1,
	ITEM_EXCHANGE_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.ItemExchangeResultType
enum class EItemExchangeResultType : uint8_t
{
	ITEM_EXCHANGE_RESULT_TYPE_NONE = 0,
	ITEM_EXCHANGE_RESULT_TYPE_GREAT_SUCCESS = 1,
	ITEM_EXCHANGE_RESULT_TYPE_SUCCESS = 2,
	ITEM_EXCHANGE_RESULT_TYPE_FAIL = 3,
	ITEM_EXCHANGE_RESULT_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.ItemEnhanceMaterialEffectType
enum class EItemEnhanceMaterialEffectType : uint8_t
{
	ITEM_ENHANCE_MATERIAL_EFFECT_NONE = 0,
	ITEM_ENHANCE_MATERIAL_EFFECT_INCREASE_SUCCESS_ADD = 1,
	ITEM_ENHANCE_MATERIAL_EFFECT_INCREASE_SUCCESS_MULTIPLY = 2,
	ITEM_ENHANCE_MATERIAL_EFFECT_DISCOUNT_COST = 3,
	ITEM_ENHANCE_MATERIAL_EFFECT_SAVE_MATERIAL = 4,
	ITEM_ENHANCE_MATERIAL_EFFECT_SAVE_MATERIAL_ON_FAILURE = 5,
	ITEM_ENHANCE_MATERIAL_EFFECT_ADD_LEVEL = 6,
	ITEM_ENHANCE_MATERIAL_EFFECT_ADD_LEVEL01 = 7,
	ITEM_ENHANCE_MATERIAL_EFFECT_MAX = 8
};


// Enum EFGame.EFConst.ItemSocketAmplifyGrade
enum class EItemSocketAmplifyGrade : uint8_t
{
	ITEM_SOCKET_AMPLIFY_GRADE_FAILURE = 0,
	ITEM_SOCKET_AMPLIFY_GRADE_NO_CHANGE = 1,
	ITEM_SOCKET_AMPLIFY_GRADE_SUCCESS = 2,
	ITEM_SOCKET_AMPLIFY_GRADE_MAX  = 3
};


// Enum EFGame.EFConst.ItemMoveTag
enum class EItemMoveTag : uint8_t
{
	ITEM_MOVE_TAG_NONE             = 0,
	ITEM_MOVE_TAG_INHERIT          = 1,
	ITEM_MOVE_TAG_UPGRADE          = 2,
	ITEM_MOVE_TAG_MAX              = 3
};


// Enum EFGame.EFConst.ItemProximityGrade
enum class EItemProximityGrade : uint8_t
{
	ITEM_PROXIMITY_GRADE_NONE      = 0,
	ITEM_PROXIMITY_GRADE_BASIC_01  = 1,
	ITEM_PROXIMITY_GRADE_BASIC_02  = 2,
	ITEM_PROXIMITY_GRADE_BASIC_03  = 3,
	ITEM_PROXIMITY_GRADE_BASIC_04  = 4,
	ITEM_PROXIMITY_GRADE_BASIC_05  = 5,
	ITEM_PROXIMITY_GRADE_MAX       = 6
};


// Enum EFGame.EFConst.ItemTradeType
enum class EItemTradeType : uint8_t
{
	ITEM_TRADE_TYPE_NONE           = 0,
	ITEM_TRADE_TYPE_MARKET         = 1,
	ITEM_TRADE_TYPE_AUCTION        = 2,
	ITEM_TRADE_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.InitReason
enum class EInitReason : uint8_t
{
	INIT_REASON_NONE               = 0,
	INIT_REASON_TUTORIAL_MODE      = 1,
	INIT_REASON_TRAINING_MODE      = 2,
	INIT_REASON_CHALLENGE_PRESET   = 3,
	INIT_REASON_MAX                = 4
};


// Enum EFGame.EFConst.ItemInheritResult
enum class EItemInheritResult : uint8_t
{
	ITEM_INHERIT_RESULT_DESTROY    = 0,
	ITEM_INHERIT_RESULT_RESET_QUALITY = 1,
	ITEM_INHERIT_RESULT_MAX        = 2
};


// Enum EFGame.EFConst.ItemOptionAliasType
enum class EItemOptionAliasType : uint8_t
{
	ITEM_OPTION_ALIAS_TYPE_NONE    = 0,
	ITEM_OPTION_ALIAS_TYPE_STAT    = 1,
	ITEM_OPTION_ALIAS_TYPE_COMBAT_EFFECT = 2,
	ITEM_OPTION_ALIAS_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.JumpContinentType
enum class EJumpContinentType : uint8_t
{
	JUMP_CONTINENT_TYPE_NONE       = 0,
	JUMP_CONTINENT_TYPE_BERN       = 1,
	JUMP_CONTINENT_TYPE_LOHENDEL   = 2,
	JUMP_CONTINENT_TYPE_YORN       = 3,
	JUMP_CONTINENT_TYPE_FATON      = 4,
	JUMP_CONTINENT_TYPE_PAPUNIKA   = 5,
	JUMP_CONTINENT_TYPE_MAX        = 6
};


// Enum EFGame.EFConst.JumpingModeCompletionRewardType
enum class EJumpingModeCompletionRewardType : uint8_t
{
	JUMPING_MODE_COMPLETION_REWARD_TYPE_NONE = 0,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_QUEST_COMPLETE = 1,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ACHIEVEMENT_COMPLETE = 2,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_CONTENTS_UNLOCK = 3,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ITEM = 4,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_PC_LEVEL_SET = 5,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_LIFE_LEVEL_SET = 6,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_MUSIC = 7,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ISLAND_HEARTS = 8,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_SQUARE_HOLE_OPEN = 9,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ZONE_VISIT = 10,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_PERMANENT_ATTR = 11,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_QUEST_START = 12,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_RAID_LICENSE_GRADE = 13,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_CREW = 14,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_SHIP = 15,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_MONEY = 16,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_SKILL = 17,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ADV_TASK = 18,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ADV_VISIT_CONTINENT = 19,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ADV_MATTER_TOUCH = 20,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ABILITY_ENGRAVE = 21,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_DELETE_ITEM = 22,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ZONE_CLEAR = 23,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_SKILL_UPDATE = 24,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_WELCOME_BOOST_COMPLETE = 25,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_REVERSE_RUIN_LAST_PLAY = 26,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_SOCIAL_ACTION = 27,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_ARK = 28,
	JUMPING_MODE_COMPLETION_REWARD_TYPE_MAX = 29
};


// Enum EFGame.EFConst.JumpingModeRewardGiveRangeType
enum class EJumpingModeRewardGiveRangeType : uint8_t
{
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_COMMON = 0,
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_EVENT = 1,
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_VOUCHER = 2,
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_VOUCHER_PURCHASE = 3,
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_TOWN = 4,
	JUMPING_MODE_REWARD_GIVE_RANGE_TYPE_MAX = 5
};


// Enum EFGame.EFConst.JumpingOriginType
enum class EJumpingOriginType : uint8_t
{
	JUMPING_ORIGIN_TYPE_NONE       = 0,
	JUMPING_ORIGIN_TYPE_VOUCHER_PURCHASE = 1,
	JUMPING_ORIGIN_TYPE_VOUCHER    = 2,
	JUMPING_ORIGIN_TYPE_EVENT      = 3,
	JUMPING_ORIGIN_TYPE_TOWN       = 4,
	JUMPING_ORIGIN_TYPE_MAX        = 5
};


// Enum EFGame.EFConst.JumpingTutorialType
enum class EJumpingTutorialType : uint8_t
{
	JUMPING_TUTORIAL_TYPE_NONE     = 0,
	JUMPING_TUTORIAL_TYPE_PROLOGUE = 1,
	JUMPING_TUTORIAL_TYPE_JUMPING_STORY = 2,
	JUMPING_TUTORIAL_TYPE_GROWTH_MODE = 3,
	JUMPING_TUTORIAL_TYPE_TUTORIAL_MODE = 4,
	JUMPING_TUTORIAL_TYPE_MAX      = 5
};


// Enum EFGame.EFConst.AccountKickReason
enum class EAccountKickReason : uint8_t
{
	KICK_REASON_NONE               = 0,
	KICK_REASON_DUP_LOGIN          = 1,
	KICK_REASON_DUP_LOGIN_LOCK     = 2,
	KICK_REASON_ADDICTION          = 3,
	KICK_REASON_MAX                = 4
};


// Enum EFGame.EFConst.LanguageCode
enum class ELanguageCode : uint8_t
{
	LANGUAGE_CODE_DEV              = 0,
	LANGUAGE_CODE_KOR              = 1,
	LANGUAGE_CODE_CHN              = 2,
	LANGUAGE_CODE_RUS              = 3,
	LANGUAGE_CODE_JPN              = 4,
	LANGUAGE_CODE_ENG              = 5,
	LANGUAGE_CODE_FRA              = 6,
	LANGUAGE_CODE_DEU              = 7,
	LANGUAGE_CODE_ESP              = 8,
	LANGUAGE_CODE_ITA              = 9,
	LANGUAGE_CODE_MAX              = 10
};


// Enum EFGame.EFConst.LoginType
enum class ELoginType : uint8_t
{
	LOGIN_TYPE_NORMAL              = 0,
	LOGIN_TYPE_STOVE               = 1,
	LOGIN_TYPE_TENCENT             = 2,
	LOGIN_TYPE_GAS                 = 3,
	LOGIN_TYPE_GAMEON              = 4,
	LOGIN_TYPE_AMAZON              = 5,
	LOGIN_TYPE_MAX                 = 6
};


// Enum EFGame.EFConst.LogoutReason
enum class ELogoutReason : uint8_t
{
	LOGOUT_REASON_NORMAL           = 0,
	LOGOUT_REASON_SERVER_SELECT    = 1,
	LOGOUT_REASON_MAX              = 2
};


// Enum EFGame.EFConst.LifeCostItemType
enum class ELifeCostItemType : uint8_t
{
	LIFE_COST_ITEM_TYPE_NONE       = 0,
	LIFE_COST_ITEM_TYPE_EDIBLE     = 1,
	LIFE_COST_ITEM_TYPE_SMALL_FRY  = 2,
	LIFE_COST_ITEM_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.LifeEnergyRecoveryOrigin
enum class ELifeEnergyRecoveryOrigin : uint8_t
{
	LIFE_ENERGY_RECOVERY_ORIGIN_NORMAL = 0,
	LIFE_ENERGY_RECOVERY_ORIGIN_OFFLINE = 1,
	LIFE_ENERGY_RECOVERY_ORIGIN_GAME_ACTION = 2,
	LIFE_ENERGY_RECOVERY_ORIGIN_ADMIN = 3,
	LIFE_ENERGY_RECOVERY_ORIGIN_MAX = 4
};


// Enum EFGame.EFConst.LifeFishingRewardLevel
enum class ELifeFishingRewardLevel : uint8_t
{
	LIFE_FISHING_REWARD_LEVEL_NONE = 0,
	LIFE_FISHING_REWARD_LEVEL_EASY = 1,
	LIFE_FISHING_REWARD_LEVEL_NORMAL = 2,
	LIFE_FISHING_REWARD_LEVEL_HARD = 3,
	LIFE_FISHING_REWARD_LEVEL_HELL = 4,
	LIFE_FISHING_REWARD_LEVEL_MAX  = 5
};


// Enum EFGame.EFConst.LifeItemProduceType
enum class ELifeItemProduceType : uint8_t
{
	LIFE_ITEM_PRODUCE_DROP         = 0,
	LIFE_ITEM_PRODUCE_GIVE         = 1,
	LIFE_ITEM_PRODUCE_MAX          = 2
};


// Enum EFGame.EFConst.LifePointUpdateReason
enum class ELifePointUpdateReason : uint8_t
{
	LIFE_POINT_UPDATE_REASON_NONE  = 0,
	LIFE_POINT_UPDATE_REASON_INIT_LIFE_SKILL = 1,
	LIFE_POINT_UPDATE_REASON_MAX   = 2
};


// Enum EFGame.EFConst.LifeVesselActiveType
enum class ELifeVesselActiveType : uint8_t
{
	LIFE_VESSEL_ACTIVE_TYPE_NONE   = 0,
	LIFE_VESSEL_ACTIVE_TYPE_OFF    = 1,
	LIFE_VESSEL_ACTIVE_TYPE_ON     = 2,
	LIFE_VESSEL_ACTIVE_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.LifeHuntingMobType
enum class ELifeHuntingMobType : uint8_t
{
	LIFE_HUNTING_MOB_TYPE_NONE     = 0,
	LIFE_HUNTING_MOB_TYPE_NORMAL   = 1,
	LIFE_HUNTING_MOB_TYPE_PLATINUM = 2,
	LIFE_HUNTING_MOB_TYPE_LARGE    = 3,
	LIFE_HUNTING_MOB_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.LifeTechniqueTierType
enum class ELifeTechniqueTierType : uint8_t
{
	LIFE_TECHNIQUE_TIER_TYPE_NONE  = 0,
	LIFE_TECHNIQUE_TIER_TYPE       = 1,
	LIFE_TECHNIQUE_TIER_TYPE01     = 2,
	LIFE_TECHNIQUE_TIER_TYPE02     = 3,
	LIFE_TECHNIQUE_TIER_TYPE03     = 4,
	LIFE_TECHNIQUE_TIER_TYPE_MAX   = 5
};


// Enum EFGame.EFConst.LifeToolStatType
enum class ELifeToolStatType : uint8_t
{
	LIFE_TOOL_STAT_TYPE_NONE       = 0,
	LIFE_TOOL_STAT_TYPE_CASTING_SPEED = 1,
	LIFE_TOOL_STAT_TYPE_CASTING_TIER = 2,
	LIFE_TOOL_STAT_TYPE_BONUS_TYPE_SUCCESS = 3,
	LIFE_TOOL_STAT_TYPE_BONUS_TYPE_EXTRA = 4,
	LIFE_TOOL_STAT_TYPE_BONUS_TYPE_SKILL_BONUS = 5,
	LIFE_TOOL_STAT_TYPE_BONUS_TYPE_MINIGAME_PERFECT = 6,
	LIFE_TOOL_STAT_TYPE_DURABILITY_BONUS = 7,
	LIFE_TOOL_STAT_TYPE_MINI_GAME_DIFFICULTY = 8,
	LIFE_TOOL_STAT_TYPE_MAX        = 9
};


// Enum EFGame.EFConst.LifeToolRepairMoneyType
enum class ELifeToolRepairMoneyType : uint8_t
{
	LIFE_TOOL_REPAIR_MONEY_TYPE_NONE = 0,
	LIFE_TOOL_REPAIR_MONEY_TYPE_GOLD = 1,
	LIFE_TOOL_REPAIR_MONEY_TYPE_TRADE_GOLD = 2,
	LIFE_TOOL_REPAIR_MONEY_TYPE_MAX = 3
};


// Enum EFGame.EFConst.LifeToolRepairType
enum class ELifeToolRepairType : uint8_t
{
	LIFE_TOOL_REPAIR_TYPE_REPAIR_ONE = 0,
	LIFE_TOOL_REPAIR_TYPE_REPAIR_EQUIP = 1,
	LIFE_TOOL_REPAIR_TYPE_REPAIR_INVEN = 2,
	LIFE_TOOL_REPAIR_TYPE_REPAIR_ALL = 3,
	LIFE_TOOL_REPAIR_TYPE_RESTORATION_ONE = 4,
	LIFE_TOOL_REPAIR_TYPE_MAX      = 5
};


// Enum EFGame.EFConst.LifeRewardDropType
enum class ELifeRewardDropType : uint8_t
{
	LIFE_REWARD_DROP_TYPE_NONE     = 0,
	LIFE_REWARD_DROP_TYPE_SUCCESS  = 1,
	LIFE_REWARD_DROP_TYPE_SKILL_BONUS = 2,
	LIFE_REWARD_DROP_TYPE_MINI_GAME_PERFECT = 3,
	LIFE_REWARD_DROP_TYPE_MINI_GAME_GOOD = 4,
	LIFE_REWARD_DROP_TYPE_MINI_GAME_GREAT = 5,
	LIFE_REWARD_DROP_TYPE_EXTRA    = 6,
	LIFE_REWARD_DROP_TYPE_ETC      = 7,
	LIFE_REWARD_DROP_TYPE_ETC2     = 8,
	LIFE_REWARD_DROP_TYPE_ETC3     = 9,
	LIFE_REWARD_DROP_TYPE_MAX      = 10
};


// Enum EFGame.EFConst.LifeSkillSectionForTierType
enum class ELifeSkillSectionForTierType : uint8_t
{
	LIFE_SKILL_SECTION_FOR_TIER_TYPE_NONE = 0,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE = 1,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE01 = 2,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE02 = 3,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE03 = 4,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE04 = 5,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE05 = 6,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE06 = 7,
	LIFE_SKILL_SECTION_FOR_TIER_TYPE_MAX = 8
};


// Enum EFGame.EFConst.LimitCountBindTarget
enum class ELimitCountBindTarget : uint8_t
{
	LIMIT_COUNT_BIND_TARGET_PC     = 0,
	LIMIT_COUNT_BIND_TARGET_ACCOUNT = 1,
	LIMIT_COUNT_BIND_TARGET_MAX    = 2
};


// Enum EFGame.EFConst.LifeSkillType
enum class ELifeSkillType : uint8_t
{
	LIFE_SKILL_TYPE_NONE           = 0,
	LIFE_SKILL_TYPE_NORMAL         = 1,
	LIFE_SKILL_TYPE_MASTERY        = 2,
	LIFE_SKILL_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.LostSurvivalState
enum class ELostSurvivalState : uint8_t
{
	LOST_SURVIVAL_STATE_NONE       = 0,
	LOST_SURVIVAL_STATE_ENTRANCE_WAITING = 1,
	LOST_SURVIVAL_STATE_PROGRESS_START = 2,
	LOST_SURVIVAL_STATE_PROGRESS_PHASE = 3,
	LOST_SURVIVAL_STATE_PROGRESS_LAST = 4,
	LOST_SURVIVAL_STATE_FINISH     = 5,
	LOST_SURVIVAL_STATE_MAX        = 6
};


// Enum EFGame.EFConst.LostSurvivalPhaseTransitionState
enum class ELostSurvivalPhaseTransitionState : uint8_t
{
	LOST_SURVIVAL_TRANSITION_STATE_NONE = 0,
	LOST_SURVIVAL_TRANSITION_STATE_WAITING = 1,
	LOST_SURVIVAL_TRANSITION_STATE_PROGRESS = 2,
	LOST_SURVIVAL_TRANSITION_STATE_FINISH = 3,
	LOST_SURVIVAL_TRANSITION_STATE_MAX = 4
};


// Enum EFGame.EFConst.LobbyReturnReason
enum class ELobbyReturnReason : uint8_t
{
	LOBBY_RETURN_REASON_NONE       = 0,
	LOBBY_RETURN_REASON_PROLOGUE_DUNGEON = 1,
	LOBBY_RETURN_REASON_WARP_TOWN_BY_LOGIN = 2,
	LOBBY_RETURN_REASON_MAX        = 3
};


// Enum EFGame.EFConst.LifeBoostingGaugeRecoveryOrigin
enum class ELifeBoostingGaugeRecoveryOrigin : uint8_t
{
	LIFE_ENERGY_BOOSTING_GAUGE_ORIGIN_ITEM = 0,
	LIFE_ENERGY_BOOSTING_GAUGE_ORIGIN_ADMIN = 1,
	LIFE_ENERGY_BOOSTING_GAUGE_ORIGIN_MAX = 2
};


// Enum EFGame.EFConst.MailTableType
enum class EMailTableType : uint8_t
{
	MAILTABLE_TYPE_NONE            = 0,
	MAILTABLE_TYPE_QUEST           = 1,
	MAILTABLE_TYPE_ZONEBASE        = 2,
	MAILTABLE_TYPE_ACHIEVEMENT     = 3,
	MAILTABLE_TYPE_ITEM            = 4,
	MAILTABLE_TYPE_NPC             = 5,
	MAILTABLE_TYPE_PROP            = 6,
	MAILTABLE_TYPE_PVP_LEVEL       = 7,
	MAILTABLE_TYPE_ZONELEVEL       = 8,
	MAILTABLE_TYPE_MAX             = 9
};


// Enum EFGame.EFConst.MapMarkerType
enum class EMapMarkerType : uint8_t
{
	MAPMARKER_TYPE_SHARED_PARTY    = 0,
	MAPMARKER_TYPE_LINK_LOCATION   = 1,
	MAPMARKER_TYPE_MAX             = 2
};


// Enum EFGame.EFConst.MatchType
enum class EMatchType : uint8_t
{
	MATCH_TYPE_MOD                 = 0,
	MATCH_TYPE_CINEMATIC           = 1,
	MATCH_TYPE_CHAOS_DUNGEON       = 2,
	MATCH_TYPE_RAID_DAILY          = 3,
	MATCH_TYPE_RAID_EVENT          = 4,
	MATCH_TYPE_RAID_ABYSS          = 5,
	MATCH_TYPE_RAID_DIFFICULTY     = 6,
	MATCH_TYPE_REVERSE_RUIN        = 7,
	MATCH_TYPE_BATTLEFIELD         = 8,
	MATCH_TYPE_MAX                 = 9
};


// Enum EFGame.EFConst.MatchLobbyType
enum class EMatchLobbyType : uint8_t
{
	MATCH_LOBBY_TYPE_COMMON        = 0,
	MATCH_LOBBY_TYPE_NEW_WORLD     = 1,
	MATCH_LOBBY_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.MoveType
enum class EMoveType : uint8_t
{
	MOVE_TYPE_STOP                 = 0,
	MOVE_TYPE_NORMAL               = 1,
	MOVE_TYPE_DOWN                 = 2,
	MOVE_TYPE_STAND_UP             = 3,
	MOVE_TYPE_SWAY                 = 4,
	MOVE_TYPE_KNOCKDOWN            = 5,
	MOVE_TYPE_KNOCKDOWN_TWIST      = 6,
	MOVE_TYPE_BOUND                = 7,
	MOVE_TYPE_BRING_DOWN           = 8,
	MOVE_TYPE_FREEZE_STRONG        = 9,
	MOVE_TYPE_SPRING_BOUND         = 10,
	MOVE_TYPE_FREEZE_COUNTER       = 11,
	MOVE_TYPE_MAX                  = 12
};


// Enum EFGame.EFConst.MoveStopReasonType
enum class EMoveStopReasonType : uint8_t
{
	MOVE_STOP_REASON_TYPE_NORMAL   = 0,
	MOVE_STOP_REASON_TYPE_TELEPORT = 1,
	MOVE_STOP_REASON_TYPE_SKILL    = 2,
	MOVE_STOP_REASON_TYPE_START_TRACKMOVE = 3,
	MOVE_STOP_REASON_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.MoveRequestType
enum class EMoveRequestType : uint8_t
{
	MOVE_REQUEST_TYPE_NONE         = 0,
	MOVE_REQUEST_TYPE_CLIENT       = 1,
	MOVE_REQUEST_TYPE_SERVER       = 2,
	MOVE_REQUEST_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.MoveMood
enum class EMoveMood : uint8_t
{
	MOVE_MOOD_NONE                 = 0,
	MOVE_MOOD_WALK                 = 1,
	MOVE_MOOD_RUN                  = 2,
	MOVE_MOOD_FAST_RUN             = 3,
	MOVE_MOOD_BURROW               = 4,
	MOVE_MOOD_MAX                  = 5
};


// Enum EFGame.EFConst.ModType
enum class EModType : uint8_t
{
	MOD_TYPE_CUBE                  = 0,
	MOD_TYPE_TOWER                 = 1,
	MOD_TYPE_PLATINUM_AREA         = 2,
	MOD_TYPE_BOSS_RUSH             = 3,
	MOD_TYPE_WAY_OF_THRONE         = 4,
	MOD_TYPE_MAX                   = 5
};


// Enum EFGame.EFConst.ModContentType
enum class EModContentType : uint8_t
{
	MOD_CONTENT_TYPE_CUBE          = 0,
	MOD_CONTENT_TYPE_CUBE_ELITE    = 1,
	MOD_CONTENT_TYPE_TOWER_A       = 2,
	MOD_CONTENT_TYPE_PLATINUM_A    = 3,
	MOD_CONTENT_TYPE_PLATINUM_B    = 4,
	MOD_CONTENT_TYPE_BOSS_RUSH_A   = 5,
	MOD_CONTENT_TYPE_BOSS_RUSH_B   = 6,
	MOD_CONTENT_TYPE_BOSS_RUSH_C   = 7,
	MOD_CONTENT_TYPE_TOWER_B       = 8,
	MOD_CONTENT_TYPE_CUBE_DIMENSION = 9,
	MOD_CONTENT_TYPE_TOWER_C       = 10,
	MOD_CONTENT_TYPE_WAY_OF_THRONE_A = 11,
	MOD_CONTENT_TYPE_WAY_OF_THRONE_B = 12,
	MOD_CONTENT_TYPE_WAY_OF_THRONE_C = 13,
	MOD_CONTENT_TYPE_MAX           = 14
};


// Enum EFGame.EFConst.ModCubeStageType
enum class EModCubeStageType : uint8_t
{
	MOD_CUBE_STAGE_TYPE_ELITE_WAVE = 0,
	MOD_CUBE_STAGE_TYPE_BOSS_WAVE  = 1,
	MOD_CUBE_STAGE_TYPE_EXPLODING_WAVE = 2,
	MOD_CUBE_STAGE_TYPE_DOOKY_WAVE = 3,
	MOD_CUBE_STAGE_TYPE_RANGE_WAVE = 4,
	MOD_CUBE_STAGE_TYPE_NPC_WAVE   = 5,
	MOD_CUBE_STAGE_TYPE_OPEN_BOX   = 6,
	MOD_CUBE_STAGE_TYPE_MAX        = 7
};


// Enum EFGame.EFConst.ModCubeStageStep
enum class EModCubeStageStep : uint8_t
{
	MOD_CUBE_STAGE_STEP_PREPARE    = 0,
	MOD_CUBE_STAGE_STEP_START      = 1,
	MOD_CUBE_STAGE_STEP_CLEAR      = 2,
	MOD_CUBE_STAGE_STEP_FAIL       = 3,
	MOD_CUBE_STAGE_STEP_START_BOX_WAVE = 4,
	MOD_CUBE_STAGE_STEP_CHOOSE_DOOR = 5,
	MOD_CUBE_STAGE_STEP_CLEAR_ALL  = 6,
	MOD_CUBE_STAGE_STEP_MAX        = 7
};


// Enum EFGame.EFConst.ModTowerStageStep
enum class EModTowerStageStep : uint8_t
{
	MOD_TOWER_STAGE_STEP_START     = 0,
	MOD_TOWER_STAGE_STEP_TELEPORT  = 1,
	MOD_TOWER_STAGE_STEP_CLEAR     = 2,
	MOD_TOWER_STAGE_STEP_FAIL      = 3,
	MOD_TOWER_STAGE_STEP_CLEAR_ALL = 4,
	MOD_TOWER_STAGE_STEP_MAX       = 5
};


// Enum EFGame.EFConst.ModBossRushStageStep
enum class EModBossRushStageStep : uint8_t
{
	MOD_BOSSRUSH_STAGE_STEP_START  = 0,
	MOD_BOSSRUSH_STAGE_STEP_CLEAR  = 1,
	MOD_BOSSRUSH_STAGE_STEP_FAIL   = 2,
	MOD_BOSSRUSH_STAGE_STEP_CLEAR_ALL = 3,
	MOD_BOSSRUSH_STAGE_STEP_STOP   = 4,
	MOD_BOSSRUSH_STAGE_STEP_MAX    = 5
};


// Enum EFGame.EFConst.ModWayOfThroneStageStep
enum class EModWayOfThroneStageStep : uint8_t
{
	MOD_WAYOFTHRONE_STAGE_STEP_START = 0,
	MOD_WAYOFTHRONE_STAGE_STEP_CLEAR = 1,
	MOD_WAYOFTHRONE_STAGE_STEP_FAIL = 2,
	MOD_WAYOFTHRONE_STAGE_STEP_STOP = 3,
	MOD_WAYOFTHRONE_STAGE_STEP_MAX = 4
};


// Enum EFGame.EFConst.ModWayOfThroneRankRewardType
enum class EModWayOfThroneRankRewardType : uint8_t
{
	MOD_WAYOFTHRONE_RANK_REWARD_TYPE_PERCENT = 0,
	MOD_WAYOFTHRONE_RANK_REWARD_TYPE_ABS = 1,
	MOD_WAYOFTHRONE_RANK_REWARD_TYPE_MAX = 2
};


// Enum EFGame.EFConst.ModTowerSize
enum class EModTowerSize : uint8_t
{
	MOD_TOWER_SIZE_SMALL           = 0,
	MOD_TOWER_SIZE_MEDIUM          = 1,
	MOD_TOWER_SIZE_LARGE           = 2,
	MOD_TOWER_SIZE_MAX             = 3
};


// Enum EFGame.EFConst.ModState
enum class EModState : uint8_t
{
	MOD_STATE_WAITING_ENTRY        = 0,
	MOD_STATE_INTRO                = 1,
	MOD_STATE_PLAYING              = 2,
	MOD_STATE_PROCESSING_RESULT    = 3,
	MOD_STATE_REWARDING            = 4,
	MOD_STATE_CHOOSE_NEXT_ROOM_DOOR = 5,
	MOD_STATE_INACTIVE             = 6,
	MOD_STATE_WAITING_DESTROY      = 7,
	MOD_STATE_VICTORY              = 8,
	MOD_STATE_MAX                  = 9
};


// Enum EFGame.EFConst.ModRankType
enum class EModRankType : uint8_t
{
	MOD_RANK_TYPE_DEATH_COUNT      = 0,
	MOD_RANK_TYPE_DEATH_COUNT_PARTY = 1,
	MOD_RANK_TYPE_DEATH_RANK       = 2,
	MOD_RANK_TYPE_ATTACKED_COUNT   = 3,
	MOD_RANK_TYPE_ATTACKED_COUNT_PARTY = 4,
	MOD_RANK_TYPE_DAMAGE_COUNT     = 5,
	MOD_RANK_TYPE_DAMAGE_RANK      = 6,
	MOD_RANK_TYPE_PROP_INTERACTION_COUNT = 7,
	MOD_RANK_TYPE_PROP_INTERACTION_COUNT_PARTY = 8,
	MOD_RANK_TYPE_CLEAR_TIME_PARTY = 9,
	MOD_RANK_TYPE_KILL_COUNT       = 10,
	MOD_RANK_TYPE_DEBUFF_COUNT_PARTY = 11,
	MOD_RANK_TYPE_CLEARWAVE_PARTY  = 12,
	MOD_RANK_TYPE_TOWER_HP_PARTY   = 13,
	MOD_RANK_TYPE_CUBE_STAGE_INFO  = 14,
	MOD_RANK_TYPE_MAX              = 15
};


// Enum EFGame.EFConst.ModRank
enum class EModRank : uint8_t
{
	MOD_RANK_F                     = 0,
	MOD_RANK_C                     = 1,
	MOD_RANK_B                     = 2,
	MOD_RANK_A                     = 3,
	MOD_RANK_S                     = 4,
	MOD_RANK_SS                    = 5,
	MOD_RANK_MAX                   = 6
};


// Enum EFGame.EFConst.ModRewardGrade
enum class EModRewardGrade : uint8_t
{
	MOD_REWARD_GRADE_BRONZE        = 0,
	MOD_REWARD_GRADE_SILVER        = 1,
	MOD_REWARD_GRADE_GOLD          = 2,
	MOD_REWARD_GRADE_PLATINUM      = 3,
	MOD_REWARD_GRADE_DIAMOND       = 4,
	MOD_REWARD_GRADE_MAX           = 5
};


// Enum EFGame.EFConst.ModEntranceItemType
enum class EModEntranceItemType : uint8_t
{
	MOD_ENTRANCE_ITEM_TYPE_NONE    = 0,
	MOD_ENTRANCE_ITEM_TYPE_MONEY   = 1,
	MOD_ENTRANCE_ITEM_TYPE_ITEM    = 2,
	MOD_ENTRANCE_ITEM_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.ModEntryCondition
enum class EModEntryCondition : uint8_t
{
	MOD_ENTRY_CONDITION_NONE       = 0,
	MOD_ENTRY_CONDITION_QUEST      = 1,
	MOD_ENTRY_CONDITION_QUEST_STAGE = 2,
	MOD_ENTRY_CONDITION_INDUN      = 3,
	MOD_ENTRY_CONDITION_ADVENTURE  = 4,
	MOD_ENTRY_CONDITION_MOD        = 5,
	MOD_ENTRY_CONDITION_MAX        = 6
};


// Enum EFGame.EFConst.ModWaveState
enum class EModWaveState : uint8_t
{
	MOD_WAVE_STATE_READY           = 0,
	MOD_WAVE_STATE_START           = 1,
	MOD_WAVE_STATE_FINISH          = 2,
	MOD_WAVE_STATE_MAX             = 3
};


// Enum EFGame.EFConst.ModResult
enum class EModResult : uint8_t
{
	MOD_RESULT_PLAYING             = 0,
	MOD_RESULT_WIN                 = 1,
	MOD_RESULT_DEFEAT              = 2,
	MOD_RESULT_LEAVE               = 3,
	MOD_RESULT_STOP                = 4,
	MOD_RESULT_MAX                 = 5
};


// Enum EFGame.EFConst.ModTargetType
enum class EModTargetType : uint8_t
{
	MOD_TARGET_TYPE_SELF           = 0,
	MOD_TARGET_TYPE_PARTY          = 1,
	MOD_TARGET_TYPE_TOWER          = 2,
	MOD_TARGET_TYPE_NPC            = 3,
	MOD_TARGET_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.ModAnnounceType
enum class EModAnnounceType : uint8_t
{
	MOD_ANNOUNCE_TYPE_BUFF         = 0,
	MOD_ANNOUNCE_TYPE_MOD_SIGNET   = 1,
	MOD_ANNOUNCE_TYPE_BOSS         = 2,
	MOD_ANNOUNCE_TYPE_CAVE_OPEN    = 3,
	MOD_ANNOUNCE_TYPE_PLATINUM_RETURN = 4,
	MOD_ANNOUNCE_TYPE_FINISH       = 5,
	MOD_ANNOUNCE_TYPE_COOPERATION  = 6,
	MOD_ANNOUNCE_TYPE_WAYOFTHRONE_WAVE_CLEAR = 7,
	MOD_ANNOUNCE_TYPE_MAX          = 8
};


// Enum EFGame.EFConst.ModPlatinumType
enum class EModPlatinumType : uint8_t
{
	MOD_PLATINUM_TYPE_HERBALISM    = 0,
	MOD_PLATINUM_TYPE_LUMBERING    = 1,
	MOD_PLATINUM_TYPE_MINING       = 2,
	MOD_PLATINUM_TYPE_HUNTING      = 3,
	MOD_PLATINUM_TYPE_FISHING      = 4,
	MOD_PLATINUM_TYPE_ARCHAEOLOGY  = 5,
	MOD_PLATINUM_TYPE_ASTROLOGY    = 6,
	MOD_PLATINUM_TYPE_SPEAKING     = 7,
	MOD_PLATINUM_TYPE_MAX          = 8
};


// Enum EFGame.EFConst.ModPlatinumCooperationType
enum class EModPlatinumCooperationType : uint8_t
{
	MOD_PLATINUM_COOPERATION_TYPE_NONE = 0,
	MOD_PLATINUM_COOPERATION_TYPE_LIFE = 1,
	MOD_PLATINUM_COOPERATION_TYPE_PROP = 2,
	MOD_PLATINUM_COOPERATION_TYPE_PORTAL = 3,
	MOD_PLATINUM_COOPERATION_TYPE_MONSTER = 4,
	MOD_PLATINUM_COOPERATION_TYPE_GIMMICK = 5,
	MOD_PLATINUM_COOPERATION_TYPE_BUFF = 6,
	MOD_PLATINUM_COOPERATION_TYPE_MAX = 7
};


// Enum EFGame.EFConst.MailDeleteReason
enum class EMailDeleteReason : uint8_t
{
	MAIL_DELETE_REASON_NONE        = 0,
	MAIL_DELETE_REASON_NOT_COMPLETED = 1,
	MAIL_DELETE_REASON_USER        = 2,
	MAIL_DELETE_REASON_SENDBACK    = 3,
	MAIL_DELETE_REASON_ADMIN       = 4,
	MAIL_DELETE_REASON_RECLAIM     = 5,
	MAIL_DELETE_REASON_EXPIRED     = 6,
	MAIL_DELETE_REASON_MAX         = 7
};


// Enum EFGame.EFConst.MailType
enum class EMailType : uint8_t
{
	MAIL_TYPE_REGULAR              = 0,
	MAIL_TYPE_EXPRESS              = 1,
	MAIL_TYPE_MAX                  = 2
};


// Enum EFGame.EFConst.MailTag
enum class EMailTag : uint8_t
{
	MAIL_TAG_NONE                  = 0,
	MAIL_TAG_REPLY                 = 1,
	MAIL_TAG_PAYMENT_REQUEST       = 2,
	MAIL_TAG_PAYMENT_RECEIVE       = 3,
	MAIL_TAG_RETURN                = 4,
	MAIL_TAG_SYSTEM                = 5,
	MAIL_TAG_GM                    = 6,
	MAIL_TAG_RECLAIM               = 7,
	MAIL_TAG_MARKET_BUY            = 8,
	MAIL_TAG_AUCTION_BUY           = 9,
	MAIL_TAG_SYSTEM_WITH_EXTRA_CHARGE = 10,
	MAIL_TAG_MAX                   = 11
};


// Enum EFGame.EFConst.MailStatus
enum class EMailStatus : uint8_t
{
	MAIL_STATUS_DRAFT              = 0,
	MAIL_STATUS_UNREAD             = 1,
	MAIL_STATUS_READ               = 2,
	MAIL_STATUS_DELETED            = 3,
	MAIL_STATUS_MAX                = 4
};


// Enum EFGame.EFConst.MailHeadOpType
enum class EMailHeadOpType : uint8_t
{
	MAIL_HEAD_OP_TYPE_NORMAL       = 0,
	MAIL_HEAD_OP_TYPE_NEW_ONLY     = 1,
	MAIL_HEAD_OP_TYPE_GET_OLD      = 2,
	MAIL_HEAD_OP_TYPE_GET_NEW      = 3,
	MAIL_HEAD_OP_TYPE_MAX          = 4
};


// Enum EFGame.EFConst.MailLoadOpType
enum class EMailLoadOpType : uint8_t
{
	MAIL_LOAD_OP_TYPE_REFRESH      = 0,
	MAIL_LOAD_OP_TYPE_READ         = 1,
	MAIL_LOAD_OP_TYPE_MAX          = 2
};


// Enum EFGame.EFConst.MailRewardReason
enum class EMailRewardReason : uint8_t
{
	MAIL_REWARD_REASON_NONE        = 0,
	MAIL_REWARD_REASON_INVEN_FULL_MOD = 1,
	MAIL_REWARD_REASON_INVEN_FULL_PLAY_CLASS = 2,
	MAIL_REWARD_REASON_INVEN_FULL_CHAOS_DUNGEON = 3,
	MAIL_REWARD_REASON_INVEN_FULL_CARD_BATTLE = 4,
	MAIL_REWARD_REASON_INVEN_FULL_RAID_FIRST = 5,
	MAIL_REWARD_REASON_INVEN_FULL_SECRET_PROP = 6,
	MAIL_REWARD_REASON_INVEN_FULL_QUEST_FORCE_COMPLETE = 7,
	MAIL_REWARD_REASON_INVEN_FULL_RAID_PAID_REWARD = 8,
	MAIL_REWARD_REASON_INVEN_FULL_STAGE_PER_REWARD = 9,
	MAIL_REWARD_REASON_INVEN_FULL_REVERSE_RUIN = 10,
	MAIL_REWARD_REASON_INVEN_FULL_ROTATION_ISLAND = 11,
	MAIL_REWARD_REASON_MAX         = 12
};


// Enum EFGame.EFConst.MailStorageType
enum class EMailStorageType : uint8_t
{
	MAIL_STORAGE_TYPE_RECEIVED     = 0,
	MAIL_STORAGE_TYPE_SENT         = 1,
	MAIL_STORAGE_TYPE_MAX          = 2
};


// Enum EFGame.EFConst.MoneyType
enum class EMoneyType : uint8_t
{
	MONEY_TYPE_NONE                = 0,
	MONEY_TYPE_GOLD                = 1,
	MONEY_TYPE_TRADE_GOLD          = 2,
	MONEY_TYPE_MESSENGER_MEDAL_CAFE___ = 3,
	MONEY_TYPE_MESSENGER_MEDAL_FREE___ = 4,
	MONEY_TYPE_MESSENGER_MEDAL_PAID___ = 5,
	MONEY_TYPE_BATTLE_COIN         = 6,
	MONEY_TYPE_LUPHEON_SEAL___     = 7,
	MONEY_TYPE_CRACK_PIECE         = 8,
	MONEY_TYPE_CASHEW_SEED___      = 9,
	MONEY_TYPE_PIRATE_COIN         = 10,
	MONEY_TYPE_PVP_TOKEN___        = 11,
	MONEY_TYPE_ENHANCE_TOKEN       = 12,
	MONEY_TYPE_ENHANCE_TOKEN_T1    = 13,
	MONEY_TYPE_ENHANCE_TOKEN_T3    = 14,
	MONEY_TYPE_PHEON_TRANSACTION_COST = 15,
	MONEY_TYPE_ZONE_COIN           = 16,
	MONEY_TYPE_NORMAL_END___       = 17,
	MONEY_TYPE_POINT_BEGIN__       = 18,
	MONEY_TYPE_POINT_BEGIN__01     = 19,
	MONEY_TYPE_POINT_BEGIN__02     = 20,
	MONEY_TYPE_POINT_BEGIN__03     = 21,
	MONEY_TYPE_POINT_BEGIN__04     = 22,
	MONEY_TYPE_POINT_BEGIN__05     = 23,
	MONEY_TYPE_POINT_BEGIN__06     = 24,
	MONEY_TYPE_POINT_BEGIN__07     = 25,
	MONEY_TYPE_POINT_BEGIN__08     = 26,
	MONEY_TYPE_POINT_BEGIN__09     = 27,
	MONEY_TYPE_POINT_BEGIN__10     = 28,
	MONEY_TYPE_POINT_BEGIN__11     = 29,
	MONEY_TYPE_POINT_BEGIN__12     = 30,
	MONEY_TYPE_POINT_BEGIN__13     = 31,
	MONEY_TYPE_POINT_BEGIN__14     = 32,
	MONEY_TYPE_POINT_BEGIN__15     = 33,
	MONEY_TYPE_POINT_BEGIN__16     = 34,
	MONEY_TYPE_POINT_BEGIN__17     = 35,
	MONEY_TYPE_POINT_BEGIN__18     = 36,
	MONEY_TYPE_POINT_BEGIN__19     = 37,
	MONEY_TYPE_POINT_BEGIN__20     = 38,
	MONEY_TYPE_POINT_BEGIN__21     = 39,
	MONEY_TYPE_POINT_BEGIN__22     = 40,
	MONEY_TYPE_POINT_BEGIN__23     = 41,
	MONEY_TYPE_POINT_BEGIN__24     = 42,
	MONEY_TYPE_POINT_BEGIN__25     = 43,
	MONEY_TYPE_POINT_BEGIN__26     = 44,
	MONEY_TYPE_POINT_BEGIN__27     = 45,
	MONEY_TYPE_POINT_BEGIN__28     = 46,
	MONEY_TYPE_POINT_BEGIN__29     = 47,
	MONEY_TYPE_POINT_BEGIN__30     = 48,
	MONEY_TYPE_POINT_BEGIN__31     = 49,
	MONEY_TYPE_POINT_BEGIN__32     = 50,
	MONEY_TYPE_POINT_BEGIN__33     = 51,
	MONEY_TYPE_POINT_BEGIN__34     = 52,
	MONEY_TYPE_POINT_BEGIN__35     = 53,
	MONEY_TYPE_POINT_BEGIN__36     = 54,
	MONEY_TYPE_POINT_BEGIN__37     = 55,
	MONEY_TYPE_POINT_BEGIN__38     = 56,
	MONEY_TYPE_POINT_BEGIN__39     = 57,
	MONEY_TYPE_POINT_BEGIN__40     = 58,
	MONEY_TYPE_POINT_BEGIN__41     = 59,
	MONEY_TYPE_POINT_BEGIN__42     = 60,
	MONEY_TYPE_POINT_BEGIN__43     = 61,
	MONEY_TYPE_POINT_BEGIN__44     = 62,
	MONEY_TYPE_POINT_BEGIN__45     = 63,
	MONEY_TYPE_POINT_BEGIN__46     = 64,
	MONEY_TYPE_POINT_BEGIN__47     = 65,
	MONEY_TYPE_POINT_BEGIN__48     = 66,
	MONEY_TYPE_POINT_BEGIN__49     = 67,
	MONEY_TYPE_POINT_BEGIN__50     = 68,
	MONEY_TYPE_POINT_BEGIN__51     = 69,
	MONEY_TYPE_POINT_BEGIN__52     = 70,
	MONEY_TYPE_POINT_BEGIN__53     = 71,
	MONEY_TYPE_POINT_BEGIN__54     = 72,
	MONEY_TYPE_POINT_BEGIN__55     = 73,
	MONEY_TYPE_POINT_BEGIN__56     = 74,
	MONEY_TYPE_POINT_BEGIN__57     = 75,
	MONEY_TYPE_POINT_BEGIN__58     = 76,
	MONEY_TYPE_POINT_BEGIN__59     = 77,
	MONEY_TYPE_POINT_BEGIN__60     = 78,
	MONEY_TYPE_POINT_BEGIN__61     = 79,
	MONEY_TYPE_POINT_BEGIN__62     = 80,
	MONEY_TYPE_POINT_BEGIN__63     = 81,
	MONEY_TYPE_POINT_BEGIN__64     = 82,
	MONEY_TYPE_POINT_BEGIN__65     = 83,
	MONEY_TYPE_POINT_BEGIN__66     = 84,
	MONEY_TYPE_POINT_BEGIN__67     = 85,
	MONEY_TYPE_POINT_BEGIN__68     = 86,
	MONEY_TYPE_POINT_BEGIN__69     = 87,
	MONEY_TYPE_POINT_BEGIN__70     = 88,
	MONEY_TYPE_POINT_BEGIN__71     = 89,
	MONEY_TYPE_POINT_BEGIN__72     = 90,
	MONEY_TYPE_POINT_BEGIN__73     = 91,
	MONEY_TYPE_POINT_BEGIN__74     = 92,
	MONEY_TYPE_POINT_BEGIN__75     = 93,
	MONEY_TYPE_POINT_BEGIN__76     = 94,
	MONEY_TYPE_POINT_BEGIN__77     = 95,
	MONEY_TYPE_POINT_BEGIN__78     = 96,
	MONEY_TYPE_POINT_BEGIN__79     = 97,
	MONEY_TYPE_POINT_BEGIN__80     = 98,
	MONEY_TYPE_POINT_BEGIN__81     = 99,
	MONEY_TYPE_POINT_BEGIN___      = 100,
	MONEY_TYPE_REVERSE_RUIN_COST   = 101,
	MONEY_TYPE_REVERSE_RUIN_REST   = 102,
	MONEY_TYPE_POINT_END___        = 103,
	MONEY_TYPE_MAX                 = 104
};


// Enum EFGame.EFConst.MoneyStorageType
enum class EMoneyStorageType : uint8_t
{
	MONEY_STORAGE_TYPE_PC          = 0,
	MONEY_STORAGE_TYPE_ACCOUNT     = 1,
	MONEY_STORAGE_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.MoneyUnlockType
enum class EMoneyUnlockType : uint8_t
{
	MONEY_UNLOCK_TYPE_DEFAULT      = 0,
	MONEY_UNLOCK_TYPE_LOCKED       = 1,
	MONEY_UNLOCK_TYPE_HIDE         = 2,
	MONEY_UNLOCK_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.MoneyAuditType
enum class EMoneyAuditType : uint8_t
{
	MONEY_AUDIT_TYPE_FREE          = 0,
	MONEY_AUDIT_TYPE_PAID          = 1,
	MONEY_AUDIT_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.MusicActionType
enum class EMusicActionType : uint8_t
{
	MUSIC_ACTION_TYPE_NONE         = 0,
	MUSIC_ACTION_TYPE_TOWN_PORTAL  = 1,
	MUSIC_ACTION_TYPE_EFFECT_ON_PROP = 2,
	MUSIC_ACTION_TYPE_ESCAPE       = 3,
	MUSIC_ACTION_TYPE_SUMMON_VEHICLE = 4,
	MUSIC_ACTION_TYPE_ENTER_TOWN   = 5,
	MUSIC_ACTION_TYPE_ENTER_RUIN_LOBBY = 6,
	MUSIC_ACTION_TYPE_MAX          = 7
};


// Enum EFGame.EFConst.MusicActionOnProp
enum class EMusicActionOnProp : uint8_t
{
	MUSIC_ACTION_ON_PROP_NONE      = 0,
	MUSIC_ACTION_ON_PROP_ENABLE    = 1,
	MUSIC_ACTION_ON_PROP_DISABLE   = 2,
	MUSIC_ACTION_ON_PROP_VISIBLE   = 3,
	MUSIC_ACTION_ON_PROP_INVISIBLE = 4,
	MUSIC_ACTION_ON_PROP_GO_ON     = 5,
	MUSIC_ACTION_ON_PROP_GO_OFF    = 6,
	MUSIC_ACTION_ON_PROP_MAX       = 7
};


// Enum EFGame.EFConst.MusicBindType
enum class EMusicBindType : uint8_t
{
	MUSIC_BIND_TYPE_CHARACTER      = 0,
	MUSIC_BIND_TYPE_EXPEDITION     = 1,
	MUSIC_BIND_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.MemoryPosType
enum class EMemoryPosType : uint8_t
{
	MEMORY_POS_TYPE_TARGETPOS      = 0,
	MEMORY_POS_TYPE_CASTERPOS      = 1,
	MEMORY_POS_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.MarketProductStatus
enum class EMarketProductStatus : uint8_t
{
	MARKET_PRODUCT_STATUS_NONE     = 0,
	MARKET_PRODUCT_STATUS_READY    = 1,
	MARKET_PRODUCT_STATUS_OVERDUE  = 2,
	MARKET_PRODUCT_STATUS_DELETED  = 3,
	MARKET_PRODUCT_STATUS_SOLD_OUT = 4,
	MARKET_PRODUCT_STATUS_CANCELED = 5,
	MARKET_PRODUCT_STATUS_CANCELED_BY_GM = 6,
	MARKET_PRODUCT_STATUS_MAX      = 7
};


// Enum EFGame.EFConst.MarketPeriod
enum class EMarketPeriod : uint8_t
{
	MARKET_PERIOD                  = 0,
	MARKET_PERIOD01                = 1,
	MARKET_PERIOD02                = 2,
	MARKET_PERIOD03                = 3,
	MARKET_PERIOD_MAX              = 4
};


// Enum EFGame.EFConst.MarketSortType
enum class EMarketSortType : uint8_t
{
	MARKET_SORT_TYPE_ITEM_GRADE    = 0,
	MARKET_SORT_TYPE_AVERAGE_PRICE = 1,
	MARKET_SORT_TYPE_RECENT_PRICE  = 2,
	MARKET_SORT_TYPE_PRICE         = 3,
	MARKET_SORT_TYPE_REMAIN_COUNT  = 4,
	MARKET_SORT_TYPE_LIFE_LEVEL    = 5,
	MARKET_SORT_TYPE_PROFESSION_TIER = 6,
	MARKET_SORT_TYPE_MAX           = 7
};


// Enum EFGame.EFConst.MarketSortOrder
enum class EMarketSortOrder : uint8_t
{
	MARKET_SORT_ORDER_ASC          = 0,
	MARKET_SORT_ORDER_DESC         = 1,
	MARKET_SORT_ORDER_MAX          = 2
};


// Enum EFGame.EFConst.MarketAddType
enum class EMarketAddType : uint8_t
{
	MARKET_ADD_TYPE_NORMAL         = 0,
	MARKET_ADD_TYPE_TOKEN          = 1,
	MARKET_ADD_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.MonetaryType
enum class EMonetaryType : uint8_t
{
	MONETARY_TYPE_NONE             = 0,
	MONETARY_TYPE_MONEY            = 1,
	MONETARY_TYPE_PAID_CASH        = 2,
	MONETARY_TYPE_MAX              = 3
};


// Enum EFGame.EFConst.MvpStatType
enum class EMvpStatType : uint8_t
{
	MVP_STAT_TYPE_NONE             = 0,
	MVP_STAT_TYPE_DAMAGE_NPC       = 1,
	MVP_STAT_TYPE_DAMAGE_PC        = 2,
	MVP_STAT_TYPE_PARALYZE         = 3,
	MVP_STAT_TYPE_HEAL             = 4,
	MVP_STAT_TYPE_PROTECT_TEAM     = 5,
	MVP_STAT_TYPE_PROTECT_SELF     = 6,
	MVP_STAT_TYPE_KILL_NPC         = 7,
	MVP_STAT_TYPE_KILL_PC          = 8,
	MVP_STAT_TYPE_BATTLE_ITEM      = 9,
	MVP_STAT_TYPE_DAMAGE_PC_ABSORBED = 10,
	MVP_STAT_TYPE_MAX              = 11
};


// Enum EFGame.EFConst.MvpPointCalcType
enum class EMvpPointCalcType : uint8_t
{
	MVP_POINT_CALC_TYPE_PERCENT    = 0,
	MVP_POINT_CALC_TYPE_ABS        = 1,
	MVP_POINT_CALC_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.NpcBehitType
enum class ENpcBehitType : uint8_t
{
	NPC_BEHIT_TYPE_NONE            = 0,
	NPC_BEHIT_TYPE_ALL_SWAY        = 1,
	NPC_BEHIT_TYPE_ABNORMAL_SWAY   = 2,
	NPC_BEHIT_TYPE_ALL_SWAY_MOVE   = 3,
	NPC_BEHIT_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.NpcGrade
enum class ENpcGrade : uint8_t
{
	NPC_GRADE_NONE                 = 0,
	NPC_GRADE_UNDERLING            = 1,
	NPC_GRADE_NORMAL               = 2,
	NPC_GRADE_ELITE                = 3,
	NPC_GRADE_NAMED                = 4,
	NPC_GRADE_SEED                 = 5,
	NPC_GRADE_BOSS                 = 6,
	NPC_GRADE_RAID                 = 7,
	NPC_GRADE_LUCKY                = 8,
	NPC_GRADE_EPIC_RAID            = 9,
	NPC_GRADE_COMMANDER            = 10,
	NPC_GRADE_MAX                  = 11
};


// Enum EFGame.EFConst.NpcType
enum class ENpcType : uint8_t
{
	NPC_TYPE_MONSTER               = 0,
	NPC_TYPE_TOWNSFOLK             = 1,
	NPC_TYPE_SUMMONED              = 2,
	NPC_TYPE_TOTEM                 = 3,
	NPC_TYPE_MERCENARY             = 4,
	NPC_TYPE_PET                   = 5,
	NPC_TYPE_MAX                   = 6
};


// Enum EFGame.EFConst.NpcSpecies
enum class ENpcSpecies : uint8_t
{
	NPC_SPECIES_NONE               = 0,
	NPC_SPECIES_HUMANOID           = 1,
	NPC_SPECIES_DEVIL              = 2,
	NPC_SPECIES_SUBSTANCE          = 3,
	NPC_SPECIES_UNDEAD             = 4,
	NPC_SPECIES_PLANT              = 5,
	NPC_SPECIES_INSECT             = 6,
	NPC_SPECIES_SPIRIT             = 7,
	NPC_SPECIES_WILD_BEAST         = 8,
	NPC_SPECIES_MECHANIC           = 9,
	NPC_SPECIES_ANCIENT            = 10,
	NPC_SPECIES_GOD                = 11,
	NPC_SPECIES_ARCHEFIEND         = 12,
	NPC_SPECIES_VOYAGE_GHOST       = 13,
	NPC_SPECIES_VOYAGE_HUNTING     = 14,
	NPC_SPECIES_STRUCTURE          = 15,
	NPC_SPECIES_MAX                = 16
};


// Enum EFGame.EFConst.NpcSizeType
enum class ENpcSizeType : uint8_t
{
	NPC_SIZE_TYPE_NONE             = 0,
	NPC_SIZE_TYPE_MINI             = 1,
	NPC_SIZE_TYPE_SMALL            = 2,
	NPC_SIZE_TYPE_MEDIUM           = 3,
	NPC_SIZE_TYPE_LARGE            = 4,
	NPC_SIZE_TYPE_GIGANTIC         = 5,
	NPC_SIZE_TYPE_MAX              = 6
};


// Enum EFGame.EFConst.NpcStatType
enum class ENpcStatType : uint8_t
{
	NPC_STAT_TYPE_PERCENT          = 0,
	NPC_STAT_TYPE_TABLE            = 1,
	NPC_STAT_TYPE_MAX              = 2
};


// Enum EFGame.EFConst.NpcStatus
enum class ENpcStatus : uint8_t
{
	NPC_STATUS_NORMAL              = 0,
	NPC_STATUS_CHANGE1             = 1,
	NPC_STATUS_CHANGE2             = 2,
	NPC_STATUS_CHANGE3             = 3,
	NPC_STATUS_COUNTER             = 4,
	NPC_STATUS_INACTIVE            = 5,
	NPC_STATUS_FLIGHT              = 6,
	NPC_STATUS_FIXED               = 7,
	NPC_STATUS_MAX                 = 8
};


// Enum EFGame.EFConst.NpcAlignment
enum class ENpcAlignment : uint8_t
{
	NPC_ALIGNMENT_NEUTRAL          = 0,
	NPC_ALIGNMENT_AGGRESSIVE       = 1,
	NPC_ALIGNMENT_ALWAYS_AGGRESSIVE = 2,
	NPC_ALIGNMENT_FRIENDLY         = 3,
	NPC_ALIGNMENT_INSENSITIVE      = 4,
	NPC_ALIGNMENT_MAX              = 5
};


// Enum EFGame.EFConst.NpcPartType
enum class ENpcPartType : uint8_t
{
	NPC_PART_TYPE_BODY             = 0,
	NPC_PART_TYPE                  = 1,
	NPC_PART_TYPE01                = 2,
	NPC_PART_TYPE02                = 3,
	NPC_PART_TYPE03                = 4,
	NPC_PART_TYPE04                = 5,
	NPC_PART_TYPE05                = 6,
	NPC_PART_TYPE06                = 7,
	NPC_PART_TYPE07                = 8,
	NPC_PART_TYPE08                = 9,
	NPC_PART_TYPE09                = 10,
	NPC_PART_TYPE10                = 11,
	NPC_PART_TYPE11                = 12,
	NPC_PART_TYPE12                = 13,
	NPC_PART_TYPE13                = 14,
	NPC_PART_TYPE14                = 15,
	NPC_PART_TYPE_MAX              = 16
};


// Enum EFGame.EFConst.NpcPartHitCondition
enum class ENpcPartHitCondition : uint8_t
{
	NPC_PART_HIT_CONDITION_NONE    = 0,
	NPC_PART_HIT_CONDITION_HP      = 1,
	NPC_PART_HIT_CONDITION_HP_PERCENT = 2,
	NPC_PART_HIT_CONDITION_CHECK_PART = 3,
	NPC_PART_HIT_CONDITION_BUFF    = 4,
	NPC_PART_HIT_CONDITION_SKILL_EFFECT = 5,
	NPC_PART_HIT_CONDITION_MAX     = 6
};


// Enum EFGame.EFConst.NpcPartTargetFilter
enum class ENpcPartTargetFilter : uint8_t
{
	NPC_PART_TARGET_FILTER_NONE    = 0,
	NPC_PART_TARGET_FILTER_PROJECTILE_TRACE = 1,
	NPC_PART_TARGET_FILTER_MAX     = 2
};


// Enum EFGame.EFConst.NpcEvolutionState
enum class ENpcEvolutionState : uint8_t
{
	NPC_EVOLUTION_STATE_NONE       = 0,
	NPC_EVOLUTION_STATE_PROGRESS   = 1,
	NPC_EVOLUTION_STATE_COMPLETED  = 2,
	NPC_EVOLUTION_STATE_FAILED     = 3,
	NPC_EVOLUTION_STATE_MAX        = 4
};


// Enum EFGame.EFConst.NpcEvolutionPhase
enum class ENpcEvolutionPhase : uint8_t
{
	NPC_EVOLUTION_PHASE            = 0,
	NPC_EVOLUTION_PHASE01          = 1,
	NPC_EVOLUTION_PHASE02          = 2,
	NPC_EVOLUTION_PHASE_MAX        = 3
};


// Enum EFGame.EFConst.NpcInteractionEventType
enum class ENpcInteractionEventType : uint8_t
{
	NPC_INTERACTION_EVENT_TYPE_BALLOONTALK = 0,
	NPC_INTERACTION_EVENT_TYPE_AI_ESCORT_START = 1,
	NPC_INTERACTION_EVENT_TYPE_AI_FOLLOW_START = 2,
	NPC_INTERACTION_EVENT_TYPE_AI_SIGNAL = 3,
	NPC_INTERACTION_EVENT_TYPE_CONFIRM_PLAYER_CLASS = 4,
	NPC_INTERACTION_EVENT_TYPE_FACTION_CHANGE = 5,
	NPC_INTERACTION_EVENT_TYPE_REPLACE_NPC = 6,
	NPC_INTERACTION_EVENT_TYPE_TRIGGER_START = 7,
	NPC_INTERACTION_EVENT_TYPE_COOP_QUEST_START = 8,
	NPC_INTERACTION_EVENT_TYPE_FRIENDSHIP_TALK_REWARD = 9,
	NPC_INTERACTION_EVENT_TYPE_RETURN_ISLANDHEARTS = 10,
	NPC_INTERACTION_EVENT_TYPE_TOWN_INVITE = 11,
	NPC_INTERACTION_EVENT_TYPE_MAX = 12
};


// Enum EFGame.EFConst.NpcInteractionEndReason
enum class ENpcInteractionEndReason : uint8_t
{
	NPC_INTERACTION_END_REASON_NONE = 0,
	NPC_INTERACTION_END_REASON_CLIENT_REQUEST = 1,
	NPC_INTERACTION_END_REASON_SERVER_WARP = 2,
	NPC_INTERACTION_END_REASON_SERVER_TELEPORT = 3,
	NPC_INTERACTION_END_REASON_CLIENT_START_FAILED = 4,
	NPC_INTERACTION_END_REASON_TRAINING_MODE_START = 5,
	NPC_INTERACTION_END_REASON_MAX = 6
};


// Enum EFGame.EFConst.NPCSpawnAction
enum class ENPCSpawnAction : uint8_t
{
	NPC_SPAWN_ACTION_NONE          = 0,
	NPC_SPAWN_ACTION_MATERIAL      = 1,
	NPC_SPAWN_ACTION               = 2,
	NPC_SPAWN_ACTION01             = 3,
	NPC_SPAWN_ACTION02             = 4,
	NPC_SPAWN_ACTION03             = 5,
	NPC_SPAWN_ACTION04             = 6,
	NPC_SPAWN_ACTION_MAX           = 7
};


// Enum EFGame.EFConst.NpcSpawnLocationType
enum class ENpcSpawnLocationType : uint8_t
{
	NPC_SPAWN_LOCATION_TYPE_ALL    = 0,
	NPC_SPAWN_LOCATION_TYPE_GROUP  = 1,
	NPC_SPAWN_LOCATION_TYPE_SPOT   = 2,
	NPC_SPAWN_LOCATION_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.NPCDespawnAction
enum class ENPCDespawnAction : uint8_t
{
	NPC_DESPAWN_ACTION_NONE        = 0,
	NPC_DESPAWN_ACTION_MATERIAL    = 1,
	NPC_DESPAWN_ACTION             = 2,
	NPC_DESPAWN_ACTION01           = 3,
	NPC_DESPAWN_ACTION_MAX         = 4
};


// Enum EFGame.EFConst.NPCIdleMotion
enum class ENPCIdleMotion : uint8_t
{
	NPC_IDLE_NONE                  = 0,
	NPC_IDLE                       = 1,
	NPC_IDLE01                     = 2,
	NPC_IDLE02                     = 3,
	NPC_IDLE03                     = 4,
	NPC_IDLE04                     = 5,
	NPC_IDLE_MAX                   = 6
};


// Enum EFGame.EFConst.NpcAttackFilter
enum class ENpcAttackFilter : uint8_t
{
	NPC_ATTACK_FILTER_NONE         = 0,
	NPC_ATTACK_FILTER_FOLLOWER     = 1,
	NPC_ATTACK_FILTER_PERFORMER    = 2,
	NPC_ATTACK_FILTER_ENVIRONMENT  = 3,
	NPC_ATTACK_FILTER_PC_MINION    = 4,
	NPC_ATTACK_FILTER_MAX          = 5
};


// Enum EFGame.EFConst.NpcMoveType
enum class ENpcMoveType : uint8_t
{
	NPC_MOVE_TYPE_NONE             = 0,
	NPC_MOVE_TYPE_FIXED            = 1,
	NPC_MOVE_TYPE_FIXED_ABNORMAL   = 2,
	NPC_MOVE_TYPE_FIXED_FIXDIR     = 3,
	NPC_MOVE_TYPE_FIXED_ABNORMAL_FIXDIR = 4,
	NPC_MOVE_TYPE_MAX              = 5
};


// Enum EFGame.EFConst.NpcSignalType
enum class ENpcSignalType : uint8_t
{
	NPC_SIGNAL_TYPE_AI             = 0,
	NPC_SIGNAL_TYPE_TRIGGER        = 1,
	NPC_SIGNAL_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.NpcEvolutionType
enum class ENpcEvolutionType : uint8_t
{
	NPC_EVOLUTION_TYPE_NONE        = 0,
	NPC_EVOLUTION_TYPE_TRAVELING_MERCHANT = 1,
	NPC_EVOLUTION_TYPE_WHALE       = 2,
	NPC_EVOLUTION_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.NpcRotateReason
enum class ENpcRotateReason : uint8_t
{
	NPC_ROTATE_REASON_LOOK_TARGET  = 0,
	NPC_ROTATE_REASON_PROVOKE      = 1,
	NPC_ROTATE_REASON_NPC_BEHAVIOR_CONTROL = 2,
	NPC_ROTATE_REASON_USE_SKILL_FAIL = 3,
	NPC_ROTATE_REASON_MAX          = 4
};


// Enum EFGame.EFConst.NpcSkillReplaceType
enum class ENpcSkillReplaceType : uint8_t
{
	NPC_SKILL_REPLACE_TYPE_NONE    = 0,
	NPC_SKILL_REPLACE_TYPE_SKILL_EFFECT = 1,
	NPC_SKILL_REPLACE_TYPE_SKILL_LAYER = 2,
	NPC_SKILL_REPLACE_TYPE_SKILL_INFO = 3,
	NPC_SKILL_REPLACE_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.NpcSkillReplaceConditionType
enum class ENpcSkillReplaceConditionType : uint8_t
{
	NPC_SKILL_REPLACE_CONDITION_TYPE_NONE = 0,
	NPC_SKILL_REPLACE_CONDITION_TYPE_ZONE_LEVEL = 1,
	NPC_SKILL_REPLACE_CONDITION_TYPE_RAID_ID = 2,
	NPC_SKILL_REPLACE_CONDITION_TYPE_MAX = 3
};


// Enum EFGame.EFConst.NpcTalkConditionType
enum class ENpcTalkConditionType : uint8_t
{
	NPC_TALK_CONDITION_TYPE_NONE   = 0,
	NPC_TALK_CONDITION_TYPE_BUFF   = 1,
	NPC_TALK_CONDITION_TYPE_FRIENDSHIP = 2,
	NPC_TALK_CONDITION_TYPE_HAVE_ITEM = 3,
	NPC_TALK_CONDITION_TYPE_HAVE_ITEM_CATEGORY = 4,
	NPC_TALK_CONDITION_TYPE_HONOR  = 5,
	NPC_TALK_CONDITION_TYPE_ITEM_LEVEL = 6,
	NPC_TALK_CONDITION_TYPE_NECESSARY_QUEST = 7,
	NPC_TALK_CONDITION_TYPE_PARTY_SIZE = 8,
	NPC_TALK_CONDITION_TYPE_PC_CLASS = 9,
	NPC_TALK_CONDITION_TYPE_PC_LEVEL = 10,
	NPC_TALK_CONDITION_TYPE_PICKUP_PROP = 11,
	NPC_TALK_CONDITION_TYPE_QUEST  = 12,
	NPC_TALK_CONDITION_TYPE_QUEST_POINT = 13,
	NPC_TALK_CONDITION_TYPE_SELECTION = 14,
	NPC_TALK_CONDITION_TYPE_SELECT_QUEST = 15,
	NPC_TALK_CONDITION_TYPE_TENDENCY_STATUS = 16,
	NPC_TALK_CONDITION_TYPE_MAX    = 17
};


// Enum EFGame.EFConst.NpcAttachReason
enum class ENpcAttachReason : uint8_t
{
	NPC_ATTACH_REASON_SKILL_EFFECT = 0,
	NPC_ATTACH_REASON_FORCE_RETURN = 1,
	NPC_ATTACH_REASON_TRACK_MOVE   = 2,
	NPC_ATTACH_REASON_FUSION_SKILL = 3,
	NPC_ATTACH_REASON_MOVE_REQUEST = 4,
	NPC_ATTACH_REASON_NPC_GRABBED  = 5,
	NPC_ATTACH_REASON_INIT         = 6,
	NPC_ATTACH_REASON_TRANSIT      = 7,
	NPC_ATTACH_REASON_CLIENT_EVENT_TRIGGER = 8,
	NPC_ATTACH_REASON_CLIENT_CONTENTS_TRIGGER = 9,
	NPC_ATTACH_REASON_CHECK_SYNC   = 10,
	NPC_ATTACH_REASON_MAX          = 11
};


// Enum EFGame.EFConst.NpcSkillCustomizingSourceType
enum class ENpcSkillCustomizingSourceType : uint8_t
{
	NPC_SKILL_CUSTOMIZING_SOURCE_TYPE_NONE = 0,
	NPC_SKILL_CUSTOMIZING_SOURCE_TYPE_PC_COMMAND_SKILL = 1,
	NPC_SKILL_CUSTOMIZING_SOURCE_TYPE_PC_SUMMON_SKILL = 2,
	NPC_SKILL_CUSTOMIZING_SOURCE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.NoteKeyInputType
enum class ENoteKeyInputType : uint8_t
{
	NOTE_KEY_INPUT_TYPE_PATTERN    = 0,
	NOTE_KEY_INPUT_TYPE_COUNTING   = 1,
	NOTE_KEY_INPUT_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.ObjectIndex
enum class EObjectIndex : uint8_t
{
	OBJECT_INDEX_PC                = 0,
	OBJECT_INDEX_NPC               = 1,
	OBJECT_INDEX_PROP              = 2,
	OBJECT_INDEX_PROJECTILE        = 3,
	OBJECT_INDEX_DROP_BOX          = 4,
	OBJECT_INDEX_TRAP              = 5,
	OBJECT_INDEX_VEHICLE           = 6,
	OBJECT_INDEX_TRANSIT           = 7,
	OBJECT_INDEX_BEACON            = 8,
	OBJECT_INDEX_TOWER             = 9,
	OBJECT_INDEX_NPC_MAKER         = 10,
	OBJECT_INDEX_MAX               = 11
};


// Enum EFGame.EFConst.ObjectSizeGrade
enum class EObjectSizeGrade : uint8_t
{
	OBJECT_SIZE_GRADE_FREESIZE     = 0,
	OBJECT_SIZE_GRADE_EXTRASMALL   = 1,
	OBJECT_SIZE_GRADE_SMALL        = 2,
	OBJECT_SIZE_GRADE_MEDIUM       = 3,
	OBJECT_SIZE_GRADE_LARGE        = 4,
	OBJECT_SIZE_GRADE_EXTRALARGE   = 5,
	OBJECT_SIZE_GRADE_EXTRAEXTRALARGE = 6,
	OBJECT_SIZE_GRADE_MAX          = 7
};


// Enum EFGame.EFConst.OceanAreaType
enum class EOceanAreaType : uint8_t
{
	OCEAN_AREA_TYPE_NONE           = 0,
	OCEAN_AREA_TYPE_SEA_WEED       = 1,
	OCEAN_AREA_TYPE_DEAD_PERSON    = 2,
	OCEAN_AREA_TYPE_SIREN          = 3,
	OCEAN_AREA_TYPE_STORM          = 4,
	OCEAN_AREA_TYPE_COLD_WAVE      = 5,
	OCEAN_AREA_TYPE_SAND_STORM     = 6,
	OCEAN_AREA_TYPE_MAX            = 7
};


// Enum EFGame.EFConst.ObserverModeActionType
enum class EObserverModeActionType : uint8_t
{
	OBSERVER_MODE_ACTION_TYPE_START = 0,
	OBSERVER_MODE_ACTION_TYPE_FINISH = 1,
	OBSERVER_MODE_ACTION_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.OpenChatChannelType
enum class EOpenChatChannelType : uint8_t
{
	OPEN_CHAT_CHANNEL_TYPE_NORMAL  = 0,
	OPEN_CHAT_CHANNEL_TYPE_ONE_ON_ONE = 1,
	OPEN_CHAT_CHANNEL_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.OpenChatMemberGrade
enum class EOpenChatMemberGrade : uint8_t
{
	OPEN_CHAT_MEMBER_GRADE_NONE    = 0,
	OPEN_CHAT_MEMBER_GRADE_NORMAL  = 1,
	OPEN_CHAT_MEMBER_GRADE_VICE_MASTER = 2,
	OPEN_CHAT_MEMBER_GRADE_MASTER  = 3,
	OPEN_CHAT_MEMBER_GRADE_MAX     = 4
};


// Enum EFGame.EFConst.OpenChatMessageType
enum class EOpenChatMessageType : uint8_t
{
	OPEN_CHAT_MESSAGE_TYPE_NONE    = 0,
	OPEN_CHAT_MESSAGE_TYPE_NORMAL  = 1,
	OPEN_CHAT_MESSAGE_TYPE_EVENT   = 2,
	OPEN_CHAT_MESSAGE_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.OpenChatEventType
enum class EOpenChatEventType : uint8_t
{
	OPEN_CHAT_EVENT_TYPE_NONE      = 0,
	OPEN_CHAT_EVENT_TYPE_INVITE    = 1,
	OPEN_CHAT_EVENT_TYPE_JOIN      = 2,
	OPEN_CHAT_EVENT_TYPE_LEAVE     = 3,
	OPEN_CHAT_EVENT_TYPE_KICK      = 4,
	OPEN_CHAT_EVENT_TYPE_PROMOTE   = 5,
	OPEN_CHAT_EVENT_TYPE_DEMOTE    = 6,
	OPEN_CHAT_EVENT_TYPE_DELEGATE  = 7,
	OPEN_CHAT_EVENT_TYPE_NAME_CHANGE = 8,
	OPEN_CHAT_EVENT_TYPE_DISBAND   = 9,
	OPEN_CHAT_EVENT_TYPE_CREATE    = 10,
	OPEN_CHAT_EVENT_TYPE_REJECT    = 11,
	OPEN_CHAT_EVENT_TYPE_MAX       = 12
};


// Enum EFGame.EFConst.OpenChatOpType
enum class EOpenChatOpType : uint8_t
{
	OPEN_CHAT_OP_TYPE_NONE         = 0,
	OPEN_CHAT_OP_TYPE_LEAVE        = 1,
	OPEN_CHAT_OP_TYPE_KICK         = 2,
	OPEN_CHAT_OP_TYPE_CHANGE_NAME  = 3,
	OPEN_CHAT_OP_TYPE_PROMOTE      = 4,
	OPEN_CHAT_OP_TYPE_DEMOTE       = 5,
	OPEN_CHAT_OP_TYPE_DELEGATE     = 6,
	OPEN_CHAT_OP_TYPE_DISBAND      = 7,
	OPEN_CHAT_OP_TYPE_MAX          = 8
};


// Enum EFGame.EFConst.OpenChatDisbandReason
enum class EOpenChatDisbandReason : uint8_t
{
	OPEN_CHAT_DISBAND_REASON_NONE  = 0,
	OPEN_CHAT_DISBAND_REASON_ADMIN = 1,
	OPEN_CHAT_DISBAND_REASON_NO_MEMBER = 2,
	OPEN_CHAT_DISBAND_REASON_NO_MESSAGE = 3,
	OPEN_CHAT_DISBAND_REASON_USER_REQUEST = 4,
	OPEN_CHAT_DISBAND_REASON_MAX   = 5
};


// Enum EFGame.EFConst.OpenChatIdentityType
enum class EOpenChatIdentityType : uint8_t
{
	OPEN_CHAT_IDENTITY_TYPE_SPECIFIED = 0,
	OPEN_CHAT_IDENTITY_TYPE_MAIN   = 1,
	OPEN_CHAT_IDENTITY_TYPE_CURRENT = 2,
	OPEN_CHAT_IDENTITY_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.PingType
enum class EPingType : uint8_t
{
	PING_TYPE_CLIENT               = 0,
	PING_TYPE_LOGIN                = 1,
	PING_TYPE_WORLD                = 2,
	PING_TYPE_GAME                 = 3,
	PING_TYPE_SOCIAL               = 4,
	PING_TYPE_MAX                  = 5
};


// Enum EFGame.EFConst.PatrolPathType
enum class EPatrolPathType : uint8_t
{
	PATROL_PATH_TYPE_ROUNDTRIP     = 0,
	PATROL_PATH_TYPE_CIRCULARIC    = 1,
	PATROL_PATH_TYPE_ONCE          = 2,
	PATROL_PATH_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.PeriodUpdateStatType
enum class EPeriodUpdateStatType : uint8_t
{
	PERIOD_UPDATE_STAT_HP          = 0,
	PERIOD_UPDATE_STAT_MP          = 1,
	PERIOD_UPDATE_STAT_IDENTITY_GAUGE1 = 2,
	PERIOD_UPDATE_STAT_IDENTITY_GAUGE2 = 3,
	PERIOD_UPDATE_STAT_IDENTITY_GAUGE3 = 4,
	PERIOD_UPDATE_STAT_MAX         = 5
};


// Enum EFGame.EFConst.PeriodUpdateType
enum class EPeriodUpdateType : uint8_t
{
	PERIOD_UPDATE_TYPE_AUTO_INCREMENT = 0,
	PERIOD_UPDATE_TYPE_IDENTITY_SYSTEM = 1,
	PERIOD_UPDATE_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.PeriodQuestSelectExemptionType
enum class EPeriodQuestSelectExemptionType : uint8_t
{
	PERIOD_QUEST_SELECT_EXEMPTION_TYPE_NONE = 0,
	PERIOD_QUEST_SELECT_EXEMPTION_TYPE_FRIENDSHIP_GRADE_ALL_TRUST = 1,
	PERIOD_QUEST_SELECT_EXEMPTION_TYPE_FRIENDSHIP_GRADE_TRUST = 2,
	PERIOD_QUEST_SELECT_EXEMPTION_TYPE_PVP_LEVEL = 3,
	PERIOD_QUEST_SELECT_EXEMPTION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.PeriodQuestType
enum class EPeriodQuestType : uint8_t
{
	PERIOD_QUEST_TYPE_DAILY        = 0,
	PERIOD_QUEST_TYPE_WEEKLY       = 1,
	PERIOD_QUEST_TYPE_GUILD        = 2,
	PERIOD_QUEST_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.PeriodRewardType
enum class EPeriodRewardType : uint8_t
{
	PERIOD_REWARD_TYPE_NONE        = 0,
	PERIOD_REWARD_TYPE_EDEN_GATE   = 1,
	PERIOD_REWARD_TYPE_EDEN_GATE_CHALLENGE = 2,
	PERIOD_REWARD_TYPE_EDEN_GATE_GOLD = 3,
	PERIOD_REWARD_TYPE_EDEN_GATE_CHALLENGE_GOLD = 4,
	PERIOD_REWARD_TYPE_RAID_ABYSS_ENTER = 5,
	PERIOD_REWARD_TYPE_RAID_ABYSS_GOLD = 6,
	PERIOD_REWARD_TYPE_RAID_DIFFICULTY_ENTER = 7,
	PERIOD_REWARD_TYPE_RAID_DIFFICULTY_GOLD = 8,
	PERIOD_REWARD_TYPE_EPIC_GATE_HELLCHAOS = 9,
	PERIOD_REWARD_TYPE_EPIC_GATE_COMMANDER_SPECIAL = 10,
	PERIOD_REWARD_TYPE_FIELD_BOSS  = 11,
	PERIOD_REWARD_TYPE_CHAOS_GATE  = 12,
	PERIOD_REWARD_TYPE_DYNAMIC_ISLAND = 13,
	PERIOD_REWARD_TYPE_GHOST_SHIP  = 14,
	PERIOD_REWARD_TYPE_COOP_QUEST  = 15,
	PERIOD_REWARD_TYPE_EVENT_CONTENTS_REWARD = 16,
	PERIOD_REWARD_TYPE_MAX         = 17
};


// Enum EFGame.EFConst.PeriodRewardResetType
enum class EPeriodRewardResetType : uint8_t
{
	PERIOD_REWARD_RESET_TYPE_NONE  = 0,
	PERIOD_REWARD_RESET_TYPE_DAILY = 1,
	PERIOD_REWARD_RESET_TYPE_WEEKLY = 2,
	PERIOD_REWARD_RESET_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.PreprocessedShapeType
enum class EPreprocessedShapeType : uint8_t
{
	PREPROCESSED_SHAPE_TYPE_TINYSMALL = 0,
	PREPROCESSED_SHAPE_TYPE_SMALL  = 1,
	PREPROCESSED_SHAPE_TYPE_MEDIUM = 2,
	PREPROCESSED_SHAPE_TYPE_MEDIUM01 = 3,
	PREPROCESSED_SHAPE_TYPE_LARGE  = 4,
	PREPROCESSED_SHAPE_TYPE_LARGE01 = 5,
	PREPROCESSED_SHAPE_TYPE_LARGE02 = 6,
	PREPROCESSED_SHAPE_TYPE_LARGE03 = 7,
	PREPROCESSED_SHAPE_TYPE_LARGE04 = 8,
	PREPROCESSED_SHAPE_TYPE_LARGE05 = 9,
	PREPROCESSED_SHAPE_TYPE_MAX    = 10
};


// Enum EFGame.EFConst.PetEnableType
enum class EPetEnableType : uint8_t
{
	PET_ENABLE_ALLOW               = 0,
	PET_ENABLE_ALLOW_EFFECT        = 1,
	PET_ENABLE_ALLOW_UTILITY       = 2,
	PET_ENABLE_ALLOW_ALL_HIDE      = 3,
	PET_ENABLE_ALLOW_EFFECT_HIDE   = 4,
	PET_ENABLE_ALLOW_UTILITY_HIDE  = 5,
	PET_ENABLE_DISALLOW            = 6,
	PET_ENABLE_MAX                 = 7
};


// Enum EFGame.EFConst.PublishReason
enum class EPublishReason : uint8_t
{
	PUBLISH_REASON_MOVE            = 0,
	PUBLISH_REASON_SPAWN           = 1,
	PUBLISH_REASON_REVEAL          = 2,
	PUBLISH_REASON_TRAVEL          = 3,
	PUBLISH_REASON_EXISTING        = 4,
	PUBLISH_REASON_WARP_POINT      = 5,
	PUBLISH_REASON_TELEPORT        = 6,
	PUBLISH_REASON_MAX             = 7
};


// Enum EFGame.EFConst.PlayerClass
enum class EPlayerClass : uint8_t
{
	PLAYER_CLASS_NA                = 0,
	PLAYER_CLASS_WARRIOR1          = 1,
	PLAYER_CLASS_WARRIOR2          = 2,
	PLAYER_CLASS_WARRIOR3          = 3,
	PLAYER_CLASS_WARRIOR4          = 4,
	PLAYER_CLASS_WARRIOR5          = 5,
	PLAYER_CLASS_WARRIOR6          = 6,
	PLAYER_CLASS_WARRIOR7          = 7,
	PLAYER_CLASS_WARRIOR8          = 8,
	PLAYER_CLASS_WARRIOR9          = 9,
	PLAYER_CLASS_WARRIOR10         = 10,
	PLAYER_CLASS_WARRIOR11         = 11,
	PLAYER_CLASS_WARRIOR12         = 12,
	PLAYER_CLASS_WARRIOR13         = 13,
	PLAYER_CLASS_WARRIOR14         = 14,
	PLAYER_CLASS_WARRIOR15         = 15,
	PLAYER_CLASS_WARRIOR16         = 16,
	PLAYER_CLASS_WARRIOR17         = 17,
	PLAYER_CLASS_WARRIOR18         = 18,
	PLAYER_CLASS_WARRIOR19         = 19,
	PLAYER_CLASS_WARRIOR20         = 20,
	PLAYER_CLASS_WARRIOR21         = 21,
	PLAYER_CLASS_WARRIOR22         = 22,
	PLAYER_CLASS_WARRIOR23         = 23,
	PLAYER_CLASS_WARRIOR24         = 24,
	PLAYER_CLASS_WARRIOR25         = 25,
	PLAYER_CLASS_WARRIOR26         = 26,
	PLAYER_CLASS_WARRIOR27         = 27,
	PLAYER_CLASS_WARRIOR28         = 28,
	PLAYER_CLASS_WARRIOR29         = 29,
	PLAYER_CLASS_WARRIOR30         = 30,
	PLAYER_CLASS_WARRIOR31         = 31,
	PLAYER_CLASS_WARRIOR32         = 32,
	PLAYER_CLASS_WARRIOR33         = 33,
	PLAYER_CLASS_WARRIOR34         = 34,
	PLAYER_CLASS_WARRIOR35         = 35,
	PLAYER_CLASS_WARRIOR36         = 36,
	PLAYER_CLASS_WARRIOR37         = 37,
	PLAYER_CLASS_WARRIOR38         = 38,
	PLAYER_CLASS_WARRIOR39         = 39,
	PLAYER_CLASS_WARRIOR40         = 40,
	PLAYER_CLASS_WARRIOR41         = 41,
	PLAYER_CLASS_WARRIOR42         = 42,
	PLAYER_CLASS_WARRIOR43         = 43,
	PLAYER_CLASS_WARRIOR44         = 44,
	PLAYER_CLASS_WARRIOR45         = 45,
	PLAYER_CLASS_WARRIOR46         = 46,
	PLAYER_CLASS_WARRIOR47         = 47,
	PLAYER_CLASS_WARRIOR48         = 48,
	PLAYER_CLASS_WARRIOR49         = 49,
	PLAYER_CLASS_WARRIOR50         = 50,
	PLAYER_CLASS_WARRIOR51         = 51,
	PLAYER_CLASS_WARRIOR52         = 52,
	PLAYER_CLASS_WARRIOR53         = 53,
	PLAYER_CLASS_WARRIOR54         = 54,
	PLAYER_CLASS_WARRIOR55         = 55,
	PLAYER_CLASS_WARRIOR56         = 56,
	PLAYER_CLASS_WARRIOR57         = 57,
	PLAYER_CLASS_WARRIOR58         = 58,
	PLAYER_CLASS_WARRIOR59         = 59,
	PLAYER_CLASS_WARRIOR60         = 60,
	PLAYER_CLASS_WARRIOR61         = 61,
	PLAYER_CLASS_WARRIOR62         = 62,
	PLAYER_CLASS_WARRIOR63         = 63,
	PLAYER_CLASS_WARRIOR64         = 64,
	PLAYER_CLASS_WARRIOR65         = 65,
	PLAYER_CLASS_WARRIOR66         = 66,
	PLAYER_CLASS_WARRIOR67         = 67,
	PLAYER_CLASS_WARRIOR68         = 68,
	PLAYER_CLASS_WARRIOR69         = 69,
	PLAYER_CLASS_WARRIOR70         = 70,
	PLAYER_CLASS_WARRIOR71         = 71,
	PLAYER_CLASS_WARRIOR72         = 72,
	PLAYER_CLASS_WARRIOR73         = 73,
	PLAYER_CLASS_WARRIOR74         = 74,
	PLAYER_CLASS_WARRIOR75         = 75,
	PLAYER_CLASS_WARRIOR76         = 76,
	PLAYER_CLASS_WARRIOR77         = 77,
	PLAYER_CLASS_WARRIOR78         = 78,
	PLAYER_CLASS_WARRIOR79         = 79,
	PLAYER_CLASS_WARRIOR80         = 80,
	PLAYER_CLASS_WARRIOR81         = 81,
	PLAYER_CLASS_WARRIOR82         = 82,
	PLAYER_CLASS_WARRIOR83         = 83,
	PLAYER_CLASS_WARRIOR84         = 84,
	PLAYER_CLASS_WARRIOR85         = 85,
	PLAYER_CLASS_WARRIOR86         = 86,
	PLAYER_CLASS_WARRIOR87         = 87,
	PLAYER_CLASS_WARRIOR88         = 88,
	PLAYER_CLASS_WARRIOR89         = 89,
	PLAYER_CLASS_WARRIOR90         = 90,
	PLAYER_CLASS_WARRIOR91         = 91,
	PLAYER_CLASS_WARRIOR92         = 92,
	PLAYER_CLASS_WARRIOR93         = 93,
	PLAYER_CLASS_WARRIOR94         = 94,
	PLAYER_CLASS_WARRIOR95         = 95,
	PLAYER_CLASS_WARRIOR96         = 96,
	PLAYER_CLASS_WARRIOR97         = 97,
	PLAYER_CLASS_WARRIOR98         = 98,
	PLAYER_CLASS_WARRIOR99         = 99,
	PLAYER_CLASS_WARRIOR100        = 100,
	PLAYER_CLASS_WARRIOR           = 101,
	PLAYER_CLASS_BERSERKER         = 102,
	PLAYER_CLASS_DESTROYER         = 103,
	PLAYER_CLASS_WARLORD           = 104,
	PLAYER_CLASS_HOLYKNIGHT        = 105,
	PLAYER_CLASS_MAGICIAN106       = 106,
	PLAYER_CLASS_MAGICIAN107       = 107,
	PLAYER_CLASS_MAGICIAN108       = 108,
	PLAYER_CLASS_MAGICIAN109       = 109,
	PLAYER_CLASS_MAGICIAN110       = 110,
	PLAYER_CLASS_MAGICIAN111       = 111,
	PLAYER_CLASS_MAGICIAN112       = 112,
	PLAYER_CLASS_MAGICIAN113       = 113,
	PLAYER_CLASS_MAGICIAN114       = 114,
	PLAYER_CLASS_MAGICIAN115       = 115,
	PLAYER_CLASS_MAGICIAN116       = 116,
	PLAYER_CLASS_MAGICIAN117       = 117,
	PLAYER_CLASS_MAGICIAN118       = 118,
	PLAYER_CLASS_MAGICIAN119       = 119,
	PLAYER_CLASS_MAGICIAN120       = 120,
	PLAYER_CLASS_MAGICIAN121       = 121,
	PLAYER_CLASS_MAGICIAN122       = 122,
	PLAYER_CLASS_MAGICIAN123       = 123,
	PLAYER_CLASS_MAGICIAN124       = 124,
	PLAYER_CLASS_MAGICIAN125       = 125,
	PLAYER_CLASS_MAGICIAN126       = 126,
	PLAYER_CLASS_MAGICIAN127       = 127,
	PLAYER_CLASS_MAGICIAN128       = 128,
	PLAYER_CLASS_MAGICIAN129       = 129,
	PLAYER_CLASS_MAGICIAN130       = 130,
	PLAYER_CLASS_MAGICIAN131       = 131,
	PLAYER_CLASS_MAGICIAN132       = 132,
	PLAYER_CLASS_MAGICIAN133       = 133,
	PLAYER_CLASS_MAGICIAN134       = 134,
	PLAYER_CLASS_MAGICIAN135       = 135,
	PLAYER_CLASS_MAGICIAN136       = 136,
	PLAYER_CLASS_MAGICIAN137       = 137,
	PLAYER_CLASS_MAGICIAN138       = 138,
	PLAYER_CLASS_MAGICIAN139       = 139,
	PLAYER_CLASS_MAGICIAN140       = 140,
	PLAYER_CLASS_MAGICIAN141       = 141,
	PLAYER_CLASS_MAGICIAN142       = 142,
	PLAYER_CLASS_MAGICIAN143       = 143,
	PLAYER_CLASS_MAGICIAN144       = 144,
	PLAYER_CLASS_MAGICIAN145       = 145,
	PLAYER_CLASS_MAGICIAN146       = 146,
	PLAYER_CLASS_MAGICIAN147       = 147,
	PLAYER_CLASS_MAGICIAN148       = 148,
	PLAYER_CLASS_MAGICIAN149       = 149,
	PLAYER_CLASS_MAGICIAN150       = 150,
	PLAYER_CLASS_MAGICIAN151       = 151,
	PLAYER_CLASS_MAGICIAN152       = 152,
	PLAYER_CLASS_MAGICIAN153       = 153,
	PLAYER_CLASS_MAGICIAN154       = 154,
	PLAYER_CLASS_MAGICIAN155       = 155,
	PLAYER_CLASS_MAGICIAN156       = 156,
	PLAYER_CLASS_MAGICIAN157       = 157,
	PLAYER_CLASS_MAGICIAN158       = 158,
	PLAYER_CLASS_MAGICIAN159       = 159,
	PLAYER_CLASS_MAGICIAN160       = 160,
	PLAYER_CLASS_MAGICIAN161       = 161,
	PLAYER_CLASS_MAGICIAN162       = 162,
	PLAYER_CLASS_MAGICIAN163       = 163,
	PLAYER_CLASS_MAGICIAN164       = 164,
	PLAYER_CLASS_MAGICIAN165       = 165,
	PLAYER_CLASS_MAGICIAN166       = 166,
	PLAYER_CLASS_MAGICIAN167       = 167,
	PLAYER_CLASS_MAGICIAN168       = 168,
	PLAYER_CLASS_MAGICIAN169       = 169,
	PLAYER_CLASS_MAGICIAN170       = 170,
	PLAYER_CLASS_MAGICIAN171       = 171,
	PLAYER_CLASS_MAGICIAN172       = 172,
	PLAYER_CLASS_MAGICIAN173       = 173,
	PLAYER_CLASS_MAGICIAN174       = 174,
	PLAYER_CLASS_MAGICIAN175       = 175,
	PLAYER_CLASS_MAGICIAN176       = 176,
	PLAYER_CLASS_MAGICIAN177       = 177,
	PLAYER_CLASS_MAGICIAN178       = 178,
	PLAYER_CLASS_MAGICIAN179       = 179,
	PLAYER_CLASS_MAGICIAN180       = 180,
	PLAYER_CLASS_MAGICIAN181       = 181,
	PLAYER_CLASS_MAGICIAN182       = 182,
	PLAYER_CLASS_MAGICIAN183       = 183,
	PLAYER_CLASS_MAGICIAN184       = 184,
	PLAYER_CLASS_MAGICIAN185       = 185,
	PLAYER_CLASS_MAGICIAN186       = 186,
	PLAYER_CLASS_MAGICIAN187       = 187,
	PLAYER_CLASS_MAGICIAN188       = 188,
	PLAYER_CLASS_MAGICIAN189       = 189,
	PLAYER_CLASS_MAGICIAN190       = 190,
	PLAYER_CLASS_MAGICIAN191       = 191,
	PLAYER_CLASS_MAGICIAN192       = 192,
	PLAYER_CLASS_MAGICIAN193       = 193,
	PLAYER_CLASS_MAGICIAN194       = 194,
	PLAYER_CLASS_MAGICIAN195       = 195,
	PLAYER_CLASS_MAGICIAN196       = 196,
	PLAYER_CLASS_MAGICIAN197       = 197,
	PLAYER_CLASS_MAGICIAN198       = 198,
	PLAYER_CLASS_MAGICIAN199       = 199,
	PLAYER_CLASS_MAGICIAN200       = 200,
	PLAYER_CLASS_MAGICIAN          = 201,
	PLAYER_CLASS_ARCANA            = 202,
	PLAYER_CLASS_SUMMONER          = 203,
	PLAYER_CLASS_BARD              = 204,
	PLAYER_CLASS_ELEMENTAL_MASTER  = 205,
	PLAYER_CLASS_FIGHTER206        = 206,
	PLAYER_CLASS_FIGHTER207        = 207,
	PLAYER_CLASS_FIGHTER208        = 208,
	PLAYER_CLASS_FIGHTER209        = 209,
	PLAYER_CLASS_FIGHTER210        = 210,
	PLAYER_CLASS_FIGHTER211        = 211,
	PLAYER_CLASS_FIGHTER212        = 212,
	PLAYER_CLASS_FIGHTER213        = 213,
	PLAYER_CLASS_FIGHTER214        = 214,
	PLAYER_CLASS_FIGHTER215        = 215,
	PLAYER_CLASS_FIGHTER216        = 216,
	PLAYER_CLASS_FIGHTER217        = 217,
	PLAYER_CLASS_FIGHTER218        = 218,
	PLAYER_CLASS_FIGHTER219        = 219,
	PLAYER_CLASS_FIGHTER220        = 220,
	PLAYER_CLASS_FIGHTER221        = 221,
	PLAYER_CLASS_FIGHTER222        = 222,
	PLAYER_CLASS_FIGHTER223        = 223,
	PLAYER_CLASS_FIGHTER224        = 224,
	PLAYER_CLASS_FIGHTER225        = 225,
	PLAYER_CLASS_FIGHTER226        = 226,
	PLAYER_CLASS_FIGHTER227        = 227,
	PLAYER_CLASS_FIGHTER228        = 228,
	PLAYER_CLASS_FIGHTER229        = 229,
	PLAYER_CLASS_FIGHTER230        = 230,
	PLAYER_CLASS_FIGHTER231        = 231,
	PLAYER_CLASS_FIGHTER232        = 232,
	PLAYER_CLASS_FIGHTER233        = 233,
	PLAYER_CLASS_FIGHTER234        = 234,
	PLAYER_CLASS_FIGHTER235        = 235,
	PLAYER_CLASS_FIGHTER236        = 236,
	PLAYER_CLASS_FIGHTER237        = 237,
	PLAYER_CLASS_FIGHTER238        = 238,
	PLAYER_CLASS_FIGHTER239        = 239,
	PLAYER_CLASS_FIGHTER240        = 240,
	PLAYER_CLASS_FIGHTER241        = 241,
	PLAYER_CLASS_FIGHTER242        = 242,
	PLAYER_CLASS_FIGHTER243        = 243,
	PLAYER_CLASS_FIGHTER244        = 244,
	PLAYER_CLASS_FIGHTER245        = 245,
	PLAYER_CLASS_FIGHTER246        = 246,
	PLAYER_CLASS_FIGHTER247        = 247,
	PLAYER_CLASS_FIGHTER248        = 248,
	PLAYER_CLASS_FIGHTER249        = 249,
	PLAYER_CLASS_FIGHTER250        = 250,
	PLAYER_CLASS_FIGHTER251        = 251,
	PLAYER_CLASS_FIGHTER252        = 252,
	PLAYER_CLASS_FIGHTER253        = 253,
	PLAYER_CLASS_FIGHTER254        = 254,
	PLAYER_CLASS_FIGHTER255        = 255,
	PLAYER_CLASS_FIGHTER256        = 256,
	PLAYER_CLASS_FIGHTER257        = 257,
	PLAYER_CLASS_FIGHTER258        = 258,
	PLAYER_CLASS_FIGHTER259        = 259,
	PLAYER_CLASS_FIGHTER260        = 260,
	PLAYER_CLASS_FIGHTER261        = 261,
	PLAYER_CLASS_FIGHTER262        = 262,
	PLAYER_CLASS_FIGHTER263        = 263,
	PLAYER_CLASS_FIGHTER264        = 264,
	PLAYER_CLASS_FIGHTER265        = 265,
	PLAYER_CLASS_FIGHTER266        = 266,
	PLAYER_CLASS_FIGHTER267        = 267,
	PLAYER_CLASS_FIGHTER268        = 268,
	PLAYER_CLASS_FIGHTER269        = 269,
	PLAYER_CLASS_FIGHTER270        = 270,
	PLAYER_CLASS_FIGHTER271        = 271,
	PLAYER_CLASS_FIGHTER272        = 272,
	PLAYER_CLASS_FIGHTER273        = 273,
	PLAYER_CLASS_FIGHTER274        = 274,
	PLAYER_CLASS_FIGHTER275        = 275,
	PLAYER_CLASS_FIGHTER276        = 276,
	PLAYER_CLASS_FIGHTER277        = 277,
	PLAYER_CLASS_FIGHTER278        = 278,
	PLAYER_CLASS_FIGHTER279        = 279,
	PLAYER_CLASS_FIGHTER280        = 280,
	PLAYER_CLASS_FIGHTER281        = 281,
	PLAYER_CLASS_FIGHTER282        = 282,
	PLAYER_CLASS_FIGHTER283        = 283,
	PLAYER_CLASS_FIGHTER284        = 284,
	PLAYER_CLASS_FIGHTER285        = 285,
	PLAYER_CLASS_FIGHTER286        = 286,
	PLAYER_CLASS_FIGHTER287        = 287,
	PLAYER_CLASS_FIGHTER288        = 288,
	PLAYER_CLASS_FIGHTER289        = 289,
	PLAYER_CLASS_FIGHTER290        = 290,
	PLAYER_CLASS_FIGHTER291        = 291,
	PLAYER_CLASS_FIGHTER292        = 292,
	PLAYER_CLASS_FIGHTER293        = 293,
	PLAYER_CLASS_FIGHTER294        = 294,
	PLAYER_CLASS_FIGHTER295        = 295,
	PLAYER_CLASS_FIGHTER296        = 296,
	PLAYER_CLASS_FIGHTER297        = 297,
	PLAYER_CLASS_FIGHTER298        = 298,
	PLAYER_CLASS_FIGHTER299        = 299,
	PLAYER_CLASS_FIGHTER300        = 300,
	PLAYER_CLASS_FIGHTER           = 301,
	PLAYER_CLASS_BATTLE_MASTER     = 302,
	PLAYER_CLASS_INFIGHTER         = 303,
	PLAYER_CLASS_FORCE_MASTER      = 304,
	PLAYER_CLASS_LANCE_MASTER      = 305,
	PLAYER_CLASS_FIGHTER_MALE306   = 306,
	PLAYER_CLASS_FIGHTER_MALE307   = 307,
	PLAYER_CLASS_FIGHTER_MALE308   = 308,
	PLAYER_CLASS_FIGHTER_MALE309   = 309,
	PLAYER_CLASS_FIGHTER_MALE310   = 310,
	PLAYER_CLASS_FIGHTER_MALE      = 311,
	PLAYER_CLASS_BATTLE_MASTER_MALE = 312,
	PLAYER_CLASS_DELAIN313         = 313,
	PLAYER_CLASS_DELAIN314         = 314,
	PLAYER_CLASS_DELAIN315         = 315,
	PLAYER_CLASS_DELAIN316         = 316,
	PLAYER_CLASS_DELAIN317         = 317,
	PLAYER_CLASS_DELAIN318         = 318,
	PLAYER_CLASS_DELAIN319         = 319,
	PLAYER_CLASS_DELAIN320         = 320,
	PLAYER_CLASS_DELAIN321         = 321,
	PLAYER_CLASS_DELAIN322         = 322,
	PLAYER_CLASS_DELAIN323         = 323,
	PLAYER_CLASS_DELAIN324         = 324,
	PLAYER_CLASS_DELAIN325         = 325,
	PLAYER_CLASS_DELAIN326         = 326,
	PLAYER_CLASS_DELAIN327         = 327,
	PLAYER_CLASS_DELAIN328         = 328,
	PLAYER_CLASS_DELAIN329         = 329,
	PLAYER_CLASS_DELAIN330         = 330,
	PLAYER_CLASS_DELAIN331         = 331,
	PLAYER_CLASS_DELAIN332         = 332,
	PLAYER_CLASS_DELAIN333         = 333,
	PLAYER_CLASS_DELAIN334         = 334,
	PLAYER_CLASS_DELAIN335         = 335,
	PLAYER_CLASS_DELAIN336         = 336,
	PLAYER_CLASS_DELAIN337         = 337,
	PLAYER_CLASS_DELAIN338         = 338,
	PLAYER_CLASS_DELAIN339         = 339,
	PLAYER_CLASS_DELAIN340         = 340,
	PLAYER_CLASS_DELAIN341         = 341,
	PLAYER_CLASS_DELAIN342         = 342,
	PLAYER_CLASS_DELAIN343         = 343,
	PLAYER_CLASS_DELAIN344         = 344,
	PLAYER_CLASS_DELAIN345         = 345,
	PLAYER_CLASS_DELAIN346         = 346,
	PLAYER_CLASS_DELAIN347         = 347,
	PLAYER_CLASS_DELAIN348         = 348,
	PLAYER_CLASS_DELAIN349         = 349,
	PLAYER_CLASS_DELAIN350         = 350,
	PLAYER_CLASS_DELAIN351         = 351,
	PLAYER_CLASS_DELAIN352         = 352,
	PLAYER_CLASS_DELAIN353         = 353,
	PLAYER_CLASS_DELAIN354         = 354,
	PLAYER_CLASS_DELAIN355         = 355,
	PLAYER_CLASS_DELAIN356         = 356,
	PLAYER_CLASS_DELAIN357         = 357,
	PLAYER_CLASS_DELAIN358         = 358,
	PLAYER_CLASS_DELAIN359         = 359,
	PLAYER_CLASS_DELAIN360         = 360,
	PLAYER_CLASS_DELAIN361         = 361,
	PLAYER_CLASS_DELAIN362         = 362,
	PLAYER_CLASS_DELAIN363         = 363,
	PLAYER_CLASS_DELAIN364         = 364,
	PLAYER_CLASS_DELAIN365         = 365,
	PLAYER_CLASS_DELAIN366         = 366,
	PLAYER_CLASS_DELAIN367         = 367,
	PLAYER_CLASS_DELAIN368         = 368,
	PLAYER_CLASS_DELAIN369         = 369,
	PLAYER_CLASS_DELAIN370         = 370,
	PLAYER_CLASS_DELAIN371         = 371,
	PLAYER_CLASS_DELAIN372         = 372,
	PLAYER_CLASS_DELAIN373         = 373,
	PLAYER_CLASS_DELAIN374         = 374,
	PLAYER_CLASS_DELAIN375         = 375,
	PLAYER_CLASS_DELAIN376         = 376,
	PLAYER_CLASS_DELAIN377         = 377,
	PLAYER_CLASS_DELAIN378         = 378,
	PLAYER_CLASS_DELAIN379         = 379,
	PLAYER_CLASS_DELAIN380         = 380,
	PLAYER_CLASS_DELAIN381         = 381,
	PLAYER_CLASS_DELAIN382         = 382,
	PLAYER_CLASS_DELAIN383         = 383,
	PLAYER_CLASS_DELAIN384         = 384,
	PLAYER_CLASS_DELAIN385         = 385,
	PLAYER_CLASS_DELAIN386         = 386,
	PLAYER_CLASS_DELAIN387         = 387,
	PLAYER_CLASS_DELAIN388         = 388,
	PLAYER_CLASS_DELAIN389         = 389,
	PLAYER_CLASS_DELAIN390         = 390,
	PLAYER_CLASS_DELAIN391         = 391,
	PLAYER_CLASS_DELAIN392         = 392,
	PLAYER_CLASS_DELAIN393         = 393,
	PLAYER_CLASS_DELAIN394         = 394,
	PLAYER_CLASS_DELAIN395         = 395,
	PLAYER_CLASS_DELAIN396         = 396,
	PLAYER_CLASS_DELAIN397         = 397,
	PLAYER_CLASS_DELAIN398         = 398,
	PLAYER_CLASS_DELAIN399         = 399,
	PLAYER_CLASS_DELAIN400         = 400,
	PLAYER_CLASS_DELAIN            = 401,
	PLAYER_CLASS_BLADE             = 402,
	PLAYER_CLASS_DEMONIC           = 403,
	PLAYER_CLASS_REAPER            = 404,
	PLAYER_CLASS_HUNTER405         = 405,
	PLAYER_CLASS_HUNTER406         = 406,
	PLAYER_CLASS_HUNTER407         = 407,
	PLAYER_CLASS_HUNTER408         = 408,
	PLAYER_CLASS_HUNTER409         = 409,
	PLAYER_CLASS_HUNTER410         = 410,
	PLAYER_CLASS_HUNTER411         = 411,
	PLAYER_CLASS_HUNTER412         = 412,
	PLAYER_CLASS_HUNTER413         = 413,
	PLAYER_CLASS_HUNTER414         = 414,
	PLAYER_CLASS_HUNTER415         = 415,
	PLAYER_CLASS_HUNTER416         = 416,
	PLAYER_CLASS_HUNTER417         = 417,
	PLAYER_CLASS_HUNTER418         = 418,
	PLAYER_CLASS_HUNTER419         = 419,
	PLAYER_CLASS_HUNTER420         = 420,
	PLAYER_CLASS_HUNTER421         = 421,
	PLAYER_CLASS_HUNTER422         = 422,
	PLAYER_CLASS_HUNTER423         = 423,
	PLAYER_CLASS_HUNTER424         = 424,
	PLAYER_CLASS_HUNTER425         = 425,
	PLAYER_CLASS_HUNTER426         = 426,
	PLAYER_CLASS_HUNTER427         = 427,
	PLAYER_CLASS_HUNTER428         = 428,
	PLAYER_CLASS_HUNTER429         = 429,
	PLAYER_CLASS_HUNTER430         = 430,
	PLAYER_CLASS_HUNTER431         = 431,
	PLAYER_CLASS_HUNTER432         = 432,
	PLAYER_CLASS_HUNTER433         = 433,
	PLAYER_CLASS_HUNTER434         = 434,
	PLAYER_CLASS_HUNTER435         = 435,
	PLAYER_CLASS_HUNTER436         = 436,
	PLAYER_CLASS_HUNTER437         = 437,
	PLAYER_CLASS_HUNTER438         = 438,
	PLAYER_CLASS_HUNTER439         = 439,
	PLAYER_CLASS_HUNTER440         = 440,
	PLAYER_CLASS_HUNTER441         = 441,
	PLAYER_CLASS_HUNTER442         = 442,
	PLAYER_CLASS_HUNTER443         = 443,
	PLAYER_CLASS_HUNTER444         = 444,
	PLAYER_CLASS_HUNTER445         = 445,
	PLAYER_CLASS_HUNTER446         = 446,
	PLAYER_CLASS_HUNTER447         = 447,
	PLAYER_CLASS_HUNTER448         = 448,
	PLAYER_CLASS_HUNTER449         = 449,
	PLAYER_CLASS_HUNTER450         = 450,
	PLAYER_CLASS_HUNTER451         = 451,
	PLAYER_CLASS_HUNTER452         = 452,
	PLAYER_CLASS_HUNTER453         = 453,
	PLAYER_CLASS_HUNTER454         = 454,
	PLAYER_CLASS_HUNTER455         = 455,
	PLAYER_CLASS_HUNTER456         = 456,
	PLAYER_CLASS_HUNTER457         = 457,
	PLAYER_CLASS_HUNTER458         = 458,
	PLAYER_CLASS_HUNTER459         = 459,
	PLAYER_CLASS_HUNTER460         = 460,
	PLAYER_CLASS_HUNTER461         = 461,
	PLAYER_CLASS_HUNTER462         = 462,
	PLAYER_CLASS_HUNTER463         = 463,
	PLAYER_CLASS_HUNTER464         = 464,
	PLAYER_CLASS_HUNTER465         = 465,
	PLAYER_CLASS_HUNTER466         = 466,
	PLAYER_CLASS_HUNTER467         = 467,
	PLAYER_CLASS_HUNTER468         = 468,
	PLAYER_CLASS_HUNTER469         = 469,
	PLAYER_CLASS_HUNTER470         = 470,
	PLAYER_CLASS_HUNTER471         = 471,
	PLAYER_CLASS_HUNTER472         = 472,
	PLAYER_CLASS_HUNTER473         = 473,
	PLAYER_CLASS_HUNTER474         = 474,
	PLAYER_CLASS_HUNTER475         = 475,
	PLAYER_CLASS_HUNTER476         = 476,
	PLAYER_CLASS_HUNTER477         = 477,
	PLAYER_CLASS_HUNTER478         = 478,
	PLAYER_CLASS_HUNTER479         = 479,
	PLAYER_CLASS_HUNTER480         = 480,
	PLAYER_CLASS_HUNTER481         = 481,
	PLAYER_CLASS_HUNTER482         = 482,
	PLAYER_CLASS_HUNTER483         = 483,
	PLAYER_CLASS_HUNTER484         = 484,
	PLAYER_CLASS_HUNTER485         = 485,
	PLAYER_CLASS_HUNTER486         = 486,
	PLAYER_CLASS_HUNTER487         = 487,
	PLAYER_CLASS_HUNTER488         = 488,
	PLAYER_CLASS_HUNTER489         = 489,
	PLAYER_CLASS_HUNTER490         = 490,
	PLAYER_CLASS_HUNTER491         = 491,
	PLAYER_CLASS_HUNTER492         = 492,
	PLAYER_CLASS_HUNTER493         = 493,
	PLAYER_CLASS_HUNTER494         = 494,
	PLAYER_CLASS_HUNTER495         = 495,
	PLAYER_CLASS_HUNTER496         = 496,
	PLAYER_CLASS_HUNTER497         = 497,
	PLAYER_CLASS_HUNTER498         = 498,
	PLAYER_CLASS_HUNTER499         = 499,
	PLAYER_CLASS_HUNTER500         = 500,
	PLAYER_CLASS_HUNTER            = 501,
	PLAYER_CLASS_HAWK_EYE          = 502,
	PLAYER_CLASS_DEVIL_HUNTER      = 503,
	PLAYER_CLASS_BLASTER           = 504,
	PLAYER_CLASS_SCOUTER           = 505,
	PLAYER_CLASS_HUNTER_FEMALE506  = 506,
	PLAYER_CLASS_HUNTER_FEMALE507  = 507,
	PLAYER_CLASS_HUNTER_FEMALE508  = 508,
	PLAYER_CLASS_HUNTER_FEMALE509  = 509,
	PLAYER_CLASS_HUNTER_FEMALE510  = 510,
	PLAYER_CLASS_HUNTER_FEMALE     = 511,
	PLAYER_CLASS_DEVIL_HUNTER_FEMALE = 512,
	PLAYER_CLASS_SPECIALIST513     = 513,
	PLAYER_CLASS_SPECIALIST514     = 514,
	PLAYER_CLASS_SPECIALIST515     = 515,
	PLAYER_CLASS_SPECIALIST516     = 516,
	PLAYER_CLASS_SPECIALIST517     = 517,
	PLAYER_CLASS_SPECIALIST518     = 518,
	PLAYER_CLASS_SPECIALIST519     = 519,
	PLAYER_CLASS_SPECIALIST520     = 520,
	PLAYER_CLASS_SPECIALIST521     = 521,
	PLAYER_CLASS_SPECIALIST522     = 522,
	PLAYER_CLASS_SPECIALIST523     = 523,
	PLAYER_CLASS_SPECIALIST524     = 524,
	PLAYER_CLASS_SPECIALIST525     = 525,
	PLAYER_CLASS_SPECIALIST526     = 526,
	PLAYER_CLASS_SPECIALIST527     = 527,
	PLAYER_CLASS_SPECIALIST528     = 528,
	PLAYER_CLASS_SPECIALIST529     = 529,
	PLAYER_CLASS_SPECIALIST530     = 530,
	PLAYER_CLASS_SPECIALIST531     = 531,
	PLAYER_CLASS_SPECIALIST532     = 532,
	PLAYER_CLASS_SPECIALIST533     = 533,
	PLAYER_CLASS_SPECIALIST534     = 534,
	PLAYER_CLASS_SPECIALIST535     = 535,
	PLAYER_CLASS_SPECIALIST536     = 536,
	PLAYER_CLASS_SPECIALIST537     = 537,
	PLAYER_CLASS_SPECIALIST538     = 538,
	PLAYER_CLASS_SPECIALIST539     = 539,
	PLAYER_CLASS_SPECIALIST540     = 540,
	PLAYER_CLASS_SPECIALIST541     = 541,
	PLAYER_CLASS_SPECIALIST542     = 542,
	PLAYER_CLASS_SPECIALIST543     = 543,
	PLAYER_CLASS_SPECIALIST544     = 544,
	PLAYER_CLASS_SPECIALIST545     = 545,
	PLAYER_CLASS_SPECIALIST546     = 546,
	PLAYER_CLASS_SPECIALIST547     = 547,
	PLAYER_CLASS_SPECIALIST548     = 548,
	PLAYER_CLASS_SPECIALIST549     = 549,
	PLAYER_CLASS_SPECIALIST550     = 550,
	PLAYER_CLASS_SPECIALIST551     = 551,
	PLAYER_CLASS_SPECIALIST552     = 552,
	PLAYER_CLASS_SPECIALIST553     = 553,
	PLAYER_CLASS_SPECIALIST554     = 554,
	PLAYER_CLASS_SPECIALIST555     = 555,
	PLAYER_CLASS_SPECIALIST556     = 556,
	PLAYER_CLASS_SPECIALIST557     = 557,
	PLAYER_CLASS_SPECIALIST558     = 558,
	PLAYER_CLASS_SPECIALIST559     = 559,
	PLAYER_CLASS_SPECIALIST560     = 560,
	PLAYER_CLASS_SPECIALIST561     = 561,
	PLAYER_CLASS_SPECIALIST562     = 562,
	PLAYER_CLASS_SPECIALIST563     = 563,
	PLAYER_CLASS_SPECIALIST564     = 564,
	PLAYER_CLASS_SPECIALIST565     = 565,
	PLAYER_CLASS_SPECIALIST566     = 566,
	PLAYER_CLASS_SPECIALIST567     = 567,
	PLAYER_CLASS_SPECIALIST568     = 568,
	PLAYER_CLASS_SPECIALIST569     = 569,
	PLAYER_CLASS_SPECIALIST570     = 570,
	PLAYER_CLASS_SPECIALIST571     = 571,
	PLAYER_CLASS_SPECIALIST572     = 572,
	PLAYER_CLASS_SPECIALIST573     = 573,
	PLAYER_CLASS_SPECIALIST574     = 574,
	PLAYER_CLASS_SPECIALIST575     = 575,
	PLAYER_CLASS_SPECIALIST576     = 576,
	PLAYER_CLASS_SPECIALIST577     = 577,
	PLAYER_CLASS_SPECIALIST578     = 578,
	PLAYER_CLASS_SPECIALIST579     = 579,
	PLAYER_CLASS_SPECIALIST580     = 580,
	PLAYER_CLASS_SPECIALIST581     = 581,
	PLAYER_CLASS_SPECIALIST582     = 582,
	PLAYER_CLASS_SPECIALIST583     = 583,
	PLAYER_CLASS_SPECIALIST584     = 584,
	PLAYER_CLASS_SPECIALIST585     = 585,
	PLAYER_CLASS_SPECIALIST586     = 586,
	PLAYER_CLASS_SPECIALIST587     = 587,
	PLAYER_CLASS_SPECIALIST588     = 588,
	PLAYER_CLASS_SPECIALIST589     = 589,
	PLAYER_CLASS_SPECIALIST590     = 590,
	PLAYER_CLASS_SPECIALIST591     = 591,
	PLAYER_CLASS_SPECIALIST592     = 592,
	PLAYER_CLASS_SPECIALIST593     = 593,
	PLAYER_CLASS_SPECIALIST594     = 594,
	PLAYER_CLASS_SPECIALIST595     = 595,
	PLAYER_CLASS_SPECIALIST596     = 596,
	PLAYER_CLASS_SPECIALIST597     = 597,
	PLAYER_CLASS_SPECIALIST598     = 598,
	PLAYER_CLASS_SPECIALIST599     = 599,
	PLAYER_CLASS_SPECIALIST600     = 600,
	PLAYER_CLASS_SPECIALIST        = 601,
	PLAYER_CLASS_YINYANGSHI        = 602,
	PLAYER_CLASS_WEATHER_ARTIST    = 603,
	PLAYER_CLASS_ALCHEMIST         = 604,
	PLAYER_CLASS_MAX               = 605
};


// Enum EFGame.EFConst.PlayerClassDeprecated
enum class EPlayerClassDeprecated : uint8_t
{
	PLAYER_CLASS_DEPRECATED_NA     = 0,
	PLAYER_CLASS_DEPRECATED_WARRIOR = 1,
	PLAYER_CLASS_DEPRECATED_MAGICIAN = 2,
	PLAYER_CLASS_DEPRECATED_FIGHTER = 3,
	PLAYER_CLASS_DEPRECATED_FIGHTER_MALE = 4,
	PLAYER_CLASS_DEPRECATED_DELAIN = 5,
	PLAYER_CLASS_DEPRECATED_HUNTER = 6,
	PLAYER_CLASS_DEPRECATED_HUNTER_FEMALE = 7,
	PLAYER_CLASS_DEPRECATED_SPECIALIST = 8,
	PLAYER_CLASS_DEPRECATED_BERSERKER = 9,
	PLAYER_CLASS_DEPRECATED_DESTROYER = 10,
	PLAYER_CLASS_DEPRECATED_WARLORD = 11,
	PLAYER_CLASS_DEPRECATED_ARCANA = 12,
	PLAYER_CLASS_DEPRECATED_SUMMONER = 13,
	PLAYER_CLASS_DEPRECATED_BARD   = 14,
	PLAYER_CLASS_DEPRECATED_BATTLE_MASTER = 15,
	PLAYER_CLASS_DEPRECATED_BATTLE_MASTER_MALE = 16,
	PLAYER_CLASS_DEPRECATED_INFIGHTER = 17,
	PLAYER_CLASS_DEPRECATED_FORCE_MASTER = 18,
	PLAYER_CLASS_DEPRECATED_BLADE  = 19,
	PLAYER_CLASS_DEPRECATED_DEMONIC = 20,
	PLAYER_CLASS_DEPRECATED_REAPER = 21,
	PLAYER_CLASS_DEPRECATED_HAWK_EYE = 22,
	PLAYER_CLASS_DEPRECATED_DEVIL_HUNTER = 23,
	PLAYER_CLASS_DEPRECATED_DEVIL_HUNTER_FEMALE = 24,
	PLAYER_CLASS_DEPRECATED_BLASTER = 25,
	PLAYER_CLASS_DEPRECATED_YINYANGSHI = 26,
	PLAYER_CLASS_DEPRECATED_WEATHER_ARTIST = 27,
	PLAYER_CLASS_DEPRECATED_ALCHEMIST = 28,
	PLAYER_CLASS_DEPRECATED_SCOUTER = 29,
	PLAYER_CLASS_DEPRECATED_LANCE_MASTER = 30,
	PLAYER_CLASS_DEPRECATED_HOLYKNIGHT = 31,
	PLAYER_CLASS_DEPRECATED_ELEMENTAL_MASTER = 32,
	PLAYER_CLASS_DEPRECATED_MAX    = 33
};


// Enum EFGame.EFConst.PlayerClassDivision
enum class EPlayerClassDivision : uint8_t
{
	PLAYER_CLASS_DIVISION_NA       = 0,
	PLAYER_CLASS_DIVISION_WARRIOR  = 1,
	PLAYER_CLASS_DIVISION_MAGICIAN = 2,
	PLAYER_CLASS_DIVISION_FIGHTER  = 3,
	PLAYER_CLASS_DIVISION_DELAIN   = 4,
	PLAYER_CLASS_DIVISION_HUNTER   = 5,
	PLAYER_CLASS_DIVISION_SPECIALIST = 6,
	PLAYER_CLASS_DIVISION_FIGHTER_MALE = 7,
	PLAYER_CLASS_DIVISION_HUNTER_FEMALE = 8,
	PLAYER_CLASS_DIVISION_MAX      = 9
};


// Enum EFGame.EFConst.PlayerClassOpType
enum class EPlayerClassOpType : uint8_t
{
	PLAYER_CLASS_OP_TYPE_REVERT    = 0,
	PLAYER_CLASS_OP_TYPE_PREVIEW   = 1,
	PLAYER_CLASS_OP_TYPE_COMMIT    = 2,
	PLAYER_CLASS_OP_TYPE_CANCEL    = 3,
	PLAYER_CLASS_OP_TYPE_STOP_NPC_WAVE = 4,
	PLAYER_CLASS_OP_TYPE_START_NORMAL_NPC_WAVE = 5,
	PLAYER_CLASS_OP_TYPE_START_BOSS_NPC_WAVE = 6,
	PLAYER_CLASS_OP_TYPE_MAX       = 7
};


// Enum EFGame.EFConst.PolymorphRestrictedClickProp
enum class EPolymorphRestrictedClickProp : uint8_t
{
	POLYMORPH_RESTRICTED_CLICK_PROP_DISABLE = 0,
	POLYMORPH_RESTRICTED_CLICK_PROP_ID = 1,
	POLYMORPH_RESTRICTED_CLICK_PROP_NONE = 2,
	POLYMORPH_RESTRICTED_CLICK_PROP_MAX = 3
};


// Enum EFGame.EFConst.PolymorphRestrictedUseupItem
enum class EPolymorphRestrictedUseupItem : uint8_t
{
	POLYMORPH_RESTRICTED_USEUP_ITEM_DISABLE = 0,
	POLYMORPH_RESTRICTED_USEUP_ITEM_SPECIFIED_ID = 1,
	POLYMORPH_RESTRICTED_USEUP_ITEM_POTION = 2,
	POLYMORPH_RESTRICTED_USEUP_ITEM_POTION_OR_SPECIFIED_ID = 3,
	POLYMORPH_RESTRICTED_USEUP_ITEM_BATTLE_POTION_OR_SPECIFIED_ID = 4,
	POLYMORPH_RESTRICTED_USEUP_ITEM_MAX = 5
};


// Enum EFGame.EFConst.PropType
enum class EPropType : uint8_t
{
	PROP_TYPE_VOLUME               = 0,
	PROP_TYPE_TOUCH                = 1,
	PROP_TYPE_HIT                  = 2,
	PROP_TYPE_PICKUP               = 3,
	PROP_TYPE_FIGURE               = 4,
	PROP_TYPE_MAX                  = 5
};


// Enum EFGame.EFConst.PropVolumeType
enum class EPropVolumeType : uint8_t
{
	PROP_VOLUME_TYPE_NORMAL        = 0,
	PROP_VOLUME_TYPE_RINGOUT       = 1,
	PROP_VOLUME_TYPE_HOLY_BARRIER  = 2,
	PROP_VOLUME_TYPE_PORTAL        = 3,
	PROP_VOLUME_TYPE_BUSH          = 4,
	PROP_VOLUME_TYPE_ASSEMBLE      = 5,
	PROP_VOLUME_TYPE_TRACKMOVE     = 6,
	PROP_VOLUME_TYPE_RETURN        = 7,
	PROP_VOLUME_TYPE_PORT          = 8,
	PROP_VOLUME_TYPE_CASE          = 9,
	PROP_VOLUME_TYPE_FISHING_SPOT  = 10,
	PROP_VOLUME_TYPE_FISHBOWL      = 11,
	PROP_VOLUME_TYPE_AREA          = 12,
	PROP_VOLUME_TYPE_TELEPORT      = 13,
	PROP_VOLUME_TYPE_START_DUNGEON_QUEST = 14,
	PROP_VOLUME_TYPE_STORED_POSITION = 15,
	PROP_VOLUME_TYPE_INDOOR        = 16,
	PROP_VOLUME_TYPE_STREAMING_WARP = 17,
	PROP_VOLUME_TYPE_STATION       = 18,
	PROP_VOLUME_TYPE_BOSS_ROOM     = 19,
	PROP_VOLUME_TYPE_VEHICLE_LEAVE = 20,
	PROP_VOLUME_TYPE_FALL_DOWN     = 21,
	PROP_VOLUME_TYPE_SIDE_SCROLL   = 22,
	PROP_VOLUME_TYPE_STRONGHOLD    = 23,
	PROP_VOLUME_TYPE_MAX           = 24
};


// Enum EFGame.EFConst.PropVolumeSize
enum class EPropVolumeSize : uint8_t
{
	PROP_VOLUME_SIZE               = 0,
	PROP_VOLUME_SIZE01             = 1,
	PROP_VOLUME_SIZE02             = 2,
	PROP_VOLUME_SIZE03             = 3,
	PROP_VOLUME_SIZE04             = 4,
	PROP_VOLUME_SIZE_MAX           = 5
};


// Enum EFGame.EFConst.PropTouchType
enum class EPropTouchType : uint8_t
{
	PROP_TOUCH_TYPE_CLICK          = 0,
	PROP_TOUCH_TYPE_DOOR           = 1,
	PROP_TOUCH_TYPE_SWITCH         = 2,
	PROP_TOUCH_TYPE_GRIP           = 3,
	PROP_TOUCH_TYPE_SHARED         = 4,
	PROP_TOUCH_TYPE_ROTATOR        = 5,
	PROP_TOUCH_TYPE_JOINT          = 6,
	PROP_TOUCH_TYPE_MAX            = 7
};


// Enum EFGame.EFConst.HitPropMeshType
enum class EHitPropMeshType : uint8_t
{
	HIT_PROP_MESH_TYPE_NORMAL      = 0,
	HIT_PROP_MESH_TYPE_FRACTURE    = 1,
	HIT_PROP_MESH_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.PropContentType
enum class EPropContentType : uint8_t
{
	PROP_CONTENT_TYPE_NONE         = 0,
	PROP_CONTENT_TYPE_SQUAREHOLE   = 1,
	PROP_CONTENT_TYPE_CHAOSGATE    = 2,
	PROP_CONTENT_TYPE_RETURN       = 3,
	PROP_CONTENT_TYPE_CUBE_LOBBY   = 4,
	PROP_CONTENT_TYPE_CUBE_VOTE    = 5,
	PROP_CONTENT_TYPE_SD_GO_NEXT_ROOM = 6,
	PROP_CONTENT_TYPE_SD_ENTRY     = 7,
	PROP_CONTENT_TYPE_BOSS_RUSH_START = 8,
	PROP_CONTENT_TYPE_RESERVE_     = 9,
	PROP_CONTENT_TYPE_RESERVE_01   = 10,
	PROP_CONTENT_TYPE_RESERVE_02   = 11,
	PROP_CONTENT_TYPE_TOWER_ENTRY  = 12,
	PROP_CONTENT_TYPE_MOD_REVIVE_POINT = 13,
	PROP_CONTENT_TYPE_PLATINUM_RETURN_PLACE = 14,
	PROP_CONTENT_TYPE_PLATINUM_CAVE = 15,
	PROP_CONTENT_TYPE_PLATINUM_HERBALISM = 16,
	PROP_CONTENT_TYPE_PLATINUM_LUMBERING = 17,
	PROP_CONTENT_TYPE_PLATINUM_MINING = 18,
	PROP_CONTENT_TYPE_PLATINUM_HUNTING = 19,
	PROP_CONTENT_TYPE_PLATINUM_FISHING = 20,
	PROP_CONTENT_TYPE_PLATINUM_ARCHAEOLOGY = 21,
	PROP_CONTENT_TYPE_PLATINUM_ASTROLOGY = 22,
	PROP_CONTENT_TYPE_PLATINUM_SPEAKING = 23,
	PROP_CONTENT_TYPE_CINEMATIC_DUNGEON = 24,
	PROP_CONTENT_TYPE_OCEAN_COAST  = 25,
	PROP_CONTENT_TYPE_FLOATING_MATTER = 26,
	PROP_CONTENT_TYPE_ADVENTURE_MATTER = 27,
	PROP_CONTENT_TYPE_VOYAGE_FISHING_SCHOOL = 28,
	PROP_CONTENT_TYPE_VOYAGE_TREASURE_POINT = 29,
	PROP_CONTENT_TYPE_VOYAGE_EXPLORATION = 30,
	PROP_CONTENT_TYPE_DYNAMIC_ISLAND_ENTRY = 31,
	PROP_CONTENT_TYPE_OCEAN_ANCHOR = 32,
	PROP_CONTENT_TYPE_OCEAN_AREA_FENCE = 33,
	PROP_CONTENT_TYPE_ICE_STATUE   = 34,
	PROP_CONTENT_TYPE_LIFE_HUNTING_TRAP = 35,
	PROP_CONTENT_TYPE_LIFE_HUNTING_WAY_POINT = 36,
	PROP_CONTENT_TYPE_LIFE_HUNTING_CARVE = 37,
	PROP_CONTENT_TYPE_LIFE_ARCHEOLOGY_DIGGING_POINT = 38,
	PROP_CONTENT_TYPE_LIFE_ARCHEOLOGY_RUINS = 39,
	PROP_CONTENT_TYPE_LIFE_ARCHEOLOGY_ARTIFACT_BOX = 40,
	PROP_CONTENT_TYPE_COOP_QUEST   = 41,
	PROP_CONTENT_TYPE_LIFE_ARCHEOLOGY_RUINS_REWARD = 42,
	PROP_CONTENT_TYPE_SILIANS_ORDER = 43,
	PROP_CONTENT_TYPE_LIFE_FISH_POT_STAKE = 44,
	PROP_CONTENT_TYPE_LIFE_FISH_POT = 45,
	PROP_CONTENT_TYPE_ISLAND_ENTRY_AND_EXIT = 46,
	PROP_CONTENT_TYPE_COLLECTING   = 47,
	PROP_CONTENT_TYPE_SKILL_CONSTRAINT_UPDATE = 48,
	PROP_CONTENT_TYPE_RAID         = 49,
	PROP_CONTENT_TYPE_COLOSSEUM    = 50,
	PROP_CONTENT_TYPE_NATIVE_VILLAGE = 51,
	PROP_CONTENT_TYPE_VOYAGE_SUNKEN_ROCK = 52,
	PROP_CONTENT_TYPE_SAFE_OF_CAPTAIN = 53,
	PROP_CONTENT_TYPE_TOWN_SITE    = 54,
	PROP_CONTENT_TYPE_LIFE_FISH_POINT = 55,
	PROP_CONTENT_TYPE_CHAOSDUNGEON_ENTER = 56,
	PROP_CONTENT_TYPE_VOYAGE_DIVING = 57,
	PROP_CONTENT_TYPE_SD_SECRET_TREASURE = 58,
	PROP_CONTENT_TYPE_PROLOGUE_SKIP = 59,
	PROP_CONTENT_TYPE_LIGHT_CLIENT_PORTAL = 60,
	PROP_CONTENT_TYPE_BATTLEFIELD_SCORE = 61,
	PROP_CONTENT_TYPE_BATTLEFIELD_ENTRANCE = 62,
	PROP_CONTENT_TYPE_BATTLEFIELD_FENCE = 63,
	PROP_CONTENT_TYPE_BATTLEFIELD_FIELD_BOSS = 64,
	PROP_CONTENT_TYPE_TOWN_DISPATCH = 65,
	PROP_CONTENT_TYPE_JUMPING_DUNGEON = 66,
	PROP_CONTENT_TYPE_OCEAN_DUNGEON = 67,
	PROP_CONTENT_TYPE_TROOP_DUNGEON_SET = 68,
	PROP_CONTENT_TYPE_REVERSE_RUIN_NEXT_ROOM = 69,
	PROP_CONTENT_TYPE_REVERSE_RUIN_ENTRANCE = 70,
	PROP_CONTENT_TYPE_REVERSE_RUIN_TREASURE_CHEST = 71,
	PROP_CONTENT_TYPE_VOYAGE_COOP_TREASURE_POINT = 72,
	PROP_CONTENT_TYPE_EPIC_GATE    = 73,
	PROP_CONTENT_TYPE_SD_ENTRY_WRECKED_SHIP = 74,
	PROP_CONTENT_TYPE_TOWN_BLOCKING_AREA = 75,
	PROP_CONTENT_TYPE_GATEWAY_TOWER = 76,
	PROP_CONTENT_TYPE_EPIC_GATE_COMMANDER = 77,
	PROP_CONTENT_TYPE_GATEWAY_CUBE = 78,
	PROP_CONTENT_TYPE_GATEWAY_PLATINUM_FIELD = 79,
	PROP_CONTENT_TYPE_GATEWAY_BOSS_RUSH = 80,
	PROP_CONTENT_TYPE_ABYSS_RAID   = 81,
	PROP_CONTENT_TYPE_TOWN_CHEF_MENU = 82,
	PROP_CONTENT_TYPE_TOWN_CHEF_FEAST = 83,
	PROP_CONTENT_TYPE_TOWN_CHEF_PACKED_MEAL = 84,
	PROP_CONTENT_TYPE_EVENT_EPIC_GATE = 85,
	PROP_CONTENT_TYPE_COLOSSEUM_FORT_ENTRANCE = 86,
	PROP_CONTENT_TYPE_GUILD_FLAG   = 87,
	PROP_CONTENT_TYPE_SCENE_REPLAY_MODE = 88,
	PROP_CONTENT_TYPE_GATEWAY_WAY_OF_THRONE = 89,
	PROP_CONTENT_TYPE_WAY_OF_THRONE_START = 90,
	PROP_CONTENT_TYPE_EPIC_GATE_COMMANDER_SPECIAL = 91,
	PROP_CONTENT_TYPE_EPIC_GATE_COMMANDER_SPECIAL_ABRELSHUD = 92,
	PROP_CONTENT_TYPE_STRONGHOLD_WARP = 93,
	PROP_CONTENT_TYPE_BATTLEFIELD_LOWEN_ENTRANCE = 94,
	PROP_CONTENT_TYPE_MAX          = 95
};


// Enum EFGame.EFConst.PropPickupType
enum class EPropPickupType : uint8_t
{
	PROP_PICKUP_TYPE_NORMAL        = 0,
	PROP_PICKUP_TYPE_GADGET        = 1,
	PROP_PICKUP_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.PropState
enum class EPropState : uint8_t
{
	PROP_STATE_ON                  = 0,
	PROP_STATE_GO_ON               = 1,
	PROP_STATE_OFF                 = 2,
	PROP_STATE_GO_OFF              = 3,
	PROP_STATE_RESTORE             = 4,
	PROP_STATE_MAX                 = 5
};


// Enum EFGame.EFConst.PropBlockState
enum class EPropBlockState : uint8_t
{
	PROP_BLOCK_STATE_DEFAULT       = 0,
	PROP_BLOCK_STATE_BLOCKED       = 1,
	PROP_BLOCK_STATE_NOT_BLOCKED   = 2,
	PROP_BLOCK_STATE_MAX           = 3
};


// Enum EFGame.EFConst.PropDropEventType
enum class EPropDropEventType : uint8_t
{
	PROP_DROP_EVENT_TYPE_NONE      = 0,
	PROP_DROP_EVENT_TYPE_STATE_ON  = 1,
	PROP_DROP_EVENT_TYPE_STATE_ON01 = 2,
	PROP_DROP_EVENT_TYPE_STATE_ON_2_EXACT = 3,
	PROP_DROP_EVENT_TYPE_STATE_ON02 = 4,
	PROP_DROP_EVENT_TYPE_STATE_OFF = 5,
	PROP_DROP_EVENT_TYPE_PICK_UP_USE = 6,
	PROP_DROP_EVENT_TYPE_DETACH    = 7,
	PROP_DROP_EVENT_TYPE_EXECUTE   = 8,
	PROP_DROP_EVENT_TYPE_MAX       = 9
};


// Enum EFGame.EFConst.PropDropGiveType
enum class EPropDropGiveType : uint8_t
{
	PROP_DROP_GIVE_TYPE_DROP       = 0,
	PROP_DROP_GIVE_TYPE_INVEN      = 1,
	PROP_DROP_GIVE_TYPE_MAIL       = 2,
	PROP_DROP_GIVE_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.PropDropLootOwnerType
enum class EPropDropLootOwnerType : uint8_t
{
	PROP_DROP_LOOT_OWNER_TYPE_INDIVIDUAL = 0,
	PROP_DROP_LOOT_OWNER_TYPE_PARTY = 1,
	PROP_DROP_LOOT_OWNER_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.PCZoneStatCoefficientType
enum class EPCZoneStatCoefficientType : uint8_t
{
	PC_ZONE_STAT_COEFFICIENT_WEAPON_DAM = 0,
	PC_ZONE_STAT_COEFFICIENT_ATTACK = 1,
	PC_ZONE_STAT_COEFFICIENT_HP    = 2,
	PC_ZONE_STAT_COEFFICIENT_SECOND = 3,
	PC_ZONE_STAT_COEFFICIENT_ATTR_DAM = 4,
	PC_ZONE_STAT_COEFFICIENT_DEF   = 5,
	PC_ZONE_STAT_COEFFICIENT_VITALITY = 6,
	PC_ZONE_STAT_COEFFICIENT_PHYSICAL_INC_RATE = 7,
	PC_ZONE_STAT_COEFFICIENT_MAGICAL_INC_RATE = 8,
	PC_ZONE_STAT_COEFFICIENT_MAX   = 9
};


// Enum EFGame.EFConst.PCResetResourceType
enum class EPCResetResourceType : uint8_t
{
	PC_RESET_RESOURCE_TYPE_ADD_POLYMORPH = 0,
	PC_RESET_RESOURCE_TYPE_REMOVE_POLYMORPH = 1,
	PC_RESET_RESOURCE_TYPE_DEATH   = 2,
	PC_RESET_RESOURCE_TYPE_DEATH_ON_RESET = 3,
	PC_RESET_RESOURCE_TYPE_REVIVE  = 4,
	PC_RESET_RESOURCE_TYPE_REVIVE_ON_RESET = 5,
	PC_RESET_RESOURCE_TYPE_ZONE_ENTER = 6,
	PC_RESET_RESOURCE_TYPE_ZONE_LEAVE = 7,
	PC_RESET_RESOURCE_TYPE_MAX     = 8
};


// Enum EFGame.EFConst.PartyType
enum class EPartyType : uint8_t
{
	PARTY_TYPE_NORMAL              = 0,
	PARTY_TYPE_RAID                = 1,
	PARTY_TYPE_CHAOS               = 2,
	PARTY_TYPE_ARENA               = 3,
	PARTY_TYPE_COLOSSEUM           = 4,
	PARTY_TYPE_MOD                 = 5,
	PARTY_TYPE_MATCHING            = 6,
	PARTY_TYPE_MAX                 = 7
};


// Enum EFGame.EFConst.PartyJoinRejectType
enum class EPartyJoinRejectType : uint8_t
{
	PARTY_JOIN_REJECT_TYPE_SAY_NO  = 0,
	PARTY_JOIN_REJECT_TYPE_TIMEOUT = 1,
	PARTY_JOIN_REJECT_TYPE_EXCEED  = 2,
	PARTY_JOIN_REJECT_TYPE_CUTSCENE = 3,
	PARTY_JOIN_REJECT_TYPE_ENV_SETTING = 4,
	PARTY_JOIN_REJECT_TYPE_DEAD    = 5,
	PARTY_JOIN_REJECT_TYPE_INTERACTION = 6,
	PARTY_JOIN_REJECT_TYPE_PRACTICE = 7,
	PARTY_JOIN_REJECT_TYPE_BLOCK   = 8,
	PARTY_JOIN_REJECT_TYPE_INVITE_ERROR = 9,
	PARTY_JOIN_REJECT_TYPE_INVITE_IMPOSSIBLE = 10,
	PARTY_JOIN_REJECT_TYPE_BLOCK_BY_ME = 11,
	PARTY_JOIN_REJECT_TYPE_COMPETITION_QUEST = 12,
	PARTY_JOIN_REJECT_TYPE_BATTLEFIELD = 13,
	PARTY_JOIN_REJECT_TYPE_JOIN_ELSE = 14,
	PARTY_JOIN_REJECT_TYPE_LOGOUT  = 15,
	PARTY_JOIN_REJECT_TYPE_PARTYBOARD = 16,
	PARTY_JOIN_REJECT_TYPE_RESTORE_PARTY_ENV_SETTING = 17,
	PARTY_JOIN_REJECT_TYPE_RESTORE_PARTY_JOIN_ELSE = 18,
	PARTY_JOIN_REJECT_TYPE_RESTORE_PARTY_CUTSCENE = 19,
	PARTY_JOIN_REJECT_TYPE_SCENE_REPLAY = 20,
	PARTY_JOIN_REJECT_TYPE_RVR     = 21,
	PARTY_JOIN_REJECT_TYPE_AFK     = 22,
	PARTY_JOIN_REJECT_TYPE_MAX     = 23
};


// Enum EFGame.EFConst.PartyLeaveType
enum class EPartyLeaveType : uint8_t
{
	PARTY_LEAVE_TYPE_SELF_LEAVE    = 0,
	PARTY_LEAVE_TYPE_KICKED        = 1,
	PARTY_LEAVE_TYPE_KICKED_TIMEOUT = 2,
	PARTY_LEAVE_TYPE_DESTROYED     = 3,
	PARTY_LEAVE_TYPE_SYSTEM        = 4,
	PARTY_LEAVE_TYPE_SYSTEM_MATCH  = 5,
	PARTY_LEAVE_TYPE_SYSTEM_ERROR  = 6,
	PARTY_LEAVE_TYPE_TRAINING      = 7,
	PARTY_LEAVE_TYPE_PARTY_ROOM    = 8,
	PARTY_LEAVE_TYPE_MAX           = 9
};


// Enum EFGame.EFConst.PartyLootType
enum class EPartyLootType : uint8_t
{
	PARTY_LOOT_TYPE_FREE           = 0,
	PARTY_LOOT_TYPE_ROUND_ROBIN    = 1,
	PARTY_LOOT_TYPE_LEADER         = 2,
	PARTY_LOOT_TYPE_RANDOM         = 3,
	PARTY_LOOT_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.PartyMemberAuth
enum class EPartyMemberAuth : uint8_t
{
	PARTY_MEMBER_AUTH_ADMIN        = 0,
	PARTY_MEMBER_AUTH_LEADER       = 1,
	PARTY_MEMBER_AUTH_MAX          = 2
};


// Enum EFGame.EFConst.PartyMemberState
enum class EPartyMemberState : uint8_t
{
	PARTY_MEMBER_STATE_NORMAL      = 0,
	PARTY_MEMBER_STATE_DISCONNECTED = 1,
	PARTY_MEMBER_STATE_MAX         = 2
};


// Enum EFGame.EFConst.PartyManageOpType
enum class EPartyManageOpType : uint8_t
{
	PARTY_MANAGE_OP_TYPE_DISBAND   = 0,
	PARTY_MANAGE_OP_TYPE_UPGRADE   = 1,
	PARTY_MANAGE_OP_TYPE_KICK      = 2,
	PARTY_MANAGE_OP_TYPE_CHANGE_LEADER = 3,
	PARTY_MANAGE_OP_TYPE_CHANGE_LOOT_TYPE = 4,
	PARTY_MANAGE_OP_TYPE_MAX       = 5
};


// Enum EFGame.EFConst.PartyBidType
enum class EPartyBidType : uint8_t
{
	PARTY_BID_TYPE_NONE            = 0,
	PARTY_BID_TYPE_GIVE_UP         = 1,
	PARTY_BID_TYPE_FARE            = 2,
	PARTY_BID_TYPE_NORMAL          = 3,
	PARTY_BID_TYPE_NEED            = 4,
	PARTY_BID_TYPE_MAX             = 5
};


// Enum EFGame.EFConst.PartyAuctionFinishType
enum class EPartyAuctionFinishType : uint8_t
{
	PARTY_AUCTION_FINISH_TYPE_NORMAL = 0,
	PARTY_AUCTION_FINISH_TYPE_ALL_GAVE_UP = 1,
	PARTY_AUCTION_FINISH_TYPE_TIE  = 2,
	PARTY_AUCTION_FINISH_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.PartyVoteType
enum class EPartyVoteType : uint8_t
{
	PARTY_VOTE_TYPE_KICK           = 0,
	PARTY_VOTE_TYPE_SECRET_DUNGEON_START = 1,
	PARTY_VOTE_TYPE_SECRET_DUNGEON_NEXT_ROOM = 2,
	PARTY_VOTE_TYPE_RAID_START     = 3,
	PARTY_VOTE_TYPE_DUNGEON_ENTER  = 4,
	PARTY_VOTE_TYPE_DUNGEON_RESTART = 5,
	PARTY_VOTE_TYPE_REVERSE_RUIN   = 6,
	PARTY_VOTE_TYPE_EDEN_GATE_LEAVE = 7,
	PARTY_VOTE_TYPE_EDEN_GATE_LEAVE_WITH_REWARD = 8,
	PARTY_VOTE_TYPE_ZONE_PHASE_RETRY = 9,
	PARTY_VOTE_TYPE_ZONE_PHASE_RESUME = 10,
	PARTY_VOTE_TYPE_MAX            = 11
};


// Enum EFGame.EFConst.PartyVoteFinishType
enum class EPartyVoteFinishType : uint8_t
{
	PARTY_VOTE_FINISH_TYPE_APPROVED = 0,
	PARTY_VOTE_FINISH_TYPE_DISAPPROVED = 1,
	PARTY_VOTE_FINISH_TYPE_CANCEL_BY_AUCTION = 2,
	PARTY_VOTE_FINISH_TYPE_CANCEL_BY_MEMBER_CHANGE = 3,
	PARTY_VOTE_FINISH_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.PatrolEventType
enum class EPatrolEventType : uint8_t
{
	PATROL_EVENT_TYPE_NONE         = 0,
	PATROL_EVENT_TYPE_START_CONVOY = 1,
	PATROL_EVENT_TYPE_ARRIVED_CONVOY = 2,
	PATROL_EVENT_TYPE_SPAWN_NPC    = 3,
	PATROL_EVENT_TYPE_DESPAWN_NPC  = 4,
	PATROL_EVENT_TYPE_AI_EVENT     = 5,
	PATROL_EVENT_TYPE_CHANGE_MOVEMOOD = 6,
	PATROL_EVENT_TYPE_ROTATE       = 7,
	PATROL_EVENT_TYPE_MAX          = 8
};


// Enum EFGame.EFConst.PermanentAttr
enum class EPermanentAttr : uint8_t
{
	PERMANENT_ATTR_NONE            = 0,
	PERMANENT_ATTR_STAT_STR        = 1,
	PERMANENT_ATTR_STAT_AGI        = 2,
	PERMANENT_ATTR_STAT_INT        = 3,
	PERMANENT_ATTR_STAT_CON        = 4,
	PERMANENT_ATTR_STAT_CRITICALHIT = 5,
	PERMANENT_ATTR_STAT_SPECIALTY  = 6,
	PERMANENT_ATTR_STAT_OPPRESSION = 7,
	PERMANENT_ATTR_STAT_RAPIDITY   = 8,
	PERMANENT_ATTR_STAT_ENDURANCE  = 9,
	PERMANENT_ATTR_STAT_MASTERY    = 10,
	PERMANENT_ATTR_TENDENCY_INTELLECT = 11,
	PERMANENT_ATTR_TENDENCY_COURAGE = 12,
	PERMANENT_ATTR_TENDENCY_CHAR   = 13,
	PERMANENT_ATTR_TENDENCY_KINDNESS = 14,
	PERMANENT_ATTR_COMBAT_SKILL_POINT = 15,
	PERMANENT_ATTR_MAX             = 16
};


// Enum EFGame.EFConst.ProfessionType
enum class EProfessionType : uint8_t
{
	PROFESSION_TYPE_NA             = 0,
	PROFESSION_TYPE_HERBALISM      = 1,
	PROFESSION_TYPE_LUMBERING      = 2,
	PROFESSION_TYPE_MINING         = 3,
	PROFESSION_TYPE_HUNTING        = 4,
	PROFESSION_TYPE_FISHING        = 5,
	PROFESSION_TYPE_ARCHAEOLOGY    = 6,
	PROFESSION_TYPE_ASTROLOGY      = 7,
	PROFESSION_TYPE_SPEAKING       = 8,
	PROFESSION_TYPE_MAX            = 9
};


// Enum EFGame.EFConst.BlockSkillType
enum class EBlockSkillType : uint8_t
{
	BLOCK_SKILL_TYPE_SUCCESS       = 0,
	BLOCK_SKILL_TYPE_FAIL          = 1,
	BLOCK_SKILL_TYPE_INPROGRESS    = 2,
	BLOCK_SKILL_TYPE_START         = 3,
	BLOCK_SKILL_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.PickaxeGrade
enum class EPickaxeGrade : uint8_t
{
	PICKAXE_GRADE_NORMAL           = 0,
	PICKAXE_GRADE_RARE             = 1,
	PICKAXE_GRADE_SPECIAL          = 2,
	PICKAXE_GRADE_MAX              = 3
};


// Enum EFGame.EFConst.PickupDropBoxOrigin
enum class EPickupDropBoxOrigin : uint8_t
{
	PICKUP_DROPBOX_ORIGIN_NORMAL   = 0,
	PICKUP_DROPBOX_ORIGIN_PET      = 1,
	PICKUP_DROPBOX_ORIGIN_MAX      = 2
};


// Enum EFGame.EFConst.PortalType
enum class EPortalType : uint8_t
{
	PORTAL_TYPE_IMMEDIATE          = 0,
	PORTAL_TYPE_YES_NO             = 1,
	PORTAL_TYPE_GROUP_YES_NO       = 2,
	PORTAL_TYPE_GROUP_ALL_YES_NO   = 3,
	PORTAL_TYPE_ENTRANCE_UI        = 4,
	PORTAL_TYPE_MAX                = 5
};


// Enum EFGame.EFConst.PCDatabaseResetType
enum class EPCDatabaseResetType : uint8_t
{
	PC_DATABASE_RESET_TYPE_ACHIEVEMENT = 0,
	PC_DATABASE_RESET_TYPE_CARD    = 1,
	PC_DATABASE_RESET_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.PendingCommandType
enum class EPendingCommandType : uint8_t
{
	PENDING_COMMAND_TYPE_ADD_EXP   = 0,
	PENDING_COMMAND_TYPE_ADD_MONEY = 1,
	PENDING_COMMAND_TYPE_REMOVE_MONEY = 2,
	PENDING_COMMAND_TYPE_ADD_LIFE_EXP = 3,
	PENDING_COMMAND_TYPE_FINISH_ACHIEVEMENT = 4,
	PENDING_COMMAND_TYPE_HANDLE_FRIENDSHIP_TRUST = 5,
	PENDING_COMMAND_TYPE_ADD_ITEM  = 6,
	PENDING_COMMAND_TYPE_ADD_PERMANENT_ATTR = 7,
	PENDING_COMMAND_TYPE_ADD_EXPEDITION_EXP = 8,
	PENDING_COMMAND_TYPE_ACQUIRE_ISLAND_HEART = 9,
	PENDING_COMMAND_TYPE_ADD_RAID_REWARD_COUNT = 10,
	PENDING_COMMAND_TYPE_ADD_EDEN_REWARD_COUNT = 11,
	PENDING_COMMAND_TYPE_ADD_CARD  = 12,
	PENDING_COMMAND_TYPE_INIT_RAID_LICENSE_SEASON = 13,
	PENDING_COMMAND_TYPE_COMPLETE_QUEST = 14,
	PENDING_COMMAND_TYPE_MAX       = 15
};


// Enum EFGame.EFConst.PrivateActionSyncType
enum class EPrivateActionSyncType : uint8_t
{
	PRIVATE_ACTION_SYNC_TYPE_NONE  = 0,
	PRIVATE_ACTION_SYNC_TYPE_LIFE_HUNTING_TRAP_REMOVE = 1,
	PRIVATE_ACTION_SYNC_TYPE_LIFE_HUNTING_TRAP_OPEN = 2,
	PRIVATE_ACTION_SYNC_TYPE_LIFE_FISH_POT_REMOVE = 3,
	PRIVATE_ACTION_SYNC_TYPE_LIFE_FISH_POT_OPEN = 4,
	PRIVATE_ACTION_SYNC_TYPE_VOYAGE_EXPLORATION_REMOVE = 5,
	PRIVATE_ACTION_SYNC_TYPE_VOYAGE_EXPLORATION_OPEN = 6,
	PRIVATE_ACTION_SYNC_TYPE_SQUARE_HOLE_USE = 7,
	PRIVATE_ACTION_SYNC_TYPE_COLLECTING_PROP_TOUCH = 8,
	PRIVATE_ACTION_SYNC_TYPE_SQUARE_HOLE_ADD = 9,
	PRIVATE_ACTION_SYNC_TYPE_RETURN_TO_BASE = 10,
	PRIVATE_ACTION_SYNC_TYPE_VOYAGE_TAKE_OFF = 11,
	PRIVATE_ACTION_SYNC_TYPE_STRONGHOLD_WARP_USE = 12,
	PRIVATE_ACTION_SYNC_TYPE_MAX   = 13
};


// Enum EFGame.EFConst.PrivateSummonPropType
enum class EPrivateSummonPropType : uint8_t
{
	PRIVATE_SUMMON_PROP_TYPE_NONE  = 0,
	PRIVATE_SUMMON_PROP_TYPE_INVISIBLE = 1,
	PRIVATE_SUMMON_PROP_TYPE_VISIBLE = 2,
	PRIVATE_SUMMON_PROP_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.PaidCashType
enum class EPaidCashType : uint8_t
{
	PAID_CASH_TYPE_NONE            = 0,
	PAID_CASH_TYPE_PAID            = 1,
	PAID_CASH_TYPE_FREE            = 2,
	PAID_CASH_TYPE_BOUND           = 3,
	PAID_CASH_TYPE_MILEAGE         = 4,
	PAID_CASH_TYPE_LUCKY_TOKEN     = 5,
	PAID_CASH_TYPE_REAL_MONEY      = 6,
	PAID_CASH_TYPE_MAX             = 7
};


// Enum EFGame.EFConst.PaidLimitResetPeriod
enum class EPaidLimitResetPeriod : uint8_t
{
	PAID_LIMIT_RESET_PERIOD_NONE   = 0,
	PAID_LIMIT_RESET_PERIOD_DAILY  = 1,
	PAID_LIMIT_RESET_PERIOD_WEEKLY = 2,
	PAID_LIMIT_RESET_PERIOD_MONTHLY = 3,
	PAID_LIMIT_RESET_PERIOD_YEARLY = 4,
	PAID_LIMIT_RESET_PERIOD_TODAY  = 5,
	PAID_LIMIT_RESET_PERIOD_MAX    = 6
};


// Enum EFGame.EFConst.PaidItemType
enum class EPaidItemType : uint8_t
{
	PAID_ITEM_TYPE_NONE            = 0,
	PAID_ITEM_TYPE_POINT_ITEM      = 1,
	PAID_ITEM_TYPE_GAME_ITEM       = 2,
	PAID_ITEM_TYPE_SERVICE         = 3,
	PAID_ITEM_TYPE_PC_NAME_CHANGE  = 4,
	PAID_ITEM_TYPE_PC_LOOK_CHANGE  = 5,
	PAID_ITEM_TYPE_PC_JUMPING_MODE = 6,
	PAID_ITEM_TYPE_PC_JUMPING_MODE_FAST = 7,
	PAID_ITEM_TYPE_PC_SLOT_EXPANSION = 8,
	PAID_ITEM_TYPE_GUILD_NAME_CHANGE = 9,
	PAID_ITEM_TYPE_MAX             = 10
};


// Enum EFGame.EFConst.PaidPurchaseSource
enum class EPaidPurchaseSource : uint8_t
{
	PAID_PURCHASE_SOURCE_NORMAL    = 0,
	PAID_PURCHASE_SOURCE_GIFT      = 1,
	PAID_PURCHASE_SOURCE_COUPON    = 2,
	PAID_PURCHASE_SOURCE_EVENT     = 3,
	PAID_PURCHASE_SOURCE_ADMIN     = 4,
	PAID_PURCHASE_SOURCE_MAX       = 5
};


// Enum EFGame.EFConst.PaidFeatureType
enum class EPaidFeatureType : uint8_t
{
	PAID_FEATURE_TYPE_NONE         = 0,
	PAID_FEATURE_TYPE_SQUARE_HOLE_DISCOUNT = 1,
	PAID_FEATURE_TYPE_VOYAGE_LINER_DISCOUNT = 2,
	PAID_FEATURE_TYPE_VOYAGE_SHIP_SPEED_INCREMENT = 3,
	PAID_FEATURE_TYPE_BM_WARP_POSITION_SYSTEM = 4,
	PAID_FEATURE_TYPE_REDUCE_COOLDOWN_TOWN_PORTAL = 5,
	PAID_FEATURE_TYPE_ADD_DAILY_FRIENDSHIP_PLAY_MUSIC = 6,
	PAID_FEATURE_TYPE_ADD_DAILY_FRIENDSHIP_SOCIAL_ACTION = 7,
	PAID_FEATURE_TYPE_PREMIUM_ACCOUNT_DAILY_REWARD = 8,
	PAID_FEATURE_TYPE_BM_WARP_POSITION_SYSTEM_PC_ROOM = 9,
	PAID_FEATURE_TYPE_PREMIUM_ACCOUNT_DAILY_REWARD_ONCE = 10,
	PAID_FEATURE_TYPE_COMBAT_EXP_INCREMENT = 11,
	PAID_FEATURE_TYPE_LIFE_EXP_INCREMENT = 12,
	PAID_FEATURE_TYPE_EXPEDITION_EXP_INCREMENT = 13,
	PAID_FEATURE_TYPE_LIFE_ENERGY_RECOVERY_INCREMENT = 14,
	PAID_FEATURE_TYPE_ADD_TOWN_RESEARCH_SLOT = 15,
	PAID_FEATURE_TYPE_ADD_TOWN_CRAFT_SLOT = 16,
	PAID_FEATURE_TYPE_ADD_TOWN_DISPATCH_FREE_SLOT = 17,
	PAID_FEATURE_TYPE_ADD_TOWN_EFFECT_NPC_SLOT = 18,
	PAID_FEATURE_TYPE_ADD_TOWN_EFFECT_TOWNPROP_SLOT = 19,
	PAID_FEATURE_TYPE_TOWN_ACTIVITY_POINT_RECOVERY_BOOST = 20,
	PAID_FEATURE_TYPE_TOWN_RESEARCH_TIME_DECREMENT = 21,
	PAID_FEATURE_TYPE_TOWN_CRAFT_TIME_DECREMENT = 22,
	PAID_FEATURE_TYPE_TOWN_DISPATCH_TIME_DECREMENT = 23,
	PAID_FEATURE_TYPE_TOWN_TRAINING_USE_BM = 24,
	PAID_FEATURE_TYPE_TOWN_LIFE_REWARD_BOOST = 25,
	PAID_FEATURE_TYPE_ADD_HONOR_TITLE = 26,
	PAID_FEATURE_TYPE_ADD_TOWN_PET_WORKSHOP_SLOT = 27,
	PAID_FEATURE_TYPE_PET_FUNCTION_ACTIVATE = 28,
	PAID_FEATURE_TYPE_MAX          = 29
};


// Enum EFGame.EFConst.PaidTokenType
enum class EPaidTokenType : uint8_t
{
	PAID_TOKEN_TYPE_NONE           = 0,
	PAID_TOKEN_TYPE_PC_NAME_CHANGE = 1,
	PAID_TOKEN_TYPE_PC_LOOK_CHANGE = 2,
	PAID_TOKEN_TYPE_PC_JUMPING_MODE = 3,
	PAID_TOKEN_TYPE_PC_JUMPING_MODE_FAST = 4,
	PAID_TOKEN_TYPE_PC_SLOT_EXPANSION = 5,
	PAID_TOKEN_TYPE_GUILD_NAME_CHANGE = 6,
	PAID_TOKEN_TYPE_MAX            = 7
};


// Enum EFGame.EFConst.PaidActionType
enum class EPaidActionType : uint8_t
{
	PAID_ACTION_TYPE_NONE          = 0,
	PAID_ACTION_TYPE_CHARACTER_SLOT_EXPAND = 1,
	PAID_ACTION_TYPE_PC_STASH_EXPAND = 2,
	PAID_ACTION_TYPE_ACCOUNT_STASH_EXPAND = 3,
	PAID_ACTION_TYPE_SKILL_PRESET_RESET = 4,
	PAID_ACTION_TYPE_LIFE_SKILL_RESET = 5,
	PAID_ACTION_TYPE_EQUIP_PRESET_EXPAND = 6,
	PAID_ACTION_TYPE_SKILL_PRESET_EXPAND = 7,
	PAID_ACTION_TYPE_ITEM_ASSEMBLY_FINISH = 8,
	PAID_ACTION_TYPE_ITEM_ASSEMBLY_REMOTE_RECEIVE = 9,
	PAID_ACTION_TYPE_ITEM_EVOLUTION_FINISH = 10,
	PAID_ACTION_TYPE_ITEM_EVOLUTION_REMOTE_RECEIVE = 11,
	PAID_ACTION_TYPE_ITEM_POLISH_FINISH = 12,
	PAID_ACTION_TYPE_ITEM_POLISH_REMOTE_RECEIVE = 13,
	PAID_ACTION_TYPE_DAILY_QUEST_FINISH = 14,
	PAID_ACTION_TYPE_WEEKLY_QUEST_FINISH = 15,
	PAID_ACTION_TYPE_TOWN_PRODUCT_FINISH = 16,
	PAID_ACTION_TYPE_SHIP_AVATAR_OCEAN_TOLERANCE_RESET = 17,
	PAID_ACTION_TYPE_RESERVE18___  = 18,
	PAID_ACTION_TYPE_TOWN_MISSION_CANDIDATE_REFRESH = 19,
	PAID_ACTION_TYPE_RESERVE20___  = 20,
	PAID_ACTION_TYPE_RESERVE21___  = 21,
	PAID_ACTION_TYPE_TOWN_MISSION_FINISH = 22,
	PAID_ACTION_TYPE_RESERVE23___  = 23,
	PAID_ACTION_TYPE_RESERVE24___  = 24,
	PAID_ACTION_TYPE_REVIVE        = 25,
	PAID_ACTION_TYPE_CHAOS_DUNGEON_REWARD_RESET = 26,
	PAID_ACTION_TYPE_SHIP_REPAIR_FINISH = 27,
	PAID_ACTION_TYPE_CARD_STORAGE_EXPAND = 28,
	PAID_ACTION_TYPE_CARD_DECK_EXPAND = 29,
	PAID_ACTION_TYPE_CARD_SKILL_INHERIT = 30,
	PAID_ACTION_TYPE_DAILY_QUEST_RESET = 31,
	PAID_ACTION_TYPE_WEEKLY_QUEST_RESET = 32,
	PAID_ACTION_TYPE_DAILY_QUEST_EXPAND = 33,
	PAID_ACTION_TYPE_WEEKLY_QUEST_EXPAND = 34,
	PAID_ACTION_TYPE_WEEKLY_QUEST_LIST_REFRESH = 35,
	PAID_ACTION_TYPE_INSURANCE_BONUS_EXTEND = 36,
	PAID_ACTION_TYPE_RESERVE37___  = 37,
	PAID_ACTION_TYPE_TOWN_PRODUCT_ITEM_TIME_REDUCE = 38,
	PAID_ACTION_TYPE_RESERVE39___  = 39,
	PAID_ACTION_TYPE_RESERVE40___  = 40,
	PAID_ACTION_TYPE_TOWN_RESEARCH_TIME_REDUCE = 41,
	PAID_ACTION_TYPE_TOWN_BUY_NPC_DRESS = 42,
	PAID_ACTION_TYPE_TOWN_MISSION_TIME_REDUCE = 43,
	PAID_ACTION_TYPE_RESERVE44___  = 44,
	PAID_ACTION_TYPE_PET_EFFECT    = 45,
	PAID_ACTION_TYPE_PET_UTILITY_SKILL = 46,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH = 47,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH01 = 48,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH02 = 49,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH03 = 50,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH04 = 51,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH05 = 52,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH06 = 53,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH07 = 54,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH08 = 55,
	PAID_ACTION_TYPE_RAID_LICENSE_FINISH09 = 56,
	PAID_ACTION_TYPE_ITEM_ENHANCE_RESET = 57,
	PAID_ACTION_TYPE_PET_EFFECT_CHANGE = 58,
	PAID_ACTION_TYPE_STAGE_PER_REWARD_ADD_REWARD = 59,
	PAID_ACTION_TYPE_WARP_COOLDOWN = 60,
	PAID_ACTION_TYPE_WARP_SAVE_LOCATION_COOLDOWN = 61,
	PAID_ACTION_TYPE_WARP_POINT_SLOT_EXPAND = 62,
	PAID_ACTION_TYPE_WARP          = 63,
	PAID_ACTION_TYPE_TOWN_RESEARCH_FINISH = 64,
	PAID_ACTION_TYPE_TOWN_CHANGE_EFFECT_COOLDOWN = 65,
	PAID_ACTION_TYPE_TRIPOD_STASH_EXPAND = 66,
	PAID_ACTION_TYPE_ANCIENT_ORB_RESEARCH_FINISH = 67,
	PAID_ACTION_TYPE_ANCIENT_ORB_RESEARCH_BREAK_OPEN = 68,
	PAID_ACTION_TYPE_ITEM_TINT_MATERIAL_BUY = 69,
	PAID_ACTION_TYPE_ITEM_TINT_RESTORE = 70,
	PAID_ACTION_TYPE_AVATAR_EQUIP_PRESET_EXPAND = 71,
	PAID_ACTION_TYPE_ARK_PASS_PAID_BUY = 72,
	PAID_ACTION_TYPE_ARK_PASS_SPECIAL_BUY = 73,
	PAID_ACTION_TYPE_ARK_PASS_SPECIAL_UPGRAGE = 74,
	PAID_ACTION_TYPE_ARK_PASS_EXP_GET = 75,
	PAID_ACTION_TYPE_GEM_EQUIP_PRESET_EXPAND = 76,
	PAID_ACTION_TYPE_PET_SKILL_CHANGE = 77,
	PAID_ACTION_TYPE_PET_SKILL     = 78,
	PAID_ACTION_TYPE_STAGE_PER_REWARD_GOLD = 79,
	PAID_ACTION_TYPE_STAGE_PER_REWARD_TRADE_GOLD = 80,
	PAID_ACTION_TYPE_MAX           = 81
};


// Enum EFGame.EFConst.PaidActionLimitType
enum class EPaidActionLimitType : uint8_t
{
	PAID_ACTION_LIMIT_TYPE_NONE    = 0,
	PAID_ACTION_LIMIT_TYPE_ACCOUNT = 1,
	PAID_ACTION_LIMIT_TYPE_EXPEDITION = 2,
	PAID_ACTION_LIMIT_TYPE_CHARACTER = 3,
	PAID_ACTION_LIMIT_TYPE_LOCAL   = 4,
	PAID_ACTION_LIMIT_TYPE_MAX     = 5
};


// Enum EFGame.EFConst.PaidBuffApplyType
enum class EPaidBuffApplyType : uint8_t
{
	PAID_BUFF_APPLY_TYPE_NONE      = 0,
	PAID_BUFF_APPLY_TYPE_EXPEDITION = 1,
	PAID_BUFF_APPLY_TYPE_CHARACTER = 2,
	PAID_BUFF_APPLY_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.PaidBuffType
enum class EPaidBuffType : uint8_t
{
	PAID_BUFF_TYPE_NONE            = 0,
	PAID_BUFF_TYPE_INSURANCE_BONUS = 1,
	PAID_BUFF_TYPE_PET_EFFECT      = 2,
	PAID_BUFF_TYPE_UTILITY_SKILL   = 3,
	PAID_BUFF_TYPE_PET_SKILL       = 4,
	PAID_BUFF_TYPE_MAX             = 5
};


// Enum EFGame.EFConst.PaidCostCategory
enum class EPaidCostCategory : uint8_t
{
	PAID_COST_CATEGORY_NONE        = 0,
	PAID_COST_CATEGORY_CASH        = 1,
	PAID_COST_CATEGORY_MONEY       = 2,
	PAID_COST_CATEGORY_ITEM_ID     = 3,
	PAID_COST_CATEGORY_ITEM_CATEGORY = 4,
	PAID_COST_CATEGORY_MAX         = 5
};


// Enum EFGame.EFConst.PaidCostLevelType
enum class EPaidCostLevelType : uint8_t
{
	PAID_COST_LEVEL_TYPE_COUNT     = 0,
	PAID_COST_LEVEL_TYPE_PC_LEVEL  = 1,
	PAID_COST_LEVEL_TYPE_REDUCE_TIME = 2,
	PAID_COST_LEVEL_TYPE_TARGET_BUY = 3,
	PAID_COST_LEVEL_TYPE_EXTEND_DURATION = 4,
	PAID_COST_LEVEL_TYPE_TARGET_REF = 5,
	PAID_COST_LEVEL_TYPE_IMMEDIATELY_COMPLETE = 6,
	PAID_COST_LEVEL_TYPE_TARGET_GIVE = 7,
	PAID_COST_LEVEL_TYPE_MAX       = 8
};


// Enum EFGame.EFConst.PaidSourceType
enum class EPaidSourceType : uint8_t
{
	PAID_SOURCE_TYPE_NONE          = 0,
	PAID_SOURCE_TYPE_BILLING       = 1,
	PAID_SOURCE_TYPE_PCROOM        = 2,
	PAID_SOURCE_TYPE_EVENT         = 3,
	PAID_SOURCE_TYPE_GAME          = 4,
	PAID_SOURCE_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.PaidBannerType
enum class EPaidBannerType : uint8_t
{
	PAID_BANNER_TYPE_NONE          = 0,
	PAID_BANNER_TYPE_TOP           = 1,
	PAID_BANNER_TYPE_BOTTOM        = 2,
	PAID_BANNER_TYPE_ALL           = 3,
	PAID_BANNER_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.PaidBannerActionType
enum class EPaidBannerActionType : uint8_t
{
	PAID_BANNER_ACTION_TYPE_NONE   = 0,
	PAID_BANNER_ACTION_TYPE_PACKAGE_ID = 1,
	PAID_BANNER_ACTION_TYPE_CATEGORY = 2,
	PAID_BANNER_ACTION_TYPE_IGNORE = 3,
	PAID_BANNER_ACTION_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.PCNameStatus
enum class EPCNameStatus : uint8_t
{
	PC_NAME_STATUS_NORMAL          = 0,
	PC_NAME_STATUS_JUST_BECAUSE    = 1,
	PC_NAME_STATUS_SLANG_USED      = 2,
	PC_NAME_STATUS_TOKEN_USED      = 3,
	PC_NAME_STATUS_INITIALIZED     = 4,
	PC_NAME_STATUS_MAX             = 5
};


// Enum EFGame.EFConst.PCMergeStatus
enum class EPCMergeStatus : uint8_t
{
	PC_MERGE_STATUS_NONE           = 0,
	PC_MERGE_STATUS_MERGED         = 1,
	PC_MERGE_STATUS_EXCESS         = 2,
	PC_MERGE_STATUS_MAX            = 3
};


// Enum EFGame.EFConst.PropertyOrigin
enum class EPropertyOrigin : uint8_t
{
	PROPERTY_ORIGIN_NA             = 0,
	PROPERTY_ORIGIN_ADMIN          = 1,
	PROPERTY_ORIGIN_PENDING        = 2,
	PROPERTY_ORIGIN_NPC            = 3,
	PROPERTY_ORIGIN_PROP           = 4,
	PROPERTY_ORIGIN_SHOP___        = 5,
	PROPERTY_ORIGIN_SHOP_REDEEM    = 6,
	PROPERTY_ORIGIN_TRADE          = 7,
	PROPERTY_ORIGIN_GAME_ACTION___ = 8,
	PROPERTY_ORIGIN_TRIGGER        = 9,
	PROPERTY_ORIGIN_ITEM_MOVE      = 10,
	PROPERTY_ORIGIN_ITEM_USE       = 11,
	PROPERTY_ORIGIN_ITEM_SPLIT     = 12,
	PROPERTY_ORIGIN_ITEM_REPAIR    = 13,
	PROPERTY_ORIGIN_ITEM_DESTROY   = 14,
	PROPERTY_ORIGIN_ITEM_ASSEMBLY  = 15,
	PROPERTY_ORIGIN_ITEM_DISASSEMBLY = 16,
	PROPERTY_ORIGIN_ITEM_EXCHANGE  = 17,
	PROPERTY_ORIGIN_ITEM_POLISH___ = 18,
	PROPERTY_ORIGIN_ABILITY_STONE_CARVE = 19,
	PROPERTY_ORIGIN_ADVENTURE_MATTER = 20,
	PROPERTY_ORIGIN_ADV_BOOK_REWARD = 21,
	PROPERTY_ORIGIN_AUTO_RECHARGE  = 22,
	PROPERTY_ORIGIN_AVATAR_REFORM  = 23,
	PROPERTY_ORIGIN_CARD_BATTLE_REWARD = 24,
	PROPERTY_ORIGIN_CARD_DECK_EXPAND = 25,
	PROPERTY_ORIGIN_CARD_ENHANCE   = 26,
	PROPERTY_ORIGIN_CAST_SKILL     = 27,
	PROPERTY_ORIGIN_CHAOS_GATE_REWARD = 28,
	PROPERTY_ORIGIN_CLASS_PREVIEW  = 29,
	PROPERTY_ORIGIN_DICE_VICTORY_CREST_PLATE = 30,
	PROPERTY_ORIGIN_EXPEDITION_LEVEL_REWARD = 31,
	PROPERTY_ORIGIN_FLOATING_MATTER = 32,
	PROPERTY_ORIGIN_FLOATING_MATTER_BONUS = 33,
	PROPERTY_ORIGIN_GUILD_CREATION = 34,
	PROPERTY_ORIGIN_GUILD_STASH    = 35,
	PROPERTY_ORIGIN_GUILD_STASH_DEPOSIT = 36,
	PROPERTY_ORIGIN_GUILD_STASH_WITHDRAW = 37,
	PROPERTY_ORIGIN_LIFE_CONSUME   = 38,
	PROPERTY_ORIGIN_LIFE_REWARD    = 39,
	PROPERTY_ORIGIN_LIFE_TOOL_DESTROY = 40,
	PROPERTY_ORIGIN_MAIL_SEND      = 41,
	PROPERTY_ORIGIN_MAIL_UNPACK    = 42,
	PROPERTY_ORIGIN_MAIL_PAYMENT   = 43,
	PROPERTY_ORIGIN_MARKET_ADD     = 44,
	PROPERTY_ORIGIN_MARKET_ROLLBACK = 45,
	PROPERTY_ORIGIN_MARKET_BUY     = 46,
	PROPERTY_ORIGIN_CUMULATIVE_POINT_REWARD = 47,
	PROPERTY_ORIGIN_MOD_ENTRY      = 48,
	PROPERTY_ORIGIN_MOD_PROCESS    = 49,
	PROPERTY_ORIGIN_MOD_REWARD     = 50,
	PROPERTY_ORIGIN_NATIVE_VILLAGE = 51,
	PROPERTY_ORIGIN_PAID_SHOP      = 52,
	PROPERTY_ORIGIN_PROP_CONTENTS  = 53,
	PROPERTY_ORIGIN_PROP_COLLECTING_REWARD = 54,
	PROPERTY_ORIGIN_QUEST_ELEMENT  = 55,
	PROPERTY_ORIGIN_QUEST_REWARD   = 56,
	PROPERTY_ORIGIN_ALT_QUEST_REWARD = 57,
	PROPERTY_ORIGIN_RAID_REWARD    = 58,
	PROPERTY_ORIGIN_RANDOM_BOX     = 59,
	PROPERTY_ORIGIN_REVIVE_COST    = 60,
	PROPERTY_ORIGIN_CREW_ALTERNATIVE_REWARD = 61,
	PROPERTY_ORIGIN_CREW_DISPOSAL_REWARD = 62,
	PROPERTY_ORIGIN_SHIP_ALTERNATIVE_REWARD = 63,
	PROPERTY_ORIGIN_SHIP_RESUPPLY  = 64,
	PROPERTY_ORIGIN_SHIP_LEVEL_UP  = 65,
	PROPERTY_ORIGIN_SLAVE_LIBERATE = 66,
	PROPERTY_ORIGIN_SQUARE_HOLE_PAYMENT = 67,
	PROPERTY_ORIGIN_VOYAGE_CONSUME = 68,
	PROPERTY_ORIGIN_VOYAGE_REWARD  = 69,
	PROPERTY_ORIGIN_VOYAGE_REWARD_BONUS = 70,
	PROPERTY_ORIGIN_VOYAGE_RESTORE = 71,
	PROPERTY_ORIGIN_VOYAGE_SKILL   = 72,
	PROPERTY_ORIGIN_VOYAGE_SPREADNET = 73,
	PROPERTY_ORIGIN_ZONE_ENTRY     = 74,
	PROPERTY_ORIGIN_ACHIEVEMENT_REWARD = 75,
	PROPERTY_ORIGIN_NPC_FRIENDSHIP_ACTION = 76,
	PROPERTY_ORIGIN_NPC_FRIENDSHIP_REWARD = 77,
	PROPERTY_ORIGIN_VOYAGE_LINER   = 78,
	PROPERTY_ORIGIN_PVP_COLOSSEUM  = 79,
	PROPERTY_ORIGIN_PVP_LEVEL_REWARD = 80,
	PROPERTY_ORIGIN_TROPHY_AUCTION = 81,
	PROPERTY_ORIGIN_TOWN_TRAINING_START = 82,
	PROPERTY_ORIGIN_TOWN_TRAINING_COMPLETE = 83,
	PROPERTY_ORIGIN_TOWN_DISPATCH_MISSION_ITEM = 84,
	PROPERTY_ORIGIN_MOD_CUBE_REWARD = 85,
	PROPERTY_ORIGIN_MOD_BOSSRUSH_REWARD = 86,
	PROPERTY_ORIGIN_MOD_TOWER_REWARD = 87,
	PROPERTY_ORIGIN_MOD_PLATINUM_REWARD = 88,
	PROPERTY_ORIGIN_TOWN_TRAINING_EXP = 89,
	PROPERTY_ORIGIN_MOD_WAYOFTHRONE_REWARD = 90,
	PROPERTY_ORIGIN_ABILITY_ENGRAVE_ITEM = 91,
	PROPERTY_ORIGIN_TOWN_PET_GIFT  = 92,
	PROPERTY_ORIGIN_PAID_ACTION    = 93,
	PROPERTY_ORIGIN_ISLAND_HEART   = 94,
	PROPERTY_ORIGIN_TOWN_PET_WORKSHOP = 95,
	PROPERTY_ORIGIN_TOWN_SHOP_BUY___ = 96,
	PROPERTY_ORIGIN_CHAOS_DUNGEON_ENTRY = 97,
	PROPERTY_ORIGIN_CHAOS_DUNGEON_REWARD = 98,
	PROPERTY_ORIGIN_TOWN_BUILD_SHIP_COST___ = 99,
	PROPERTY_ORIGIN_TOWN_BUILDING_COST___ = 100,
	PROPERTY_ORIGIN_QUEST_POINT_REWARD = 101,
	PROPERTY_ORIGIN_TOWN_ESCROW_RETURN___ = 102,
	PROPERTY_ORIGIN_TOWN_GIVE_RESULT = 103,
	PROPERTY_ORIGIN_LIFE_REWARD_DROP = 104,
	PROPERTY_ORIGIN_TOWN_RECRUIT_CREW_COST___ = 105,
	PROPERTY_ORIGIN_TOWN_NPC_APPLICATION___ = 106,
	PROPERTY_ORIGIN_STOCK_ADD      = 107,
	PROPERTY_ORIGIN_STOCK_ROLLBACK = 108,
	PROPERTY_ORIGIN_STOCK_CANCEL   = 109,
	PROPERTY_ORIGIN_STOCK_TAKE     = 110,
	PROPERTY_ORIGIN_CARD_GROWUP    = 111,
	PROPERTY_ORIGIN_LIFE_REWARD_SKILL_BONUS = 112,
	PROPERTY_ORIGIN_SECRET_PROP_MAP_REWARD = 113,
	PROPERTY_ORIGIN_PERIOD_QUEST_FORCE_COMPLETE = 114,
	PROPERTY_ORIGIN_PC_NAME_CHANGE = 115,
	PROPERTY_ORIGIN_PC_LOOK_CHANGE = 116,
	PROPERTY_ORIGIN_BUSINESS_EVENT_ROLLBOOK = 117,
	PROPERTY_ORIGIN_BUSINESS_EVENT_HOTTIME = 118,
	PROPERTY_ORIGIN_PC_ROOM_REWARD = 119,
	PROPERTY_ORIGIN_BATTLEFIELD_DEATHMATCH_REWARD = 120,
	PROPERTY_ORIGIN_BATTLEFIELD_RANK_REWARD = 121,
	PROPERTY_ORIGIN_EXCESS_PROPERTY = 122,
	PROPERTY_ORIGIN_TOWN_OPEN_SITE_AREA___ = 123,
	PROPERTY_ORIGIN_PC_JUMPING_MODE = 124,
	PROPERTY_ORIGIN_PVP_WEEKLY_REWARD = 125,
	PROPERTY_ORIGIN_PC_SLOT_EXPAND = 126,
	PROPERTY_ORIGIN_ITEM_ENHANCE_FEED = 127,
	PROPERTY_ORIGIN_ITEM_ENHANCE_LEVEL_UP = 128,
	PROPERTY_ORIGIN_ITEM_ENHANCE_OPTION_CHANGE = 129,
	PROPERTY_ORIGIN_ITEM_ENHANCE_INHERIT = 130,
	PROPERTY_ORIGIN_GUILD_DONATION = 131,
	PROPERTY_ORIGIN_GUILD_ATTENDANCE = 132,
	PROPERTY_ORIGIN_STAGE_PER_REWARD = 133,
	PROPERTY_ORIGIN_GUILD_RESEARCH = 134,
	PROPERTY_ORIGIN_GUILD_RESEARCH_SUPPORT = 135,
	PROPERTY_ORIGIN_GUILD_SKILL_RESOURCE_BUY = 136,
	PROPERTY_ORIGIN_GUILD_SKILL_RESOURCE_CHARGE = 137,
	PROPERTY_ORIGIN_GUILD_WEEKLY_DISTRIBUTION = 138,
	PROPERTY_ORIGIN_BATTLEFIELD_FIELDBOSS_REWARD = 139,
	PROPERTY_ORIGIN_BATTLEFIELD_GRADE_POINT_REWARD = 140,
	PROPERTY_ORIGIN_BATTLEFIELD_MERCENARY_COST = 141,
	PROPERTY_ORIGIN_GUILD_DONATION_ROLLBACK = 142,
	PROPERTY_ORIGIN_REVERSE_RUIN_REWARD = 143,
	PROPERTY_ORIGIN_BATTLEFIELD_ENTRANCE_ENLIST_COST = 144,
	PROPERTY_ORIGIN_BATTLEFIELD_ENTRANCE_ENLIST_REFUND = 145,
	PROPERTY_ORIGIN_SHOP_BUY_ITEM  = 146,
	PROPERTY_ORIGIN_SHOP_BUY_MONEY = 147,
	PROPERTY_ORIGIN_SHOP_SELL_ITEM = 148,
	PROPERTY_ORIGIN_MUSIC_PLAY     = 149,
	PROPERTY_ORIGIN_VEHICLE_SUMMON = 150,
	PROPERTY_ORIGIN_NPC_WAVE       = 151,
	PROPERTY_ORIGIN_ZONE_VOLATILE  = 152,
	PROPERTY_ORIGIN_PREMIUM_ACCOUNT_REWARD = 153,
	PROPERTY_ORIGIN_GACHA          = 154,
	PROPERTY_ORIGIN_GACHA_REWARD   = 155,
	PROPERTY_ORIGIN_ITEM_SEAL      = 156,
	PROPERTY_ORIGIN_MAGIC_SCROLL_ENHANCE___ = 157,
	PROPERTY_ORIGIN_MAGIC_SCROLL_APPLY___ = 158,
	PROPERTY_ORIGIN_MAGIC_SCROLL_EXTRACT___ = 159,
	PROPERTY_ORIGIN_GUILD_OBJECTIVE_UPDATE = 160,
	PROPERTY_ORIGIN_GUILD_OBJECTIVE_REWARD = 161,
	PROPERTY_ORIGIN_RAID_REWARD_PROP = 162,
	PROPERTY_ORIGIN_PROLOGUE_SKIP  = 163,
	PROPERTY_ORIGIN_NPC_AFFECTION_TALK = 164,
	PROPERTY_ORIGIN_NPC_AFFECTION_MEMORIAL = 165,
	PROPERTY_ORIGIN_NPC_AFFECTION_LONGING = 166,
	PROPERTY_ORIGIN_ROTATION_ISLAND_REWARD = 167,
	PROPERTY_ORIGIN_TOWN_ITEM_ASSEMBLY = 168,
	PROPERTY_ORIGIN_TOWN_RESEARCH  = 169,
	PROPERTY_ORIGIN_EVENT_MISSION_CATEGORY_REWARD = 170,
	PROPERTY_ORIGIN_EVENT_MISSION_OBJECTIVE_REWARD = 171,
	PROPERTY_ORIGIN_ITEM_OPTION_CALIBRATE = 172,
	PROPERTY_ORIGIN_ITEM_OPTION_TRANSFER = 173,
	PROPERTY_ORIGIN_ITEM_OPTION_EXTRACT = 174,
	PROPERTY_ORIGIN_ITEM_SOCKET_UNLOCK = 175,
	PROPERTY_ORIGIN_ITEM_SOCKET_CHANGE = 176,
	PROPERTY_ORIGIN_ITEM_SOCKET_AMPLIFY = 177,
	PROPERTY_ORIGIN_BUSINESS_EVENT_URL_HOTTIME = 178,
	PROPERTY_ORIGIN_TOWN_DISPATCH_MISSION_REWARD = 179,
	PROPERTY_ORIGIN_TOWN_DISPATCH_MISSION_REWARD_BONUS = 180,
	PROPERTY_ORIGIN_ITEM_GRADE_UP  = 181,
	PROPERTY_ORIGIN_ITEM_GEM_INSTALL = 182,
	PROPERTY_ORIGIN_ITEM_GEM_CHANGE = 183,
	PROPERTY_ORIGIN_ITEM_GEM_MERGE = 184,
	PROPERTY_ORIGIN_LIFE_TOOL_REPAIR = 185,
	PROPERTY_ORIGIN_LIFE_TOOL_RESTORATION = 186,
	PROPERTY_ORIGIN_TOWN_ACTIVITY_POINT_RECOVERY = 187,
	PROPERTY_ORIGIN_PREMIUM_ACCOUNT_REWARD_ONCE = 188,
	PROPERTY_ORIGIN_TOWN_SHIP_REPAIR = 189,
	PROPERTY_ORIGIN_TOWN_MANA_RECOVERY = 190,
	PROPERTY_ORIGIN_NPC_ANNIVERSARY = 191,
	PROPERTY_ORIGIN_AUCTION_ADD    = 192,
	PROPERTY_ORIGIN_AUCTION_ADD_ROLLBACK = 193,
	PROPERTY_ORIGIN_AUCTION_BID    = 194,
	PROPERTY_ORIGIN_AUCTION_BID_ROLLBACK = 195,
	PROPERTY_ORIGIN_AUCTION_BUY    = 196,
	PROPERTY_ORIGIN_AUCTION_BUY_ROLLBACK = 197,
	PROPERTY_ORIGIN_ANCIENT_ORB_IDENTIFY = 198,
	PROPERTY_ORIGIN_ANCIENT_ORB_RESEARCH = 199,
	PROPERTY_ORIGIN_ITEM_TRANSMUTE = 200,
	PROPERTY_ORIGIN_TUTORIAL_MODE  = 201,
	PROPERTY_ORIGIN_TOWN_BUILDING_LEVEL_UP = 202,
	PROPERTY_ORIGIN_EXPEDITION_MISSION = 203,
	PROPERTY_ORIGIN_TOWN_NAME_CHANGE = 204,
	PROPERTY_ORIGIN_RAID_REST_REWARD_PROP = 205,
	PROPERTY_ORIGIN_TOWN_CHEF_COOK = 206,
	PROPERTY_ORIGIN_TOWN_RESEARCH_ALTERNATIVE_REWARD = 207,
	PROPERTY_ORIGIN_WELCOME_BOOST  = 208,
	PROPERTY_ORIGIN_GUILD_MARK_UPDATE = 209,
	PROPERTY_ORIGIN_BATTLEFIELD_OCCUPY_EVENT_COST = 210,
	PROPERTY_ORIGIN_BATTLEFIELD_OCCUPY_EVENT_JOIN_REWARD = 211,
	PROPERTY_ORIGIN_GUILD_GOLD_DISTRIBUTION = 212,
	PROPERTY_ORIGIN_BATTLEFIELD_ENTRANCE_ENLIST_BIDDING = 213,
	PROPERTY_ORIGIN_PC_DROP        = 214,
	PROPERTY_ORIGIN_BATTLEFIELD_ENTRANCE_ENLIST_BIDDING_REFUND = 215,
	PROPERTY_ORIGIN_ITEM_OPTION_READJUST = 216,
	PROPERTY_ORIGIN_COLOSSEUM_SEASON_REWARD = 217,
	PROPERTY_ORIGIN_AVATAR_ASSEMBLY = 218,
	PROPERTY_ORIGIN_ITEM_TINT_CHANGE = 219,
	PROPERTY_ORIGIN_ITEM_TINT_MATERIAL_BUY = 220,
	PROPERTY_ORIGIN_ITEM_TINT_RESTORE = 221,
	PROPERTY_ORIGIN_EMOTICON_BUILT_IN = 222,
	PROPERTY_ORIGIN_CARD_REFUND    = 223,
	PROPERTY_ORIGIN_TUTORIAL_MODE_COMPLETE_REWARD = 224,
	PROPERTY_ORIGIN_MAIL_ROLLBACK_TOKEN_ITEM = 225,
	PROPERTY_ORIGIN_TOWN_JUMPING_KNOWLEDGE_LEARN = 226,
	PROPERTY_ORIGIN_GROWTH_MODE    = 227,
	PROPERTY_ORIGIN_GROWTH_MODE_COMPLETE_REWARD = 228,
	PROPERTY_ORIGIN_JUMPING_STORY_REWARD = 229,
	PROPERTY_ORIGIN_BATTLEFIELD_REALM_REWARD = 230,
	PROPERTY_ORIGIN_PROLOGUE_REWARD = 231,
	PROPERTY_ORIGIN_ARK_PASS_LEVEL_REWARD = 232,
	PROPERTY_ORIGIN_ARK_PASS_EXP_BY_MISSION = 233,
	PROPERTY_ORIGIN_ARK_PASS_EXP_BY_PAID_ACTION = 234,
	PROPERTY_ORIGIN_ARK_PASS_PAID_BUY = 235,
	PROPERTY_ORIGIN_ARK_PASS_SPECIAL_BUY = 236,
	PROPERTY_ORIGIN_ARK_PASS_SPECIAL_UPGRADE = 237,
	PROPERTY_ORIGIN_GUILD_MARK_ADD = 238,
	PROPERTY_ORIGIN_GUILD_NAME_CHANGE = 239,
	PROPERTY_ORIGIN_ITEM_SET_TRANSFER = 240,
	PROPERTY_ORIGIN_PET_EXP_CHANGE = 241,
	PROPERTY_ORIGIN_ITEM_ESTHER_WEAPON_EVOLUTION = 242,
	PROPERTY_ORIGIN_ITEM_CHANGE    = 243,
	PROPERTY_ORIGIN_PET_PROMOTION  = 244,
	PROPERTY_ORIGIN_PET_POLYMORPH_UNLOCK = 245,
	PROPERTY_ORIGIN_PET_INVENTORY_EXPAND_UNLOCK = 246,
	PROPERTY_ORIGIN_ITEM_BRACELET_ENCHANT = 247,
	PROPERTY_ORIGIN_ITEM_BRACELET_UPGRADE = 248,
	PROPERTY_ORIGIN_MAX            = 249
};


// Enum EFGame.EFConst.PCRoomGrade
enum class EPCRoomGrade : uint8_t
{
	PC_ROOM_GRADE_NONE             = 0,
	PC_ROOM_GRADE_FREE             = 1,
	PC_ROOM_GRADE_PREMIUM          = 2,
	PC_ROOM_GRADE_MAX              = 3
};


// Enum EFGame.EFConst.PCRoomRewardType
enum class EPCRoomRewardType : uint8_t
{
	PC_ROOM_REWARD_TYPE_NONE       = 0,
	PC_ROOM_REWARD_TYPE_DAILY      = 1,
	PC_ROOM_REWARD_TYPE_REPETITIVE = 2,
	PC_ROOM_REWARD_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.PvpForcedActionType
enum class EPvpForcedActionType : uint8_t
{
	PVP_FORCED_ACTION_TYPE_ABNORMAL_MOVE = 0,
	PVP_FORCED_ACTION_TYPE_ABNORMAL_MOVE_IMMUNE = 1,
	PVP_FORCED_ACTION_TYPE_ABNORMAL_MAX = 2
};


// Enum EFGame.EFConst.PvPWeeklyRankType
enum class EPvPWeeklyRankType : uint8_t
{
	PVP_WEEKLY_RANK_TYPE_NONE      = 0,
	PVP_WEEKLY_RANK_TYPE_POINT     = 1,
	PVP_WEEKLY_RANK_TYPE_LEVEL     = 2,
	PVP_WEEKLY_RANK_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.PlusCheckpointZoneLevel
enum class EPlusCheckpointZoneLevel : uint8_t
{
	PLUS_CHECK_POINT_ZONE_LEVEL_NONE = 0,
	PLUS_CHECK_POINT_ZONE_LEVEL_NORMAL = 1,
	PLUS_CHECK_POINT_ZONE_LEVEL_HARD = 2,
	PLUS_CHECK_POINT_ZONE_LEVEL_HELLCHAOS = 3,
	PLUS_CHECK_POINT_ZONE_LEVEL_CHALLENGE = 4,
	PLUS_CHECK_POINT_ZONE_LEVEL_SPECIAL = 5,
	PLUS_CHECK_POINT_ZONE_LEVEL_MAX = 6
};


// Enum EFGame.EFConst.PartyRoomTargetType
enum class EPartyRoomTargetType : uint8_t
{
	PARTY_ROOM_TARGET_TYPE_NONE    = 0,
	PARTY_ROOM_TARGET_TYPE_RAID    = 1,
	PARTY_ROOM_TARGET_TYPE_MOD     = 2,
	PARTY_ROOM_TARGET_TYPE_FREE_TOPIC = 3,
	PARTY_ROOM_TARGET_TYPE_RAID_EVENT = 4,
	PARTY_ROOM_TARGET_TYPE_RAID_EASY = 5,
	PARTY_ROOM_TARGET_TYPE_RAID_ABYSS = 6,
	PARTY_ROOM_TARGET_TYPE_RAID_DIFFICULTY = 7,
	PARTY_ROOM_TARGET_TYPE_EDEN_GATE = 8,
	PARTY_ROOM_TARGET_TYPE_EDEN_GATE_HELL = 9,
	PARTY_ROOM_TARGET_TYPE_EDEN_GATE_COMMANDER = 10,
	PARTY_ROOM_TARGET_TYPE_REVERSE_RUIN = 11,
	PARTY_ROOM_TARGET_TYPE_MAX     = 12
};


// Enum EFGame.EFConst.PartyRoomDestroyReason
enum class EPartyRoomDestroyReason : uint8_t
{
	PARTY_ROOM_DESTROY_REASON_HOST_REQUEST = 0,
	PARTY_ROOM_DESTROY_REASON_HOST_LOGOUT = 1,
	PARTY_ROOM_DESTROY_REASON_FULL_PARTY = 2,
	PARTY_ROOM_DESTROY_REASON_PARTY_LEADER_CHANGED = 3,
	PARTY_ROOM_DESTROY_REASON_PARTY_LEADER_LEFT = 4,
	PARTY_ROOM_DESTROY_REASON_GM_REQUEST = 5,
	PARTY_ROOM_DESTROY_REASON_HOST_INVALID_ZONE = 6,
	PARTY_ROOM_DESTROY_REASON_HOST_COMPETITION_QUEST = 7,
	PARTY_ROOM_DESTROY_REASON_IN_MATCHING = 8,
	PARTY_ROOM_DESTROY_REASON_INOUT_TROOP = 9,
	PARTY_ROOM_DESTROY_REASON_CHANGE_OPTION = 10,
	PARTY_ROOM_DESTROY_REASON_MAX  = 11
};


// Enum EFGame.EFConst.PartyRoomLeaveReason
enum class EPartyRoomLeaveReason : uint8_t
{
	PARTY_ROOM_LEAVE_REASON_SELF_LEAVE = 0,
	PARTY_ROOM_LEAVE_REASON_LOGOUT = 1,
	PARTY_ROOM_LEAVE_REASON_INVALID_ZONE = 2,
	PARTY_ROOM_LEAVE_REASON_COMPETITION_QUEST = 3,
	PARTY_ROOM_LEAVE_REASON_IN_MATCHING = 4,
	PARTY_ROOM_LEAVE_REASON_INOUT_PARTY = 5,
	PARTY_ROOM_LEAVE_REASON_CHANGE_OPTION = 6,
	PARTY_ROOM_LEAVE_REASON_KICKED = 7,
	PARTY_ROOM_LEAVE_REASON_IN_COLOSSEUM = 8,
	PARTY_ROOM_LEAVE_REASON_CHANGE_OPTION_TARGET_CONTENTS = 9,
	PARTY_ROOM_LEAVE_REASON_CHANGE_OPTION_MIN_ITEM_LEVEL = 10,
	PARTY_ROOM_LEAVE_REASON_CANDIDATE_ACCEPT = 11,
	PARTY_ROOM_LEAVE_REASON_CANDIDATE_REJECT = 12,
	PARTY_ROOM_LEAVE_REASON_CANDIDATE_INVITE_ACCEPT = 13,
	PARTY_ROOM_LEAVE_REASON_MAX    = 14
};


// Enum EFGame.EFConst.PartyRoomChangeReason
enum class EPartyRoomChangeReason : uint8_t
{
	PARTY_ROOM_CHANGE_REASON_OPTION = 0,
	PARTY_ROOM_CHANGE_REASON_SEARCH = 1,
	PARTY_ROOM_CHANGE_REASON_RESTORE = 2,
	PARTY_ROOM_CHANGE_REASON_MAX   = 3
};


// Enum EFGame.EFConst.PartyRoomInviteRejectType
enum class EPartyRoomInviteRejectType : uint8_t
{
	PARTY_ROOM_INVITE_REJECT_TYPE_SAY_NO = 0,
	PARTY_ROOM_INVITE_REJECT_TYPE_TIMEOUT = 1,
	PARTY_ROOM_INVITE_REJECT_TYPE_EXCEED = 2,
	PARTY_ROOM_INVITE_REJECT_TYPE_CUTSCENE = 3,
	PARTY_ROOM_INVITE_REJECT_TYPE_ENV_SETTING = 4,
	PARTY_ROOM_INVITE_REJECT_TYPE_DEAD = 5,
	PARTY_ROOM_INVITE_REJECT_TYPE_INTERACTION = 6,
	PARTY_ROOM_INVITE_REJECT_TYPE_PRACTICE = 7,
	PARTY_ROOM_INVITE_REJECT_TYPE_BLOCK = 8,
	PARTY_ROOM_INVITE_REJECT_TYPE_INVITE_ERROR = 9,
	PARTY_ROOM_INVITE_REJECT_TYPE_INVITE_IMPOSSIBLE = 10,
	PARTY_ROOM_INVITE_REJECT_TYPE_BLOCK_BY_ME = 11,
	PARTY_ROOM_INVITE_REJECT_TYPE_COMPETITION_QUEST = 12,
	PARTY_ROOM_INVITE_REJECT_TYPE_BATTLEFIELD = 13,
	PARTY_ROOM_INVITE_REJECT_TYPE_JOIN_ELSE = 14,
	PARTY_ROOM_INVITE_REJECT_TYPE_LOGOUT = 15,
	PARTY_ROOM_INVITE_REJECT_TYPE_PARTYROOM = 16,
	PARTY_ROOM_INVITE_REJECT_TYPE_ENTER_VOTE = 17,
	PARTY_ROOM_INVITE_REJECT_TYPE_MAX = 18
};


// Enum EFGame.EFConst.PartyBoardTargetType
enum class EPartyBoardTargetType : uint8_t
{
	PARTY_BOARD_TARGET_TYPE_NONE   = 0,
	PARTY_BOARD_TARGET_TYPE_RAID   = 1,
	PARTY_BOARD_TARGET_TYPE_MOD    = 2,
	PARTY_BOARD_TARGET_TYPE_FREE_TOPIC = 3,
	PARTY_BOARD_TARGET_TYPE_RAID_EVENT = 4,
	PARTY_BOARD_TARGET_TYPE_RAID_EASY = 5,
	PARTY_BOARD_TARGET_TYPE_RAID_ABYSS = 6,
	PARTY_BOARD_TARGET_TYPE_MAX    = 7
};


// Enum EFGame.EFConst.PartyBoardSearchMethodType
enum class EPartyBoardSearchMethodType : uint8_t
{
	PARTY_BOARD_SEARCH_METHOD_TYPE_NONE = 0,
	PARTY_BOARD_SEARCH_METHOD_TYPE_CAN_JOIN = 1,
	PARTY_BOARD_SEARCH_METHOD_TYPE_CAN_JOIN_TARGET_ID = 2,
	PARTY_BOARD_SEARCH_METHOD_TYPE_MAX = 3
};


// Enum EFGame.EFConst.PartyBoardDestroyReason
enum class EPartyBoardDestroyReason : uint8_t
{
	PARTY_BOARD_DESTROY_REASON_HOST_REQUEST = 0,
	PARTY_BOARD_DESTROY_REASON_HOST_LOGOUT = 1,
	PARTY_BOARD_DESTROY_REASON_FULL_PARTY = 2,
	PARTY_BOARD_DESTROY_REASON_PARTY_LEADER_CHANGED = 3,
	PARTY_BOARD_DESTROY_REASON_PARTY_LEADER_LEFT = 4,
	PARTY_BOARD_DESTROY_REASON_GM_REQUEST = 5,
	PARTY_BOARD_DESTROY_REASON_HOST_INVALID_ZONE = 6,
	PARTY_BOARD_DESTROY_REASON_HOST_COMPETITION_QUEST = 7,
	PARTY_BOARD_DESTROY_REASON_IN_MATCHING = 8,
	PARTY_BOARD_DESTROY_REASON_INOUT_TROOP = 9,
	PARTY_BOARD_DESTROY_REASON_MAX = 10
};


// Enum EFGame.EFConst.PetFunctionType
enum class EPetFunctionType : uint8_t
{
	PET_FUNCTION_TYPE_NONE         = 0,
	PET_FUNCTION_TYPE_LOOT         = 1,
	PET_FUNCTION_TYPE_STORAGE      = 2,
	PET_FUNCTION_TYPE_POST         = 3,
	PET_FUNCTION_TYPE_REPAIR       = 4,
	PET_FUNCTION_TYPE_MARKET       = 5,
	PET_FUNCTION_TYPE_INVENTORY    = 6,
	PET_FUNCTION_TYPE_LIFE_TOOL_REPAIR = 7,
	PET_FUNCTION_TYPE_ITEM_GEM     = 8,
	PET_FUNCTION_TYPE_MAX          = 9
};


// Enum EFGame.EFConst.PetInteractionEndReason
enum class EPetInteractionEndReason : uint8_t
{
	PET_INTERACTION_END_REASON_NONE = 0,
	PET_INTERACTION_END_REASON_CLIENT_REQUEST = 1,
	PET_INTERACTION_END_REASON_SERVER_WARP = 2,
	PET_INTERACTION_END_REASON_SERVER_TELEPORT = 3,
	PET_INTERACTION_END_REASON_CLIENT_START_FAILED = 4,
	PET_INTERACTION_END_REASON_TRAINING_MODE_START = 5,
	PET_INTERACTION_END_REASON_ABNORMAL_STATUS = 6,
	PET_INTERACTION_END_REASON_MAX = 7
};


// Enum EFGame.EFConst.PCSettingType
enum class EPCSettingType : uint8_t
{
	PC_SETTING_TYPE_NONE           = 0,
	PC_SETTING_TYPE_TRIPOD_STASH_EXPAND_COUNT = 1,
	PC_SETTING_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.RejectReasonType
enum class ERejectReasonType : uint8_t
{
	REJECT_REASON_TYPE_NONE        = 0,
	REJECT_REASON_TYPE_SAY_NO      = 1,
	REJECT_REASON_TYPE_TIMEOUT     = 2,
	REJECT_REASON_TYPE_ENV_SETTING = 3,
	REJECT_REASON_TYPE_CUTSCENE    = 4,
	REJECT_REASON_TYPE_INTERACTION = 5,
	REJECT_REASON_TYPE_TARGET_IS_TOO_FAR = 6,
	REJECT_REASON_TYPE_DUELING     = 7,
	REJECT_REASON_TYPE_TRADING     = 8,
	REJECT_REASON_TYPE_EXCEED      = 9,
	REJECT_REASON_TYPE_DEAD        = 10,
	REJECT_REASON_TYPE_MAX         = 11
};


// Enum EFGame.EFConst.RewardGiveType
enum class ERewardGiveType : uint8_t
{
	REWARD_GIVE_TYPE_BASIC         = 0,
	REWARD_GIVE_TYPE_BONUS         = 1,
	REWARD_GIVE_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.RewardGiveUnitType
enum class ERewardGiveUnitType : uint8_t
{
	REWARD_GIVE_UNIT_TYPE_ACCOUNT  = 0,
	REWARD_GIVE_UNIT_TYPE_EXPEDITION = 1,
	REWARD_GIVE_UNIT_TYPE_CHARACTER = 2,
	REWARD_GIVE_UNIT_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.RewardWorldRangeType
enum class ERewardWorldRangeType : uint8_t
{
	REWARD_WORLD_RANGE_TYPE_CHARACTER = 0,
	REWARD_WORLD_RANGE_TYPE_EXPEDITION = 1,
	REWARD_WORLD_RANGE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.ReentryType
enum class EReentryType : uint8_t
{
	REENTRY_TYPE_NONE              = 0,
	REENTRY_TYPE_RESTORE_PARTY     = 1,
	REENTRY_TYPE_RESTORE_PARTY_REJECT = 2,
	REENTRY_TYPE_MAX               = 3
};


// Enum EFGame.EFConst.ResetIdentityOnAction
enum class EResetIdentityOnAction : uint8_t
{
	RESET_IDENTITY_ON_ACTION_NONE  = 0,
	RESET_IDENTITY_ON_ACTION_ALL   = 1,
	RESET_IDENTITY_ON_ACTION_BAN_VEHICLE = 2,
	RESET_IDENTITY_ON_ACTION_MAX   = 3
};


// Enum EFGame.EFConst.ReverseRuinType
enum class EReverseRuinType : uint8_t
{
	REVERSE_RUIN_TYPE_NONE         = 0,
	REVERSE_RUIN_TYPE_NORMAL       = 1,
	REVERSE_RUIN_TYPE_SEASON       = 2,
	REVERSE_RUIN_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.ReverseRuinState
enum class EReverseRuinState : uint8_t
{
	REVERSE_RUIN_STATE_NONE        = 0,
	REVERSE_RUIN_STATE_PROGRESS    = 1,
	REVERSE_RUIN_STATE_PAUSE       = 2,
	REVERSE_RUIN_STATE_CLEAR       = 3,
	REVERSE_RUIN_STATE_FAIL        = 4,
	REVERSE_RUIN_STATE_MAX         = 5
};


// Enum EFGame.EFConst.ReverseRuinStageCategory
enum class EReverseRuinStageCategory : uint8_t
{
	REVERSE_RUIN_STAGE_CATEGORY_NONE = 0,
	REVERSE_RUIN_STAGE_CATEGORY_BERN_A = 1,
	REVERSE_RUIN_STAGE_CATEGORY_LOHENDEL = 2,
	REVERSE_RUIN_STAGE_CATEGORY_YORN = 3,
	REVERSE_RUIN_STAGE_CATEGORY_FATON = 4,
	REVERSE_RUIN_STAGE_CATEGORY_PAPUNIKA = 5,
	REVERSE_RUIN_STAGE_CATEGORY_BERN_B = 6,
	REVERSE_RUIN_STAGE_CATEGORY_MAX = 7
};


// Enum EFGame.EFConst.RaidClearType
enum class ERaidClearType : uint8_t
{
	RAID_CLEAR_TYPE_NONE           = 0,
	RAID_CLEAR_TYPE_FIRST          = 1,
	RAID_CLEAR_TYPE_TIME_RECORD    = 2,
	RAID_CLEAR_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.ContentsRankingType
enum class EContentsRankingType : uint8_t
{
	CONTENTS_RANKING_TYPE_REVERSE_RUIN = 0,
	CONTENTS_RANKING_TYPE_MOD_WAYOFTHRONE = 1,
	CONTENTS_RANKING_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.RaidRewardResetType
enum class ERaidRewardResetType : uint8_t
{
	RAID_REWARD_RESET_TYPE_NONE    = 0,
	RAID_REWARD_RESET_TYPE_WEEKLY  = 1,
	RAID_REWARD_RESET_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.RaidRewardOriginType
enum class ERaidRewardOriginType : uint8_t
{
	RAID_REWARD_ORIGIN_TYPE_NORMAL = 0,
	RAID_REWARD_ORIGIN_TYPE_TOWN_SPEICAL_MISSION = 1,
	RAID_REWARD_ORIGIN_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.QuestType
enum class EQuestType : uint8_t
{
	QUEST_TYPE_MAIN                = 0,
	QUEST_TYPE_BASIC               = 1,
	QUEST_TYPE_DUNGEON             = 2,
	QUEST_TYPE_RESERVED            = 3,
	QUEST_TYPE_UNEXPECTED          = 4,
	QUEST_TYPE_CONTINENT           = 5,
	QUEST_TYPE_COOPERATION         = 6,
	QUEST_TYPE_PERIOD              = 7,
	QUEST_TYPE_TOWN                = 8,
	QUEST_TYPE_EVENT_MISSION       = 9,
	QUEST_TYPE_MAX                 = 10
};


// Enum EFGame.EFConst.EBasicQuestType
enum class EBasicQuestType : uint8_t
{
	BasicQuest_Basic               = 0,
	BasicQuest_Adventure           = 1,
	BasicQuest_Reserved            = 2,
	BasicQuest_Intimate            = 3,
	BasicQuest_Event               = 4,
	BasicQuest_Realm               = 5,
	BasicQuest_Max                 = 6
};


// Enum EFGame.EFConst.QuestStatus
enum class EQuestStatus : uint8_t
{
	QUEST_STATUS_NONE              = 0,
	QUEST_STATUS_ACTIVE            = 1,
	QUEST_STATUS_SUCCESS           = 2,
	QUEST_STATUS_COMPLETE          = 3,
	QUEST_STATUS_FAILED            = 4,
	QUEST_STATUS_MAX               = 5
};


// Enum EFGame.EFConst.QuestObjectiveType
enum class EQuestObjectiveType : uint8_t
{
	QUEST_OBJECTIVE_TYPE_KILL_NPC  = 0,
	QUEST_OBJECTIVE_TYPE_USE_ITEM  = 1,
	QUEST_OBJECTIVE_TYPE_INTERACT_PROP = 2,
	QUEST_OBJECTIVE_TYPE_TALK_WITH_NPC = 3,
	QUEST_OBJECTIVE_TYPE_CONVOY_ARRIVED = 4,
	QUEST_OBJECTIVE_TYPE_VISIT_VOLUME = 5,
	QUEST_OBJECTIVE_TYPE_USE_PICKUP_PROP = 6,
	QUEST_OBJECTIVE_TYPE_EQUIP_ITEM = 7,
	QUEST_OBJECTIVE_TYPE_APPLY_ITEM_EFFECT = 8,
	QUEST_OBJECTIVE_TYPE_COMPLETE_NPC_WAVE = 9,
	QUEST_OBJECTIVE_TYPE_CHANGE_CLASS = 10,
	QUEST_OBJECTIVE_TYPE_APPLY_PROP_EFFECT = 11,
	QUEST_OBJECTIVE_TYPE_DESTROY_TOWER = 12,
	QUEST_OBJECTIVE_TYPE_VISIT_ZONE = 13,
	QUEST_OBJECTIVE_TYPE_USE_SKILL = 14,
	QUEST_OBJECTIVE_TYPE_USE_COMMON_ACTION = 15,
	QUEST_OBJECTIVE_TYPE_GATHER_QUEST_ITEM = 16,
	QUEST_OBJECTIVE_TYPE_USE_QUEST_ITEM = 17,
	QUEST_OBJECTIVE_TYPE_APPLY_QUEST_ITEM_EFFECT = 18,
	QUEST_OBJECTIVE_TYPE_KILL_NPC_WITH_ITEM = 19,
	QUEST_OBJECTIVE_TYPE_KILL_NPC_WITH_QUEST_ITEM = 20,
	QUEST_OBJECTIVE_TYPE_BALLOON_TALK_WITH_NPC = 21,
	QUEST_OBJECTIVE_TYPE_NPC_FRIENDSHIP = 22,
	QUEST_OBJECTIVE_TYPE_CLEAR_DUNGEON = 23,
	QUEST_OBJECTIVE_TYPE_ADD_STATUS_EFFECT = 24,
	QUEST_OBJECTIVE_TYPE_REMOVE_STATUS_EFFECT = 25,
	QUEST_OBJECTIVE_TYPE_HAVE_MONEY = 26,
	QUEST_OBJECTIVE_TYPE_ADD_SHIP  = 27,
	QUEST_OBJECTIVE_TYPE_UPGRADE_SHIP = 28,
	QUEST_OBJECTIVE_TYPE_ADD_VOYAGE_CREW = 29,
	QUEST_OBJECTIVE_TYPE_TOWN_CONSTRUCT_BUILDING = 30,
	QUEST_OBJECTIVE_TYPE_TOWN_UPGRADE_BUILDING = 31,
	QUEST_OBJECTIVE_TYPE_TOWN_HAVE_BUILDING = 32,
	QUEST_OBJECTIVE_TYPE_TOWN_PRODUCE_RESOURCE = 33,
	QUEST_OBJECTIVE_TYPE_TOWN_PRODUCE_ITEM = 34,
	QUEST_OBJECTIVE_TYPE_TOWN_PRODUCE_IN_BUILIDNG = 35,
	QUEST_OBJECTIVE_TYPE_TOWN_DISPATCH_MISSION = 36,
	QUEST_OBJECTIVE_TYPE_TOWN_EMPLOY_NPC = 37,
	QUEST_OBJECTIVE_TYPE_TOWN_TALK_WITH_NPC = 38,
	QUEST_OBJECTIVE_TYPE_TOWN_DEPLOY_NPC = 39,
	QUEST_OBJECTIVE_TYPE_CARD_BATTLE = 40,
	QUEST_OBJECTIVE_TYPE_KILL_PLAYER = 41,
	QUEST_OBJECTIVE_TYPE_USE_MONEY = 42,
	QUEST_OBJECTIVE_TYPE_COLLECT_PROP = 43,
	QUEST_OBJECTIVE_TYPE_PLAY_MOD  = 44,
	QUEST_OBJECTIVE_TYPE_PLAY_COLOSSEUM = 45,
	QUEST_OBJECTIVE_TYPE_USE_FRIENDSHIP_ACTION = 46,
	QUEST_OBJECTIVE_TYPE_GATHER_FRIENDSHIP_POINT = 47,
	QUEST_OBJECTIVE_TYPE_PROCESS_ITEM = 48,
	QUEST_OBJECTIVE_TYPE_TOWN_PRODUCE_BOOST = 49,
	QUEST_OBJECTIVE_TYPE_INTERACT_FLOATING_MATTER = 50,
	QUEST_OBJECTIVE_TYPE_GATHER_POINT = 51,
	QUEST_OBJECTIVE_TYPE_HAVE_TOKEN_ITEM = 52,
	QUEST_OBJECTIVE_TYPE_GATHER_TOKEN_ITEM = 53,
	QUEST_OBJECTIVE_TYPE_RIDE_VEHICLE = 54,
	QUEST_OBJECTIVE_TYPE_KILL_BOSS = 55,
	QUEST_OBJECTIVE_TYPE_TOWN_EMPLOY_DISPATCH_CREW = 56,
	QUEST_OBJECTIVE_TYPE_TOWN_RESEARCH_COMPLETE = 57,
	QUEST_OBJECTIVE_TYPE_TOWN_OPEN_SITE_AREA = 58,
	QUEST_OBJECTIVE_TYPE_KILL_HIT_PROP = 59,
	QUEST_OBJECTIVE_TYPE_GATHER_REVERSERUIN_POINT = 60,
	QUEST_OBJECTIVE_TYPE_CLEAR_TROOP_SUB_QUEST = 61,
	QUEST_OBJECTIVE_TYPE_PLAY_COLOSSEUM_KA = 62,
	QUEST_OBJECTIVE_TYPE_COOP_TREASURE_SALVAGE = 63,
	QUEST_OBJECTIVE_TYPE_ITEM_ASSEMBLY = 64,
	QUEST_OBJECTIVE_TYPE_TOWN_RESEARCH = 65,
	QUEST_OBJECTIVE_TYPE_TOWN_DISPATCH = 66,
	QUEST_OBJECTIVE_TYPE_TOWN_DISPOSE = 67,
	QUEST_OBJECTIVE_TYPE_GATHER_LIFE_EXP = 68,
	QUEST_OBJECTIVE_TYPE_TIME_DEFENSE = 69,
	QUEST_OBJECTIVE_TYPE_CLEAR_TUTORIAL = 70,
	QUEST_OBJECTIVE_TYPE_RAID_SOUL_REWARD = 71,
	QUEST_OBJECTIVE_TYPE_PLAY_MOD_TYPE = 72,
	QUEST_OBJECTIVE_TYPE_VISIT_ASSEMBLE_VOLUME = 73,
	QUEST_OBJECTIVE_TYPE_VISIT_LIFE_ZONE = 74,
	QUEST_OBJECTIVE_TYPE_INTERACT_PROP_TYPE = 75,
	QUEST_OBJECTIVE_TYPE_TOWN_CHEF = 76,
	QUEST_OBJECTIVE_TYPE_KILL_NPC_CONTRIBUTION = 77,
	QUEST_OBJECTIVE_TYPE_ACHIEVE_ITEM_LEVEL = 78,
	QUEST_OBJECTIVE_TYPE_CLEAR_UI_TUTORIAL = 79,
	QUEST_OBJECTIVE_TYPE_CHANGE_REALM = 80,
	QUEST_OBJECTIVE_TYPE_OCCUPY_STRONG_HOLD = 81,
	QUEST_OBJECTIVE_TYPE_GATHER_BATTLEFIELD_POINT = 82,
	QUEST_OBJECTIVE_TYPE_USE_SKILL_PERFECT_STAGE = 83,
	QUEST_OBJECTIVE_TYPE_MAX       = 84
};


// Enum EFGame.EFConst.QuestFailureType
enum class EQuestFailureType : uint8_t
{
	QUEST_FAILURE_TYPE_DEATH       = 0,
	QUEST_FAILURE_TYPE_TIMER_EXPIRED = 1,
	QUEST_FAILURE_TYPE_MOVED_ZONE  = 2,
	QUEST_FAILURE_TYPE_DIED_NPC    = 3,
	QUEST_FAILURE_TYPE_ESCAPE_POSITION = 4,
	QUEST_FAILURE_TYPE_JOIN_PARTY  = 5,
	QUEST_FAILURE_TYPE_USE_ITEM    = 6,
	QUEST_FAILURE_TYPE_USE_SQUARE_HOLE = 7,
	QUEST_FAILURE_TYPE_CHECK_NPC_HP = 8,
	QUEST_FAILURE_TYPE_LEAVE_VOLUME = 9,
	QUEST_FAILURE_TYPE_REMOVE_STATUS_EFFECT = 10,
	QUEST_FAILURE_TYPE_RIDE_VEHICLE = 11,
	QUEST_FAILURE_TYPE_TOWN_DISMISS_NPC = 12,
	QUEST_FAILURE_TYPE_MAX         = 13
};


// Enum EFGame.EFConst.QuestActivationType
enum class EQuestActivationType : uint8_t
{
	QUEST_ACTIVATION_TYPE_NONE     = 0,
	QUEST_ACTIVATION_TYPE_START    = 1,
	QUEST_ACTIVATION_TYPE_COMPLETE = 2,
	QUEST_ACTIVATION_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.QuestRewardType
enum class EQuestRewardType : uint8_t
{
	QUEST_REWARD_TYPE_NONE         = 0,
	QUEST_REWARD_TYPE_MONEY        = 1,
	QUEST_REWARD_TYPE_EXP          = 2,
	QUEST_REWARD_TYPE_ITEM         = 3,
	QUEST_REWARD_TYPE_LIFE_EXP     = 4,
	QUEST_REWARD_TYPE_LIFE_POINT   = 5,
	QUEST_REWARD_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.QuestSpecialRewardType
enum class EQuestSpecialRewardType : uint8_t
{
	QUEST_SPECIAL_REWARD_TYPE_NONE = 0,
	QUEST_SPECIAL_REWARD_TYPE_SHIP = 1,
	QUEST_SPECIAL_REWARD_TYPE_BUFF = 2,
	QUEST_SPECIAL_REWARD_TYPE_MUSIC = 3,
	QUEST_SPECIAL_REWARD_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.QuestGatherItemFailBonusType
enum class EQuestGatherItemFailBonusType : uint8_t
{
	QUEST_GATHER_ITEM_FAIL_BONUS_TYPE_NONE = 0,
	QUEST_GATHER_ITEM_FAIL_BONUS_TYPE_ITEM = 1,
	QUEST_GATHER_ITEM_FAIL_BONUS_TYPE_BUFF = 2,
	QUEST_GATHER_ITEM_FAIL_BONUS_TYPE_MAX = 3
};


// Enum EFGame.EFConst.QuestItemCategory
enum class EQuestItemCategory : uint8_t
{
	QUEST_ITEM_CATEGORY_NORMAL     = 0,
	QUEST_ITEM_CATEGORY_USE        = 1,
	QUEST_ITEM_CATEGORY_NOTE       = 2,
	QUEST_ITEM_CATEGORY_MAX        = 3
};


// Enum EFGame.EFConst.MedalQuestRank
enum class EMedalQuestRank : uint8_t
{
	MEDAL_QUEST_RANK_NONE          = 0,
	MEDAL_QUEST_RANK_BRONZE        = 1,
	MEDAL_QUEST_RANK_SILVER        = 2,
	MEDAL_QUEST_RANK_GOLD          = 3,
	MEDAL_QUEST_RANK_PLATINUM      = 4,
	MEDAL_QUEST_RANK_MAX           = 5
};


// Enum EFGame.EFConst.QuestVolumeEventType
enum class EQuestVolumeEventType : uint8_t
{
	QUEST_VOLUME_EVENT_TYPE_ENTER  = 0,
	QUEST_VOLUME_EVENT_TYPE_LEAVE  = 1,
	QUEST_VOLUME_EVENT_TYPE_STAY   = 2,
	QUEST_VOLUME_EVENT_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.QuestPropInteractType
enum class EQuestPropInteractType : uint8_t
{
	QUEST_PROP_INTERACT_TYPE_DEFAULT = 0,
	QUEST_PROP_INTERACT_TYPE_ATTACH = 1,
	QUEST_PROP_INTERACT_TYPE_DETACH = 2,
	QUEST_PROP_INTERACT_TYPE_TIMER_END = 3,
	QUEST_PROP_INTERACT_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.QuestStartConditionItemGroupType
enum class EQuestStartConditionItemGroupType : uint8_t
{
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_NONE = 0,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_CUBE_TICKET = 1,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_BOSS_RUSH_TICKET = 2,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_PLATINUM_AREA_TICKET = 3,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_SKILL_RUNE = 4,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_GEM = 5,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_UPGRADE_TOOL = 6,
	QUEST_START_CONDITION_ITEM_GROUP_TYPE_MAX = 7
};


// Enum EFGame.EFConst.QuestObjectiveCheckRule
enum class EQuestObjectiveCheckRule : uint8_t
{
	QUEST_OBJECTIVE_CHECK_RULE_OR  = 0,
	QUEST_OBJECTIVE_CHECK_RULE_AND = 1,
	QUEST_OBJECTIVE_CHECK_RULE_MAX = 2
};


// Enum EFGame.EFConst.QuickSlotDataType
enum class EQuickSlotDataType : uint8_t
{
	QUICK_SLOT_DATA_TYPE_SKILL     = 0,
	QUICK_SLOT_DATA_TYPE_COMMON_ACTION = 1,
	QUICK_SLOT_DATA_TYPE_MAX       = 2
};


// Enum EFGame.EFConst.QuickSlot
enum class EQuickSlot : uint8_t
{
	QUICK_SLOT_SKILL               = 0,
	QUICK_SLOT_LIFE                = 1,
	QUICK_SLOT_MAX                 = 2
};


// Enum EFGame.EFConst.SkillQuickSlotType
enum class ESkillQuickSlotType : uint8_t
{
	SKILL_QUICK_SLOT_TYPE          = 0,
	SKILL_QUICK_SLOT_TYPE01        = 1,
	SKILL_QUICK_SLOT_TYPE02        = 2,
	SKILL_QUICK_SLOT_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.QuestVisibilityType
enum class EQuestVisibilityType : uint8_t
{
	QUEST_VISIBLITY_TYPE_PROGRESS  = 0,
	QUEST_VISIBLITY_TYPE_SUCCESS   = 1,
	QUEST_VISIBLITY_TYPE_COMPLETE  = 2,
	QUEST_VISIBLITY_TYPE_INCOMPLETE = 3,
	QUEST_VISIBLITY_TYPE_MAX       = 4
};


// Enum EFGame.EFConst.QuestVisibility
enum class EQuestVisibility : uint8_t
{
	QUEST_VISIBILITY_SHOW          = 0,
	QUEST_VISIBILITY_HIDE          = 1,
	QUEST_VISIBILITY_MAX           = 2
};


// Enum EFGame.EFConst.QuestStartType
enum class EQuestStartType : uint8_t
{
	QUEST_START_TYPE_NPC           = 0,
	QUEST_START_TYPE_ACTIVATE_PROP = 1,
	QUEST_START_TYPE_QUEST_ITEM    = 2,
	QUEST_START_TYPE_AUTO          = 3,
	QUEST_START_TYPE_UI            = 4,
	QUEST_START_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.QuestEndType
enum class EQuestEndType : uint8_t
{
	QUEST_END_TYPE_NPC             = 0,
	QUEST_END_TYPE_AUTO            = 1,
	QUEST_END_TYPE_UI              = 2,
	QUEST_END_TYPE_MAX             = 3
};


// Enum EFGame.EFConst.QuestBookMarkActionType
enum class EQuestBookMarkActionType : uint8_t
{
	QUEST_BOOK_MARK_ACTION_TYPE_NONE = 0,
	QUEST_BOOK_MARK_ACTION_TYPE_ADD = 1,
	QUEST_BOOK_MARK_ACTION_TYPE_DELETE = 2,
	QUEST_BOOK_MARK_ACTION_TYPE_COMPLETION = 3,
	QUEST_BOOK_MARK_ACTION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.QuestPeriodOptionActionType
enum class EQuestPeriodOptionActionType : uint8_t
{
	QUEST_PERIOD_OPTION_ACTION_TYPE_NONE = 0,
	QUEST_PERIOD_OPTION_ACTION_TYPE_EXPANSION_DAILY = 1,
	QUEST_PERIOD_OPTION_ACTION_TYPE_EXPANSION_WEEKLY = 2,
	QUEST_PERIOD_OPTION_ACTION_TYPE_CLEAR_LIST_DAILY = 3,
	QUEST_PERIOD_OPTION_ACTION_TYPE_CLEAR_LIST_WEEKLY = 4,
	QUEST_PERIOD_OPTION_ACTION_TYPE_RESET_DAILY = 5,
	QUEST_PERIOD_OPTION_ACTION_TYPE_RESET_WEEKLY = 6,
	QUEST_PERIOD_OPTION_ACTION_TYPE_MAX = 7
};


// Enum EFGame.EFConst.QuestOfferBehaviorType
enum class EQuestOfferBehaviorType : uint8_t
{
	QUEST_OFFER_BEHAVIOR_TYPE_KILL_NPC = 0,
	QUEST_OFFER_BEHAVIOR_TYPE_INTERACT_PROP = 1,
	QUEST_OFFER_BEHAVIOR_TYPE_TALK_WITH_NPC = 2,
	QUEST_OFFER_BEHAVIOR_TYPE_BALLOON_TALK_WITH_NPC = 3,
	QUEST_OFFER_BEHAVIOR_TYPE_COMMON_ACTION_WITH_PROP = 4,
	QUEST_OFFER_BEHAVIOR_TYPE_GATHER_FLOATING_MATTER = 5,
	QUEST_OFFER_BEHAVIOR_TYPE_RAID_SOUL = 6,
	QUEST_OFFER_BEHAVIOR_TYPE_MAX  = 7
};


// Enum EFGame.EFConst.QuestEventClientType
enum class EQuestEventClientType : uint8_t
{
	QUEST_EVENT_CLIENT_TYPE_CLEAR_TUTORIAL = 0,
	QUEST_EVENT_CLIENT_TYPE_CLEAR_UI_TUTORIAL = 1,
	QUEST_EVENT_CLIENT_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.QuestCompleteOrigin
enum class EQuestCompleteOrigin : uint8_t
{
	QUEST_COMPLETE_ORIGIN_NORMAL   = 0,
	QUEST_COMPLETE_ORIGIN_ALTERNATIVE = 1,
	QUEST_COMPLETE_ORIGIN_JUMPING  = 2,
	QUEST_COMPLETE_ORIGIN_PENDING_COMMAND = 3,
	QUEST_COMPLETE_ORIGIN_MAX      = 4
};


// Enum EFGame.EFConst.EDungeonQuestType
enum class EDungeonQuestType : uint8_t
{
	DungeonQuest_Main              = 0,
	DungeonQuest_Sub               = 1,
	DungeonQuest_Troop_Sub         = 2,
	DungeonQuest_MAX               = 3
};


// Enum EFGame.EFConst.RaidResult
enum class ERaidResult : uint8_t
{
	RAID_RESULT_NOT_YET            = 0,
	RAID_RESULT_CLEAR              = 1,
	RAID_RESULT_FAIL_SPENT_ALL_BRAVE_HEART = 2,
	RAID_RESULT_FAIL_TIME_OVER     = 3,
	RAID_RESULT_FAIL_CHECK_TICKET  = 4,
	RAID_RESULT_FAIL_VOTE          = 5,
	RAID_RESULT_FAIL_CONDITION     = 6,
	RAID_RESULT_MAX                = 7
};


// Enum EFGame.EFConst.RaidType
enum class ERaidType : uint8_t
{
	RAID_TYPE_NONE                 = 0,
	RAID_TYPE_NORMAL               = 1,
	RAID_TYPE_EVENT                = 2,
	RAID_TYPE_ABYSS                = 3,
	RAID_TYPE_DIFFICULTY           = 4,
	RAID_TYPE_MAX                  = 5
};


// Enum EFGame.EFConst.RaidBraveHeartType
enum class ERaidBraveHeartType : uint8_t
{
	RAID_BRAVE_HEART_TYPE_NORMAL   = 0,
	RAID_BRAVE_HEART_TYPE_NORMAL_NOT_REVIVE = 1,
	RAID_BRAVE_HEART_TYPE_PERSONAL = 2,
	RAID_BRAVE_HEART_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.RaidDifficultyType
enum class ERaidDifficultyType : uint8_t
{
	RAID_DIFFICULTY_TYPE_NONE      = 0,
	RAID_DIFFICULTY_TYPE_CHALLENGE = 1,
	RAID_DIFFICULTY_TYPE_CHALLENGE_HARD = 2,
	RAID_DIFFICULTY_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.RandomBoxType
enum class ERandomBoxType : uint8_t
{
	RANDOM_BOX_TYPE_GROUND         = 0,
	RANDOM_BOX_TYPE_NORMAL         = 1,
	RANDOM_BOX_TYPE_RANDOM         = 2,
	RANDOM_BOX_TYPE_SELECTIVE      = 3,
	RANDOM_BOX_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.ReviveMethod
enum class EReviveMethod : uint8_t
{
	REVIVE_METHOD_IN_PLACE         = 0,
	REVIVE_METHOD_STORED_PLACE     = 1,
	REVIVE_METHOD_MAX              = 2
};


// Enum EFGame.EFConst.ReviveStoredPlaceType
enum class EReviveStoredPlaceType : uint8_t
{
	REVIVE_STORED_PLACE_TYPE_DEFAULT = 0,
	REVIVE_STORED_PLACE_TYPE_LAST_POS = 1,
	REVIVE_STORED_PLACE_TYPE_RANDOM_POS = 2,
	REVIVE_STORED_PLACE_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.ReviveMethodSupport
enum class EReviveMethodSupport : uint8_t
{
	REVIVE_METHOD_SUPPORT_NONE     = 0,
	REVIVE_METHOD_SUPPORT_IN_PLACE_AND_STORED_PLACE = 1,
	REVIVE_METHOD_SUPPORT_IN_PLACE = 2,
	REVIVE_METHOD_SUPPORT_IN_PLACE_WITH_TIMEOUT_STORED_PLACE = 3,
	REVIVE_METHOD_SUPPORT_STORED_PLACE = 4,
	REVIVE_METHOD_SUPPORT_MAX      = 5
};


// Enum EFGame.EFConst.RealmType
enum class ERealmType : uint8_t
{
	REALM_TYPE_NONE                = 0,
	REALM_TYPE_RED                 = 1,
	REALM_TYPE_BLUE                = 2,
	REALM_TYPE_MAX                 = 3
};


// Enum EFGame.EFConst.RealmRateType
enum class ERealmRateType : uint8_t
{
	REALM_RATIO_TYPE_NONE          = 0,
	REALM_RATIO_TYPE_VERY_INFERIOR = 1,
	REALM_RATIO_TYPE_INFERIOR      = 2,
	REALM_RATIO_TYPE_EQUAL         = 3,
	REALM_RATIO_TYPE_SUPERIOR      = 4,
	REALM_RATIO_TYPE_VERY_SUPERIOR = 5,
	REALM_RATIO_TYPE_MAX           = 6
};


// Enum EFGame.EFConst.SceneReplayCommand
enum class ESceneReplayCommand : uint8_t
{
	SCENE_REPLAY_COMMAND_NONE      = 0,
	SCENE_REPLAY_COMMAND_WARP_TO_LOBBY = 1,
	SCENE_REPLAY_COMMAND_START_REPLAY = 2,
	SCENE_REPLAY_COMMAND_WARP_TO_LOBBY_RETURN = 3,
	SCENE_REPLAY_COMMAND_MAX       = 4
};


// Enum EFGame.EFConst.SelfieInteraction
enum class ESelfieInteraction : uint8_t
{
	SELFIE_INTERACTION_START       = 0,
	SELFIE_INTERACTION_END         = 1,
	SELFIE_INTERACTION_MAX         = 2
};


// Enum EFGame.EFConst.ServerType
enum class EServerType : uint8_t
{
	SERVER_TYPE_LOGIN              = 0,
	SERVER_TYPE_WORLD              = 1,
	SERVER_TYPE_GAME               = 2,
	SERVER_TYPE_QUERY              = 3,
	SERVER_TYPE_CENTER             = 4,
	SERVER_TYPE_MATCH              = 5,
	SERVER_TYPE_SOCIAL             = 6,
	SERVER_TYPE_AUCTION            = 7,
	SERVER_TYPE_TRACE              = 8,
	SERVER_TYPE_RESERVED09         = 9,
	SERVER_TYPE_RESERVED10         = 10,
	SERVER_TYPE_RESERVED11         = 11,
	SERVER_TYPE_RESERVED12         = 12,
	SERVER_TYPE_RESERVED13         = 13,
	SERVER_TYPE_RESERVED14         = 14,
	SERVER_TYPE_AGENT              = 15,
	SERVER_TYPE_CONSOLE            = 16,
	SERVER_TYPE_LUDY               = 17,
	SERVER_TYPE_AM                 = 18,
	SERVER_TYPE_MAX                = 19
};


// Enum EFGame.EFConst.SystemMessageType
enum class ESystemMessageType : uint8_t
{
	SYSTEM_MESSAGE_TYPE_DEFAULT    = 0,
	SYSTEM_MESSAGE_TYPE_WORLD      = 1,
	SYSTEM_MESSAGE_TYPE_ZONE       = 2,
	SYSTEM_MESSAGE_TYPE_WHISPER    = 3,
	SYSTEM_MESSAGE_TYPE_BAN_ACCOUNT = 4,
	SYSTEM_MESSAGE_TYPE_KICK_ACCOUNT = 5,
	SYSTEM_MESSAGE_TYPE_SERVER_TEXT = 6,
	SYSTEM_MESSAGE_TYPE_RAW_TEXT   = 7,
	SYSTEM_MESSAGE_TYPE_BUFF       = 8,
	SYSTEM_MESSAGE_TYPE_EVENT      = 9,
	SYSTEM_MESSAGE_TYPE_MAX        = 10
};


// Enum EFGame.EFConst.SDMapShareResponseType
enum class ESDMapShareResponseType : uint8_t
{
	SD_MAP_SHARE_RESPONSE_TYPE_NA  = 0,
	SD_MAP_SHARE_RESPONSE_TYPE_ACCEPT = 1,
	SD_MAP_SHARE_RESPONSE_TYPE_REFUSE = 2,
	SD_MAP_SHARE_RESPONSE_TYPE_TIMEOUT = 3,
	SD_MAP_SHARE_RESPONSE_TYPE_INTERACTION = 4,
	SD_MAP_SHARE_RESPONSE_TYPE_MAX = 5
};


// Enum EFGame.EFConst.SDRoomShapeType
enum class ESDRoomShapeType : uint8_t
{
	SD_ROOM_SHAPE_TYPE_NA          = 0,
	SD_ROOM_SHAPE_TYPE_MAZE        = 1,
	SD_ROOM_SHAPE_TYPE_PATH        = 2,
	SD_ROOM_SHAPE_TYPE_RADIAL      = 3,
	SD_ROOM_SHAPE_TYPE_MAX         = 4
};


// Enum EFGame.EFConst.SDRoomSizeType
enum class ESDRoomSizeType : uint8_t
{
	SD_ROOM_SIZE_TYPE_TINY         = 0,
	SD_ROOM_SIZE_TYPE_TINY01       = 1,
	SD_ROOM_SIZE_TYPE_TINY02       = 2,
	SD_ROOM_SIZE_TYPE_TINY03       = 3,
	SD_ROOM_SIZE_TYPE_TINY04       = 4,
	SD_ROOM_SIZE_TYPE_SMALL        = 5,
	SD_ROOM_SIZE_TYPE_SMALL01      = 6,
	SD_ROOM_SIZE_TYPE_SMALL02      = 7,
	SD_ROOM_SIZE_TYPE_SMALL03      = 8,
	SD_ROOM_SIZE_TYPE_SMALL04      = 9,
	SD_ROOM_SIZE_TYPE_MEDIUM       = 10,
	SD_ROOM_SIZE_TYPE_MEDIUM01     = 11,
	SD_ROOM_SIZE_TYPE_MEDIUM02     = 12,
	SD_ROOM_SIZE_TYPE_MEDIUM03     = 13,
	SD_ROOM_SIZE_TYPE_MEDIUM04     = 14,
	SD_ROOM_SIZE_TYPE_LARGE        = 15,
	SD_ROOM_SIZE_TYPE_LARGE01      = 16,
	SD_ROOM_SIZE_TYPE_LARGE02      = 17,
	SD_ROOM_SIZE_TYPE_LARGE03      = 18,
	SD_ROOM_SIZE_TYPE_LARGE04      = 19,
	SD_ROOM_SIZE_TYPE_MAX          = 20
};


// Enum EFGame.EFConst.SmartPingSignalType
enum class ESmartPingSignalType : uint8_t
{
	SMARTPING_SIGNAL_TYPE_ATTACK   = 0,
	SMARTPING_SIGNAL_TYPE_ASSEMBLE = 1,
	SMARTPING_SIGNAL_TYPE_HELP     = 2,
	SMARTPING_SIGNAL_TYPE_DANGER   = 3,
	SMARTPING_SIGNAL_TYPE_MOVING   = 4,
	SMARTPING_SIGNAL_TYPE_TARGETING = 5,
	SMARTPING_SIGNAL_TYPE_MAX      = 6
};


// Enum EFGame.EFConst.SmartDropBindType
enum class ESmartDropBindType : uint8_t
{
	SMART_DROP_BIND_TYPE_CHARACTER = 0,
	SMART_DROP_BIND_TYPE_EXPEDITION = 1,
	SMART_DROP_BIND_TYPE_MAX       = 2
};


// Enum EFGame.EFConst.StatType
enum class EStatType : uint8_t
{
	STAT_TYPE_NONE                 = 0,
	STAT_TYPE_HP                   = 1,
	STAT_TYPE_MP                   = 2,
	STAT_TYPE_STR                  = 3,
	STAT_TYPE_AGI                  = 4,
	STAT_TYPE_INT                  = 5,
	STAT_TYPE_CON                  = 6,
	STAT_TYPE_STR_X                = 7,
	STAT_TYPE_AGI_X                = 8,
	STAT_TYPE_INT_X                = 9,
	STAT_TYPE_CON_X                = 10,
	STAT_TYPE_STR_X_X_DELETED___   = 11,
	STAT_TYPE_AGI_X_X_DELETED___   = 12,
	STAT_TYPE_INT_X_X_DELETED___   = 13,
	STAT_TYPE_CON_X_X_DELETED___   = 14,
	STAT_TYPE_CRITICALHIT          = 15,
	STAT_TYPE_SPECIALTY            = 16,
	STAT_TYPE_OPPRESSION           = 17,
	STAT_TYPE_RAPIDITY             = 18,
	STAT_TYPE_ENDURANCE            = 19,
	STAT_TYPE_MASTERY              = 20,
	STAT_TYPE_CRITICALHIT_X        = 21,
	STAT_TYPE_SPECIALTY_X          = 22,
	STAT_TYPE_OPPRESSION_X         = 23,
	STAT_TYPE_RAPIDITY_X           = 24,
	STAT_TYPE_ENDURANCE_X          = 25,
	STAT_TYPE_MASTERY_X            = 26,
	STAT_TYPE_MAX_HP               = 27,
	STAT_TYPE_MAX_MP               = 28,
	STAT_TYPE_MAX_HP_X             = 29,
	STAT_TYPE_MAX_MP_X             = 30,
	STAT_TYPE_MAX_HP_X_X           = 31,
	STAT_TYPE_MAX_MP_X_X           = 32,
	STAT_TYPE_NORMAL_HP_RECOVERY   = 33,
	STAT_TYPE_COMBAT_HP_RECOVERY   = 34,
	STAT_TYPE_NORMAL_HP_RECOVERY_RATE = 35,
	STAT_TYPE_COMBAT_HP_RECOVERY_RATE = 36,
	STAT_TYPE_NORMAL_MP_RECOVERY   = 37,
	STAT_TYPE_COMBAT_MP_RECOVERY   = 38,
	STAT_TYPE_NORMAL_MP_RECOVERY_RATE = 39,
	STAT_TYPE_COMBAT_MP_RECOVERY_RATE = 40,
	STAT_TYPE_SELF_RECOVERY_RATE   = 41,
	STAT_TYPE_DRAIN_HP_DAM_RATE    = 42,
	STAT_TYPE_DRAIN_MP_DAM_RATE    = 43,
	STAT_TYPE_DAM_REFLECTION_RATE  = 44,
	STAT_TYPE_MIN_WEAPON_DAM_DELETED___ = 45,
	STAT_TYPE_MAX_WEAPON_DAM_DELETED___ = 46,
	STAT_TYPE_CHAR_ATTACK_DAM      = 47,
	STAT_TYPE_SKILL_EFFECT_DAM_ADDEND = 48,
	STAT_TYPE_ATTACK_POWER_RATE    = 49,
	STAT_TYPE_SKILL_DAMAGE_RATE    = 50,
	STAT_TYPE_ATTACK_POWER_RATE_X  = 51,
	STAT_TYPE_SKILL_DAMAGE_RATE_X  = 52,
	STAT_TYPE_COOLDOWN_REDUCTION   = 53,
	STAT_TYPE_PARALYZATION_POINT_RATE = 54,
	STAT_TYPE_DEF                  = 55,
	STAT_TYPE_RES                  = 56,
	STAT_TYPE_DEF_X                = 57,
	STAT_TYPE_RES_X                = 58,
	STAT_TYPE_DEF_X_X              = 59,
	STAT_TYPE_RES_X_X              = 60,
	STAT_TYPE_DEF_DEC_DELETED___   = 61,
	STAT_TYPE_RES_DEC_DELETED___   = 62,
	STAT_TYPE_DEF_DEC_X_DELETED___ = 63,
	STAT_TYPE_RES_DEC_X_DELETED___ = 64,
	STAT_TYPE_DEF_DEC_X_X_DELETED___ = 65,
	STAT_TYPE_RES_DEC_X_X_DELETED___ = 66,
	STAT_TYPE_DEF_PEN_RATE         = 67,
	STAT_TYPE_RES_PEN_RATE         = 68,
	STAT_TYPE_PHYSICAL_INC_RATE    = 69,
	STAT_TYPE_MAGICAL_INC_RATE     = 70,
	STAT_TYPE_SELF_SHIELD_RATE     = 71,
	STAT_TYPE_HIT_RATE             = 72,
	STAT_TYPE_DODGE_RATE           = 73,
	STAT_TYPE_CRITICAL_HIT_RATE    = 74,
	STAT_TYPE_CRITICAL_RES_RATE    = 75,
	STAT_TYPE_CRITICAL_DAM_RATE    = 76,
	STAT_TYPE_ATTACK_SPEED         = 77,
	STAT_TYPE_ATTACK_SPEED_RATE    = 78,
	STAT_TYPE_MOVE_SPEED           = 79,
	STAT_TYPE_MOVE_SPEED_RATE      = 80,
	STAT_TYPE_PROP_MOVE_SPEED      = 81,
	STAT_TYPE_PROP_MOVE_SPEED_RATE = 82,
	STAT_TYPE_VEHICLE_MOVE_SPEED   = 83,
	STAT_TYPE_VEHICLE_MOVE_SPEED_RATE = 84,
	STAT_TYPE_SHIP_MOVE_SPEED      = 85,
	STAT_TYPE_SHIP_MOVE_SPEED_RATE = 86,
	STAT_TYPE_FIRE_DAM_RATE        = 87,
	STAT_TYPE_ICE_DAM_RATE         = 88,
	STAT_TYPE_ELECTRICITY_DAM_RATE = 89,
	STAT_TYPE_WIND_DAM_RATE_DELETED___ = 90,
	STAT_TYPE_EARTH_DAM_RATE       = 91,
	STAT_TYPE_DARK_DAM_RATE        = 92,
	STAT_TYPE_HOLY_DAM_RATE        = 93,
	STAT_TYPE_ELEMENTS_DAM_RATE    = 94,
	STAT_TYPE_FIRE_RES_RATE        = 95,
	STAT_TYPE_ICE_RES_RATE         = 96,
	STAT_TYPE_ELECTRICITY_RES_RATE = 97,
	STAT_TYPE_WIND_RES_RATE_DELETED___ = 98,
	STAT_TYPE_EARTH_RES_RATE       = 99,
	STAT_TYPE_DARK_RES_RATE        = 100,
	STAT_TYPE_HOLY_RES_RATE        = 101,
	STAT_TYPE_ELEMENTS_RES_RATE    = 102,
	STAT_TYPE_MOVE_CC_RES_RATE_DELETED___ = 103,
	STAT_TYPE_CONDITION_CC_RES_RATE_DELETED___ = 104,
	STAT_TYPE_SELF_CC_TIME_RATE    = 105,
	STAT_TYPE_ENEMY_CC_TIME_RATE   = 106,
	STAT_TYPE_IDENTITY_VALUE1      = 107,
	STAT_TYPE_IDENTITY_VALUE2      = 108,
	STAT_TYPE_IDENTITY_VALUE3      = 109,
	STAT_TYPE_AWAKENING_DAM_RATE   = 110,
	STAT_TYPE_ITEM_DROP_RATE       = 111,
	STAT_TYPE_GOLD_RATE            = 112,
	STAT_TYPE_EXP_RATE             = 113,
	STAT_TYPE_DAM_ATTR_VALUE_DELETED___ = 114,
	STAT_TYPE_CHAR_ATTR_ATTACK_DAM_DELETED___ = 115,
	STAT_TYPE_FIRE_DEF_DELETED___  = 116,
	STAT_TYPE_ICE_DEF_DELETED___   = 117,
	STAT_TYPE_ELECTRICITY_DEF_DELETED___ = 118,
	STAT_TYPE_EARTH_DEF_DELETED___ = 119,
	STAT_TYPE_DARK_DEF_DELETED___  = 120,
	STAT_TYPE_HOLY_DEF_DELETED___  = 121,
	STAT_TYPE_ELEMENTAL_DEF_DELETED___ = 122,
	STAT_TYPE_ATTACK_POWER_ADDEND  = 123,
	STAT_TYPE_ATTR_ATTACK_POWER_ADDEND_DELETED___ = 124,
	STAT_TYPE_NPC_SPECIES_HUMANOID_DAM_RATE = 125,
	STAT_TYPE_NPC_SPECIES_DEVIL_DAM_RATE = 126,
	STAT_TYPE_NPC_SPECIES_SUBSTANCE_DAM_RATE = 127,
	STAT_TYPE_NPC_SPECIES_UNDEAD_DAM_RATE = 128,
	STAT_TYPE_NPC_SPECIES_PLANT_DAM_RATE = 129,
	STAT_TYPE_NPC_SPECIES_INSECT_DAM_RATE = 130,
	STAT_TYPE_NPC_SPECIES_SPIRIT_DAM_RATE = 131,
	STAT_TYPE_NPC_SPECIES_WILD_BEAST_DAM_RATE = 132,
	STAT_TYPE_NPC_SPECIES_MECHANIC_DAM_RATE = 133,
	STAT_TYPE_NPC_SPECIES_ANCIENT_DAM_RATE = 134,
	STAT_TYPE_NPC_SPECIES_GOD_DAM_RATE = 135,
	STAT_TYPE_NPC_SPECIES_ARCHFIEND_DAM_RATE = 136,
	STAT_TYPE_VITALITY             = 137,
	STAT_TYPE_SHIP_BOOTER_SPEED    = 138,
	STAT_TYPE_SHIP_WRECK_SPEED_RATE = 139,
	STAT_TYPE_ISLAND_SPEED_RATE    = 140,
	STAT_TYPE_ATTACK_POWER_SUB_RATE = 141,
	STAT_TYPE_ATTACK_POWER_SUB_RATE01 = 142,
	STAT_TYPE_PHYSICAL_INC_SUB_RATE = 143,
	STAT_TYPE_PHYSICAL_INC_SUB_RATE01 = 144,
	STAT_TYPE_MAGICAL_INC_SUB_RATE = 145,
	STAT_TYPE_MAGICAL_INC_SUB_RATE01 = 146,
	STAT_TYPE_SKILL_DAMAGE_SUB_RATE = 147,
	STAT_TYPE_SKILL_DAMAGE_SUB_RATE01 = 148,
	STAT_TYPE_RESOURCE_RECOVERY_RATE = 149,
	STAT_TYPE_NPC_ADAPTATION_DELETED___ = 150,
	STAT_TYPE_WEAPON_DAM           = 151,
	STAT_TYPE_MAX                  = 152
};


// Enum EFGame.EFConst.StatCategory
enum class EStatCategory : uint8_t
{
	STAT_CATEGORY_NONE             = 0,
	STAT_CATEGORY_PRIMARY          = 1,
	STAT_CATEGORY_SECONARY         = 2,
	STAT_CATEGORY_MAX              = 3
};


// Enum EFGame.EFConst.ShopConditionType
enum class EShopConditionType : uint8_t
{
	SHOP_CONDITION_NONE            = 0,
	SHOP_CONDITION_PC_LEVEL        = 1,
	SHOP_CONDITION_ITEM_LEVEL      = 2,
	SHOP_CONDITION_EXPEDITION_LEVEL = 3,
	SHOP_CONDITION_QUEST_POINT     = 4,
	SHOP_CONDITION_PVP_LEVEL       = 5,
	SHOP_CONDITION_TENDENCY        = 6,
	SHOP_CONDITION_ACHIEVEMENT     = 7,
	SHOP_CONDITION_NPC_FRIENDSHIP  = 8,
	SHOP_CONDITION_QUEST_CLEAR     = 9,
	SHOP_CONDITION_ISLANDHEART_COUNT = 10,
	SHOP_CONDITION_SHOP_RESEARCH_LEVEL = 11,
	SHOP_CONDITION_GUILD_CONTRIBUTION = 12,
	SHOP_CONDITION_PVP_LEVEL_LAST  = 13,
	SHOP_CONDITION_TOWN_DISPATCH_CREW = 14,
	SHOP_CONDITION_MAX             = 15
};


// Enum EFGame.EFConst.StatVisibility
enum class EStatVisibility : uint8_t
{
	STAT_VISIBILITY_NONE           = 0,
	STAT_VISIBILITY_SELF           = 1,
	STAT_VISIBILITY_OTHER          = 2,
	STAT_VISIBILITY_MAX            = 3
};


// Enum EFGame.EFConst.SkillCategory
enum class ESkillCategory : uint8_t
{
	SKILL_CATEGORY_NORMAL          = 0,
	SKILL_CATEGORY_COMMON          = 1,
	SKILL_CATEGORY_LIFE            = 2,
	SKILL_CATEGORY_SOCIAL          = 3,
	SKILL_CATEGORY_MAX             = 4
};


// Enum EFGame.EFConst.StatChangeOrigin
enum class EStatChangeOrigin : uint8_t
{
	STAT_CHANGE_ORIGIN_NONE        = 0,
	STAT_CHANGE_ORIGIN_ITEM        = 1,
	STAT_CHANGE_ORIGIN_BUFF        = 2,
	STAT_CHANGE_ORIGIN_DRAIN       = 3,
	STAT_CHANGE_ORIGIN_SKILL_EFFECT = 4,
	STAT_CHANGE_ORIGIN_VICTORY_CREST = 5,
	STAT_CHANGE_COMBAT_EFFECT      = 6,
	STAT_CHANGE_MAX                = 7
};


// Enum EFGame.EFConst.SkillActionType
enum class ESkillActionType : uint8_t
{
	SKILL_ACTION_TYPE_NONE         = 0,
	SKILL_ACTION_TYPE_DEFAULT      = 1,
	SKILL_ACTION_TYPE_MOVING       = 2,
	SKILL_ACTION_TYPE_GETUP        = 3,
	SKILL_ACTION_TYPE_MAX          = 4
};


// Enum EFGame.EFConst.SkillType
enum class ESkillType : uint8_t
{
	SKILL_TYPE_NONE                = 0,
	SKILL_TYPE_NORMAL              = 1,
	SKILL_TYPE_NOMOTION            = 2,
	SKILL_TYPE_CASTING             = 3,
	SKILL_TYPE_CHARGE              = 4,
	SKILL_TYPE_HOLDING             = 5,
	SKILL_TYPE_COMBO               = 6,
	SKILL_TYPE_MOVING              = 7,
	SKILL_TYPE_PUSH                = 8,
	SKILL_TYPE_CIRCULAR            = 9,
	SKILL_TYPE_COMMONACTION        = 10,
	SKILL_TYPE_GETUP               = 11,
	SKILL_TYPE_CHAIN               = 12,
	SKILL_TYPE_MAX                 = 13
};


// Enum EFGame.EFConst.SkillGrade
enum class ESkillGrade : uint8_t
{
	SKILL_GRADE_NORMAL             = 0,
	SKILL_GRADE_AWAKENING          = 1,
	SKILL_GRADE_MAX                = 2
};


// Enum EFGame.EFConst.SkillOrigin
enum class ESkillOrigin : uint8_t
{
	SKILL_ORIGIN_NONE              = 0,
	SKILL_ORIGIN_AUTO              = 1,
	SKILL_ORIGIN_SKILLBOOK         = 2,
	SKILL_ORIGIN_TEMP              = 3,
	SKILL_ORIGIN_LIFESKILL_RESET   = 4,
	SKILL_ORIGIN_ADMIN             = 5,
	SKILL_ORIGIN_JUMPING_MODE      = 6,
	SKILL_ORIGIN_MAX               = 7
};


// Enum EFGame.EFConst.SkillBookAcquireType
enum class ESkillBookAcquireType : uint8_t
{
	SKILL_BOOK_ACQUIRE_TYPE_NONE   = 0,
	SKILL_BOOK_ACQUIRE_TYPE_NORMAL = 1,
	SKILL_BOOK_ACQUIRE_TYPE_AREA   = 2,
	SKILL_BOOK_ACQUIRE_TYPE_CHARGE = 3,
	SKILL_BOOK_ACQUIRE_TYPE_HORDING = 4,
	SKILL_BOOK_ACQUIRE_TYPE_COMBO  = 5,
	SKILL_BOOK_ACQUIRE_TYPE_CHAIN  = 6,
	SKILL_BOOK_ACQUIRE_TYPE_TOGGLE = 7,
	SKILL_BOOK_ACQUIRE_TYPE_COMMONACTION = 8,
	SKILL_BOOK_ACQUIRE_TYPE_SOCIAL = 9,
	SKILL_BOOK_ACQUIRE_TYPE_LIFE   = 10,
	SKILL_BOOK_ACQUIRE_TYPE_CASTING = 11,
	SKILL_BOOK_ACQUIRE_TYPE_AWAKENING = 12,
	SKILL_BOOK_ACQUIRE_TYPE_MAX    = 13
};


// Enum EFGame.EFConst.NpcSkillConditionTarget
enum class ENpcSkillConditionTarget : uint8_t
{
	NPC_SKILL_CONDITION_TARGET_PRIMARY = 0,
	NPC_SKILL_CONDITION_TARGET_ENEMY = 1,
	NPC_SKILL_CONDITION_TARGET_MAX = 2
};


// Enum EFGame.EFConst.SkillRangeType
enum class ESkillRangeType : uint8_t
{
	SKILL_RANGE_TYPE_MELEE         = 0,
	SKILL_RANGE_TYPE_RANGED        = 1,
	SKILL_RANGE_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.SkillBookType
enum class ESkillBookType : uint8_t
{
	SKILL_BOOK_NONE                = 0,
	SKILL_BOOK_ACTIVE              = 1,
	SKILL_BOOK_PASSIVE             = 2,
	SKILL_BOOK_SPECIAL             = 3,
	SKILL_BOOK_IDENTITY            = 4,
	SKILL_BOOK_MAX                 = 5
};


// Enum EFGame.EFConst.SkillTimingBarType
enum class ESkillTimingBarType : uint8_t
{
	SKILL_TIMING_BAR_TYPE_NONE     = 0,
	SKILL_TIMING_BAR_TYPE_READY    = 1,
	SKILL_TIMING_BAR_TYPE_CASTING  = 2,
	SKILL_TIMING_BAR_TYPE_CHARGE   = 3,
	SKILL_TIMING_BAR_TYPE_OVERCHARGE = 4,
	SKILL_TIMING_BAR_TYPE_OVERCHARGE_NEXT = 5,
	SKILL_TIMING_BAR_TYPE_MAX      = 6
};


// Enum EFGame.EFConst.SkillEffectTarget
enum class ESkillEffectTarget : uint8_t
{
	SKILL_EFFECT_TARGET_NONE       = 0,
	SKILL_EFFECT_TARGET_PARTY      = 1,
	SKILL_EFFECT_TARGET_ENEMY      = 2,
	SKILL_EFFECT_TARGET_ALLY       = 3,
	SKILL_EFFECT_TARGET_ALL        = 4,
	SKILL_EFFECT_TARGET_ZONE_PC    = 5,
	SKILL_EFFECT_TARGET_ZONE_OBJECT = 6,
	SKILL_EFFECT_TARGET_MAX        = 7
};


// Enum EFGame.EFConst.SkillEffectType
enum class ESkillEffectType : uint8_t
{
	SKILL_EFFECT_TYPE_NONE         = 0,
	SKILL_EFFECT_TYPE_PHYSICAL_DAMAGE = 1,
	SKILL_EFFECT_TYPE_MAGICAL_DAMAGE = 2,
	SKILL_EFFECT_TYPE_PERCENT_DAMAGE = 3,
	SKILL_EFFECT_TYPE_DAMAGE_DIST  = 4,
	SKILL_EFFECT_TYPE_MAGIC_DAMAGE_DIST = 5,
	SKILL_EFFECT_TYPE_HEAL         = 6,
	SKILL_EFFECT_TYPE_ADD_STATUS_EFFECT = 7,
	SKILL_EFFECT_TYPE_REMOVE_STATUS_EFFECT = 8,
	SKILL_EFFECT_TYPE_REMOVE_STATUS_EFFECT_STACK_LESS = 9,
	SKILL_EFFECT_TYPE_REMOVE_STATUS_EFFECT_STACK_GREATER = 10,
	SKILL_EFFECT_TYPE_DECREASE_STATUS_EFFECT = 11,
	SKILL_EFFECT_TYPE_THROW_PROJECTILE = 12,
	SKILL_EFFECT_TYPE_TELEPORT     = 13,
	SKILL_EFFECT_TYPE_CHAIN_SKILL  = 14,
	SKILL_EFFECT_TYPE_SUMMON_NPC   = 15,
	SKILL_EFFECT_TYPE_SUMMON_TRAP  = 16,
	SKILL_EFFECT_TYPE_APPROACH     = 17,
	SKILL_EFFECT_TYPE_REPLENISH_MP = 18,
	SKILL_EFFECT_TYPE_REPLENISH_HP = 19,
	SKILL_EFFECT_TYPE_ADD_THREAT   = 20,
	SKILL_EFFECT_TYPE_FILL_IDENTITY_GAUGE = 21,
	SKILL_EFFECT_TYPE_ACTIVE_TRAP  = 22,
	SKILL_EFFECT_TYPE_RESET_COOLDOWN = 23,
	SKILL_EFFECT_TYPE_REVIVE_PART  = 24,
	SKILL_EFFECT_TYPE_DESPAWN_TRAP = 25,
	SKILL_EFFECT_TYPE_DISABLE_PROP = 26,
	SKILL_EFFECT_TYPE_SEND_AI_SIGNAL = 27,
	SKILL_EFFECT_TYPE_CHANGE_PROP_STATE = 28,
	SKILL_EFFECT_TYPE_EXPIRE_CHAIN_SKILL = 29,
	SKILL_EFFECT_TYPE_RESET_LIFE_SKILL = 30,
	SKILL_EFFECT_TYPE_CHANGE_NPC_FACTION = 31,
	SKILL_EFFECT_TYPE_SUICIDE      = 32,
	SKILL_EFFECT_TYPE_THROW_PROJECTILE_TARGET = 33,
	SKILL_EFFECT_TYPE_AI_POINT     = 34,
	SKILL_EFFECT_TYPE_ADD_PICKUP_PROP_GAUGE = 35,
	SKILL_EFFECT_TYPE_LIFE_VESSEL  = 36,
	SKILL_EFFECT_TYPE_KILL         = 37,
	SKILL_EFFECT_TYPE_ABNORMAL_MOVE = 38,
	SKILL_EFFECT_TYPE_REMOVE_CARRYING_PROP = 39,
	SKILL_EFFECT_TYPE_CREATE_PART  = 40,
	SKILL_EFFECT_TYPE_DROP_ETHER   = 41,
	SKILL_EFFECT_TYPE_EXEC_SKILL_EFFECT = 42,
	SKILL_EFFECT_TYPE_REPLACE_NPC  = 43,
	SKILL_EFFECT_TYPE_COMMAND_SUMMON_NPC = 44,
	SKILL_EFFECT_TYPE_SUMMON_PROP  = 45,
	SKILL_EFFECT_TYPE_ADD_PROVOKE_RESIST = 46,
	SKILL_EFFECT_TYPE_DESTROY_PARTS = 47,
	SKILL_EFFECT_TYPE_ATTACH_PC    = 48,
	SKILL_EFFECT_TYPE_DETACH_PC    = 49,
	SKILL_EFFECT_TYPE_ADD_SKILL_STACK = 50,
	SKILL_EFFECT_TYPE_DESPAWN_PROP = 51,
	SKILL_EFFECT_TYPE_REVERSE_RUIN_POINT = 52,
	SKILL_EFFECT_TYPE_ADD_STATUS_EFFECT_DURATION = 53,
	SKILL_EFFECT_TYPE_MASS_TELEPORT = 54,
	SKILL_EFFECT_TYPE_PORTAL       = 55,
	SKILL_EFFECT_TYPE_ADD_TARGET_MARKING = 56,
	SKILL_EFFECT_TYPE_REMOVE_TARGET_MARKING = 57,
	SKILL_EFFECT_TYPE_ADD_BATTLE_FIELD_POINT = 58,
	SKILL_EFFECT_TYPE_CHANGE_CONTENTS_GAUGE = 59,
	SKILL_EFFECT_TYPE_THROW_PROJECTILE_POSITION = 60,
	SKILL_EFFECT_TYPE_PARTS_ATTACK = 61,
	SKILL_EFFECT_TYPE_DETECTION_TRAP = 62,
	SKILL_EFFECT_TYPE_CONDITION_INVOKE_EFFECT = 63,
	SKILL_EFFECT_TYPE_FIXED_DAMAGE = 64,
	SKILL_EFFECT_TYPE_ADD_STATUS_EFFECT_EACH = 65,
	SKILL_EFFECT_TYPE_MAX          = 66
};


// Enum EFGame.EFConst.SkillEffectChainType
enum class ESkillEffectChainType : uint8_t
{
	SKILL_EFFECT_CHAIN_TYPE_NONE   = 0,
	SKILL_EFFECT_CHAIN_TYPE_HIT    = 1,
	SKILL_EFFECT_CHAIN_TYPE_CRITICAL_HIT = 2,
	SKILL_EFFECT_CHAIN_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.SkillEffectChainActor
enum class ESkillEffectChainActor : uint8_t
{
	SKILL_EFFECT_CHAIN_ACTOR_NONE  = 0,
	SKILL_EFFECT_CHAIN_ACTOR_SELF  = 1,
	SKILL_EFFECT_CHAIN_ACTOR_TARGET = 2,
	SKILL_EFFECT_CHAIN_ACTOR_MAX   = 3
};


// Enum EFGame.EFConst.SkillEffectFilterActorType
enum class ESkillEffectFilterActorType : uint8_t
{
	SKILL_EFFECT_FILTER_ACTOR_TYPE_ALL = 0,
	SKILL_EFFECT_FILTER_ACTOR_TYPE_NPC = 1,
	SKILL_EFFECT_FILTER_ACTOR_TYPE_PROP = 2,
	SKILL_EFFECT_FILTER_ACTOR_TYPE_PC = 3,
	SKILL_EFFECT_FILTER_ACTOR_TYPE_MAX = 4
};


// Enum EFGame.EFConst.SkillEffectFilterConditionType
enum class ESkillEffectFilterConditionType : uint8_t
{
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NONE = 0,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_HP_LESS = 1,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_HP_GREATER = 2,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NPC_GRADE_LESS = 3,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NPC_GRADE_GREATER = 4,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NPC_SPECIES = 5,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NPC_ATTR = 6,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ABNORMAL_MOVE = 7,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ABNORMAL_STATUS = 8,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_STATUS_EFFECT_ON = 9,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_STATUS_EFFECT_OFF = 10,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_NPC_FROM_MINE = 11,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ATTACHED_PC_ONLY = 12,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ATTACHED_PC_EXCLUDED = 13,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ORIGIN_INSIGHT = 14,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_ORIGIN_OUTSIGHT = 15,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_GEOMETRY_LINE = 16,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_SKILL_ACTION_EXCLUDED = 17,
	SKILL_EFFECT_FILTER_CONDITION_TYPE_MAX = 18
};


// Enum EFGame.EFConst.SkillEffectPushType
enum class ESkillEffectPushType : uint8_t
{
	SKILL_EFFECT_PUSH_TYPE_NORMAL  = 0,
	SKILL_EFFECT_PUSH_TYPE_COLLECT = 1,
	SKILL_EFFECT_PUSH_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.SkillEffectHitDirType
enum class ESkillEffectHitDirType : uint8_t
{
	SKILL_EFFECT_HIT_DIR_TYPE_NONE = 0,
	SKILL_EFFECT_HIT_DIR_TYPE_INSTANT = 1,
	SKILL_EFFECT_HIT_DIR_TYPE_RIGHT_TO_LEFT = 2,
	SKILL_EFFECT_HIT_DIR_TYPE_LEFT_TO_RIGHT = 3,
	SKILL_EFFECT_HIT_DIR_TYPE_TO_FRONT = 4,
	SKILL_EFFECT_HIT_DIR_TYPE_MAX  = 5
};


// Enum EFGame.EFConst.SkillEffectOriginType
enum class ESkillEffectOriginType : uint8_t
{
	SKILL_EFFECT_ORIGIN_TYPE_NONE  = 0,
	SKILL_EFFECT_ORIGIN_TYPE_SKILL = 1,
	SKILL_EFFECT_ORIGIN_TYPE_COMBAT_EFFECT = 2,
	SKILL_EFFECT_ORIGIN_TYPE_CHAIN = 3,
	SKILL_EFFECT_ORIGIN_TYPE_STATUS_EFFECT = 4,
	SKILL_EFFECT_ORIGIN_TYPE_MAX   = 5
};


// Enum EFGame.EFConst.SkillAreaType
enum class ESkillAreaType : uint8_t
{
	SKILL_AREA_TYPE_NONE           = 0,
	SKILL_AREA_TYPE_SPHERE         = 1,
	SKILL_AREA_TYPE_CYLINDER       = 2,
	SKILL_AREA_TYPE_FAN            = 3,
	SKILL_AREA_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.SkillAreaOrigin
enum class ESkillAreaOrigin : uint8_t
{
	SKILL_AREA_ORIGIN_CASTER       = 0,
	SKILL_AREA_ORIGIN_AIM          = 1,
	SKILL_AREA_ORIGIN_MEMORIZED_CASTER = 2,
	SKILL_AREA_ORIGIN_MEMORIZED_AIM = 3,
	SKILL_AREA_ORIGIN_VARIABLE_AIM = 4,
	SKILL_AREA_ORIGIN_RANDOM_AIM   = 5,
	SKILL_AREA_ORIGIN_RANDOM_POS   = 6,
	SKILL_AREA_ORIGIN_ZONE_SPOT    = 7,
	SKILL_AREA_ORIGIN_SKILL_START_POS = 8,
	SKILL_AREA_ORIGIN_VARIABLE_CASTER = 9,
	SKILL_AREA_ORIGIN_MAX          = 10
};


// Enum EFGame.EFConst.SkillAreaAffectDir
enum class ESkillAreaAffectDir : uint8_t
{
	SKILL_AREA_AFFECT_DIR_CASTER_POS = 0,
	SKILL_AREA_AFFECT_DIR_CASTER_DIR = 1,
	SKILL_AREA_AFFECT_DIR_HIT_POS  = 2,
	SKILL_AREA_AFFECT_DIR_CASTER_DIR_EX = 3,
	SKILL_AREA_AFFECT_DIR_TARGET_OPPOSITE_DIR = 4,
	SKILL_AREA_AFFECT_DIR_FIXED_AXIS = 5,
	SKILL_AREA_AFFECT_DIR_MAX      = 6
};


// Enum EFGame.EFConst.SkillTargetSort
enum class ESkillTargetSort : uint8_t
{
	SKILL_TARGET_SORT_NONE         = 0,
	SKILL_TARGET_SORT_RANDOM       = 1,
	SKILL_TARGET_SORT_CLOSEST      = 2,
	SKILL_TARGET_SORT_LOW_HP       = 3,
	SKILL_TARGET_SORT_DEGREE       = 4,
	SKILL_TARGET_SORT_FAR          = 5,
	SKILL_TARGET_SORT_MAX          = 6
};


// Enum EFGame.EFConst.SkillTierType
enum class ESkillTierType : uint8_t
{
	SKILL_TIER_TYPE                = 0,
	SKILL_TIER_TYPE01              = 1,
	SKILL_TIER_TYPE02              = 2,
	SKILL_TIER_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.SkillSelectConditionType
enum class ESkillSelectConditionType : uint8_t
{
	SKILL_SELECT_CONDITION_TYPE_NONE = 0,
	SKILL_SELECT_CONDITION_TYPE_STANCE = 1,
	SKILL_SELECT_CONDITION_TYPE_ABILITY = 2,
	SKILL_SELECT_CONDITION_TYPE_CONNECT = 3,
	SKILL_SELECT_CONDITION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.SkillFeatureApplyTarget
enum class ESkillFeatureApplyTarget : uint8_t
{
	SKILL_FEATURE_APPLY_TARGET_PC  = 0,
	SKILL_FEATURE_APPLY_TARGET_NPC = 1,
	SKILL_FEATURE_APPLY_TARGET_SUMMON_NPC = 2,
	SKILL_FEATURE_APPLY_TARGET_ALL = 3,
	SKILL_FEATURE_APPLY_TARGET_MAX = 4
};


// Enum EFGame.EFConst.SkillFeatureOrigin
enum class ESkillFeatureOrigin : uint8_t
{
	SKILL_FEATURE_ORIGIN_SKILL     = 0,
	SKILL_FEATURE_ORIGIN_ITEM      = 1,
	SKILL_FEATURE_ORIGIN_ADMIN     = 2,
	SKILL_FEATURE_ORIGIN_SKILL_RUNE = 3,
	SKILL_FEATURE_ORIGIN_MAX       = 4
};


// Enum EFGame.EFConst.SkillFeatureType
enum class ESkillFeatureType : uint8_t
{
	SKILL_FEATURE_TYPE_NONE        = 0,
	SKILL_FEATURE_TYPE_ENABLE_NOTIFY = 1,
	SKILL_FEATURE_TYPE_ENABLE_DIR_CHANGE = 2,
	SKILL_FEATURE_TYPE_CHANGE_MOVE_DIST = 3,
	SKILL_FEATURE_TYPE_CHANGE_LAYER = 4,
	SKILL_FEATURE_TYPE_CHANGE_STAGE_SPEED = 5,
	SKILL_FEATURE_TYPE_CHANGE_STAGE_COLLISION = 6,
	SKILL_FEATURE_TYPE_CHANGE_MAX_TARGET = 7,
	SKILL_FEATURE_TYPE_CHANGE_AREA_RANGE = 8,
	SKILL_FEATURE_TYPE_CHANGE_AREA_ANGLE = 9,
	SKILL_FEATURE_TYPE_CHANGE_COST = 10,
	SKILL_FEATURE_TYPE_RECOVER_COST = 11,
	SKILL_FEATURE_TYPE_RECOVER_USED_COST = 12,
	SKILL_FEATURE_TYPE_REDUCE_DEFAULT_COOLDOWN = 13,
	SKILL_FEATURE_TYPE_REDUCE_ACTIVE_COOLDOWN = 14,
	SKILL_FEATURE_TYPE_ENABLE_STAGE_BUFF = 15,
	SKILL_FEATURE_TYPE_ADD_STAGE_BUFF = 16,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_AREA_RANGE = 17,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_DURATION = 18,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_STAT = 19,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_STACK = 20,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_PARAM = 21,
	SKILL_FEATURE_TYPE_CHANGE_BUFF_EXPIRED_ACTION = 22,
	SKILL_FEATURE_TYPE_CHANGE_CHAIN_RATIO = 23,
	SKILL_FEATURE_TYPE_CHANGE_ABNORMAL = 24,
	SKILL_FEATURE_TYPE_CHANGE_ABNORMAL_RATIO = 25,
	SKILL_FEATURE_TYPE_CHANGE_DAM_ATTR = 26,
	SKILL_FEATURE_TYPE_CHANGE_DAM_VALUE = 27,
	SKILL_FEATURE_TYPE_CHANGE_DAM_COEFFICIENT = 28,
	SKILL_FEATURE_TYPE_CHANGE_DAM_CRITICAL = 29,
	SKILL_FEATURE_TYPE_CHANGE_DAM_CRITICAL_RATE = 30,
	SKILL_FEATURE_TYPE_CHANGE_ATTACK_STAGE_SPEED = 31,
	SKILL_FEATURE_TYPE_CHANGE_STACK_CHARGE_TIME = 32,
	SKILL_FEATURE_TYPE_CHANGE_STACK_MAX_COUNT = 33,
	SKILL_FEATURE_TYPE_CHANGE_TARGETING = 34,
	SKILL_FEATURE_TYPE_CHANGE_MIN_RANGE = 35,
	SKILL_FEATURE_TYPE_CHANGE_MAX_RANGE = 36,
	SKILL_FEATURE_TYPE_CHANGE_PUSH_INFO = 37,
	SKILL_FEATURE_TYPE_CHANGE_PARTS_ATTACK_ATTR = 38,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_CHAIN_INFO = 39,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_CHAIN_DELAY = 40,
	SKILL_FEATURE_TYPE_CHANGE_BEHIT_MOVE_INFO = 41,
	SKILL_FEATURE_TYPE_ADD_BUFF_STAT = 42,
	SKILL_FEATURE_TYPE_ADD_CHAIN_SKILL_EFFECT = 43,
	SKILL_FEATURE_TYPE_REMOVE_CHAIN_SKILL_EFFECT = 44,
	SKILL_FEATURE_TYPE_ADD_CHAIN_COMBAT_EFFECT = 45,
	SKILL_FEATURE_TYPE_REMOVE_CHAIN_COMBAT_EFFECT = 46,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_BONUS = 47,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_AI_POINT = 48,
	SKILL_FEATURE_TYPE_CHANGE_DAM_ADDEND = 49,
	SKILL_FEATURE_TYPE_CHANGE_HITTED = 50,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_MOVE_SPEED = 51,
	SKILL_FEATURE_TYPE_ADD_SKILL_BUFF = 52,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_BONUS = 53,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_NORMAL_INFO = 54,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_INVISIBILITY = 55,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_CONSTRAINT = 56,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_BOOK_TYPE = 57,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTION_SKILL_EFFECT_ID = 58,
	SKILL_FEATURE_TYPE_CHANGE_PUSH_PVP_INFO = 59,
	SKILL_FEATURE_TYPE_CHANGE_FORCED_CRITICAL = 60,
	SKILL_FEATURE_TYPE_CHANGE_INSTANCE_SKILL_EFFECT_INFO = 61,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_START_STAGE = 62,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_DIR_TARGET = 63,
	SKILL_FEATURE_TYPE_CHANGE_STAGE_DIR_RATE = 64,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTION = 65,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_VIEW = 66,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTILE_SPEED = 67,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTILE_DIST = 68,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTILE_RESOURCESCALE = 69,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTILE_MAX_TARGET_HIT_COUNT = 70,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_TRAP_LIFETIME = 71,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_TRAP_DESTROY_DELAYTIME = 72,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_TRAP_REACT_INFO = 73,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_TRAP_INVOKE_EFFECT = 74,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_TRAP_COUNT = 75,
	SKILL_FEATURE_TYPE_ENABLE_IDENTITY_EVENT = 76,
	SKILL_FEATURE_TYPE_CHANGE_IDENTITY_PROC_VALUE = 77,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_IDENTITY_PROC_INFO = 78,
	SKILL_FEATURE_TYPE_CHANGE_IDENTITY_PROC_PVP_VALUE = 79,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_IDENTITY_PROC_PVP_INFO = 80,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_IDENTITY_PROC_REPLACE_INFO = 81,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_IDENTITY_PROC_REPLACE_PVP_INFO = 82,
	SKILL_FEATURE_TYPE_SWAP_CHAIN_SKILL_EFFECT = 83,
	SKILL_FEATURE_TYPE_SWAP_CHAIN_COMBAT_EFFECT = 84,
	SKILL_FEATURE_TYPE_CHANGE_CHARGE_SCALE = 85,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_ID = 86,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_SIGHT_RANGE = 87,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_PURSUIT_RANGE = 88,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_WALK_MOVESPEED = 89,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_BATTLE_MOVESPEED = 90,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_LIFE_TIME = 91,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_AI_INDEX = 92,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_INVINCIBLE_DURATION = 93,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_ACQUIRE_IDENTITY = 94,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_SKILL_ID = 95,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_DIE_SKILL_ID = 96,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_DESTROY_SKILL_ID = 97,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_SPAWN_BUFF_ID = 98,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_COUNT = 99,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_STAT = 100,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_THREAT_POINT = 101,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_SKILL_USABLE_TICK = 102,
	SKILL_FEATURE_TYPE_CHANGE_SUMMON_NPC_SKILL_USE_ORDER = 103,
	SKILL_FEATURE_TYPE_CHANGE_COMBAT_EFFECT_ARG = 104,
	SKILL_FEATURE_TYPE_CHANGE_SKILL_EFFECT_COST = 105,
	SKILL_FEATURE_TYPE_CHANGE_ACCUMULATE_DAM_RATE = 106,
	SKILL_FEATURE_TYPE_CHANGE_PROJECTILE_BANK_DATA_ADDEND = 107,
	SKILL_FEATURE_TYPE_MAX         = 108
};


// Enum EFGame.EFConst.SkillConstraintType
enum class ESkillConstraintType : uint8_t
{
	SKILL_CONSTRAINT_TYPE_NONE     = 0,
	SKILL_CONSTRAINT_TYPE_MP       = 1,
	SKILL_CONSTRAINT_TYPE_MP_PERCENT = 2,
	SKILL_CONSTRAINT_TYPE_HP       = 3,
	SKILL_CONSTRAINT_TYPE_HP_PERCENT = 4,
	SKILL_CONSTRAINT_TYPE_STATUS_EFFECT_ON = 5,
	SKILL_CONSTRAINT_TYPE_STATUS_EFFECT_OFF = 6,
	SKILL_CONSTRAINT_TYPE_IDENTITY_STANCE = 7,
	SKILL_CONSTRAINT_TYPE_IDENTITY_GAUGE0_LESS = 8,
	SKILL_CONSTRAINT_TYPE_IDENTITY_GAUGE0_GREATER = 9,
	SKILL_CONSTRAINT_TYPE_IDENTITY_GAUGE1_LESS = 10,
	SKILL_CONSTRAINT_TYPE_IDENTITY_GAUGE1_GREATER = 11,
	SKILL_CONSTRAINT_TYPE_WEAPON   = 12,
	SKILL_CONSTRAINT_TYPE_DURABILITY = 13,
	SKILL_CONSTRAINT_TYPE_LIFE_TOOL = 14,
	SKILL_CONSTRAINT_TYPE_PROP_GAUGE_GREATER = 15,
	SKILL_CONSTRAINT_TYPE_ITEM     = 16,
	SKILL_CONSTRAINT_TYPE_IN_VOLUME = 17,
	SKILL_CONSTRAINT_TYPE_BOOST_GAUGE_GREATER = 18,
	SKILL_CONSTRAINT_TYPE_TRAP_INPUT_RANGE = 19,
	SKILL_CONSTRAINT_TYPE_SUMMONED_USE_SKILL = 20,
	SKILL_CONSTRAINT_TYPE_ABILITY_FEATURE_ENABLED = 21,
	SKILL_CONSTRAINT_TYPE_VEHICLE_RESOURCE = 22,
	SKILL_CONSTRAINT_TYPE_SUMMONED_COMMAND_SKILL = 23,
	SKILL_CONSTRAINT_TYPE_MARKING_TARGET_DIST = 24,
	SKILL_CONSTRAINT_TYPE_MAX      = 25
};


// Enum EFGame.EFConst.SkillIgnoreFreezeLevel
enum class ESkillIgnoreFreezeLevel : uint8_t
{
	SKILL_IGNORE_FREEZE_LEVEL_NONE = 0,
	SKILL_IGNORE_FREEZE_LEVEL_WEAK = 1,
	SKILL_IGNORE_FREEZE_LEVEL_STRONG = 2,
	SKILL_IGNORE_FREEZE_LEVEL_GROGGY = 3,
	SKILL_IGNORE_FREEZE_LEVEL_MAX  = 4
};


// Enum EFGame.EFConst.StagePerRewardConditionCategory
enum class EStagePerRewardConditionCategory : uint8_t
{
	STAGE_PER_REWARD_CONDITION_CATEGORY_NONE = 0,
	STAGE_PER_REWARD_CONDITION_CATEGORY_CLEAR = 1,
	STAGE_PER_REWARD_CONDITION_CATEGORY_FAIL = 2,
	STAGE_PER_REWARD_CONDITION_CATEGORY_START_IMMEDIATELY = 3,
	STAGE_PER_REWARD_CONDITION_CATEGORY_MAX = 4
};


// Enum EFGame.EFConst.StagePerRewardCondition
enum class EStagePerRewardCondition : uint8_t
{
	STAGE_PER_REWARD_CONDITION_NONE = 0,
	STAGE_PER_REWARD_CONDITION_NPC_DESPAWN = 1,
	STAGE_PER_REWARD_CONDITION_NPC_KILLED = 2,
	STAGE_PER_REWARD_CONDITION_CLEAR_TIME = 3,
	STAGE_PER_REWARD_CONDITION_SCORE_TIME_OUT = 4,
	STAGE_PER_REWARD_CONDITION_NPC_START_SKILL = 5,
	STAGE_PER_REWARD_CONDITION_NPC_FINISH_SKILL = 6,
	STAGE_PER_REWARD_CONDITION_QUEST_STAGE = 7,
	STAGE_PER_REWARD_CONDITION_START_BOSS_BATTLE = 8,
	STAGE_PER_REWARD_CONDITION_END_BOSS_BATTLE = 9,
	STAGE_PER_REWARD_CONDITION_MAX = 10
};


// Enum EFGame.EFConst.StagePerRewardFinish
enum class EStagePerRewardFinish : uint8_t
{
	STAGE_PER_REWARD_FINISH_NOT_YET = 0,
	STAGE_PER_REWARD_FINISH_PARTLY_CLEAR = 1,
	STAGE_PER_REWARD_FINISH_FULL_CLEAR = 2,
	STAGE_PER_REWARD_FINISH_MAX    = 3
};


// Enum EFGame.EFConst.RaidVoteType
enum class ERaidVoteType : uint8_t
{
	RAID_VOTE_TYPE_GIVE_UP         = 0,
	RAID_VOTE_TYPE_RECEIEVE_PARTLY_REWARD = 1,
	RAID_VOTE_TYPE_SYSTEM_PARTLY_REWARD = 2,
	RAID_VOTE_TYPE_SYSTEM_DISABLE  = 3,
	RAID_VOTE_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.StatusEffectAddOrigin
enum class EStatusEffectAddOrigin : uint8_t
{
	STATUS_EFFECT_ADD_NORMAL       = 0,
	STATUS_EFFECT_ADD_PASSIVE      = 1,
	STATUS_EFFECT_ADD_PET          = 2,
	STATUS_EFFECT_ADD_CONTENTS_BUFF = 3,
	STATUS_EFFECT_ADD_CONTENTS_GAUGE = 4,
	STATUS_EFFECT_ADD_MAX          = 5
};


// Enum EFGame.EFConst.StatusEffectApplyCategory
enum class EStatusEffectApplyCategory : uint8_t
{
	STATUS_EFFECT_APPLY_CATEGORY_NORMAL = 0,
	STATUS_EFFECT_APPLY_CATEGORY_CLASS = 1,
	STATUS_EFFECT_APPLY_CATEGORY_FOOD = 2,
	STATUS_EFFECT_APPLY_CATEGORY_ITEM = 3,
	STATUS_EFFECT_APPLY_CATEGORY_VOYAGE = 4,
	STATUS_EFFECT_APPLY_CATEGORY_BATTLE_FIELD_NORMAL = 5,
	STATUS_EFFECT_APPLY_CATEGORY_BATTLE_COLOSSEUM = 6,
	STATUS_EFFECT_APPLY_CATEGORY_REVERSE_RUIN = 7,
	STATUS_EFFECT_APPLY_CATEGORY_PET = 8,
	STATUS_EFFECT_APPLY_CATEGORY_MAX = 9
};


// Enum EFGame.EFConst.StatusEffectZoneKeepType
enum class EStatusEffectZoneKeepType : uint8_t
{
	STATUS_EFFECT_ZONE_KEEP_TYPE_NORMAL = 0,
	STATUS_EFFECT_ZONE_KEEP_TYPE_STOP_HIDE = 1,
	STATUS_EFFECT_ZONE_KEEP_TYPE_STOP_GRAY = 2,
	STATUS_EFFECT_ZONE_KEEP_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectCategory
enum class EStatusEffectCategory : uint8_t
{
	STATUS_EFFECT_CATEGORY_BUFF    = 0,
	STATUS_EFFECT_CATEGORY_DEBUFF  = 1,
	STATUS_EFFECT_CATEGORY_MAX     = 2
};


// Enum EFGame.EFConst.StatusEffectSubCategory
enum class EStatusEffectSubCategory : uint8_t
{
	STATUS_EFFECT_SUB_CATEGORY_NONE = 0,
	STATUS_EFFECT_SUB_CATEGORY_MAGIC = 1,
	STATUS_EFFECT_SUB_CATEGORY_POISON = 2,
	STATUS_EFFECT_SUB_CATEGORY_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectType
enum class EStatusEffectType : uint8_t
{
	STATUS_EFFECT_TYPE_NONE        = 0,
	STATUS_EFFECT_TYPE_PHYSICAL_DAMAGE = 1,
	STATUS_EFFECT_TYPE_MAGICAL_DAMAGE = 2,
	STATUS_EFFECT_TYPE_HEAL        = 3,
	STATUS_EFFECT_TYPE_FREEZE      = 4,
	STATUS_EFFECT_TYPE_STONE       = 5,
	STATUS_EFFECT_TYPE_FEAR        = 6,
	STATUS_EFFECT_TYPE_STUN        = 7,
	STATUS_EFFECT_TYPE_SLEEP       = 8,
	STATUS_EFFECT_TYPE_EARTHQUAKE  = 9,
	STATUS_EFFECT_TYPE_CURSE       = 10,
	STATUS_EFFECT_TYPE_WEAKEN_DEFENSE = 11,
	STATUS_EFFECT_TYPE_WEAKEN_RESISTANCE = 12,
	STATUS_EFFECT_TYPE_DEATH_SENTENCE = 13,
	STATUS_EFFECT_TYPE_SILENCE     = 14,
	STATUS_EFFECT_TYPE_DARKNESS    = 15,
	STATUS_EFFECT_TYPE_VERMIN      = 16,
	STATUS_EFFECT_TYPE_BLEEDING    = 17,
	STATUS_EFFECT_TYPE_POISONING   = 18,
	STATUS_EFFECT_TYPE_ELECTROCUTION = 19,
	STATUS_EFFECT_TYPE_BURN        = 20,
	STATUS_EFFECT_TYPE_MOVE_SPEED_DOWN = 21,
	STATUS_EFFECT_TYPE_ALL_SPEED_DOWN = 22,
	STATUS_EFFECT_TYPE_INVINCIBILITY = 23,
	STATUS_EFFECT_TYPE_SHIELD      = 24,
	STATUS_EFFECT_TYPE_REPLENISH_MP = 25,
	STATUS_EFFECT_TYPE_REPLENISH_MP_RATE = 26,
	STATUS_EFFECT_TYPE_ABSORB_AREA = 27,
	STATUS_EFFECT_TYPE_SKILL_DAMAGE_AMPLIFY = 28,
	STATUS_EFFECT_TYPE_MINION_EVENT = 29,
	STATUS_EFFECT_TYPE_CHANGE_HIT_FLAG = 30,
	STATUS_EFFECT_TYPE_IDENTITY_GAUGE = 31,
	STATUS_EFFECT_TYPE_BEATTACKED_DAMAGE_AMPLIFY = 32,
	STATUS_EFFECT_TYPE_POLYMORPH_PC = 33,
	STATUS_EFFECT_TYPE_SUPER_ARMOR = 34,
	STATUS_EFFECT_TYPE_INVOKE_SKILL_EFFECT = 35,
	STATUS_EFFECT_TYPE_FORCED_MOVE = 36,
	STATUS_EFFECT_TYPE_CONFINEMENT = 37,
	STATUS_EFFECT_TYPE_ACTION_DISABLE = 38,
	STATUS_EFFECT_TYPE_HERBALISM_INSTANT_DURABILITY_IGNORE = 39,
	STATUS_EFFECT_TYPE_MINING_ADD_CASTING_SPEED = 40,
	STATUS_EFFECT_TYPE_WOUND       = 41,
	STATUS_EFFECT_TYPE_WILD_GROWTH = 42,
	STATUS_EFFECT_TYPE_NEAR_DEATH_EXPERIENCE = 43,
	STATUS_EFFECT_TYPE_CHANGE_FACTION = 44,
	STATUS_EFFECT_TYPE_NPC_PART_INVINCIBILITY = 45,
	STATUS_EFFECT_TYPE_LUMBERING_SHARPEN = 46,
	STATUS_EFFECT_TYPE_DISGUISE    = 47,
	STATUS_EFFECT_TYPE_BECHASED_NPC = 48,
	STATUS_EFFECT_TYPE_FISHING_SCHOOL = 49,
	STATUS_EFFECT_TYPE_HERBALISM_LIFE_ETHER = 50,
	STATUS_EFFECT_TYPE_HERBALISM_DELICATE_HANDS = 51,
	STATUS_EFFECT_TYPE_SHIP_BOOST_GAUGE = 52,
	STATUS_EFFECT_TYPE_HUNTING_CHASE = 53,
	STATUS_EFFECT_TYPE_ARCHEOLOGY_DETECTION = 54,
	STATUS_EFFECT_TYPE_ARCHEOLOGY_CONECTRATION = 55,
	STATUS_EFFECT_TYPE_ARCHEOLOGY_SENSE_OF_TOMBRAIDER = 56,
	STATUS_EFFECT_TYPE_RESET_COOLDOWN = 57,
	STATUS_EFFECT_TYPE_PROVOKE     = 58,
	STATUS_EFFECT_TYPE_GHOST       = 59,
	STATUS_EFFECT_TYPE_LUMBERING_FIND_TREE = 60,
	STATUS_EFFECT_TYPE_LIFE_CASTING_SPEED = 61,
	STATUS_EFFECT_TYPE_LIFE_TOOL_DESTROY_RATE = 62,
	STATUS_EFFECT_TYPE_PROTECT     = 63,
	STATUS_EFFECT_TYPE_PART_CORROSION = 64,
	STATUS_EFFECT_TYPE_VOYAGE_SUPPLY_ACCELERATE = 65,
	STATUS_EFFECT_TYPE_VOYAGE_SUPPLY_FLUCTUATE = 66,
	STATUS_EFFECT_TYPE_VOYAGE_ACTION_DISABLE = 67,
	STATUS_EFFECT_TYPE_VOYAGE_BOOST_GAUGE_UNOBTAINABLE = 68,
	STATUS_EFFECT_TYPE_VOYAGE_IMMUNE_EVENT = 69,
	STATUS_EFFECT_TYPE_SKILL_DAMAGE_AMPLIFY_ATTACK = 70,
	STATUS_EFFECT_TYPE_VOYAGE_ADD_EVENT_GAUGE = 71,
	STATUS_EFFECT_TYPE_PROVOKE_RESIST = 72,
	STATUS_EFFECT_TYPE_IGNITE      = 73,
	STATUS_EFFECT_TYPE_HERBALISM_VITALITY_ETHER = 74,
	STATUS_EFFECT_TYPE_HERBALISM_GOLDEN_FINGER = 75,
	STATUS_EFFECT_TYPE_LIFE_ADD_SUCCESS_RATE = 76,
	STATUS_EFFECT_TYPE_IGNORE_IMMUNE = 77,
	STATUS_EFFECT_TYPE_FIXED_DAMAGE_SELF = 78,
	STATUS_EFFECT_TYPE_VOYAGE_BOOST_GAUGE_FLUCTUATE = 79,
	STATUS_EFFECT_TYPE_CHANGE_AI_POINT = 80,
	STATUS_EFFECT_TYPE_AURA        = 81,
	STATUS_EFFECT_TYPE_LIFE_PLUS_SUCCESS_RATE = 82,
	STATUS_EFFECT_TYPE_LIFE_MULTIPLY_SUCCESS_RATE = 83,
	STATUS_EFFECT_TYPE_FISHING_BARE_HANDS = 84,
	STATUS_EFFECT_TYPE_FISHING_CAST_BAIT = 85,
	STATUS_EFFECT_TYPE_COLLISION_DISABLE = 86,
	STATUS_EFFECT_TYPE_BACK_ATTACK_AMPLIFY = 87,
	STATUS_EFFECT_TYPE_INSTANT_STAT_AMPLIFY = 88,
	STATUS_EFFECT_TYPE_SHIP_WRECK  = 89,
	STATUS_EFFECT_TYPE_BURN_MP     = 90,
	STATUS_EFFECT_TYPE_VOYAGE_LUCK_RECOVERY_INCREMENT = 91,
	STATUS_EFFECT_TYPE_AI_POINT_AMPLIFY = 92,
	STATUS_EFFECT_TYPE_LIFE_MULTIPLY_EXP_RATE = 93,
	STATUS_EFFECT_TYPE_PVP_TOKEN_REWARD_INCREASE_PERCENT = 94,
	STATUS_EFFECT_TYPE_VOYAGE_LUCK_DROP_AMPLIFY = 95,
	STATUS_EFFECT_TYPE_INCREASE_IDENTITY_GAUGE = 96,
	STATUS_EFFECT_TYPE_PC_STAT_MIN_MAX_FIX = 97,
	STATUS_EFFECT_TYPE_REVERSE_RUIN_DROP_INCREASE_PERCENT = 98,
	STATUS_EFFECT_TYPE_NOTICE_GAUGE = 99,
	STATUS_EFFECT_TYPE_BACK_ATTACK_RESIST = 100,
	STATUS_EFFECT_TYPE_DIRECTIONAL_ATTACK_AMPLIFY = 101,
	STATUS_EFFECT_TYPE_HUNTING_OBSERVE = 102,
	STATUS_EFFECT_TYPE_NOTE_KEY_INPUT = 103,
	STATUS_EFFECT_TYPE_ATTACK_POWER_AMPLIFY = 104,
	STATUS_EFFECT_TYPE_TIME_STOP   = 105,
	STATUS_EFFECT_TYPE_PHEROMONE   = 106,
	STATUS_EFFECT_TYPE_LIFE_DROP_ADD_RATE = 107,
	STATUS_EFFECT_TYPE_LIFE_DURABILITY_RATE = 108,
	STATUS_EFFECT_TYPE_INSTANT_STAT_AMPLIFY_BY_CONTENTS = 109,
	STATUS_EFFECT_TYPE_VOYAGE_PAUSE_EVENT = 110,
	STATUS_EFFECT_TYPE_LIFE_EXP_ADD_RATE = 111,
	STATUS_EFFECT_TYPE_REVERSE_RUIN_ADD_EXP_RATE = 112,
	STATUS_EFFECT_TYPE_LINKABLE_INVOKE_EFFECT = 113,
	STATUS_EFFECT_TYPE_BULLET_TIME = 114,
	STATUS_EFFECT_TYPE_REFLECT_DAMAGE = 115,
	STATUS_EFFECT_TYPE_REVERSE     = 116,
	STATUS_EFFECT_TYPE_DETECT      = 117,
	STATUS_EFFECT_TYPE_MAP_SYMBOL  = 118,
	STATUS_EFFECT_TYPE_MAP_SYMBOL_HIDE = 119,
	STATUS_EFFECT_TYPE_FORCE_FIELD = 120,
	STATUS_EFFECT_TYPE_MIND_CONTROL = 121,
	STATUS_EFFECT_TYPE_HIDE_TARGET_UI = 122,
	STATUS_EFFECT_TYPE_MASKING     = 123,
	STATUS_EFFECT_TYPE_MANA_SHIELD = 124,
	STATUS_EFFECT_TYPE_DETECTED_BUSH = 125,
	STATUS_EFFECT_TYPE_PARALYZATION = 126,
	STATUS_EFFECT_TYPE_CONFUSION   = 127,
	STATUS_EFFECT_TYPE_CHANGE_MATERIAL = 128,
	STATUS_EFFECT_TYPE_LINKED_TARGET_INVOKE = 129,
	STATUS_EFFECT_TYPE_MAX         = 130
};


// Enum EFGame.EFConst.StatusEffectExpiredReasonType
enum class EStatusEffectExpiredReasonType : uint8_t
{
	STATUS_EFFECT_EXPIRED_REASON_NONE = 0,
	STATUS_EFFECT_EXPIRED_REASON_CANCEL = 1,
	STATUS_EFFECT_EXPIRED_REASON_STACK_COUNT = 2,
	STATUS_EFFECT_EXPIRED_REASON_LIFETIME = 3,
	STATUS_EFFECT_EXPIRED_REASON_BEATTACKED = 4,
	STATUS_EFFECT_EXPIRED_REASON_LEAVE_ZONE = 5,
	STATUS_EFFECT_EXPIRED_REASON_KEEP_ZONE = 6,
	STATUS_EFFECT_EXPIRED_REASON_DEATH = 7,
	STATUS_EFFECT_EXPIRED_REASON_ATTACK_COUNT = 8,
	STATUS_EFFECT_EXPIRED_REASON_BEHIT_COUNT = 9,
	STATUS_EFFECT_EXPIRED_REASON_UNSUMMON = 10,
	STATUS_EFFECT_EXPIRED_REASON_SKILL_USED = 11,
	STATUS_EFFECT_EXPIRED_REASON_CINEMATIC = 12,
	STATUS_EFFECT_EXPIRED_REASON_PARALYZATION = 13,
	STATUS_EFFECT_EXPIRED_REASON_PORT_LEAVE = 14,
	STATUS_EFFECT_EXPIRED_REASON_REVIVE = 15,
	STATUS_EFFECT_EXPIRED_REASON_INVALID_CONDITION = 16,
	STATUS_EFFECT_EXPIRED_REASON_CASTER_DISAPPEAR = 17,
	STATUS_EFFECT_EXPIRED_REASON_SKILL_FINISHED = 18,
	STATUS_EFFECT_EXPIRED_REASON_ITEM_EQUIP = 19,
	STATUS_EFFECT_EXPIRED_REASON_MAX = 20
};


// Enum EFGame.EFConst.StatusEffectUniqueDecision
enum class EStatusEffectUniqueDecision : uint8_t
{
	STATUS_EFFECT_UNIQUE_DECISION_NONE = 0,
	STATUS_EFFECT_UNIQUE_DECISION_SAME_CASTER = 1,
	STATUS_EFFECT_UNIQUE_DECISION_NONE_CASTER = 2,
	STATUS_EFFECT_UNIQUE_DECISION_SAME_MASTER = 3,
	STATUS_EFFECT_UNIQUE_DECISION_SAME_CASTER_CONSTRAIN = 4,
	STATUS_EFFECT_UNIQUE_DECISION_SAME_CASTER_EACH = 5,
	STATUS_EFFECT_UNIQUE_DECISION_SAME_PARTY = 6,
	STATUS_EFFECT_UNIQUE_DECISION_EACH_ALWAYS = 7,
	STATUS_EFFECT_UNIQUE_DECISION_MAX = 8
};


// Enum EFGame.EFConst.StatusEffectGroupReplace
enum class EStatusEffectGroupReplace : uint8_t
{
	STATUS_EFFECT_GROUP_REPLACE_LEVEL = 0,
	STATUS_EFFECT_GROUP_REPLACE_DURATION = 1,
	STATUS_EFFECT_GROUP_REPLACE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectSyncType
enum class EStatusEffectSyncType : uint8_t
{
	STATUS_EFFECT_SYNC_TYPE_NONE   = 0,
	STATUS_EFFECT_SYNC_TYPE_PARTY  = 1,
	STATUS_EFFECT_SYNC_TYPE_ALL    = 2,
	STATUS_EFFECT_SYNC_TYPE_CASTER_AND_TARGET = 3,
	STATUS_EFFECT_SYNC_TYPE_FRIENDLY = 4,
	STATUS_EFFECT_SYNC_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.StatusEffectZoneResetType
enum class EStatusEffectZoneResetType : uint8_t
{
	STATUS_EFFECT_ZONE_RESET_TYPE_REMOVE = 0,
	STATUS_EFFECT_ZONE_RESET_TYPE_KEEP = 1,
	STATUS_EFFECT_ZONE_RESET_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectAffinityType
enum class EStatusEffectAffinityType : uint8_t
{
	STATUS_EFFECT_AFFINITY_TYPE_ALL_WITHOUT_SELF = 0,
	STATUS_EFFECT_AFFINITY_TYPE_ALLY_WITHOUT_SELF = 1,
	STATUS_EFFECT_AFFINITY_TYPE_ENEMY = 2,
	STATUS_EFFECT_AFFINITY_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectDestroyType
enum class EStatusEffectDestroyType : uint8_t
{
	STATUS_EFFECT_DESTROY_TYPE_DAMAGE = 0,
	STATUS_EFFECT_DESTROY_TYPE_HIT = 1,
	STATUS_EFFECT_DESTROY_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectDisguiseTransparentType
enum class EStatusEffectDisguiseTransparentType : uint8_t
{
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_NONE = 0,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_FACTION = 1,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_DEACTIVATE_DURING_ACTION = 2,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_HIDDEN = 3,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_TRANSLUCENCE = 4,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_HIDDEN_BY_RANGE = 5,
	STATUS_EFFECT_DISGUISE_TRANSPARENT_TYPE_MAX = 6
};


// Enum EFGame.EFConst.StatusEffectTargetCheckType
enum class EStatusEffectTargetCheckType : uint8_t
{
	STATUS_EFFECT_TARGET_CHECK_TYPE_SELF = 0,
	STATUS_EFFECT_TARGET_CHECK_TYPE_PARIMARY = 1,
	STATUS_EFFECT_TARGET_CHECK_TYPE_MAX = 2
};


// Enum EFGame.EFConst.SummonPositionType
enum class ESummonPositionType : uint8_t
{
	SUMMON_POSITION_TYPE_NONE      = 0,
	SUMMON_POSITION_TYPE_PC        = 1,
	SUMMON_POSITION_TYPE_CONTEXT   = 2,
	SUMMON_POSITION_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.SummonType
enum class ESummonType : uint8_t
{
	SUMMON_TYPE_NPC_BASE_LEVEL     = 0,
	SUMMON_TYPE_MASTER_LEVEL       = 1,
	SUMMON_TYPE_MAX                = 2
};


// Enum EFGame.EFConst.SummonedNpcCommandType
enum class ESummonedNpcCommandType : uint8_t
{
	SUMMONED_NPC_COMMAND_TYPE_NONE = 0,
	SUMMONED_NPC_COMMAND_TYPE_MOVE = 1,
	SUMMONED_NPC_COMMAND_TYPE_MOVE_OR_TARGET = 2,
	SUMMONED_NPC_COMMAND_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.SummonedNpcMoveType
enum class ESummonedNpcMoveType : uint8_t
{
	SUMMONED_NPC_MOVE_TYPE_FOLLOW  = 0,
	SUMMONED_NPC_MOVE_TYPE_ATTACH  = 1,
	SUMMONED_NPC_MOVE_TYPE_COMMAND = 2,
	SUMMONED_NPC_MOVE_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.SummonedNpcBattleMoveType
enum class ESummonedNpcBattleMoveType : uint8_t
{
	SUMMONED_NPC_BATTLE_MOVE_TYPE_TRACE = 0,
	SUMMONED_NPC_BATTLE_MOVE_TYPE_PLACE = 1,
	SUMMONED_NPC_BATTLE_MOVE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.SuperArmorType
enum class ESuperArmorType : uint8_t
{
	SUPER_ARMOR_TYPE_NONE          = 0,
	SUPER_ARMOR_TYPE_NORMAL        = 1,
	SUPER_ARMOR_TYPE_INVINCIBLE    = 2,
	SUPER_ARMOR_TYPE_SPECIAL       = 3,
	SUPER_ARMOR_TYPE_ABNORMAL_STATUS = 4,
	SUPER_ARMOR_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.SpawnObjectType
enum class ESpawnObjectType : uint8_t
{
	SPAWN_OBJECT_TYPE_NPC          = 0,
	SPAWN_OBJECT_TYPE_PROP         = 1,
	SPAWN_OBJECT_TYPE_VEHICLE      = 2,
	SPAWN_OBJECT_TYPE_TRANSPORTER  = 3,
	SPAWN_OBJECT_TYPE_CHAOS_GATE   = 4,
	SPAWN_OBJECT_TYPE_TRAP         = 5,
	SPAWN_OBJECT_TYPE_TOWER        = 6,
	SPAWN_OBJECT_TYPE_MAX          = 7
};


// Enum EFGame.EFConst.SpotSpawnGroupType
enum class ESpotSpawnGroupType : uint8_t
{
	SPOT_SPAWN_GROUP_TYPE_FIXED    = 0,
	SPOT_SPAWN_GROUP_TYPE_DICE     = 1,
	SPOT_SPAWN_GROUP_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.SpotSpawnObjectType
enum class ESpotSpawnObjectType : uint8_t
{
	SPOT_SPAWN_OBJECT_TYPE_NONE    = 0,
	SPOT_SPAWN_OBJECT_TYPE_NPC     = 1,
	SPOT_SPAWN_OBJECT_TYPE_PROP    = 2,
	SPOT_SPAWN_OBJECT_TYPE_TRAP    = 3,
	SPOT_SPAWN_OBJECT_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.SpawnRotationType
enum class ESpawnRotationType : uint8_t
{
	SPAWN_ROTATION_TYPE_RANDOM     = 0,
	SPAWN_ROTATION_TYPE_SPOT       = 1,
	SPAWN_ROTATION_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.ShipType
enum class EShipType : uint8_t
{
	SHIP_TYPE_NONE                 = 0,
	SHIP_TYPE_PIRATE               = 1,
	SHIP_TYPE_WHITEWIND            = 2,
	SHIP_TYPE_ESTOC                = 3,
	SHIP_TYPE_ICEBREAKER           = 4,
	SHIP_TYPE_GHOST                = 5,
	SHIP_TYPE_MULTI                = 6,
	SHIP_TYPE_STEEL                = 7,
	SHIP_TYPE_SLOOP                = 8,
	SHIP_TYPE_MAX                  = 9
};


// Enum EFGame.EFConst.ShipAvatarDurationType
enum class EShipAvatarDurationType : uint8_t
{
	SHIP_AVATAR_DURATION_TYPE_NONE = 0,
	SHIP_AVATAR_DURATION_TYPE_RELATIVE = 1,
	SHIP_AVATAR_DURATION_TYPE_ABSOLUTE = 2,
	SHIP_AVATAR_DURATION_TYPE_PC_ROOM = 3,
	SHIP_AVATAR_DURATION_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.ShipAvatarChangeReason
enum class EShipAvatarChangeReason : uint8_t
{
	SHIP_AVATAR_CHANGE_REASON_NONE = 0,
	SHIP_AVATAR_CHANGE_REASON_ADD  = 1,
	SHIP_AVATAR_CHANGE_REASON_TOLERANCE = 2,
	SHIP_AVATAR_CHANGE_REASON_MAX  = 3
};


// Enum EFGame.EFConst.SailAcquireType
enum class ESailAcquireType : uint8_t
{
	SAIL_ACQUIRE_TYPE_AUTO         = 0,
	SAIL_ACQUIRE_TYPE_REWARD       = 1,
	SAIL_ACQUIRE_TYPE_MAX          = 2
};


// Enum EFGame.EFConst.ShipAnchorState
enum class EShipAnchorState : uint8_t
{
	SHIP_ANCHOR_STATE_PULLED       = 0,
	SHIP_ANCHOR_STATE_DROPPED      = 1,
	SHIP_ANCHOR_STATE_STOPPED      = 2,
	SHIP_ANCHOR_STATE_MAX          = 3
};


// Enum EFGame.EFConst.ShipControlType
enum class EShipControlType : uint8_t
{
	SHIP_CONTROL_TYPE_WHISTLE      = 0,
	SHIP_CONTROL_TYPE_MAX          = 1
};


// Enum EFGame.EFConst.ShipTier
enum class EShipTier : uint8_t
{
	SHIP_TIER                      = 0,
	SHIP_TIER01                    = 1,
	SHIP_TIER02                    = 2,
	SHIP_TIER03                    = 3,
	SHIP_TIER04                    = 4,
	SHIP_TIER05                    = 5,
	SHIP_TIER_MAX                  = 6
};


// Enum EFGame.EFConst.ShipSupplyType
enum class EShipSupplyType : uint8_t
{
	SHIP_SUPPLY_TYPE_MONEY         = 0,
	SHIP_SUPPLY_TYPE_PIRATE_COIN   = 1,
	SHIP_SUPPLY_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.ShipSupplyChangeReason
enum class EShipSupplyChangeReason : uint8_t
{
	SHIP_SUPPLY_CHANGE_REASON_NONE = 0,
	SHIP_SUPPLY_CHANGE_REASON_GAME_ACTION = 1,
	SHIP_SUPPLY_CHANGE_REASON_MOVE = 2,
	SHIP_SUPPLY_CHANGE_REASON_USE_SKILL = 3,
	SHIP_SUPPLY_CHANGE_REASON_QUICK_CHARGE = 4,
	SHIP_SUPPLY_CHANGE_REASON_NATIVE_VILLAGE = 5,
	SHIP_SUPPLY_CHANGE_REASON_LEVEL_UP = 6,
	SHIP_SUPPLY_CHANGE_REASON_FLUCTUATE = 7,
	SHIP_SUPPLY_CHANGE_REASON_SHIPWRECK_REVIVE = 8,
	SHIP_SUPPLY_CHANGE_REASON_REPAIR = 9,
	SHIP_SUPPLY_CHANGE_REASON_MAX  = 10
};


// Enum EFGame.EFConst.SkillCancelReason
enum class ESkillCancelReason : uint8_t
{
	SKILL_CANCEL_REASON_NONE       = 0,
	SKILL_CANCEL_REASON_ABNORMAL_SWAY = 1,
	SKILL_CANCEL_REASON_ABNORMAL_BRING_DOWN = 2,
	SKILL_CANCEL_REASON_ABNORMAL_ROOT_MOTION = 3,
	SKILL_CANCEL_REASON_BEFORE_TELEPORT = 4,
	SKILL_CANCEL_REASON_BE_KILLED  = 5,
	SKILL_CANCEL_REASON_GRAP_RELEASE = 6,
	SKILL_CANCEL_REASON_GRAP_FREEZE_STRONG = 7,
	SKILL_CANCEL_REASON_DEBUFF_NO_ACTION = 8,
	SKILL_CANCEL_REASON_TRIGGER_CLIENT_EVENT = 9,
	SKILL_CANCEL_REASON_VEHICLE_REMOVE_PASSENGER = 10,
	SKILL_CANCEL_REASON_VEHICLE_ADMIN = 11,
	SKILL_CANCEL_REASON_NPC_CLIENT_PROVOKE = 12,
	SKILL_CANCEL_REASON_NPC_SERVER_PROVOKE = 13,
	SKILL_CANCEL_REASON_NPC_AI_RESET_FORCED_ACTION = 14,
	SKILL_CANCEL_REASON_NPC_AI_ACTION_CANCEL_SKILL = 15,
	SKILL_CANCEL_REASON_NPC_AI_STATE_ACTION_CANCEL_SKILL = 16,
	SKILL_CANCEL_REASON_NPC_GROGGY = 17,
	SKILL_CANCEL_REASON_NPC_RAGE   = 18,
	SKILL_CANCEL_REASON_NPC_BLOCK_SKILL = 19,
	SKILL_CANCEL_REASON_NPC_DESTROY_PARTS_AI = 20,
	SKILL_CANCEL_REASON_NPC_DESTROY_PARTS_DAMAGED = 21,
	SKILL_CANCEL_REASON_NPC_DESTROY_PARTS_DESTRUCTION_SKILLEFFECT = 22,
	SKILL_CANCEL_REASON_GAME_ACTION = 23,
	SKILL_CANCEL_REASON_MOVE_TO_HOME = 24,
	SKILL_CANCEL_REASON_CLIENT_REQUEST = 25,
	SKILL_CANCEL_REASON_COMMAND_SKILL = 26,
	SKILL_CANCEL_REASON_INIT_BY_ZONE = 27,
	SKILL_CANCEL_REASON_EFFECT_COST = 28,
	SKILL_CANCEL_REASON_ADD_STATUS_EFFECT = 29,
	SKILL_CANCEL_REASON_IDENTITY_RELEASE = 30,
	SKILL_CANCEL_REASON_NPC_COUNTER_ATTACK = 31,
	SKILL_CANCEL_REASON_FORCE_TELEPORT_SKILL_BY_FALLEN_VOLUME = 32,
	SKILL_CANCEL_REASON_NPC_GROGGY_END = 33,
	SKILL_CANCEL_REASON_MAX        = 34
};


// Enum EFGame.EFConst.ItemPriceType
enum class EItemPriceType : uint8_t
{
	ITEM_PRICE_TYPE_NA             = 0,
	ITEM_PRICE_TYPE_MONEY          = 1,
	ITEM_PRICE_TYPE_BOUND_CASH     = 2,
	ITEM_PRICE_TYPE_ITEM           = 3,
	ITEM_PRICE_TYPE_CASHEW_SEED___ = 4,
	ITEM_PRICE_TYPE_LUPHEON_SEAL___ = 5,
	ITEM_PRICE_TYPE_PIRATE_COIN    = 6,
	ITEM_PRICE_TYPE_TRADE_GOLD     = 7,
	ITEM_PRICE_TYPE_PVP_TOKEN___   = 8,
	ITEM_PRICE_TYPE_CRACK_PIECE    = 9,
	ITEM_PRICE_TYPE_ENHANCE_TOKEN  = 10,
	ITEM_PRICE_TYPE_ENHANCE_TOKEN_T1 = 11,
	ITEM_PRICE_TYPE_ENHANCE_TOKEN_T3 = 12,
	ITEM_PRICE_TYPE_MAX            = 13
};


// Enum EFGame.EFConst.ShopBarterType
enum class EShopBarterType : uint8_t
{
	SHOP_BARTER_TYPE_DEFAULT       = 0,
	SHOP_BARTER_TYPE_SPECIFIED_PRICE = 1,
	SHOP_BARTER_TYPE_BOUND_CASH    = 2,
	SHOP_BARTER_TYPE_ITEM          = 3,
	SHOP_BARTER_TYPE_CASHEW_SEED___ = 4,
	SHOP_BARTER_TYPE_LUPHEON_SEAL___ = 5,
	SHOP_BARTER_TYPE_PIRATE_COIN   = 6,
	SHOP_BARTER_TYPE_TRADE_GOLD    = 7,
	SHOP_BARTER_TYPE_PVP_TOKEN___  = 8,
	SHOP_BARTER_TYPE_CRACK_PIECE   = 9,
	SHOP_BARTER_TYPE_ENHANCE_TOKEN = 10,
	SHOP_BARTER_TYPE_ENHANCE_TOKEN_T1 = 11,
	SHOP_BARTER_TYPE_ENHANCE_TOKEN_T3 = 12,
	SHOP_BARTER_TYPE_MAX           = 13
};


// Enum EFGame.EFConst.ShopLimitStockType
enum class EShopLimitStockType : uint8_t
{
	SHOP_LIMIT_STOCK_TYPE_NONE     = 0,
	SHOP_LIMIT_STOCK_TYPE_RESTART  = 1,
	SHOP_LIMIT_STOCK_TYPE_INTERVAL = 2,
	SHOP_LIMIT_STOCK_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ShopLimitReleaseType
enum class EShopLimitReleaseType : uint8_t
{
	SHOP_LIMIT_RELEASE_TYPE_NONE   = 0,
	SHOP_LIMIT_RELEASE_TYPE_INTERVAL = 1,
	SHOP_LIMIT_RELEASE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.ShopLimitPriceCalcType
enum class EShopLimitPriceCalcType : uint8_t
{
	SHOP_LIMIT_PRICE_CALC_TYPE_NONE = 0,
	SHOP_LIMIT_PRICE_CALC_TYPE_DROP_LIMIT = 1,
	SHOP_LIMIT_PRICE_CALC_TYPE_SHOP_LIMIT = 2,
	SHOP_LIMIT_PRICE_CALC_TYPE_MAX = 3
};


// Enum EFGame.EFConst.ShopRepairType
enum class EShopRepairType : uint8_t
{
	SHOP_REPAIR_TYPE_ONE           = 0,
	SHOP_REPAIR_TYPE_EQUIP         = 1,
	SHOP_REPAIR_TYPE_ALL           = 2,
	SHOP_REPAIR_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.ShopCheckTargetType
enum class EShopCheckTargetType : uint8_t
{
	SHOP_CHECK_TARGET_TYPE_NONE    = 0,
	SHOP_CHECK_TARGET_TYPE_CUMULATIVE_POINT = 1,
	SHOP_CHECK_TARGET_TYPE_MUSIC   = 2,
	SHOP_CHECK_TARGET_TYPE_SOCIAL_ACTION = 3,
	SHOP_CHECK_TARGET_TYPE_PERMANENT_ATTR = 4,
	SHOP_CHECK_TARGET_TYPE_VEHICLE = 5,
	SHOP_CHECK_TARGET_TYPE_MAX     = 6
};


// Enum EFGame.EFConst.SecretDungeonEntryFilter
enum class ESecretDungeonEntryFilter : uint8_t
{
	SECRET_DUNGEON_ENTRY_FILTER_NA = 0,
	SECRET_DUNGEON_ENTRY_FILTER_ID = 1,
	SECRET_DUNGEON_ENTRY_FILTER_ZONE = 2,
	SECRET_DUNGEON_ENTRY_FILTER_CONTINENT = 3,
	SECRET_DUNGEON_ENTRY_FILTER_LEVEL = 4,
	SECRET_DUNGEON_ENTRY_FILTER_MAX = 5
};


// Enum EFGame.EFConst.SecretDungeonEntryType
enum class ESecretDungeonEntryType : uint8_t
{
	SECRET_DUNGEON_ENTRY_TYPE_NORMAL = 0,
	SECRET_DUNGEON_ENTRY_TYPE_LIFE_HUNTING = 1,
	SECRET_DUNGEON_ENTRY_TYPE_ISLAND = 2,
	SECRET_DUNGEON_ENTRY_TYPE_SPECIAL = 3,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_NORMAL = 4,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_ISLAND = 5,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_VOYAGE = 6,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_ADVENTURE = 7,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_WRECKED_SHIP = 8,
	SECRET_DUNGEON_ENTRY_TYPE_SECRET_PROP_VOYAGE_DIVING = 9,
	SECRET_DUNGEON_ENTRY_TYPE_MAX  = 10
};


// Enum EFGame.EFConst.SecretDungeonContinentFilter
enum class ESecretDungeonContinentFilter : uint8_t
{
	SECRET_DUNGEON_CONTINENT_FILTER_ANY = 0,
	SECRET_DUNGEON_CONTINENT_FILTER_ALL_SAME_CONTINENT = 1,
	SECRET_DUNGEON_CONTINENT_FILTER_FIRST_SAME_CONTINENT = 2,
	SECRET_DUNGEON_CONTINENT_FILTER_LAST_SAME_CONTINENT = 3,
	SECRET_DUNGEON_CONTINENT_FILTER_MAX = 4
};


// Enum EFGame.EFConst.SecretDungeonShapeFilter
enum class ESecretDungeonShapeFilter : uint8_t
{
	SECRET_DUNGEON_SHAPE_FILTER_ANY = 0,
	SECRET_DUNGEON_SHAPE_FILTER_MAZE = 1,
	SECRET_DUNGEON_SHAPE_FILTER_PATH = 2,
	SECRET_DUNGEON_SHAPE_FILTER_RADIAL = 3,
	SECRET_DUNGEON_SHAPE_FILTER_MAX = 4
};


// Enum EFGame.EFConst.SecretDungeonMinimapSize
enum class ESecretDungeonMinimapSize : uint8_t
{
	SECRET_DUNGEON_MINIMAP_SIZE_NA = 0,
	SECRET_DUNGEON_MINIMAP_SIZE_SMALL = 1,
	SECRET_DUNGEON_MINIMAP_SIZE_MEDIUM = 2,
	SECRET_DUNGEON_MINIMAP_SIZE_LARGE = 3,
	SECRET_DUNGEON_MINIMAP_SIZE_MAX = 4
};


// Enum EFGame.EFConst.SecretDungeonRadarSize
enum class ESecretDungeonRadarSize : uint8_t
{
	SECRET_DUNGEON_RADAR_SIZE_NA   = 0,
	SECRET_DUNGEON_RADAR_SIZE_SMALL = 1,
	SECRET_DUNGEON_RADAR_SIZE_MEDIUM = 2,
	SECRET_DUNGEON_RADAR_SIZE_LARGE = 3,
	SECRET_DUNGEON_RADAR_SIZE_MAX  = 4
};


// Enum EFGame.EFConst.SlangType
enum class ESlangType : uint8_t
{
	SLANG_TYPE_WHOLE               = 0,
	SLANG_TYPE_PARTIAL             = 1,
	SLANG_TYPE_CHAT                = 2,
	SLANG_TYPE_PATTERN             = 3,
	SLANG_TYPE_WHITE               = 4,
	SLANG_TYPE_MAX                 = 5
};


// Enum EFGame.EFConst.SlangFilterType
enum class ESlangFilterType : uint8_t
{
	SLANG_FILTER_TYPE_NONE         = 0,
	SLANG_FILTER_TYPE_CHAT         = 1,
	SLANG_FILTER_TYPE_ACCOUNT      = 2,
	SLANG_FILTER_TYPE_PC           = 3,
	SLANG_FILTER_TYPE_GUILD        = 4,
	SLANG_FILTER_TYPE_SHIP         = 5,
	SLANG_FILTER_TYPE_EQUIP_PRESET = 6,
	SLANG_FILTER_TYPE_SKILL_PRESET = 7,
	SLANG_FILTER_TYPE_CARD_DECK    = 8,
	SLANG_FILTER_TYPE_TOWN         = 9,
	SLANG_FILTER_TYPE_TOWN_SHIP    = 10,
	SLANG_FILTER_TYPE_PARTY_BOARD  = 11,
	SLANG_FILTER_TYPE_PET          = 12,
	SLANG_FILTER_TYPE_GUILD_MEMBER = 13,
	SLANG_FILTER_TYPE_TROOP_UNIT   = 14,
	SLANG_FILTER_TYPE_BUDDY_GROUP  = 15,
	SLANG_FILTER_TYPE_MERCENARY_RECRUIT = 16,
	SLANG_FILTER_TYPE_COLOSSEUM_ROOM = 17,
	SLANG_FILTER_TYPE_COLOSSEUM_TEAM = 18,
	SLANG_FILTER_TYPE_GUILD_MEMO   = 19,
	SLANG_FILTER_TYPE_AVATAR_EQUIP_PRESET = 20,
	SLANG_FILTER_TYPE_WARP_POINT_SLOT_NAME = 21,
	SLANG_FILTER_TYPE_OPEN_CHAT_CHANNEL_NAME = 22,
	SLANG_FILTER_TYPE_CHALLENGE_PRESET_NAME = 23,
	SLANG_FILTER_TYPE_COMBINED_PRESET = 24,
	SLANG_FILTER_TYPE_BUDDY_MEMO   = 25,
	SLANG_FILTER_TYPE_MAX          = 26
};


// Enum EFGame.EFConst.ServerTimeType
enum class EServerTimeType : uint8_t
{
	SERVER_TIME_TYPE_LOGIN         = 0,
	SERVER_TIME_TYPE_WORLD         = 1,
	SERVER_TIME_TYPE_GAME          = 2,
	SERVER_TIME_TYPE_SOCIAL        = 3,
	SERVER_TIME_TYPE_MATCH         = 4,
	SERVER_TIME_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.StockType
enum class EStockType : uint8_t
{
	STOCK_TYPE_CASH                = 0,
	STOCK_TYPE_GOLD                = 1,
	STOCK_TYPE_MAX                 = 2
};


// Enum EFGame.EFConst.StockProductStatus
enum class EStockProductStatus : uint8_t
{
	STOCK_PRODUCT_STATUS_NONE      = 0,
	STOCK_PRODUCT_STATUS_READY     = 1,
	STOCK_PRODUCT_STATUS_SOLD_OUT  = 2,
	STOCK_PRODUCT_STATUS_OVERDUE   = 3,
	STOCK_PRODUCT_STATUS_CANCELED  = 4,
	STOCK_PRODUCT_STATUS_DELETED   = 5,
	STOCK_PRODUCT_STATUS_DELETED_BY_GM = 6,
	STOCK_PRODUCT_STATUS_MAX       = 7
};


// Enum EFGame.EFConst.StockResultType
enum class EStockResultType : uint8_t
{
	STOCK_RESULT_TYPE_CASH_PAID    = 0,
	STOCK_RESULT_TYPE_CASH_BOUND   = 1,
	STOCK_RESULT_TYPE_GOLD         = 2,
	STOCK_RESULT_TYPE_CASH_PAID_RECEIPT = 3,
	STOCK_RESULT_TYPE_CASH_BOUND_RECEIPT = 4,
	STOCK_RESULT_TYPE_GOLD_RECEIPT = 5,
	STOCK_RESULT_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.StockResultOrigin
enum class EStockResultOrigin : uint8_t
{
	STOCK_RESULT_ORIGIN_NONE       = 0,
	STOCK_RESULT_ORIGIN_SOLD       = 1,
	STOCK_RESULT_ORIGIN_CANCELED   = 2,
	STOCK_RESULT_ORIGIN_OVERDUE    = 3,
	STOCK_RESULT_ORIGIN_REMAINDER  = 4,
	STOCK_RESULT_ORIGIN_RECEIPT    = 5,
	STOCK_RESULT_ORIGIN_MILEAGE_RECEIPT = 6,
	STOCK_RESULT_ORIGIN_CANCELED_BY_GM = 7,
	STOCK_RESULT_ORIGIN_MAX        = 8
};


// Enum EFGame.EFConst.StockResultStatus
enum class EStockResultStatus : uint8_t
{
	STOCK_RESULT_STATUS_NONE       = 0,
	STOCK_RESULT_STATUS_READY      = 1,
	STOCK_RESULT_STATUS_PENDING    = 2,
	STOCK_RESULT_STATUS_RECEIVED   = 3,
	STOCK_RESULT_STATUS_DELETED    = 4,
	STOCK_RESULT_STATUS_DELETED_BY_GM = 5,
	STOCK_RESULT_STATUS_MAX        = 6
};


// Enum EFGame.EFConst.SlideNoticeType
enum class ESlideNoticeType : uint8_t
{
	SLIDE_NOTICE_TYPE_NONE         = 0,
	SLIDE_NOTICE_TYPE_CAMPAIGN     = 1,
	SLIDE_NOTICE_TYPE_NOTICE       = 2,
	SLIDE_NOTICE_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.SlideNoticeHeaderType
enum class ESlideNoticeHeaderType : uint8_t
{
	SLIDE_NOTICE_HEADER_TYPE_NONE  = 0,
	SLIDE_NOTICE_HEADER_TYPE_NOTICE = 1,
	SLIDE_NOTICE_HEADER_TYPE_INFO  = 2,
	SLIDE_NOTICE_HEADER_TYPE_HELP  = 3,
	SLIDE_NOTICE_HEADER_TYPE_EVENT = 4,
	SLIDE_NOTICE_HEADER_TYPE_MAX   = 5
};


// Enum EFGame.EFConst.SecurityServiceType
enum class ESecurityServiceType : uint8_t
{
	SECURITY_SERVICE_TYPE_NONE     = 0,
	SECURITY_SERVICE_TYPE_OTP      = 1,
	SECURITY_SERVICE_TYPE_TRUSTED_MACHINE = 2,
	SECURITY_SERVICE_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.SeasonCardBookType
enum class ESeasonCardBookType : uint8_t
{
	SEASON_CARD_BOOK_TYPE_NONE     = 0,
	SEASON_CARD_BOOK_TYPE_COLLECTION = 1,
	SEASON_CARD_BOOK_TYPE_EQUIP    = 2,
	SEASON_CARD_BOOK_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.SkillRuneEffectType
enum class ESkillRuneEffectType : uint8_t
{
	SKILL_RUNE_EFFECT_TYPE_NONE    = 0,
	SKILL_RUNE_EFFECT_TYPE_ATTACK  = 1,
	SKILL_RUNE_EFFECT_TYPE_IDENTITY_GAUGE = 2,
	SKILL_RUNE_EFFECT_TYPE_IDENTITY_STANCE = 3,
	SKILL_RUNE_EFFECT_TYPE_SUMMON  = 4,
	SKILL_RUNE_EFFECT_TYPE_MAX     = 5
};


// Enum EFGame.EFConst.TraceDamageType
enum class ETraceDamageType : uint8_t
{
	TRACE_DAMAGE_TYPE_SKILL_EFFECT_DAMAGE = 0,
	TRACE_DAMAGE_TYPE_BASE_ATTACK  = 1,
	TRACE_DAMAGE_TYPE_CORRECTED_ATTACK = 2,
	TRACE_DAMAGE_TYPE_BASE_DAMAGE  = 3,
	TRACE_DAMAGE_TYPE_NPC_ATTACK_ADJUSTED_DAMAGE = 4,
	TRACE_DAMAGE_TYPE_NPC_BLOCK_REDUCED_DAMAGE = 5,
	TRACE_DAMAGE_TYPE_RANDOM_BASE_DAMAGE = 6,
	TRACE_DAMAGE_TYPE_REPEAT_DAMAGE = 7,
	TRACE_DAMAGE_TYPE_STAT_SKILL_DAMAGE_RATE = 8,
	TRACE_DAMAGE_TYPE_STAT_AWAKENING_DAM_RATE = 9,
	TRACE_DAMAGE_TYPE_WEAPON_AMPLIFY = 10,
	TRACE_DAMAGE_TYPE_CONFIG_PVP_DAMAGE_RATIO = 11,
	TRACE_DAMAGE_TYPE_DAMAGE_REDUCTION = 12,
	TRACE_DAMAGE_TYPE_DAMAGE_SUM   = 13,
	TRACE_DAMAGE_TYPE_STAT_DAMAGE_INC_RATE = 14,
	TRACE_DAMAGE_TYPE_STAT_CRITICAL = 15,
	TRACE_DAMAGE_TYPE_SKILL_CUSTOMIZING_AND_ADDON = 16,
	TRACE_DAMAGE_TYPE_ABILITY      = 17,
	TRACE_DAMAGE_TYPE_STAT_ATTR_RES_RATE = 18,
	TRACE_DAMAGE_TYPE_STAT_NPC_SPECIES_DAM_RATE = 19,
	TRACE_DAMAGE_TYPE_LEVEL_DAMAGE = 20,
	TRACE_DAMAGE_TYPE_ITEM_LEVEL_REQUIREMENT_DAMAGE = 21,
	TRACE_DAMAGE_TYPE_ARMOR_LEVEL_DAMAGE = 22,
	TRACE_DAMAGE_TYPE_DIRECTIONAL_ATTACK = 23,
	TRACE_DAMAGE_TYPE_REFLECTION_DAMAGE = 24,
	TRACE_DAMAGE_TYPE_FINAL_DAMAGE_MODIFY = 25,
	TRACE_DAMAGE_TYPE_MAX          = 26
};


// Enum EFGame.EFConst.TendencyType
enum class ETendencyType : uint8_t
{
	TENDENCY_TYPE_NONE             = 0,
	TENDENCY_TYPE_CURIOSITY        = 1,
	TENDENCY_TYPE_TIMID            = 2,
	TENDENCY_TYPE_SUPERSTITION     = 3,
	TENDENCY_TYPE_SINCERITY        = 4,
	TENDENCY_TYPE_NEGATIVE         = 5,
	TENDENCY_TYPE_POSITIVE         = 6,
	TENDENCY_TYPE_RATIONAL         = 7,
	TENDENCY_TYPE_EMOTIONAL        = 8,
	TENDENCY_TYPE_LUXURY           = 9,
	TENDENCY_TYPE_SIMPLE           = 10,
	TENDENCY_TYPE_FASHION          = 11,
	TENDENCY_TYPE_ADVENTURER       = 12,
	TENDENCY_TYPE_LITERARY         = 13,
	TENDENCY_TYPE_PIRATE           = 14,
	TENDENCY_TYPE_GOURMET          = 15,
	TENDENCY_TYPE_DRINK            = 16,
	TENDENCY_TYPE_SCIENCE          = 17,
	TENDENCY_TYPE_MAKER            = 18,
	TENDENCY_TYPE_COLLECTOR        = 19,
	TENDENCY_TYPE_WIZARD           = 20,
	TENDENCY_TYPE_ARTIST           = 21,
	TENDENCY_TYPE_BEAUTY           = 22,
	TENDENCY_TYPE_DARKPAST         = 23,
	TENDENCY_TYPE_FIGHTER          = 24,
	TENDENCY_TYPE_MAX              = 25
};


// Enum EFGame.EFConst.ThreatSortOrder
enum class EThreatSortOrder : uint8_t
{
	THREAT_SORT_ORDER_NORMAL       = 0,
	THREAT_SORT_ORDER_FIXED        = 1,
	THREAT_SORT_ORDER_NORMAL_EX    = 2,
	THREAT_SORT_ORDER_RANDOM       = 3,
	THREAT_SORT_ORDER_RESET_PERIODICALLY = 4,
	THREAT_SORT_ORDER_RANDOM_PRIORITY = 5,
	THREAT_SORT_ORDER_NEAREST_DISTANCE = 6,
	THREAT_SORT_ORDER_MAX          = 7
};


// Enum EFGame.EFConst.ThreatPriority
enum class EThreatPriority : uint8_t
{
	THREAT_PRIORITY                = 0,
	THREAT_PRIORITY01              = 1,
	THREAT_PRIORITY_MAX            = 2
};


// Enum EFGame.EFConst.TribeType
enum class ETribeType : uint8_t
{
	TRIBE_TYPE_NONE                = 0,
	TRIBE_TYPE_HUMAN               = 1,
	TRIBE_TYPE_LAZERNES            = 2,
	TRIBE_TYPE_MOKOKO              = 3,
	TRIBE_TYPE_KENNAIN             = 4,
	TRIBE_TYPE_SEALIN              = 5,
	TRIBE_TYPE_UMAR                = 6,
	TRIBE_TYPE_FAIRY               = 7,
	TRIBE_TYPE_GOBLIN              = 8,
	TRIBE_TYPE_ANIMAL              = 9,
	TRIBE_TYPE_NIA                 = 10,
	TRIBE_TYPE_ANCIENT_BEING       = 11,
	TRIBE_TYPE_ORC                 = 12,
	TRIBE_TYPE_MAX                 = 13
};


// Enum EFGame.EFConst.TriggerNodeType
enum class ETriggerNodeType : uint8_t
{
	TRIGGER_NODE_TYPE_CONDITION    = 0,
	TRIGGER_NODE_TYPE_CHECK        = 1,
	TRIGGER_NODE_TYPE_ACTION       = 2,
	TRIGGER_NODE_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.TriggerBroadcastType
enum class ETriggerBroadcastType : uint8_t
{
	TRIGGER_BROADCAST_TYPE_SELF    = 0,
	TRIGGER_BROADCAST_TYPE_PARTY   = 1,
	TRIGGER_BROADCAST_TYPE_INSTANCE_ZONE = 2,
	TRIGGER_BROADCAST_TYPE_TRANSIT = 3,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT = 4,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT01 = 5,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT02 = 6,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT03 = 7,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT04 = 8,
	TRIGGER_BROADCAST_TYPE_TROOP_UNIT05 = 9,
	TRIGGER_BROADCAST_TYPE_MAX     = 10
};


// Enum EFGame.EFConst.TrggerNotExecuteReason
enum class ETrggerNotExecuteReason : uint8_t
{
	TRGGER_NOT_EXECUTE_REASON_NONE = 0,
	TRGGER_NOT_EXECUTE_REASON_UNKNOWN = 1,
	TRGGER_NOT_EXECUTE_REASON_PENDING_BY_EXCLUSIVE = 2,
	TRGGER_NOT_EXECUTE_REASON_CANCEL_BY_EXCLUSIVE = 3,
	TRGGER_NOT_EXECUTE_REASON_ALREADY_EXECUTING = 4,
	TRGGER_NOT_EXECUTE_REASON_DISABLED = 5,
	TRGGER_NOT_EXECUTE_REASON_MAX  = 6
};


// Enum EFGame.EFConst.TroopUnit
enum class ETroopUnit : uint8_t
{
	TROOP_UNIT_NONE                = 0,
	TROOP_UNIT                     = 1,
	TROOP_UNIT01                   = 2,
	TROOP_UNIT02                   = 3,
	TROOP_UNIT03                   = 4,
	TROOP_UNIT04                   = 5,
	TROOP_UNIT05                   = 6,
	TROOP_UNIT_MAX                 = 7
};


// Enum EFGame.EFConst.TriggerSignalType
enum class ETriggerSignalType : uint8_t
{
	TRIGGER_SIGNAL_TYPE_NONE       = 0,
	TRIGGER_SIGNAL_TYPE_OUT        = 1,
	TRIGGER_SIGNAL_TYPE_CLICK_CLICK = 2,
	TRIGGER_SIGNAL_TYPE_DOOR_OPEN  = 3,
	TRIGGER_SIGNAL_TYPE_DOOR_CLOSE = 4,
	TRIGGER_SIGNAL_TYPE_SWITCH_ON  = 5,
	TRIGGER_SIGNAL_TYPE_SWITCH_OFF = 6,
	TRIGGER_SIGNAL_TYPE_HIT_HIT    = 7,
	TRIGGER_SIGNAL_TYPE_HIT_DESTRUCT = 8,
	TRIGGER_SIGNAL_TYPE_GRIP_GRIP  = 9,
	TRIGGER_SIGNAL_TYPE_VOLUME_ENTER = 10,
	TRIGGER_SIGNAL_TYPE_VOLUME_LEAVE = 11,
	TRIGGER_SIGNAL_TYPE_VOLUME_ON  = 12,
	TRIGGER_SIGNAL_TYPE_VOLUME_OFF = 13,
	TRIGGER_SIGNAL_TYPE_NPC_SPAWN  = 14,
	TRIGGER_SIGNAL_TYPE_NPC_DEAD   = 15,
	TRIGGER_SIGNAL_TYPE_NPC_EVENT  = 16,
	TRIGGER_SIGNAL_TYPE_NPC_EVENT01 = 17,
	TRIGGER_SIGNAL_TYPE_NPC_EVENT02 = 18,
	TRIGGER_SIGNAL_TYPE_NPC_EVENT03 = 19,
	TRIGGER_SIGNAL_TYPE_NPC_EVENT04 = 20,
	TRIGGER_SIGNAL_TYPE_YES        = 21,
	TRIGGER_SIGNAL_TYPE_NO         = 22,
	TRIGGER_SIGNAL_TYPE_PROP_PICKUP = 23,
	TRIGGER_SIGNAL_TYPE_PROP_ROTATE_START = 24,
	TRIGGER_SIGNAL_TYPE_PROP_ROTATE_CANCEL = 25,
	TRIGGER_SIGNAL_TYPE_PROP_ROTATE_END = 26,
	TRIGGER_SIGNAL_TYPE_ASSEMBLED  = 27,
	TRIGGER_SIGNAL_TYPE_USER_SIGNAL = 28,
	TRIGGER_SIGNAL_TYPE_VOLUME_INPUTKEY = 29,
	TRIGGER_SIGNAL_TYPE_SHARED_CLICK = 30,
	TRIGGER_SIGNAL_TYPE_SHARED_DESPAWN = 31,
	TRIGGER_SIGNAL_TYPE_DUNGEON_CLEARED = 32,
	TRIGGER_SIGNAL_TYPE_COOP_QUEST_START = 33,
	TRIGGER_SIGNAL_TYPE_COOP_QUEST_COMPLETE = 34,
	TRIGGER_SIGNAL_TYPE_COOP_QUEST_FAIL = 35,
	TRIGGER_SIGNAL_TYPE_USER_SHIP_WRECK = 36,
	TRIGGER_SIGNAL_TYPE_TOWER_HIT  = 37,
	TRIGGER_SIGNAL_TYPE_TOWER_DESTRUCT = 38,
	TRIGGER_SIGNAL_TYPE_VEHICLE_ENTER = 39,
	TRIGGER_SIGNAL_TYPE_VEHICLE_LEAVE = 40,
	TRIGGER_SIGNAL_TYPE_INSTANCEZONE_LOAD_COMPLETE = 41,
	TRIGGER_SIGNAL_TYPE_RANDOM_CASE = 42,
	TRIGGER_SIGNAL_TYPE_RANDOM_CASE01 = 43,
	TRIGGER_SIGNAL_TYPE_RANDOM_CASE02 = 44,
	TRIGGER_SIGNAL_TYPE_RANDOM_CASE03 = 45,
	TRIGGER_SIGNAL_TYPE_RANDOM_CASE04 = 46,
	TRIGGER_SIGNAL_TYPE_NPC_PATHEVENT = 47,
	TRIGGER_SIGNAL_TYPE_JOINT_ATTACH = 48,
	TRIGGER_SIGNAL_TYPE_JOINT_DETACH = 49,
	TRIGGER_SIGNAL_TYPE_HIT_ON2    = 50,
	TRIGGER_SIGNAL_TYPE_HIT_ON3    = 51,
	TRIGGER_SIGNAL_TYPE_COOP_QUEST_CANCEL = 52,
	TRIGGER_SIGNAL_TYPE_DUNGEON_ENTER = 53,
	TRIGGER_SIGNAL_TYPE_STATION_DISABLE = 54,
	TRIGGER_SIGNAL_TYPE_ALL_DEAD   = 55,
	TRIGGER_SIGNAL_TYPE_ALL_EXIT   = 56,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE1_CLEAR = 57,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE1_FAIL = 58,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE2_CLEAR = 59,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE2_FAIL = 60,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE3_CLEAR = 61,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE3_FAIL = 62,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE4_CLEAR = 63,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE4_FAIL = 64,
	TRIGGER_SIGNAL_TYPE_USER_STATUS_EFFECT = 65,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_START = 66,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_END = 67,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_CANCEL = 68,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_EVENT = 69,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_EVENT01 = 70,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_EVENT02 = 71,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_EVENT03 = 72,
	TRIGGER_SIGNAL_TYPE_INSTANCE_TIMER_EVENT04 = 73,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE5_CLEAR = 74,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE5_FAIL = 75,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE6_CLEAR = 76,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE6_FAIL = 77,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE1_RESUME = 78,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE2_RESUME = 79,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE3_RESUME = 80,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE4_RESUME = 81,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE5_RESUME = 82,
	TRIGGER_SIGNAL_TYPE_DUNGEON_PHASE6_RESUME = 83,
	TRIGGER_SIGNAL_TYPE_TRACK_MOVE_START = 84,
	TRIGGER_SIGNAL_TYPE_TRACK_MOVE_START01 = 85,
	TRIGGER_SIGNAL_TYPE_TRACK_MOVE_START02 = 86,
	TRIGGER_SIGNAL_TYPE_TRACK_MOVE_FAILURE = 87,
	TRIGGER_SIGNAL_TYPE_HIT_RESTORE_START = 88,
	TRIGGER_SIGNAL_TYPE_HIT_RESTORE_FINISH = 89,
	TRIGGER_SIGNAL_TYPE_ZONE_LEVEL_NORMAL = 90,
	TRIGGER_SIGNAL_TYPE_ZONE_LEVEL_HARD = 91,
	TRIGGER_SIGNAL_TYPE_ZONE_LEVEL_HELLCHAOS = 92,
	TRIGGER_SIGNAL_TYPE_ZONE_LEVEL_CHALLENGE = 93,
	TRIGGER_SIGNAL_TYPE_ZONE_LEVEL_SPECIAL = 94,
	TRIGGER_SIGNAL_TYPE_OCCUPATION_RED = 95,
	TRIGGER_SIGNAL_TYPE_OCCUPATION_BLUE = 96,
	TRIGGER_SIGNAL_TYPE_MAX        = 97
};


// Enum EFGame.EFConst.TradeLockCause
enum class ETradeLockCause : uint8_t
{
	TRADE_LOCK_CAUSE_REQUEST       = 0,
	TRADE_LOCK_CAUSE_UNLOCK_OTHER  = 1,
	TRADE_LOCK_CAUSE_ADDITEM_OTHER = 2,
	TRADE_LOCK_CAUSE_REMOVEITEM_OTHER = 3,
	TRADE_LOCK_CAUSE_MODIFYMONEY_OTHER = 4,
	TRADE_LOCK_CAUSE_MAX           = 5
};


// Enum EFGame.EFConst.TrapType
enum class ETrapType : uint8_t
{
	TRAP_TYPE_ACTIVE               = 0,
	TRAP_TYPE_REACTIVE             = 1,
	TRAP_TYPE_REACTIVE_INPUT       = 2,
	TRAP_TYPE_MAX                  = 3
};


// Enum EFGame.EFConst.TrapBoundingType
enum class ETrapBoundingType : uint8_t
{
	TRAP_BOUNDING_TYPE_SPHERE      = 0,
	TRAP_BOUNDING_TYPE_OBB         = 1,
	TRAP_BOUNDING_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.TrapState
enum class ETrapState : uint8_t
{
	TRAP_STATE_INACTIVE            = 0,
	TRAP_STATE_READY               = 1,
	TRAP_STATE_IGNITED             = 2,
	TRAP_STATE_EXPLODING           = 3,
	TRAP_STATE_EXHAUSTED           = 4,
	TRAP_STATE_MAX                 = 5
};


// Enum EFGame.EFConst.TrapTargetMoveType
enum class ETrapTargetMoveType : uint8_t
{
	TRAP_TARGET_MOVE_TYPE_NONE     = 0,
	TRAP_TARGET_MOVE_TYPE_CENTER   = 1,
	TRAP_TARGET_MOVE_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.TrapTargetFilterType
enum class ETrapTargetFilterType : uint8_t
{
	TRAP_TARGET_FILTER_TYPE_NONE   = 0,
	TRAP_TARGET_FILTER_TYPE_PC     = 1,
	TRAP_TARGET_FILTER_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.TrapVisibleState
enum class ETrapVisibleState : uint8_t
{
	TRAP_VISIBLE_STATE_NONE        = 0,
	TRAP_VISIBLE_STATE_HIDE        = 1,
	TRAP_VISIBLE_STATE_DETECTION_HIDE = 2,
	TRAP_VISIBLE_STATE_MAX         = 3
};


// Enum EFGame.EFConst.TrapHideLevel
enum class ETrapHideLevel : uint8_t
{
	TRAP_HIDE_LEVEL_NONE           = 0,
	TRAP_HIDE_LEVEL                = 1,
	TRAP_HIDE_LEVEL_MAX            = 2
};


// Enum EFGame.EFConst.TransitState
enum class ETransitState : uint8_t
{
	TRANSIT_STATE_IDLE             = 0,
	TRANSIT_STATE_MOVE             = 1,
	TRANSIT_STATE_ROTATE           = 2,
	TRANSIT_STATE_PAUSE            = 3,
	TRANSIT_STATE_QUIT             = 4,
	TRANSIT_STATE_MAX              = 5
};


// Enum EFGame.EFConst.TransitStateChangeReason
enum class ETransitStateChangeReason : uint8_t
{
	TRANSIT_STATE_CHANGE_REASON_NONE = 0,
	TRANSIT_STATE_CHANGE_REASON_MOVE = 1,
	TRANSIT_STATE_CHANGE_REASON_TELEPORT = 2,
	TRANSIT_STATE_CHANGE_REASON_STOP = 3,
	TRANSIT_STATE_CHANGE_REASON_ROTATE = 4,
	TRANSIT_STATE_CHANGE_REASON_PATH_NODE_ARRIVED = 5,
	TRANSIT_STATE_CHANGE_REASON_MAX = 6
};


// Enum EFGame.EFConst.TransitMoveMode
enum class ETransitMoveMode : uint8_t
{
	TRANSIT_MOVE_MODE_IDLE         = 0,
	TRANSIT_MOVE_MODE_PATH         = 1,
	TRANSIT_MOVE_MODE_ROTATING     = 2,
	TRANSIT_MOVE_MODE_MAX          = 3
};


// Enum EFGame.EFConst.TransitPatrolDirection
enum class ETransitPatrolDirection : uint8_t
{
	TRANSIT_PATROL_DIRECTION_BACKWARD = 0,
	TRANSIT_PATROL_DIRECTION_FORWARD = 1,
	TRANSIT_PATROL_DIRECTION_MAX   = 2
};


// Enum EFGame.EFConst.TeleportType
enum class ETeleportType : uint8_t
{
	TELEPORT_TYPE_NONE             = 0,
	TELEPORT_TYPE_NORMAL           = 1,
	TELEPORT_TYPE_NORMAL_WITH_CONTENT = 2,
	TELEPORT_TYPE_POSITION_ONLY    = 3,
	TELEPORT_TYPE_POSITION_ONLY_WITHOUT_CALLBACK = 4,
	TELEPORT_TYPE_TRIGGER_SYNC_LOCATION = 5,
	TELEPORT_TYPE_IN_HOUSE         = 6,
	TELEPORT_TYPE_SKILLEFFECT      = 7,
	TELEPORT_TYPE_BM_WARP_POSITION = 8,
	TELEPORT_TYPE_SYNC_POSITION_AFTER_ENTER_ZONE = 9,
	TELEPORT_TYPE_TOWN_VIEW_SYNC   = 10,
	TELEPORT_TYPE_SKILLEFFECT_FADE_IN_OUT = 11,
	TELEPORT_TYPE_NORMAL_SHOW_EFFECT = 12,
	TELEPORT_TYPE_IN_HOUSE_SHOW_EFFECT = 13,
	TELEPORT_TYPE_FALL_DOWN        = 14,
	TELEPORT_TYPE_MAX              = 15
};


// Enum EFGame.EFConst.TeleportOrigin
enum class ETeleportOrigin : uint8_t
{
	TELEPORT_ORIGIN_NONE           = 0,
	TELEPORT_ORIGIN_ADMIN_CMD      = 1,
	TELEPORT_ORIGIN_PACKET         = 2,
	TELEPORT_ORIGIN_WARP           = 3,
	TELEPORT_ORIGIN_SKILL_EFFECT   = 4,
	TELEPORT_ORIGIN_REVIVE         = 5,
	TELEPORT_ORIGIN_GRAB           = 6,
	TELEPORT_ORIGIN_VEHICLE_RIDE   = 7,
	TELEPORT_ORIGIN_PROP_ASSEMBLE_GATHER = 8,
	TELEPORT_ORIGIN_PROP_ASSEMBLE_OFF = 9,
	TELEPORT_ORIGIN_PROP_VOLUME_PUSH = 10,
	TELEPORT_ORIGIN_SECRET_DUNGEON = 11,
	TELEPORT_ORIGIN_AFTER_ENTER_ZONE = 12,
	TELEPORT_ORIGIN_ZONE_SAVE      = 13,
	TELEPORT_ORIGIN_IN_HOUSE       = 14,
	TELEPORT_ORIGIN_ESCAPE         = 15,
	TELEPORT_ORIGIN_TRANSIT        = 16,
	TELEPORT_ORIGIN_GAME_ACTION_TELEPORT = 17,
	TELEPORT_ORIGIN_TRIGGER_TELEPORT = 18,
	TELEPORT_ORIGIN_TRIGGER_TELEPORT_NPC = 19,
	TELEPORT_ORIGIN_TRIGGER_CLIENT_EVENT = 20,
	TELEPORT_ORIGIN_TRIGGER_CLIENT_EVENT_SET = 21,
	TELEPORT_ORIGIN_TRACK          = 22,
	TELEPORT_ORIGIN_BM             = 23,
	TELEPORT_ORIGIN_MUSIC          = 24,
	TELEPORT_ORIGIN_SQUAREHOLE     = 25,
	TELEPORT_ORIGIN_COLOSSEUM      = 26,
	TELEPORT_ORIGIN_BATTLEFIELD    = 27,
	TELEPORT_ORIGIN_REVERSE_RUIN   = 28,
	TELEPORT_ORIGIN_NPC_FOLLOW_MASTER = 29,
	TELEPORT_ORIGIN_NPC_AI         = 30,
	TELEPORT_ORIGIN_TOWN_VIEW      = 31,
	TELEPORT_ORIGIN_NPC_AI_FORCE_MOVE_TO_POS = 32,
	TELEPORT_ORIGIN_NPC_AI_FORCE_RETURN_STATUS = 33,
	TELEPORT_ORIGIN_NPC_AI_FORCE_MOVE_TO_HOME = 34,
	TELEPORT_ORIGIN_NPC_AI_MOVE_TO_POSITION = 35,
	TELEPORT_ORIGIN_NPC_AI_MOVE_TO_TARGET = 36,
	TELEPORT_ORIGIN_NPC_AI_MOVE_TO_MASTER = 37,
	TELEPORT_ORIGIN_NPC_AI_MOVE_TO_FOLLOW_OBJECT = 38,
	TELEPORT_ORIGIN_NPC_AI_MOVE_TO_NPC = 39,
	TELEPORT_ORIGIN_TOWN_PC_TRACE  = 40,
	TELEPORT_ORIGIN_FALL_DOWN      = 41,
	TELEPORT_ORIGIN_SIDE_SCROLL    = 42,
	TELEPORT_ORIGIN_STRONGHOLD_WARP = 43,
	TELEPORT_ORIGIN_MAX            = 44
};


// Enum EFGame.EFConst.TowerRespawnType
enum class ETowerRespawnType : uint8_t
{
	TOWER_RESPAWN_TYPE_NORMAL      = 0,
	TOWER_RESPAWN_TYPE_INSTANT     = 1,
	TOWER_RESPAWN_TYPE_NEVER       = 2,
	TOWER_RESPAWN_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.TrophyAuctionState
enum class ETrophyAuctionState : uint8_t
{
	TROPHY_AUCTION_STATE_INIT      = 0,
	TROPHY_AUCTION_STATE_READY     = 1,
	TROPHY_AUCTION_STATE_START     = 2,
	TROPHY_AUCTION_STATE_IDLE      = 3,
	TROPHY_AUCTION_STATE_MAX       = 4
};


// Enum EFGame.EFConst.TrophyBidType
enum class ETrophyBidType : uint8_t
{
	TROPHY_BID_TYPE_NONE           = 0,
	TROPHY_BID_TYPE_NORMAL         = 1,
	TROPHY_BID_TYPE_GIVE_UP        = 2,
	TROPHY_BID_TYPE_NOT_ENOUGH_MONEY = 3,
	TROPHY_BID_TYPE_LOGOUT         = 4,
	TROPHY_BID_TYPE_MAX            = 5
};


// Enum EFGame.EFConst.TrophyAuctionFinishType
enum class ETrophyAuctionFinishType : uint8_t
{
	TROPHY_AUCTION_FINISH_TYPE_NORMAL = 0,
	TROPHY_AUCTION_FINISH_TYPE_ALL_GAVE_UP = 1,
	TROPHY_AUCTION_FINISH_TYPE_MAX = 2
};


// Enum EFGame.EFConst.TrainingModeNpcCategory
enum class ETrainingModeNpcCategory : uint8_t
{
	TRAINING_MODE_NPC_CATEGORY_MONSTER = 0,
	TRAINING_MODE_NPC_CATEGORY_SCARECROW = 1,
	TRAINING_MODE_NPC_CATEGORY_MAX = 2
};


// Enum EFGame.EFConst.TrainingModeNpcGrade
enum class ETrainingModeNpcGrade : uint8_t
{
	TRAINING_MODE_NPC_GRADE_NONE   = 0,
	TRAINING_MODE_NPC_GRADE_NORMAL = 1,
	TRAINING_MODE_NPC_GRADE_NAMED  = 2,
	TRAINING_MODE_NPC_GRADE_SEED   = 3,
	TRAINING_MODE_NPC_GRADE_BOSS   = 4,
	TRAINING_MODE_NPC_GRADE_MAX    = 5
};


// Enum EFGame.EFConst.TrainingModeAction
enum class ETrainingModeAction : uint8_t
{
	TRAINING_MODE_ACTION_START     = 0,
	TRAINING_MODE_ACTION_END       = 1,
	TRAINING_MODE_ACTION_SPAWN_NPC = 2,
	TRAINING_MODE_ACTION_DESPAWN_NPC_ALL = 3,
	TRAINING_MODE_ACTION_REFILL    = 4,
	TRAINING_MODE_ACTION_RESET_COOLDOWN = 5,
	TRAINING_MODE_ACTION_RESET_SKILL = 6,
	TRAINING_MODE_ACTION_COOLDOWN_DISABLE = 7,
	TRAINING_MODE_ACTION_COOLDOWN_ENABLE = 8,
	TRAINING_MODE_ACTION_REFILL_AUTO_ENABLE = 9,
	TRAINING_MODE_ACTION_REFILL_AUTO_DISABLE = 10,
	TRAINING_MODE_ACTION_SETUP_STAT_DATA = 11,
	TRAINING_MODE_ACTION_SETUP_ENGRAVE_DATA = 12,
	TRAINING_MODE_ACTION_APPLY_SETUP_DATA = 13,
	TRAINING_MODE_ACTION_MAX       = 14
};


// Enum EFGame.EFConst.TutorialModeAction
enum class ETutorialModeAction : uint8_t
{
	TUTORIAL_MODE_ACTION_ENTER     = 0,
	TUTORIAL_MODE_ACTION_MENU      = 1,
	TUTORIAL_MODE_ACTION_RETURN    = 2,
	TUTORIAL_MODE_ACTION_QUIT      = 3,
	TUTORIAL_MODE_ACTION_MAX       = 4
};


// Enum EFGame.EFConst.TownHaveCheckType
enum class ETownHaveCheckType : uint8_t
{
	TOWN_HAVE_CHECK_TYPE_NONE      = 0,
	TOWN_HAVE_CHECK_TYPE_HAVE      = 1,
	TOWN_HAVE_CHECK_TYPE_NO_HAVE   = 2,
	TOWN_HAVE_CHECK_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.TownDispatchCrewUpdateReason
enum class ETownDispatchCrewUpdateReason : uint8_t
{
	TOWN_DISPATCH_CREW_UPDATE_REASON_NONE = 0,
	TOWN_DISPATCH_CREW_UPDATE_REASON_TRAINING = 1,
	TOWN_DISPATCH_CREW_UPDATE_REASON_RECOVER = 2,
	TOWN_DISPATCH_CREW_UPDATE_REASON_ADMIN_CHANGE_LEVEL = 3,
	TOWN_DISPATCH_CREW_UPDATE_REASON_ADMIN_CHANGE_EXP = 4,
	TOWN_DISPATCH_CREW_UPDATE_REASON_MISSION_START = 5,
	TOWN_DISPATCH_CREW_UPDATE_REASON_MISSION_FINISH = 6,
	TOWN_DISPATCH_CREW_UPDATE_REASON_ADD = 7,
	TOWN_DISPATCH_CREW_UPDATE_REASON_DISMISS = 8,
	TOWN_DISPATCH_CREW_UPDATE_REASON_DEATH = 9,
	TOWN_DISPATCH_CREW_UPDATE_REASON_ON_BOARD = 10,
	TOWN_DISPATCH_CREW_UPDATE_REASON_DISEMBARK = 11,
	TOWN_DISPATCH_CREW_UPDATE_REASON_REVIVE = 12,
	TOWN_DISPATCH_CREW_UPDATE_REASON_MAX = 13
};


// Enum EFGame.EFConst.TownDispatchShipUpdateReason
enum class ETownDispatchShipUpdateReason : uint8_t
{
	TOWN_DISPATCH_SHIP_UPDATE_REASON_NONE = 0,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_UPGRADE = 1,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_SELL = 2,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_REPAIR = 3,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_BUILD_START = 4,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_BUILD_END = 5,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_BUILD_FINISH = 6,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_MISSION_START = 7,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_MISSION_FINISH = 8,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_NAME_CHANGE = 9,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_BUILD_END_PAID = 10,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_DESTROYED = 11,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_CREW_ADDED = 12,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_CREW_REMOVED = 13,
	TOWN_DISPATCH_SHIP_UPDATE_REASON_MAX = 14
};


// Enum EFGame.EFConst.TownDispatchMissionSlotType
enum class ETownDispatchMissionSlotType : uint8_t
{
	TOWN_DISPATCH_MISSION_SLOT_TYPE_NORMAL = 0,
	TOWN_DISPATCH_MISSION_SLOT_TYPE_SPECIAL = 1,
	TOWN_DISPATCH_MISSION_SLOT_TYPE_FREE = 2,
	TOWN_DISPATCH_MISSION_SLOT_TYPE_MAX = 3
};


// Enum EFGame.EFConst.TownDispatchMissionResult
enum class ETownDispatchMissionResult : uint8_t
{
	TOWN_DISPATCH_MISSION_RESULT_B = 0,
	TOWN_DISPATCH_MISSION_RESULT_A = 1,
	TOWN_DISPATCH_MISSION_RESULT_S = 2,
	TOWN_DISPATCH_MISSION_RESULT_SS = 3,
	TOWN_DISPATCH_MISSION_RESULT_MAX = 4
};


// Enum EFGame.EFConst.TownShipDurabilityStatus
enum class ETownShipDurabilityStatus : uint8_t
{
	TOWN_SHIP_DURABILITY_STATUS_NORMAL = 0,
	TOWN_SHIP_DURABILITY_STATUS_DAMAGED = 1,
	TOWN_SHIP_DURABILITY_STATUS_DAMAGED_HEAVY = 2,
	TOWN_SHIP_DURABILITY_STATUS_DESTROYED = 3,
	TOWN_SHIP_DURABILITY_STATUS_MAX = 4
};


// Enum EFGame.EFConst.TownQuestPointRewardType
enum class ETownQuestPointRewardType : uint8_t
{
	TOWN_QUEST_POINT_REWARD_TYPE_NONE = 0,
	TOWN_QUEST_POINT_REWARD_TYPE_ITEM = 1,
	TOWN_QUEST_POINT_REWARD_TYPE_TOWN_RESOURCE = 2,
	TOWN_QUEST_POINT_REWARD_TYPE_MAX = 3
};


// Enum EFGame.EFConst.TownQuestPoolType
enum class ETownQuestPoolType : uint8_t
{
	TOWN_QUEST_POOL_TYPE_NONE      = 0,
	TOWN_QUEST_POOL_TYPE_ALL       = 1,
	TOWN_QUEST_POOL_TYPE_PAID      = 2,
	TOWN_QUEST_POOL_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.TownNpcPoolType
enum class ETownNpcPoolType : uint8_t
{
	TOWN_NPC_POOL_TYPE_NORMAL      = 0,
	TOWN_NPC_POOL_TYPE_NERIA       = 1,
	TOWN_NPC_POOL_TYPE_FRIENDSHIP  = 2,
	TOWN_NPC_POOL_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.TownNpcGrade
enum class ETownNpcGrade : uint8_t
{
	TOWN_NPC_GRADE_COMMON          = 0,
	TOWN_NPC_GRADE_UNCOMMON        = 1,
	TOWN_NPC_GRADE_RARE            = 2,
	TOWN_NPC_GRADE_EPIC            = 3,
	TOWN_NPC_GRADE_LEGEND          = 4,
	TOWN_NPC_GRADE_RELIC           = 5,
	TOWN_NPC_GRADE_MAX             = 6
};


// Enum EFGame.EFConst.TownResourceType
enum class ETownResourceType : uint8_t
{
	TOWN_RESOURCE_TYPE_NONE        = 0,
	TOWN_RESOURCE_TYPE_COIN        = 1,
	TOWN_RESOURCE_TYPE_FARMING     = 2,
	TOWN_RESOURCE_TYPE_LIVESTOCK   = 3,
	TOWN_RESOURCE_TYPE_MINING      = 4,
	TOWN_RESOURCE_TYPE_LUMBERING   = 5,
	TOWN_RESOURCE_TYPE_FISHING     = 6,
	TOWN_RESOURCE_TYPE_ARCHEOLOGY  = 7,
	TOWN_RESOURCE_TYPE_MAX         = 8
};


// Enum EFGame.EFConst.TownProductGrade
enum class ETownProductGrade : uint8_t
{
	TOWN_PRODUCT_GRADE_NORMAL      = 0,
	TOWN_PRODUCT_GRADE_GOOD        = 1,
	TOWN_PRODUCT_GRADE_MAX         = 2
};


// Enum EFGame.EFConst.TownObjectState
enum class ETownObjectState : uint8_t
{
	TOWN_OBJECT_STATE_NONE         = 0,
	TOWN_OBJECT_STATE_INSTALL      = 1,
	TOWN_OBJECT_STATE_INSTALLED    = 2,
	TOWN_OBJECT_STATE_UPGRADING    = 3,
	TOWN_OBJECT_STATE_IDLE         = 4,
	TOWN_OBJECT_STATE_PRODUCE      = 5,
	TOWN_OBJECT_STATE_PRODUCED     = 6,
	TOWN_OBJECT_STATE_DESTORY      = 7,
	TOWN_OBJECT_STATE_RESEARCHING  = 8,
	TOWN_OBJECT_STATE_RESEARCHED   = 9,
	TOWN_OBJECT_STATE_MAX          = 10
};


// Enum EFGame.EFConst.TownObjectInstallStep
enum class ETownObjectInstallStep : uint8_t
{
	TOWN_OBJECT_INSTALL_STEP       = 0,
	TOWN_OBJECT_INSTALL_STEP01     = 1,
	TOWN_OBJECT_INSTALL_STEP02     = 2,
	TOWN_OBJECT_INSTALL_STEP_MAX   = 3
};


// Enum EFGame.EFConst.TownBuildingState
enum class ETownBuildingState : uint8_t
{
	TOWN_BUILDING_STATE_NONE       = 0,
	TOWN_BUILDING_STATE_IDLE       = 1,
	TOWN_BUILDING_STATE_DOING      = 2,
	TOWN_BUILDING_STATE_MAX        = 3
};


// Enum EFGame.EFConst.TownBuildingType
enum class ETownBuildingType : uint8_t
{
	TOWN_BUILDING_TYPE_NONE        = 0,
	TOWN_BUILDING_TYPE_MANSION     = 1,
	TOWN_BUILDING_TYPE_LABORATORY  = 2,
	TOWN_BUILDING_TYPE_WORKSHOP    = 3,
	TOWN_BUILDING_TYPE_DISPATCH    = 4,
	TOWN_BUILDING_TYPE_MAX         = 5
};


// Enum EFGame.EFConst.TownDispatchElementDir
enum class ETownDispatchElementDir : uint8_t
{
	TOWN_DISPATCH_ELEMENT_DIR_GO   = 0,
	TOWN_DISPATCH_ELEMENT_DIR_RETURN = 1,
	TOWN_DISPATCH_ELEMENT_DIR_MAX  = 2
};


// Enum EFGame.EFConst.TownDispatchShipState
enum class ETownDispatchShipState : uint8_t
{
	TOWN_DISPATCH_SHIP_STATE_NONE  = 0,
	TOWN_DISPATCH_SHIP_STATE_BUILDING = 1,
	TOWN_DISPATCH_SHIP_STATE_BUILT = 2,
	TOWN_DISPATCH_SHIP_STATE_IDLE  = 3,
	TOWN_DISPATCH_SHIP_STATE_MAX   = 4
};


// Enum EFGame.EFConst.TownDispatchMissionCategory
enum class ETownDispatchMissionCategory : uint8_t
{
	TOWN_DISPATCH_MISSION_CATEGORY_NONE = 0,
	TOWN_DISPATCH_MISSION_CATEGORY_COMBAT = 1,
	TOWN_DISPATCH_MISSION_CATEGORY_TRADE = 2,
	TOWN_DISPATCH_MISSION_CATEGORY_EXPLORE = 3,
	TOWN_DISPATCH_MISSION_CATEGORY_MAX = 4
};


// Enum EFGame.EFConst.TownDispatchBaseStatType
enum class ETownDispatchBaseStatType : uint8_t
{
	TOWN_DISPATCH_BASE_STAT_TYPE_NONE = 0,
	TOWN_DISPATCH_BASE_STAT_TYPE_COMBAT = 1,
	TOWN_DISPATCH_BASE_STAT_TYPE_TRADE = 2,
	TOWN_DISPATCH_BASE_STAT_TYPE_EXPLORE = 3,
	TOWN_DISPATCH_BASE_STAT_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownDispatchCrewGrade
enum class ETownDispatchCrewGrade : uint8_t
{
	TOWN_DISPATCH_CREW_GRADE_COMMON = 0,
	TOWN_DISPATCH_CREW_GRADE_UNCOMMON = 1,
	TOWN_DISPATCH_CREW_GRADE_RARE  = 2,
	TOWN_DISPATCH_CREW_GRADE_EPIC  = 3,
	TOWN_DISPATCH_CREW_GRADE_LEGEND = 4,
	TOWN_DISPATCH_CREW_GRADE_RELIC = 5,
	TOWN_DISPATCH_CREW_GRADE_MAX   = 6
};


// Enum EFGame.EFConst.TownResearchCategory
enum class ETownResearchCategory : uint8_t
{
	TOWN_RESEARCH_CATEGORY_NONE    = 0,
	TOWN_RESEARCH_CATEGORY_ACTIVITYPOINT = 1,
	TOWN_RESEARCH_CATEGORY_EXDEDITION_STORAGE_INCREASE = 2,
	TOWN_RESEARCH_CATEGORY_RESERVED01 = 3,
	TOWN_RESEARCH_CATEGORY_SLOT_INCREASE = 4,
	TOWN_RESEARCH_CATEGORY_BUILDING_LEVELUP = 5,
	TOWN_RESEARCH_CATEGORY_TIME_DECREMENT = 6,
	TOWN_RESEARCH_CATEGORY_COST_ACTIVITYPOINT_DECREMENT = 7,
	TOWN_RESEARCH_CATEGORY_COST_DECREMENT = 8,
	TOWN_RESEARCH_CATEGORY_GREAT_RESULT_INCREASE = 9,
	TOWN_RESEARCH_CATEGORY_ASSEMBLY_ADD = 10,
	TOWN_RESEARCH_CATEGORY_OVERCOME_INCREASE = 11,
	TOWN_RESEARCH_CATEGORY_DISPATCH_ADDSHIP = 12,
	TOWN_RESEARCH_CATEGORY_DISPATCH_ADD = 13,
	TOWN_RESEARCH_CATEGORY_TRADE_ADD = 14,
	TOWN_RESEARCH_CATEGORY_CHEF_MENU_ADD = 15,
	TOWN_RESEARCH_CATEGORY_EXPEDITION_SUPPORT_ADD = 16,
	TOWN_RESEARCH_CATEGORY_TRAINING_ADD = 17,
	TOWN_RESEARCH_CATEGORY_FARM_OBJECT_INCREASE = 18,
	TOWN_RESEARCH_CATEGORY_TOWNPET = 19,
	TOWN_RESEARCH_CATEGORY_MAX     = 20
};


// Enum EFGame.EFConst.TownResearchRequiredType
enum class ETownResearchRequiredType : uint8_t
{
	TOWN_RESEARCH_REQUIRED_TYPE_NONE = 0,
	TOWN_RESEARCH_REQUIRED_TYPE_ADVBOOK = 1,
	TOWN_RESEARCH_REQUIRED_TYPE_ACHIEVEMENT = 2,
	TOWN_RESEARCH_REQUIRED_TYPE_SHIP_HOLDING = 3,
	TOWN_RESEARCH_REQUIRED_TYPE_SHIP_UPGRADE = 4,
	TOWN_RESEARCH_REQUIRED_TYPE_NPC_FRIENDSHIP = 5,
	TOWN_RESEARCH_REQUIRED_TYPE_NPC_FRIENDSHIP_SPECIFIC = 6,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_LEVEL = 7,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_RESEARCH_SPECIFIC = 8,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_PROP = 9,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_PROP_SPECIFIC = 10,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_SKIN_SPECIFIC = 11,
	TOWN_RESEARCH_REQUIRED_TYPE_TOWN_NPCDRESS_SPECIFIC = 12,
	TOWN_RESEARCH_REQUIRED_TYPE_QUEST_CLEAR = 13,
	TOWN_RESEARCH_REQUIRED_TYPE_PC_LEVEL = 14,
	TOWN_RESEARCH_REQUIRED_TYPE_ITEM_LEVEL = 15,
	TOWN_RESEARCH_REQUIRED_TYPE_EXPEDITION_LEVEL = 16,
	TOWN_RESEARCH_REQUIRED_TYPE_MAX = 17
};


// Enum EFGame.EFConst.TownResearchMoneyType
enum class ETownResearchMoneyType : uint8_t
{
	TOWN_RESEARCH_MONEY_TYPE_NONE  = 0,
	TOWN_RESEARCH_MONEY_TYPE_GOLD  = 1,
	TOWN_RESEARCH_MONEY_TYPE_TRADE_GOLD = 2,
	TOWN_RESEARCH_MONEY_TYPE_PIRATE_COIN = 3,
	TOWN_RESEARCH_MONEY_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.TownMissionMoneyType
enum class ETownMissionMoneyType : uint8_t
{
	TOWN_MISSION_MONEY_TYPE_NONE   = 0,
	TOWN_MISSION_MONEY_TYPE_GOLD   = 1,
	TOWN_MISSION_MONEY_TYPE_TRADE_GOLD = 2,
	TOWN_MISSION_MONEY_TYPE_PIRATE_COIN = 3,
	TOWN_MISSION_MONEY_TYPE_ITEM   = 4,
	TOWN_MISSION_MONEY_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.TownDispatchMissionType
enum class ETownDispatchMissionType : uint8_t
{
	TOWN_DISPATCH_MISSION_TYPE_COMMON = 0,
	TOWN_DISPATCH_MISSION_TYPE_SCHEDULE = 1,
	TOWN_DISPATCH_MISSION_TYPE_SPECIAL = 2,
	TOWN_DISPATCH_MISSION_TYPE_COMMON_LOW = 3,
	TOWN_DISPATCH_MISSION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownDispatchSpecialMissionType
enum class ETownDispatchSpecialMissionType : uint8_t
{
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_NONE = 0,
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_RAID_NORMAL = 1,
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_CHAOS_DUNGEON = 2,
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_ETC = 3,
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_LIFE = 4,
	TOWN_DISPATCH_SPECIAL_MISSION_TYPE_MAX = 5
};


// Enum EFGame.EFConst.TownDispatchMissionGrade
enum class ETownDispatchMissionGrade : uint8_t
{
	TOWN_DISPATCH_MISSION_GRADE_COMMON = 0,
	TOWN_DISPATCH_MISSION_GRADE_UNCOMMON = 1,
	TOWN_DISPATCH_MISSION_GRADE_RARE = 2,
	TOWN_DISPATCH_MISSION_GRADE_EPIC = 3,
	TOWN_DISPATCH_MISSION_GRADE_LEGEND = 4,
	TOWN_DISPATCH_MISSION_GRADE_RELIC = 5,
	TOWN_DISPATCH_MISSION_GRADE_MAX = 6
};


// Enum EFGame.EFConst.TownDispatchHardshipMain
enum class ETownDispatchHardshipMain : uint8_t
{
	TOWN_DISPATCH_HARDSHIP_MAIN_NONE = 0,
	TOWN_DISPATCH_HARDSHIP_MAIN_QUAKE = 1,
	TOWN_DISPATCH_HARDSHIP_MAIN_THORN = 2,
	TOWN_DISPATCH_HARDSHIP_MAIN_LAPIDIFICATION = 3,
	TOWN_DISPATCH_HARDSHIP_MAIN_POISON = 4,
	TOWN_DISPATCH_HARDSHIP_MAIN_MAX = 5
};


// Enum EFGame.EFConst.TownDispatchHardshipSub
enum class ETownDispatchHardshipSub : uint8_t
{
	TOWN_DISPATCH_HARDSHIP_SUB_NONE = 0,
	TOWN_DISPATCH_HARDSHIP_SUB_DARKNESS = 1,
	TOWN_DISPATCH_HARDSHIP_SUB_ICE = 2,
	TOWN_DISPATCH_HARDSHIP_SUB_WIND = 3,
	TOWN_DISPATCH_HARDSHIP_SUB_FIRE = 4,
	TOWN_DISPATCH_HARDSHIP_SUB_MAX = 5
};


// Enum EFGame.EFConst.TownOceanAreaType
enum class ETownOceanAreaType : uint8_t
{
	TOWN_OCEAN_AREA_TYPE_NONE      = 0,
	TOWN_OCEAN_AREA_TYPE_SEA_WEED  = 1,
	TOWN_OCEAN_AREA_TYPE_DEAD_PERSON = 2,
	TOWN_OCEAN_AREA_TYPE_SIREN     = 3,
	TOWN_OCEAN_AREA_TYPE_STORM     = 4,
	TOWN_OCEAN_AREA_TYPE_COLD_WAVE = 5,
	TOWN_OCEAN_AREA_TYPE_SAND_STORM = 6,
	TOWN_OCEAN_AREA_TYPE_ALL       = 7,
	TOWN_OCEAN_AREA_TYPE_MAX       = 8
};


// Enum EFGame.EFConst.TownEffectType
enum class ETownEffectType : uint8_t
{
	TOWN_EFFECT_TYPE_ACTIVITYPOINT_MAX_INCREASE = 0,
	TOWN_EFFECT_TYPE_ACTIVITYPOINT_RECOVERY_INCREASE = 1,
	TOWN_EFFECT_TYPE_EXDEDITION_STORAGE_INCREASE = 2,
	TOWN_EFFECT_TYPE_MANSION_RESERVED01 = 3,
	TOWN_EFFECT_TYPE_MANSION_RESERVED02 = 4,
	TOWN_EFFECT_TYPE_MANSION_RESERVED03 = 5,
	TOWN_EFFECT_TYPE_MANSION_PLACEMENT_OBJECT_EFFECT_SLOT_INCREASE = 6,
	TOWN_EFFECT_TYPE_MANSION_NPC_EFFECT_SLOT_INCREASE = 7,
	TOWN_EFFECT_TYPE_MANSION_LEVELUP = 8,
	TOWN_EFFECT_TYPE_RESEARCH_SLOT_INCREASE = 9,
	TOWN_EFFECT_TYPE_RESEARCH_TIME_DECREMENT_ALL = 10,
	TOWN_EFFECT_TYPE_RESEARCH_TIME_DECREMENT_CATEGORY = 11,
	TOWN_EFFECT_TYPE_RESEARCH_COST_ACTIVITYPOINT_DECREMENT_ALL = 12,
	TOWN_EFFECT_TYPE_RESEARCH_COST_ACTIVITYPOINT_DECREMENT_CATEGORY = 13,
	TOWN_EFFECT_TYPE_RESEARCH_COST_DECREMENT_ALL = 14,
	TOWN_EFFECT_TYPE_RESEARCH_COST_DECREMENT_CATEGORY = 15,
	TOWN_EFFECT_TYPE_RESEARCH_LEVELUP = 16,
	TOWN_EFFECT_TYPE_ASSEMBLY_SLOT_INCREASE = 17,
	TOWN_EFFECT_TYPE_ASSEMBLY_TIME_DECREMENT_ALL = 18,
	TOWN_EFFECT_TYPE_ASSEMBLY_TIME_DECREMENT_CATEGORY = 19,
	TOWN_EFFECT_TYPE_ASSEMBLY_TIME_DECREMENT_ONE = 20,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_ACTIVITYPOINT_DECREMENT_ALL = 21,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_ACTIVITYPOINT_DECREMENT_CATEGORY = 22,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_ACTIVITYPOINT_DECREMENT_ONE = 23,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_DECREMENT_ALL = 24,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_DECREMENT_CATEGORY = 25,
	TOWN_EFFECT_TYPE_ASSEMBLY_COST_DECREMENT_ONE = 26,
	TOWN_EFFECT_TYPE_ASSEMBLY_GREAT_RESULT_INCREASE_ALL = 27,
	TOWN_EFFECT_TYPE_ASSEMBLY_GREAT_RESULT_INCREASE_CATEGORY = 28,
	TOWN_EFFECT_TYPE_ASSEMBLY_GREAT_RESULT_INCREASE_ONE = 29,
	TOWN_EFFECT_TYPE_ASSEMBLY_ADD  = 30,
	TOWN_EFFECT_TYPE_ASSEMBLY_LEVELUP = 31,
	TOWN_EFFECT_TYPE_DISPATCH_CRUE_SLOT_INCREASE = 32,
	TOWN_EFFECT_TYPE_DISPATCH_SLOT_INCREASE_NORMAL = 33,
	TOWN_EFFECT_TYPE_DISPATCH_SLOT_INCREASE_SPECIAL = 34,
	TOWN_EFFECT_TYPE_DISPATCH_SLOT_INCREASE_FREE = 35,
	TOWN_EFFECT_TYPE_DISPATCH_TIME_DECREMENT_ALL = 36,
	TOWN_EFFECT_TYPE_DISPATCH_TIME_DECREMENT_SHIP = 37,
	TOWN_EFFECT_TYPE_DISPATCH_TIME_DECREMENT_MISSION_CATEGORY = 38,
	TOWN_EFFECT_TYPE_DISPATCH_TIME_DECREMENT_MISSION_ONE = 39,
	TOWN_EFFECT_TYPE_DISPATCH_COST_ACTIVITYPOINT_DECREMENT_ALL = 40,
	TOWN_EFFECT_TYPE_DISPATCH_COST_ACTIVITYPOINT_DECREMENT_SHIP = 41,
	TOWN_EFFECT_TYPE_DISPATCH_COST_ACTIVITYPOINT_DECREMENT_MISSION_CATEGORY = 42,
	TOWN_EFFECT_TYPE_DISPATCH_COST_ACTIVITYPOINT_DECREMENT_MISSION_ONE = 43,
	TOWN_EFFECT_TYPE_DISPATCH_COST_DECREMENT_ALL = 44,
	TOWN_EFFECT_TYPE_DISPATCH_COST_DECREMENT_SHIP = 45,
	TOWN_EFFECT_TYPE_DISPATCH_COST_DECREMENT_MISSION_CATEGORY = 46,
	TOWN_EFFECT_TYPE_DISPATCH_COST_DECREMENT_MISSION_ONE = 47,
	TOWN_EFFECT_TYPE_DISPATCH_OVERCOME_INCREASE_ALL = 48,
	TOWN_EFFECT_TYPE_DISPATCH_OVERCOME_INCREASE_SHIP = 49,
	TOWN_EFFECT_TYPE_DISPATCH_OVERCOME_INCREASE_MISSION_CATEGORY = 50,
	TOWN_EFFECT_TYPE_DISPATCH_OVERCOME_INCREASE_MISSION_ONE = 51,
	TOWN_EFFECT_TYPE_DISPATCH_ADDSHIP = 52,
	TOWN_EFFECT_TYPE_DISPATCH_ADD  = 53,
	TOWN_EFFECT_TYPE_DISPATCH_LEVELUP = 54,
	TOWN_EFFECT_TYPE_TOWN_AREA_OPEN = 55,
	TOWN_EFFECT_TYPE_TRADE_ADD     = 56,
	TOWN_EFFECT_TYPE_TRADE_UPGRADE = 57,
	TOWN_EFFECT_TYPE_CHEF_MENU_FEAST_ADD = 58,
	TOWN_EFFECT_TYPE_CHEF_MENU_PACKED_MEAL_ADD = 59,
	TOWN_EFFECT_TYPE_CHEF_COST_ACTIVITYPOINT_DECREMENT_ALL = 60,
	TOWN_EFFECT_TYPE_CHEF_COST_DECREMENT_ALL = 61,
	TOWN_EFFECT_TYPE_PLACEMENT_PROP_LIMIT_COUNT_INCREASE = 62,
	TOWN_EFFECT_TYPE_PLACEMENT_NPC_LIMIT_COUNT_INCREASE = 63,
	TOWN_EFFECT_TYPE_EXPEDITION_SUPPORT_EXP = 64,
	TOWN_EFFECT_TYPE_EXPEDITION_SUPPORT_ENHANCE = 65,
	TOWN_EFFECT_TYPE_EXPEDITION_SUPPORT_ENHANCE_EXP = 66,
	TOWN_EFFECT_TYPE_TRAINING_ADD  = 67,
	TOWN_EFFECT_TYPE_TRAINING_SLOT_INCREASE = 68,
	TOWN_EFFECT_TYPE_TRAINING_COST_ACTIVITYPOINT_DECREMENT = 69,
	TOWN_EFFECT_TYPE_TRAINING_COST_DECREMENT = 70,
	TOWN_EFFECT_TYPE_TRAINING_TIME_DECREMENT = 71,
	TOWN_EFFECT_TYPE_TRAINING_EXP_INCREASE_ALL = 72,
	TOWN_EFFECT_TYPE_TRAINING_EXP_INCREASE_ONE = 73,
	TOWN_EFFECT_TYPE_FARM_OBJECT_INCREASE = 74,
	TOWN_EFFECT_TYPE_FARM_OBJECT_INCREASE_TIER = 75,
	TOWN_EFFECT_TYPE_PET_FARM_SLOT_INCREASE = 76,
	TOWN_EFFECT_TYPE_PET_WORKSHOP_SLOT_INCREASE = 77,
	TOWN_EFFECT_TYPE_MAX           = 78
};


// Enum EFGame.EFConst.TownItemAssemblyCategory
enum class ETownItemAssemblyCategory : uint8_t
{
	TOWN_ITEM_ASSEMBLY_CATEGORY_NONE = 0,
	TOWN_ITEM_ASSEMBLY_CATEGORY_BATTLEITEM = 1,
	TOWN_ITEM_ASSEMBLY_CATEGORY_COOKERY = 2,
	TOWN_ITEM_ASSEMBLY_CATEGORY_ENCHANT = 3,
	TOWN_ITEM_ASSEMBLY_CATEGORY_FACILITY = 4,
	TOWN_ITEM_ASSEMBLY_CATEGORY_PROCESS = 5,
	TOWN_ITEM_ASSEMBLY_CATEGORY_FARM = 6,
	TOWN_ITEM_ASSEMBLY_CATEGORY_MAX = 7
};


// Enum EFGame.EFConst.TownItemAssemblyState
enum class ETownItemAssemblyState : uint8_t
{
	TOWN_ITEM_ASSEMBLY_STATE_NONE  = 0,
	TOWN_ITEM_ASSEMBLY_STATE_WAITING = 1,
	TOWN_ITEM_ASSEMBLY_STATE_IN_PROGRESS = 2,
	TOWN_ITEM_ASSEMBLY_STATE_FINISHED = 3,
	TOWN_ITEM_ASSEMBLY_STATE_RECEIVED = 4,
	TOWN_ITEM_ASSEMBLY_STATE_CANCELED = 5,
	TOWN_ITEM_ASSEMBLY_STATE_MAX   = 6
};


// Enum EFGame.EFConst.TownItemAssemblyOutputGrade
enum class ETownItemAssemblyOutputGrade : uint8_t
{
	TOWN_ITEM_ASSEMBLY_OUTPUT_GRADE_NORMAL = 0,
	TOWN_ITEM_ASSEMBLY_OUTPUT_GRADE_GOOD = 1,
	TOWN_ITEM_ASSEMBLY_OUTPUT_GRADE_MAX = 2
};


// Enum EFGame.EFConst.TownItemAssemblyOutputType
enum class ETownItemAssemblyOutputType : uint8_t
{
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_NONE = 0,
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_NORMAL = 1,
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_REPLACEMENT = 2,
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_ADDITIONAL = 3,
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_BY_PRODUCT = 4,
	TOWN_ITEM_ASSEMBLY_OUTPUT_TYPE_MAX = 5
};


// Enum EFGame.EFConst.TownSlotType
enum class ETownSlotType : uint8_t
{
	TOWN_SLOT_TYPE_NONE            = 0,
	TOWN_SLOT_TYPE_RESEARCH        = 1,
	TOWN_SLOT_TYPE_ASSEMBLY        = 2,
	TOWN_SLOT_TYPE_DISPATCH_NORMAL = 3,
	TOWN_SLOT_TYPE_DISPATCH_SPECIAL = 4,
	TOWN_SLOT_TYPE_DISPATCH_FREE   = 5,
	TOWN_SLOT_TYPE_DISPATCH_CREW   = 6,
	TOWN_SLOT_TYPE_EFFECT_SLOT_PLACEMENT_OBJECT = 7,
	TOWN_SLOT_TYPE_EFFECT_SLOT_NPC_DRESS = 8,
	TOWN_SLOT_TYPE_TRAINING        = 9,
	TOWN_SLOT_TYPE_PET_FARM        = 10,
	TOWN_SLOT_TYPE_PET_WORKSHOP    = 11,
	TOWN_SLOT_TYPE_MAX             = 12
};


// Enum EFGame.EFConst.TownSlotOpenConditionType
enum class ETownSlotOpenConditionType : uint8_t
{
	TOWN_SLOT_OPEN_CONDITION_TYPE_NONE = 0,
	TOWN_SLOT_OPEN_CONDITION_TYPE_RESEARCH = 1,
	TOWN_SLOT_OPEN_CONDITION_TYPE_BUILDING = 2,
	TOWN_SLOT_OPEN_CONDITION_TYPE_BM_SERVICE = 3,
	TOWN_SLOT_OPEN_CONDITION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownEffectSlotType
enum class ETownEffectSlotType : uint8_t
{
	TOWN_EFFECT_SLOT_TYPE_NONE     = 0,
	TOWN_EFFECT_SLOT_TYPE_PLACEMENT_OBJECT = 1,
	TOWN_EFFECT_SLOT_TYPE_NPC_DRESS = 2,
	TOWN_EFFECT_SLOT_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.TownPlacementObjectGrade
enum class ETownPlacementObjectGrade : uint8_t
{
	TOWN_PLACEMENT_OBJECT_GRADE_COMMON = 0,
	TOWN_PLACEMENT_OBJECT_GRADE_UNCOMMON = 1,
	TOWN_PLACEMENT_OBJECT_GRADE_RARE = 2,
	TOWN_PLACEMENT_OBJECT_GRADE_EPIC = 3,
	TOWN_PLACEMENT_OBJECT_GRADE_LEGEND = 4,
	TOWN_PLACEMENT_OBJECT_GRADE_RELIC = 5,
	TOWN_PLACEMENT_OBJECT_GRADE_ANCIENT = 6,
	TOWN_PLACEMENT_OBJECT_GRADE_ESTHER = 7,
	TOWN_PLACEMENT_OBJECT_GRADE_AVATAR = 8,
	TOWN_PLACEMENT_OBJECT_GRADE_QUEST = 9,
	TOWN_PLACEMENT_OBJECT_GRADE_MAX = 10
};


// Enum EFGame.EFConst.TownPlacementObjectCategory
enum class ETownPlacementObjectCategory : uint8_t
{
	TOWN_PLACEMENT_OBJECT_CATEGORY_STRUCTURE = 0,
	TOWN_PLACEMENT_OBJECT_CATEGORY_FURNITURE = 1,
	TOWN_PLACEMENT_OBJECT_CATEGORY_STUFF = 2,
	TOWN_PLACEMENT_OBJECT_CATEGORY_MAX = 3
};


// Enum EFGame.EFConst.TownPlacementObjectType
enum class ETownPlacementObjectType : uint8_t
{
	TOWN_PLACEMENT_OBJECT_TYPE_NONE = 0,
	TOWN_PLACEMENT_OBJECT_TYPE_PROP = 1,
	TOWN_PLACEMENT_OBJECT_TYPE_NPC = 2,
	TOWN_PLACEMENT_OBJECT_TYPE_SUB_PC = 3,
	TOWN_PLACEMENT_OBJECT_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownPlacementSaveType
enum class ETownPlacementSaveType : uint8_t
{
	TOWN_PLACEMENT_SAVE_TYPE_NONE  = 0,
	TOWN_PLACEMENT_SAVE_TYPE_ADD   = 1,
	TOWN_PLACEMENT_SAVE_TYPE_UPDATE = 2,
	TOWN_PLACEMENT_SAVE_TYPE_REMOVE = 3,
	TOWN_PLACEMENT_SAVE_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.TownManaUpdateReasonType
enum class ETownManaUpdateReasonType : uint8_t
{
	TOWN_MANA_UPDATE_REASON_TYPE_USE = 0,
	TOWN_MANA_UPDATE_REASON_TYPE_RECOVERY = 1,
	TOWN_MANA_UPDATE_REASON_TYPE_ITEM = 2,
	TOWN_MANA_UPDATE_REASON_TYPE_ADMIN = 3,
	TOWN_MANA_UPDATE_REASON_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownViewType
enum class ETownViewType : uint8_t
{
	TOWN_VIEW_TYPE_NONE            = 0,
	TOWN_VIEW_TYPE_MANAGE          = 1,
	TOWN_VIEW_TYPE_PLACEMENT       = 2,
	TOWN_VIEW_TYPE_MAX             = 3
};


// Enum EFGame.EFConst.TownTradeType
enum class ETownTradeType : uint8_t
{
	TOWN_TRADE_TYPE_NONE           = 0,
	TOWN_TRADE_TYPE_GUIDE          = 1,
	TOWN_TRADE_TYPE_TRADE          = 2,
	TOWN_TRADE_TYPE_BLACK          = 3,
	TOWN_TRADE_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.TownTradeState
enum class ETownTradeState : uint8_t
{
	TOWN_TRADE_STATE_NONE          = 0,
	TOWN_TRADE_STATE_WAIT          = 1,
	TOWN_TRADE_STATE_ARRIVAL       = 2,
	TOWN_TRADE_STATE_MAX           = 3
};


// Enum EFGame.EFConst.TownTradeStateChangeReason
enum class ETownTradeStateChangeReason : uint8_t
{
	TOWN_TRADE_STATE_CHANGE_REASON_NONE = 0,
	TOWN_TRADE_STATE_CHANGE_REASON_RESEARCH = 1,
	TOWN_TRADE_STATE_CHANGE_REASON_ADMIN = 2,
	TOWN_TRADE_STATE_CHANGE_REASON_TRADER_SELECT = 3,
	TOWN_TRADE_STATE_CHANGE_REASON_TRADER_SPAWN = 4,
	TOWN_TRADE_STATE_CHANGE_REASON_TRADER_DESPAWN = 5,
	TOWN_TRADE_STATE_CHANGE_REASON_MAX = 6
};


// Enum EFGame.EFConst.TownTradeBuyerType
enum class ETownTradeBuyerType : uint8_t
{
	TOWN_TRADE_BUYER_TYPE_NONE     = 0,
	TOWN_TRADE_BUYER_TYPE_OWNER    = 1,
	TOWN_TRADE_BUYER_TYPE_GUEST    = 2,
	TOWN_TRADE_BUYER_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.TownTrainingType
enum class ETownTrainingType : uint8_t
{
	TOWN_TRAINING_TYPE_COMMON      = 0,
	TOWN_TRAINING_TYPE_RESEARCH    = 1,
	TOWN_TRAINING_TYPE_BM          = 2,
	TOWN_TRAINING_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.TownTrainingCostType
enum class ETownTrainingCostType : uint8_t
{
	TOWN_TRAINING_COST_TYPE_NONE   = 0,
	TOWN_TRAINING_COST_TYPE_GOLD   = 1,
	TOWN_TRAINING_COST_TYPE_TRADE_GOLD = 2,
	TOWN_TRAINING_COST_TYPE_PIRATE_COIN = 3,
	TOWN_TRAINING_COST_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.TownEnterType
enum class ETownEnterType : uint8_t
{
	TOWN_ENTER_TYPE_NONE           = 0,
	TOWN_ENTER_TYPE_BUDDY          = 1,
	TOWN_ENTER_TYPE_GUILD          = 2,
	TOWN_ENTER_TYPE_GUEST          = 3,
	TOWN_ENTER_TYPE_INTEREST       = 4,
	TOWN_ENTER_TYPE_RECOMMENDATION = 5,
	TOWN_ENTER_TYPE_PARTY_ROOM     = 6,
	TOWN_ENTER_TYPE_MAX            = 7
};


// Enum EFGame.EFConst.TownInterestType
enum class ETownInterestType : uint8_t
{
	TOWN_INTEREST_TYPE_NICE        = 0,
	TOWN_INTEREST_TYPE_GORGEOUS    = 1,
	TOWN_INTEREST_TYPE_FUN         = 2,
	TOWN_INTEREST_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.TownInterestState
enum class ETownInterestState : uint8_t
{
	TOWN_INTEREST_STATE_NONE       = 0,
	TOWN_INTEREST_STATE_RECEIVED   = 1,
	TOWN_INTEREST_STATE_SENT       = 2,
	TOWN_INTEREST_STATE_ESTABLISHED = 3,
	TOWN_INTEREST_STATE_MAX        = 4
};


// Enum EFGame.EFConst.TownInterestAddReason
enum class ETownInterestAddReason : uint8_t
{
	TOWN_INTEREST_ADD_REASON_NONE  = 0,
	TOWN_INTEREST_ADD_REASON_ADD   = 1,
	TOWN_INTEREST_ADD_REASON_UPDATE = 2,
	TOWN_INTEREST_ADD_REASON_MAX   = 3
};


// Enum EFGame.EFConst.TownConditionType
enum class ETownConditionType : uint8_t
{
	TOWN_CONDITION_TYPE_ENTER      = 0,
	TOWN_CONDITION_TYPE_FARM_ENABLED = 1,
	TOWN_CONDITION_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.TownChefType
enum class ETownChefType : uint8_t
{
	TOWN_CHEF_TYPE_NONE            = 0,
	TOWN_CHEF_TYPE_GUIDE           = 1,
	TOWN_CHEF_TYPE_FEAST           = 2,
	TOWN_CHEF_TYPE_PACKED_MEAL     = 3,
	TOWN_CHEF_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.TownCommunityContentType
enum class ETownCommunityContentType : uint8_t
{
	TOWN_COMMUNITY_CONTENT_TYPE_FRIEND = 0,
	TOWN_COMMUNITY_CONTENT_TYPE_GUILD = 1,
	TOWN_COMMUNITY_CONTENT_TYPE_MAX = 2
};


// Enum EFGame.EFConst.TownOutsideItemUseType
enum class ETownOutsideItemUseType : uint8_t
{
	TOWN_OUTSIDE_ITEM_USE_TYPE_NONE = 0,
	TOWN_OUTSIDE_ITEM_USE_TYPE_PLACEMENT_PROP = 1,
	TOWN_OUTSIDE_ITEM_USE_TYPE_ASSEMBLY_RECIPE = 2,
	TOWN_OUTSIDE_ITEM_USE_TYPE_TOWN_CREW = 3,
	TOWN_OUTSIDE_ITEM_USE_TYPE_MAX = 4
};


// Enum EFGame.EFConst.TownBookmarkType
enum class ETownBookmarkType : uint8_t
{
	TOWN_BOOKMARK_TYPE_NONE        = 0,
	TOWN_BOOKMARK_TYPE_RECIPE_FAVORITE = 1,
	TOWN_BOOKMARK_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.TownHistoryType
enum class ETownHistoryType : uint8_t
{
	TOWN_HISTORY_TYPE_NONE         = 0,
	TOWN_HISTORY_TYPE_VISIT        = 1,
	TOWN_HISTORY_TYPE_FEAST_EAT    = 2,
	TOWN_HISTORY_TYPE_GUEST_TRADE  = 3,
	TOWN_HISTORY_TYPE_FARM_HARVEST = 4,
	TOWN_HISTORY_TYPE_INTEREST     = 5,
	TOWN_HISTORY_TYPE_PET_GIFT     = 6,
	TOWN_HISTORY_TYPE_MAX          = 7
};


// Enum EFGame.EFConst.TownJumpingKnowledgeState
enum class ETownJumpingKnowledgeState : uint8_t
{
	TOWN_JUMPING_KNOWLEDGE_STATE_NONE = 0,
	TOWN_JUMPING_KNOWLEDGE_STATE_LEARN = 1,
	TOWN_JUMPING_KNOWLEDGE_STATE_MAX = 2
};


// Enum EFGame.EFConst.StageChangeDirType
enum class EStageChangeDirType : uint8_t
{
	STAGE_CHANGE_DIR_TYPE_NONE     = 0,
	STAGE_CHANGE_DIR_TYPE_STAGE_CHANGE = 1,
	STAGE_CHANGE_DIR_TYPE_ALWAYS   = 2,
	STAGE_CHANGE_DIR_TYPE_MOVE_DIR = 3,
	STAGE_CHANGE_DIR_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.TroopJoinRejectType
enum class ETroopJoinRejectType : uint8_t
{
	TROOP_JOIN_REJECT_TYPE_SAY_NO  = 0,
	TROOP_JOIN_REJECT_TYPE_TIMEOUT = 1,
	TROOP_JOIN_REJECT_TYPE_EXCEED  = 2,
	TROOP_JOIN_REJECT_TYPE_CUTSCENE = 3,
	TROOP_JOIN_REJECT_TYPE_ENV_SETTING = 4,
	TROOP_JOIN_REJECT_TYPE_DEAD    = 5,
	TROOP_JOIN_REJECT_TYPE_INTERACTION = 6,
	TROOP_JOIN_REJECT_TYPE_PRACTICE = 7,
	TROOP_JOIN_REJECT_TYPE_BLOCK   = 8,
	TROOP_JOIN_REJECT_TYPE_INVITE_ERROR = 9,
	TROOP_JOIN_REJECT_TYPE_INVITE_IMPOSSIBLE = 10,
	TROOP_JOIN_REJECT_TYPE_BLOCK_BY_ME = 11,
	TROOP_JOIN_REJECT_TYPE_COMPETITION_QUEST = 12,
	TROOP_JOIN_REJECT_TYPE_BATTLEFIELD = 13,
	TROOP_JOIN_REJECT_TYPE_JOIN_ELSE = 14,
	TROOP_JOIN_REJECT_TYPE_LOGOUT  = 15,
	TROOP_JOIN_REJECT_TYPE_PARTYBOARD = 16,
	TROOP_JOIN_REJECT_TYPE_MAX     = 17
};


// Enum EFGame.EFConst.TroopLeaveType
enum class ETroopLeaveType : uint8_t
{
	TROOP_LEAVE_TYPE_SELF_LEAVE    = 0,
	TROOP_LEAVE_TYPE_KICKED        = 1,
	TROOP_LEAVE_TYPE_KICKED_TIMEOUT = 2,
	TROOP_LEAVE_TYPE_DESTROYED     = 3,
	TROOP_LEAVE_TYPE_SYSTEM        = 4,
	TROOP_LEAVE_TYPE_SYSTEM_ERROR  = 5,
	TROOP_LEAVE_TYPE_TRAINING      = 6,
	TROOP_LEAVE_TYPE_PARTY_LEAVE_SELF = 7,
	TROOP_LEAVE_TYPE_WARP_FROM_TROOP_ZONE = 8,
	TROOP_LEAVE_TYPE_ENTER_ZONE_NOT_SUPPORT = 9,
	TROOP_LEAVE_TYPE_LOGIN_ZONE_NOT_SUPPORT = 10,
	TROOP_LEAVE_TYPE_CHANGE_TO_PARTY = 11,
	TROOP_LEAVE_TYPE_SYSTEM_BATTLEFIELD = 12,
	TROOP_LEAVE_TYPE_MATCHING_IN_PERSISTENT = 13,
	TROOP_LEAVE_TYPE_SYSTEM_COLOSSEUM = 14,
	TROOP_LEAVE_TYPE_EXIT_TROOP_ZONE_RE_PARTY = 15,
	TROOP_LEAVE_TYPE_PARTY_ROOM    = 16,
	TROOP_LEAVE_TYPE_SYSTEM_MATCHING = 17,
	TROOP_LEAVE_TYPE_MAX           = 18
};


// Enum EFGame.EFConst.TroopType
enum class ETroopType : uint8_t
{
	TROOP_TYPE_NORMAL              = 0,
	TROOP_TYPE_MATCHING            = 1,
	TROOP_TYPE_MAX                 = 2
};


// Enum EFGame.EFConst.UnpublishReason
enum class EUnpublishReason : uint8_t
{
	UNPUBLISH_REASON_MOVE          = 0,
	UNPUBLISH_REASON_DESPAWN       = 1,
	UNPUBLISH_REASON_DESTORY       = 2,
	UNPUBLISH_REASON_HIDE          = 3,
	UNPUBLISH_REASON_WARP          = 4,
	UNPUBLISH_REASON_LOGOUT        = 5,
	UNPUBLISH_REASON_PROJECTILE_COLLISION_HIT = 6,
	UNPUBLISH_REASON_PROJECTILE_LIFETIME_EXCEEDED = 7,
	UNPUBLISH_REASON_TRAP_KILLED   = 8,
	UNPUBLISH_REASON_TRAP_UNINSTALLED = 9,
	UNPUBLISH_REASON_TRAP_MAX_LIFETIME_EXCEEDED = 10,
	UNPUBLISH_REASON_TRAP_MAX_EXPLODE_COUNT_EXCEEDED = 11,
	UNPUBLISH_REASON_PROJECTILE_COLLISION_WORLD = 12,
	UNPUBLISH_REASON_MINION_DIED   = 13,
	UNPUBLISH_REASON_MINION_LIFETIME_EXCEED = 14,
	UNPUBLISH_REASON_MINION_SUMMON_COUNT_EXCEEDED = 15,
	UNPUBLISH_REASON_MINION_UNSUMMONED = 16,
	UNPUBLISH_REASON_VEHICLE_UNSUMMONED = 17,
	UNPUBLISH_REASON_VEHICLE_TIMEOUT = 18,
	UNPUBLISH_REASON_VEHICLE_KILLED = 19,
	UNPUBLISH_REASON_VEHICLE_NOT_ALLOWED_ZONE = 20,
	UNPUBLISH_REASON_VEHICLE_RIDE_ON_COUNT_ZERO = 21,
	UNPUBLISH_REASON_DROP_OBJECT_PICKUP = 22,
	UNPUBLISH_REASON_TELEPORT      = 23,
	UNPUBLISH_REASON_PROJECTILE_SKILL_END = 24,
	UNPUBLISH_REASON_MAX_TARGET_HIT_COUNT_EXCEEDED = 25,
	UNPUBLISH_REASON_PROJECTILE_CASTER_DIED = 26,
	UNPUBLISH_REASON_PROJECTILE_CASTER_PARALYZING = 27,
	UNPUBLISH_REASON_OBSERVER_MODE_FINISH = 28,
	UNPUBLISH_REASON_WARP_POINT    = 29,
	UNPUBLISH_REASON_MAX           = 30
};


// Enum EFGame.EFConst.UnsummonType
enum class EUnsummonType : uint8_t
{
	UNSUMMON_TYPE_NPC              = 0,
	UNSUMMON_TYPE_VEHICLE          = 1,
	UNSUMMON_TYPE_MAX              = 2
};


// Enum EFGame.EFConst.UserTimeline
enum class EUserTimeline : uint8_t
{
	USER_TIMELINE_NORMAL           = 0,
	USER_TIMELINE_NEW              = 1,
	USER_TIMELINE_RETURNING        = 2,
	USER_TIMELINE_MAX              = 3
};


// Enum EFGame.EFConst.VehicleType
enum class EVehicleType : uint8_t
{
	VEHICLE_TYPE_NORMAL            = 0,
	VEHICLE_TYPE_COMBAT            = 1,
	VEHICLE_TYPE_MAX               = 2
};


// Enum EFGame.EFConst.VehicleOriginType
enum class EVehicleOriginType : uint8_t
{
	VEHICLE_ORIGIN_TYPE_SUMMON     = 0,
	VEHICLE_ORIGIN_TYPE_PLACEMENT  = 1,
	VEHICLE_ORIGIN_TYPE_INSTALLATION = 2,
	VEHICLE_ORIGIN_TYPE_MAX        = 3
};


// Enum EFGame.EFConst.VehicleRideType
enum class EVehicleRideType : uint8_t
{
	VEHICLE_RIDE_TYPE_NONE         = 0,
	VEHICLE_RIDE_TYPE_ANIMATION    = 1,
	VEHICLE_RIDE_TYPE_MAX          = 2
};


// Enum EFGame.EFConst.VehicleGetOffOrigin
enum class EVehicleGetOffOrigin : uint8_t
{
	VEHICLE_GET_OFF_ORIGIN_NONE    = 0,
	VEHICLE_GET_OFF_ORIGIN_USER    = 1,
	VEHICLE_GET_OFF_ORIGIN_LEAVE_ZONE = 2,
	VEHICLE_GET_OFF_ORIGIN_BE_KILLED = 3,
	VEHICLE_GET_OFF_ORIGIN_DAMAGED = 4,
	VEHICLE_GET_OFF_ORIGIN_DURATION = 5,
	VEHICLE_GET_OFF_ORIGIN_ABNORMAL_STATUS = 6,
	VEHICLE_GET_OFF_ORIGIN_TRIGGER = 7,
	VEHICLE_GET_OFF_ORIGIN_GAME_ACTION = 8,
	VEHICLE_GET_OFF_ORIGIN_NPC_INTERACTION = 9,
	VEHICLE_GET_OFF_ORIGIN_COMMON_ACTION_START = 10,
	VEHICLE_GET_OFF_ORIGIN_TRIGGER_SYNC_LOC = 11,
	VEHICLE_GET_OFF_ORIGIN_TRACK_MOVE = 12,
	VEHICLE_GET_OFF_ORIGIN_CHANGE_SLOT = 13,
	VEHICLE_GET_OFF_ORIGIN_STATUS_EFFECT = 14,
	VEHICLE_GET_OFF_ORIGIN_INDOOR  = 15,
	VEHICLE_GET_OFF_ORIGIN_EXPIRE  = 16,
	VEHICLE_GET_OFF_ORIGIN_MAX     = 17
};


// Enum EFGame.EFConst.VehicleRideOnOrigin
enum class EVehicleRideOnOrigin : uint8_t
{
	VEHICLE_RIDE_ON_ORIGIN_NONE    = 0,
	VEHICLE_RIDE_ON_ORIGIN_USER    = 1,
	VEHICLE_RIDE_ON_ORIGIN_ENTER_ZONE = 2,
	VEHICLE_RIDE_ON_ORIGIN_GAME_ACTION = 3,
	VEHICLE_RIDE_ON_ORIGIN_MAX     = 4
};


// Enum EFGame.EFConst.VehicleItemUseType
enum class EVehicleItemUseType : uint8_t
{
	VEHICLE_ITEM_USE_TYPE_UNUSABLE = 0,
	VEHICLE_ITEM_USE_TYPE_NOT_REFUND = 1,
	VEHICLE_ITEM_USE_TYPE_REFUNDABLE = 2,
	VEHICLE_ITEM_USE_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.VehicleSlotUpdateType
enum class EVehicleSlotUpdateType : uint8_t
{
	VEHICLE_SLOT_UPDATE_TYPE_CHANGE_SLOT = 0,
	VEHICLE_SLOT_UPDATE_TYPE_CHANGE_BOOKMARK = 1,
	VEHICLE_SLOT_UPDATE_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.VoiceChatChannelType
enum class EVoiceChatChannelType : uint8_t
{
	VOICE_CHAT_CHANNEL_TYPE_PARTY  = 0,
	VOICE_CHAT_CHANNEL_TYPE_TROOP  = 1,
	VOICE_CHAT_CHANNEL_TYPE_GUILD  = 2,
	VOICE_CHAT_CHANNEL_TYPE_STT    = 3,
	VOICE_CHAT_CHANNEL_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.VoiceChatTokenType
enum class EVoiceChatTokenType : uint8_t
{
	VOICE_CHAT_TOKEN_TYPE_LOGIN    = 0,
	VOICE_CHAT_TOKEN_TYPE_JOIN     = 1,
	VOICE_CHAT_TOKEN_TYPE_MUTE     = 2,
	VOICE_CHAT_TOKEN_TYPE_MUTEALL  = 3,
	VOICE_CHAT_TOKEN_TYPE_KICK     = 4,
	VOICE_CHAT_TOKEN_TYPE_TRXN     = 5,
	VOICE_CHAT_TOKEN_TYPE_MAX      = 6
};


// Enum EFGame.EFConst.VoyageStat
enum class EVoyageStat : uint8_t
{
	VOYAGE_STAT_NONE               = 0,
	VOYAGE_STAT_FLOATING_MATTER_BOOSTER_GAUGE = 1,
	VOYAGE_STAT_FLOATING_MATTER_SUPPLY = 2,
	VOYAGE_STAT_FLOATING_MATTER_DETECTION = 3,
	VOYAGE_STAT_FLOATING_MATTER_CREW = 4,
	VOYAGE_STAT_FLOATING_MATTER_UP = 5,
	VOYAGE_STAT_SPEED_VALUE        = 6,
	VOYAGE_STAT_SPEED_PERCENT      = 7,
	VOYAGE_STAT_SPEED_BOOSTER      = 8,
	VOYAGE_STAT_SUPPLY_MAX         = 9,
	VOYAGE_STAT_SUPPLY_ACCELERATE  = 10,
	VOYAGE_STAT_SHIP_SPREAD_NET    = 11,
	VOYAGE_STAT_SHIP_LIGHT_NET     = 12,
	VOYAGE_STAT_SHIP_REQUITE_GOODLUCK = 13,
	VOYAGE_STAT_BOOSTER_GAUGE_UNOBTAINABLE = 14,
	VOYAGE_STAT_BOOSTER_GAUGE_UP   = 15,
	VOYAGE_STAT_BOOSTER_PAYBACK    = 16,
	VOYAGE_STAT_ACTION_DISABLE     = 17,
	VOYAGE_STAT_ENCOUNTER_BUFF_GHOST = 18,
	VOYAGE_STAT_ENCOUNTER_BUFF_WRECKED = 19,
	VOYAGE_STAT_NATIVE_COMMUNICATION = 20,
	VOYAGE_STAT_HUNTING_DAMAGE_UP  = 21,
	VOYAGE_STAT_TREASURE_GREAT_UP  = 22,
	VOYAGE_STAT_COOP_TREASURE_GREAT_UP = 23,
	VOYAGE_STAT_FISHINGSCHOOL_GREAT_UP = 24,
	VOYAGE_STAT_DIVING_DEPTH_UP    = 25,
	VOYAGE_STAT_NEUROTOXIN         = 26,
	VOYAGE_STAT_SAVE_LUCK          = 27,
	VOYAGE_STAT_LUCK_DROP_AMPLIFY  = 28,
	VOYAGE_STAT_SHIPWRECK_REVIVE   = 29,
	VOYAGE_STAT_GOLD_FLOATINGMATTER = 30,
	VOYAGE_STAT_IMMUNE_EVENTS      = 31,
	VOYAGE_STAT_MAX                = 32
};


// Enum EFGame.EFConst.VoyageDisableType
enum class EVoyageDisableType : uint8_t
{
	VOYAGE_DISABLE_TYPE_NONE       = 0,
	VOYAGE_DISABLE_TYPE_ACTIVE     = 1,
	VOYAGE_DISABLE_TYPE_NORMAL_SKILL = 2,
	VOYAGE_DISABLE_TYPE_SHIP_CONTROL = 3,
	VOYAGE_DISABLE_TYPE_STATIC_ISLAND = 4,
	VOYAGE_DISABLE_TYPE_DYNAMIC_ISLAND = 5,
	VOYAGE_DISABLE_TYPE_FIELD      = 6,
	VOYAGE_DISABLE_TYPE_CITY       = 7,
	VOYAGE_DISABLE_TYPE_MOVE       = 8,
	VOYAGE_DISABLE_TYPE_MAX        = 9
};


// Enum EFGame.EFConst.VoyageEventType
enum class EVoyageEventType : uint8_t
{
	VOYAGE_EVENT_TYPE_SEA_WEED     = 0,
	VOYAGE_EVENT_TYPE_DEAD_PERSON  = 1,
	VOYAGE_EVENT_TYPE_ROCK         = 2,
	VOYAGE_EVENT_TYPE_STORM        = 3,
	VOYAGE_EVENT_TYPE_COLD_WAVE    = 4,
	VOYAGE_EVENT_TYPE_FEAR         = 5,
	VOYAGE_EVENT_TYPE_BLESS        = 6,
	VOYAGE_EVENT_TYPE_CURSE        = 7,
	VOYAGE_EVENT_TYPE_DAMAGE       = 8,
	VOYAGE_EVENT_TYPE_FIRE         = 9,
	VOYAGE_EVENT_TYPE_FATIGUE      = 10,
	VOYAGE_EVENT_TYPE_COLDEST_WAVE = 11,
	VOYAGE_EVENT_TYPE_RAT          = 12,
	VOYAGE_EVENT_TYPE_SCURVY       = 13,
	VOYAGE_EVENT_TYPE_SIREN_SONG   = 14,
	VOYAGE_EVENT_TYPE_ENTANGLE     = 15,
	VOYAGE_EVENT_TYPE_CRACKED_SAIL = 16,
	VOYAGE_EVENT_TYPE_BLIND        = 17,
	VOYAGE_EVENT_TYPE_HOMESICKNESS = 18,
	VOYAGE_EVENT_TYPE_FOOD_POISONING = 19,
	VOYAGE_EVENT_TYPE_WET_FOG      = 20,
	VOYAGE_EVENT_TYPE_DUST         = 21,
	VOYAGE_EVENT_TYPE_SAND_STORM   = 22,
	VOYAGE_EVENT_TYPE_FAIR_WIND    = 23,
	VOYAGE_EVENT_TYPE_MAX          = 24
};


// Enum EFGame.EFConst.VoyageEventExecuteType
enum class EVoyageEventExecuteType : uint8_t
{
	VOYAGE_EVENT_EXECUTE_TYPE_IMMEDIATE = 0,
	VOYAGE_EVENT_EXECUTE_TYPE_TIME = 1,
	VOYAGE_EVENT_EXECUTE_TYPE_DISTANCE = 2,
	VOYAGE_EVENT_EXECUTE_TYPE_TIME_OR_DISTANCE = 3,
	VOYAGE_EVENT_EXECUTE_TYPE_MAX  = 4
};


// Enum EFGame.EFConst.VoyageEventReason
enum class EVoyageEventReason : uint8_t
{
	VOYAGE_EVENT_REASON_NONE       = 0,
	VOYAGE_EVENT_REASON_ENTER      = 1,
	VOYAGE_EVENT_REASON_LEAVE      = 2,
	VOYAGE_EVENT_REASON_MOVE       = 3,
	VOYAGE_EVENT_REASON_STAY       = 4,
	VOYAGE_EVENT_REASON_MAX        = 5
};


// Enum EFGame.EFConst.VoyageEventRemoveReason
enum class EVoyageEventRemoveReason : uint8_t
{
	VOYAGE_EVENT_REMOVE_REASON_NONE = 0,
	VOYAGE_EVENT_REMOVE_REASON_TIME_EXPIRED = 1,
	VOYAGE_EVENT_REMOVE_REASON_CREW_SKILL = 2,
	VOYAGE_EVENT_REMOVE_REASON_LEAVE_AREA = 3,
	VOYAGE_EVENT_REMOVE_REASON_MAX = 4
};


// Enum EFGame.EFConst.VoyageRecordType
enum class EVoyageRecordType : uint8_t
{
	VOYAGE_RECORD_TYPE_SHIP        = 0,
	VOYAGE_RECORD_TYPE_CREW        = 1,
	VOYAGE_RECORD_TYPE_ADVENTURE_MATTER = 2,
	VOYAGE_RECORD_TYPE_VISIT_ZONE  = 3,
	VOYAGE_RECORD_TYPE_WATCH_WHALE = 4,
	VOYAGE_RECORD_TYPE_GHOST_SHIP_ENCOUNTER = 5,
	VOYAGE_RECORD_TYPE_MAX         = 6
};


// Enum EFGame.EFConst.VoyageSearchType
enum class EVoyageSearchType : uint8_t
{
	VOYAGE_SEARCH_TYPE_NONE        = 0,
	VOYAGE_SEARCH_TYPE_NPC_HUNTING = 1,
	VOYAGE_SEARCH_TYPE_PROP_SUNKEN_ROCK = 2,
	VOYAGE_SEARCH_TYPE_PROP_NATIVE_VILLIAGE = 3,
	VOYAGE_SEARCH_TYPE_PROP_TREASURE_POINT = 4,
	VOYAGE_SEARCH_TYPE_PROP_FISHING_SCHOOL = 5,
	VOYAGE_SEARCH_TYPE_PROP_DIVING = 6,
	VOYAGE_SEARCH_TYPE_MAX         = 7
};


// Enum EFGame.EFConst.VoyageActionType
enum class EVoyageActionType : uint8_t
{
	VOYAGE_ACTION_TYPE_TREASURE_SALVATION = 0,
	VOYAGE_ACTION_TYPE_DIVING      = 1,
	VOYAGE_ACTION_TYPE_FISHING_SCHOOL = 2,
	VOYAGE_ACTION_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.VoyageSkillDropGrade
enum class EVoyageSkillDropGrade : uint8_t
{
	VOYAGE_SKILL_DROP_GRADE_FAIL   = 0,
	VOYAGE_SKILL_DROP_GRADE_SUCCESS = 1,
	VOYAGE_SKILL_DROP_GRADE_GREAT  = 2,
	VOYAGE_SKILL_DROP_GRADE_MAX    = 3
};


// Enum EFGame.EFConst.VoyageToleranceRank
enum class EVoyageToleranceRank : uint8_t
{
	VOYAGE_TOLERANCE_RANK_NONE     = 0,
	VOYAGE_TOLERANCE_RANK_DANGER   = 1,
	VOYAGE_TOLERANCE_RANK_SERIOUS  = 2,
	VOYAGE_TOLERANCE_RANK_CAUTION  = 3,
	VOYAGE_TOLERANCE_RANK_NORMAL   = 4,
	VOYAGE_TOLERANCE_RANK_STRONG   = 5,
	VOYAGE_TOLERANCE_RANK_MAX      = 6
};


// Enum EFGame.EFConst.WallpaperUnlockType
enum class EWallpaperUnlockType : uint8_t
{
	WALLPAPER_UNLOCK_TYPE_DEFAULT  = 0,
	WALLPAPER_UNLOCK_TYPE_ACHIEVEMENT = 1,
	WALLPAPER_UNLOCK_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.WorldCongestion
enum class EWorldCongestion : uint8_t
{
	WORLD_CONGESTION_LIGHT         = 0,
	WORLD_CONGESTION_MEDIUM        = 1,
	WORLD_CONGESTION_HEAVY         = 2,
	WORLD_CONGESTION_MAX           = 3
};


// Enum EFGame.EFConst.WorldDisplayTag
enum class EWorldDisplayTag : uint8_t
{
	WORLD_DISPLAY_TAG_NORMAL       = 0,
	WORLD_DISPLAY_TAG_NEW          = 1,
	WORLD_DISPLAY_TAG_RECOMMENDED  = 2,
	WORLD_DISPLAY_TAG_EVENT        = 3,
	WORLD_DISPLAY_TAG_MAX          = 4
};


// Enum EFGame.EFConst.WorldEventRepeatType
enum class EWorldEventRepeatType : uint8_t
{
	WORLD_EVENT_REPEAT_TYPE_YEARLY = 0,
	WORLD_EVENT_REPEAT_TYPE_MONTHLY = 1,
	WORLD_EVENT_REPEAT_TYPE_WEEKLY = 2,
	WORLD_EVENT_REPEAT_TYPE_DAILY  = 3,
	WORLD_EVENT_REPEAT_TYPE_HOURLY = 4,
	WORLD_EVENT_REPEAT_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.WorldEventActionType
enum class EWorldEventActionType : uint8_t
{
	WORLD_EVENT_ACTION_TYPE_SPAWN_CHAOS_GATE = 0,
	WORLD_EVENT_ACTION_TYPE_SPAWN_LUCKY_MONSTER = 1,
	WORLD_EVENT_ACTION_TYPE_SPAWN_EVENT_NPC = 2,
	WORLD_EVENT_ACTION_TYPE_CHANGE_RAID_CONFIG = 3,
	WORLD_EVENT_ACTION_TYPE_SPAWN_ISLAND = 4,
	WORLD_EVENT_ACTION_TYPE_SPAWN_WORLD_OBJECT = 5,
	WORLD_EVENT_ACTION_TYPE_GENERATE_COOP_QUEST = 6,
	WORLD_EVENT_ACTION_TYPE_CYCLE_COOP_QUEST = 7,
	WORLD_EVENT_ACTION_TYPE_SIGN_WORLD_OBJECT = 8,
	WORLD_EVENT_ACTION_TYPE_DESPAWN_WORLD_OBJECT = 9,
	WORLD_EVENT_ACTION_TYPE_GUILD_SPAWN_ISLAND = 10,
	WORLD_EVENT_ACTION_TYPE_GUILD_GENERATE_COOP_QUEST = 11,
	WORLD_EVENT_ACTION_TYPE_MAX    = 12
};


// Enum EFGame.EFConst.WarpPointSlotType
enum class EWarpPointSlotType : uint8_t
{
	WARP_POINT_SLOT_TYPE_BASE      = 0,
	WARP_POINT_SLOT_TYPE_EXPAND    = 1,
	WARP_POINT_SLOT_TYPE_PAID_SERVICE = 2,
	WARP_POINT_SLOT_TYPE_PAID_SERVICE_PC_ROOM = 3,
	WARP_POINT_SLOT_TYPE_MAX       = 4
};


// Enum EFGame.EFConst.WarpPointUseConditionType
enum class EWarpPointUseConditionType : uint8_t
{
	WARP_POINT_USE_CONDITION_TYPE_NONE = 0,
	WARP_POINT_USE_CONDITION_TYPE_NOT_USE = 1,
	WARP_POINT_USE_CONDITION_TYPE_USE = 2,
	WARP_POINT_USE_CONDITION_TYPE_COMPLETE_QUEST_ID = 3,
	WARP_POINT_USE_CONDITION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.WelcomeBoostConditionType
enum class EWelcomeBoostConditionType : uint8_t
{
	WELCOME_BOOST_CONDITION_TYPE_NONE = 0,
	WELCOME_BOOST_CONDITION_TYPE_QUEST_COMPLETE = 1,
	WELCOME_BOOST_CONDITION_TYPE_ITEM_LEVEL_LESS = 2,
	WELCOME_BOOST_CONDITION_TYPE_ITEM_LEVEL_GREATER_OR_EQUAL = 3,
	WELCOME_BOOST_CONDITION_TYPE_PC_LEVEL_LESS = 4,
	WELCOME_BOOST_CONDITION_TYPE_PC_LEVEL_GREATER_OR_EQUAL = 5,
	WELCOME_BOOST_CONDITION_TYPE_MAX = 6
};


// Enum EFGame.EFConst.WelcomeBoostRewardType
enum class EWelcomeBoostRewardType : uint8_t
{
	WELCOME_BOOST_REWARD_TYPE_PC   = 0,
	WELCOME_BOOST_REWARD_TYPE_ACCOUNT = 1,
	WELCOME_BOOST_REWARD_TYPE_EXPEDITION = 2,
	WELCOME_BOOST_REWARD_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.ZoneType
enum class EZoneType : uint8_t
{
	ZONE_TYPE_FIELD                = 0,
	ZONE_TYPE_CITY                 = 1,
	ZONE_TYPE_INSTANCE_DUNGEON     = 2,
	ZONE_TYPE_PERSONAL_DUNGEON     = 3,
	ZONE_TYPE_ARENA                = 4,
	ZONE_TYPE_MOD                  = 5,
	ZONE_TYPE_PERSISTENT_OCEAN     = 6,
	ZONE_TYPE_COLOSSEUM            = 7,
	ZONE_TYPE_CHAOSGATE            = 8,
	ZONE_TYPE_ENCOUNTER_DUNGEON    = 9,
	ZONE_TYPE_SECRET_DUNGEON       = 10,
	ZONE_TYPE_RAID_DUNGEON         = 11,
	ZONE_TYPE_STATIC_ISLAND        = 12,
	ZONE_TYPE_DYNAMIC_ISLAND       = 13,
	ZONE_TYPE_PERSONAL_ISLAND      = 14,
	ZONE_TYPE_PERSONAL_TOWN        = 15,
	ZONE_TYPE_VOYAGE_LINER         = 16,
	ZONE_TYPE_TRAINING_MODE        = 17,
	ZONE_TYPE_BATTLEFIELD          = 18,
	ZONE_TYPE_INSTANCE_OCEAN       = 19,
	ZONE_TYPE_TUTORIAL_MODE        = 20,
	ZONE_TYPE_GROWTH_MODE          = 21,
	ZONE_TYPE_RVR_FIELD            = 22,
	ZONE_TYPE_RVR_INSTANCE         = 23,
	ZONE_TYPE_MAX                  = 24
};


// Enum EFGame.EFConst.ZoneContentType
enum class EZoneContentType : uint8_t
{
	ZONE_CONTENT_TYPE_NONE         = 0,
	ZONE_CONTENT_TYPE_CHANGE_CLASS = 1,
	ZONE_CONTENT_TYPE_DUNGEON_STORY_MISSION = 2,
	ZONE_CONTENT_TYPE_DUNGEON_PARTY = 3,
	ZONE_CONTENT_TYPE_DUNGEON_ARK  = 4,
	ZONE_CONTENT_TYPE_DUNGEON_DEFAULT = 5,
	ZONE_CONTENT_TYPE_GHOST_SHIP   = 6,
	ZONE_CONTENT_TYPE_WRECKED_SHIP = 7,
	ZONE_CONTENT_TYPE_DUNGEON_DEATH_SCENE = 8,
	ZONE_CONTENT_TYPE_DUNGEON_LABYRINTH = 9,
	ZONE_CONTENT_TYPE_DUNGEON_EPIC_RAID = 10,
	ZONE_CONTENT_TYPE_DUNGEON_JUMPING_MODE = 11,
	ZONE_CONTENT_TYPE_DUNGEON_TROOP_SET = 12,
	ZONE_CONTENT_TYPE_REVERSE_RUIN = 13,
	ZONE_CONTENT_TYPE_REVERSE_RUIN_LOBBY = 14,
	ZONE_CONTENT_TYPE_BATTLEFIELD_OPEN_MATCH = 15,
	ZONE_CONTENT_TYPE_EPIC_GATE    = 16,
	ZONE_CONTENT_TYPE_SCENE_REPLAY = 17,
	ZONE_CONTENT_TYPE_WAY_OF_THRONE = 18,
	ZONE_CONTENT_TYPE_LOST_SURVIVAL = 19,
	ZONE_CONTENT_TYPE_MAX          = 20
};


// Enum EFGame.EFConst.ZoneLevel
enum class EZoneLevel : uint8_t
{
	ZONE_LEVEL_NORMAL              = 0,
	ZONE_LEVEL_HARD                = 1,
	ZONE_LEVEL_HELLCHAOS           = 2,
	ZONE_LEVEL_CHALLENGE           = 3,
	ZONE_LEVEL_SPECIAL             = 4,
	ZONE_LEVEL_MAX                 = 5
};


// Enum EFGame.EFConst.ZoneClearType
enum class EZoneClearType : uint8_t
{
	ZONE_CLEAR_TYPE_NONE           = 0,
	ZONE_CLEAR_TYPE_BOSS_KILL      = 1,
	ZONE_CLEAR_TYPE_ALL_MONSTER_KILL = 2,
	ZONE_CLEAR_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.ZoneFailType
enum class EZoneFailType : uint8_t
{
	ZONE_FAIL_TYPE_NONE            = 0,
	ZONE_FAIL_TYPE_DEATH           = 1,
	ZONE_FAIL_TYPE_TIME_LIMT       = 2,
	ZONE_FAIL_TYPE_MAX             = 3
};


// Enum EFGame.EFConst.ZoneSpotType
enum class EZoneSpotType : uint8_t
{
	WORLD_SPOT_TYPE_CHAOS_GATE     = 0,
	WORLD_SPOT_TYPE_MONSTER        = 1,
	WORLD_SPOT_TYPE_PROP           = 2,
	WORLD_SPOT_TYPE_TRAP           = 3,
	WORLD_SPOT_TYPE_NPC_WAVE       = 4,
	WORLD_SPOT_TYPE_SKILL_TARGET   = 5,
	WORLD_SPOT_TYPE_COLOSSEUM      = 6,
	WORLD_SPOT_TYPE_RAID_MOVE_DIRECT = 7,
	WORLD_SPOT_TYPE_RAID_MOVE_DEVIOUS = 8,
	WORLD_SPOT_TYPE_REVIVE         = 9,
	WORLD_SPOT_TYPE_BATTLEFIELD    = 10,
	WORLD_SPOT_TYPE_SAFETY_ZONE    = 11,
	WORLD_SPOT_TYPE_PROJECTILE     = 12,
	WORLD_SPOT_TYPE_MAX            = 13
};


// Enum EFGame.EFConst.ZoneBuffTarget
enum class EZoneBuffTarget : uint8_t
{
	ZONE_BUFF_TARGET_NONE          = 0,
	ZONE_BUFF_TARGET_PC            = 1,
	ZONE_BUFF_TARGET_MONSTER       = 2,
	ZONE_BUFF_TARGET_NPC           = 3,
	ZONE_BUFF_TARGET_ALL           = 4,
	ZONE_BUFF_TARGET_MAX           = 5
};


// Enum EFGame.EFConst.ZoneContentsBuffTarget
enum class EZoneContentsBuffTarget : uint8_t
{
	ZONE_CONTENTS_BUFF_TARGET_NONE = 0,
	ZONE_CONTENTS_BUFF_TARGET_ALL  = 1,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT = 2,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT01 = 3,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT02 = 4,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT03 = 5,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT04 = 6,
	ZONE_CONTENTS_BUFF_TARGET_TROOP_UNIT05 = 7,
	ZONE_CONTENTS_BUFF_TARGET_PVP_RED = 8,
	ZONE_CONTENTS_BUFF_TARGET_PVP_BLUE = 9,
	ZONE_CONTENTS_BUFF_TARGET_TRIGGER_ACTOR_SELF = 10,
	ZONE_CONTENTS_BUFF_TARGET_NPC_ID = 11,
	ZONE_CONTENTS_BUFF_TARGET_NPC_GRADE = 12,
	ZONE_CONTENTS_BUFF_TARGET_MAX  = 13
};


// Enum EFGame.EFConst.ZonePvPType
enum class EZonePvPType : uint8_t
{
	ZONE_PVP_TYPE_DISABLED         = 0,
	ZONE_PVP_TYPE_ENABLED          = 1,
	ZONE_PVP_TYPE_CONDITIONAL      = 2,
	ZONE_PVP_TYPE_MAX              = 3
};


// Enum EFGame.EFConst.ZoneObjectType
enum class EZoneObjectType : uint8_t
{
	ZONE_OBJECT_TYPE_NONE          = 0,
	ZONE_OBJECT_TYPE_EXISTENCE_ONLY = 1,
	ZONE_OBJECT_TYPE_POSITION_SYNC_SECTOR = 2,
	ZONE_OBJECT_TYPE_POSITION_SYNC_ZONE = 3,
	ZONE_OBJECT_TYPE_POSITION_SKILL_SYNC = 4,
	ZONE_OBJECT_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.HuntingChaseWayPointType
enum class EHuntingChaseWayPointType : uint8_t
{
	HUNTING_CHASE_WAY_POINT_TYPE_START = 0,
	HUNTING_CHASE_WAY_POINT_TYPE_POINT01 = 1,
	HUNTING_CHASE_WAY_POINT_TYPE_POINT02 = 2,
	HUNTING_CHASE_WAY_POINT_TYPE_POINT03 = 3,
	HUNTING_CHASE_WAY_POINT_TYPE_POINT04 = 4,
	HUNTING_CHASE_WAY_POINT_TYPE_POINT05 = 5,
	HUNTING_CHASE_WAY_POINT_TYPE_END = 6,
	HUNTING_CHASE_WAY_POINT_TYPE_MAX = 7
};


// Enum EFGame.EFConst.TriggerWaveControlType
enum class ETriggerWaveControlType : uint8_t
{
	TRIGGER_WAVE_CONTROL_TYPE_START = 0,
	TRIGGER_WAVE_CONTROL_TYPE_STOP = 1,
	TRIGGER_WAVE_CONTROL_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.TriggerContentType
enum class ETriggerContentType : uint8_t
{
	TRIGGER_CONTENT_TYPE_NONE      = 0,
	TRIGGER_CONTENT_TYPE_CHAOSGATE = 1,
	TRIGGER_CONTENT_TYPE_MOD_PLATINUM_FIELD_A = 2,
	TRIGGER_CONTENT_TYPE_MOD_PLATINUM_FIELD_B = 3,
	TRIGGER_CONTENT_TYPE_VOYAGE_LINER = 4,
	TRIGGER_CONTENT_TYPE_MOD_BOSSRUSH = 5,
	TRIGGER_CONTENT_TYPE_RAID      = 6,
	TRIGGER_CONTENT_TYPE_TOWN      = 7,
	TRIGGER_CONTENT_TYPE_ISLAND_HEART_POINT = 8,
	TRIGGER_CONTENT_TYPE_CHAOSDUNGEON = 9,
	TRIGGER_CONTENT_TYPE_ZONE      = 10,
	TRIGGER_CONTENT_TYPE_TRAINING_MODE = 11,
	TRIGGER_CONTENT_TYPE_TOWER     = 12,
	TRIGGER_CONTENT_TYPE_COLOSSEUM = 13,
	TRIGGER_CONTENT_TYPE_NPC_EVOLUTION = 14,
	TRIGGER_CONTENT_TYPE_BATTLEFIELD = 15,
	TRIGGER_CONTENT_TYPE_ADVENTURE_MATTER = 16,
	TRIGGER_CONTENT_TYPE_REVERSE_RUIN = 17,
	TRIGGER_CONTENT_TYPE_FRIENDSHIP = 18,
	TRIGGER_CONTENT_TYPE_TOWN_CHEF = 19,
	TRIGGER_CONTENT_TYPE_TUTORIAL_MODE = 20,
	TRIGGER_CONTENT_TYPE_MOD_WAY_OF_THRONE = 21,
	TRIGGER_CONTENT_TYPE_LOST_SURVIVAL = 22,
	TRIGGER_CONTENT_TYPE_MOD_CUBE  = 23,
	TRIGGER_CONTENT_TYPE_CLASS_PREVIEW = 24,
	TRIGGER_CONTENT_TYPE_ESTHER_WEAPON_ENHANCE = 25,
	TRIGGER_CONTENT_TYPE_MAX       = 26
};


// Enum EFGame.EFConst.TriggerExclusiveExecutionType
enum class ETriggerExclusiveExecutionType : uint8_t
{
	TRIGGER_EXCLUSIVE_EXECUTION_TYPE_NONE = 0,
	TRIGGER_EXCLUSIVE_EXECUTION_TYPE_PENDING = 1,
	TRIGGER_EXCLUSIVE_EXECUTION_TYPE_CANCEL = 2,
	TRIGGER_EXCLUSIVE_EXECUTION_TYPE_MAX = 3
};


// Enum EFGame.EFConst.CumulativePointType
enum class ECumulativePointType : uint8_t
{
	CUMULATIVE_POINT_TYPE_GIANT_HEARTS = 0,
	CUMULATIVE_POINT_TYPE_ISLAND_HEARTS = 1,
	CUMULATIVE_POINT_TYPE_MOCOCO   = 2,
	CUMULATIVE_POINT_TYPE_GREAT_PICTURES = 3,
	CUMULATIVE_POINT_TYPE_VOYAGE_ADVENTURE = 4,
	CUMULATIVE_POINT_TYPE_WORLDTREE_LEAF = 5,
	CUMULATIVE_POINT_TYPE_ADVENTURE_MEDAL = 6,
	CUMULATIVE_POINT_TYPE_ORPHEUS_STAR = 7,
	CUMULATIVE_POINT_TYPE_MAX      = 8
};


// Enum EFGame.EFConst.SkillMomentDeviation
enum class ESkillMomentDeviation : uint8_t
{
	SKILL_MOMENT_DEVIATION_CORRECT = 0,
	SKILL_MOMENT_DEVIATION_EARLY   = 1,
	SKILL_MOMENT_DEVIATION_LATE    = 2,
	SKILL_MOMENT_DEVIATION_CHANGE_STAGE_EARLY = 3,
	SKILL_MOMENT_DEVIATION_MAX     = 4
};


// Enum EFGame.EFConst.FishingNetRewardGrade
enum class EFishingNetRewardGrade : uint8_t
{
	FISHING_NET_REWARD_GRADE_NONE  = 0,
	FISHING_NET_REWARD_GRADE_GOOD  = 1,
	FISHING_NET_REWARD_GRADE_GREAT = 2,
	FISHING_NET_REWARD_GRADE_PERFECT = 3,
	FISHING_NET_REWARD_GRADE_MAX   = 4
};


// Enum EFGame.EFConst.AvatarReformOutputGrade
enum class EAvatarReformOutputGrade : uint8_t
{
	AVATAR_REFORM_OUTPUT_GRADE_GOOD = 0,
	AVATAR_REFORM_OUTPUT_GRADE_NORMAL = 1,
	AVATAR_REFORM_OUTPUT_GRADE_FAIL = 2,
	AVATAR_REFORM_OUTPUT_GRADE_MAX = 3
};


// Enum EFGame.EFConst.AvatarReformType
enum class EAvatarReformType : uint8_t
{
	AVATAR_REFORM_TYPE_COMPOSITE   = 0,
	AVATAR_REFORM_TYPE_DISASSEMBLE = 1,
	AVATAR_REFORM_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.AvatarReformComposite
enum class EAvatarReformComposite : uint8_t
{
	AVATAR_REFORM_COMPOSITE_EQUIP  = 0,
	AVATAR_REFORM_COMPOSITE_BADGE  = 1,
	AVATAR_REFORM_COMPOSITE_MAX    = 2
};


// Enum EFGame.EFConst.SkillResultErrorType
enum class ESkillResultErrorType : uint8_t
{
	SKILL_RESULT_ERROR_TYPE_START  = 0,
	SKILL_RESULT_ERROR_TYPE_CAST   = 1,
	SKILL_RESULT_ERROR_TYPE_STAGE  = 2,
	SKILL_RESULT_ERROR_TYPE_FINISH = 3,
	SKILL_RESULT_ERROR_TYPE_EFFECT_GROUP = 4,
	SKILL_RESULT_ERROR_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.InputAbusingType
enum class EInputAbusingType : uint8_t
{
	INPUT_ABUSING_TYPE_REPEAT_NORMAL_ATTACK = 0,
	INPUT_ABUSING_TYPE_TOO_MANY_REPEAT = 1,
	INPUT_ABUSING_TYPE_ONE_POINT_CLICK_FOR_PERIOD = 2,
	INPUT_ABUSING_TYPE_ONE_POINT_CLICK_WITHIN_COUNT = 3,
	INPUT_ABUSING_TYPE_MOUSE_MOVE_WARP = 4,
	INPUT_ABUSING_TYPE_MOUSE_MOVE_STRAIGHT = 5,
	INPUT_ABUSING_TYPE_EQUAL_INTERVAL_REPEAT = 6,
	INPUT_ABUSING_TYPE_MAX         = 7
};


// Enum EFGame.EFConst.InputModeType
enum class EInputModeType : uint8_t
{
	INPUT_MODE_TYPE_DEFAULT        = 0,
	INPUT_MODE_TYPE_FPS            = 1,
	INPUT_MODE_TYPE_KEYBOARD_4WAY  = 2,
	INPUT_MODE_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.EpicSkillGaugeAcquire
enum class EpicSkillGaugeAcquire : uint8_t
{
	EPIC_SKILL_GAUGE_ACQUIRE_PERIOD = 0,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_BE_KILLED = 1,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_PARALYZATION = 2,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_GROGGY = 3,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_COUNTER_ATTACK = 4,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_BLOCK_SKILL = 5,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_DESTROY_PARTS = 6,
	EPIC_SKILL_GAUGE_ACQUIRE_NPC_ADD_STATUS_EFFECT = 7,
	EPIC_SKILL_GAUGE_ACQUIRE_PC_BE_KILLED = 8,
	EPIC_SKILL_GAUGE_ACQUIRE_PC_ADD_STATUS_EFFECT = 9,
	EPIC_SKILL_GAUGE_ACQUIRE_MAX   = 10
};


// Enum EFGame.EFConst.ZoneContentGaugeBroadcastType
enum class EZoneContentGaugeBroadcastType : uint8_t
{
	ZONE_CONTENT_GAUGE_BROADCAST_TYPE_SELF = 0,
	ZONE_CONTENT_GAUGE_BROADCAST_TYPE_PARTY = 1,
	ZONE_CONTENT_GAUGE_BROADCAST_TYPE_TROOP = 2,
	ZONE_CONTENT_GAUGE_BROADCAST_TYPE_ALL = 3,
	ZONE_CONTENT_GAUGE_BROADCAST_TYPE_MAX = 4
};


// Enum EFGame.EFConst.PCDropCondition
enum class EPCDropCondition : uint8_t
{
	PC_DROP_CONDITION_NONE         = 0,
	PC_DROP_CONDITION_BUFF         = 1,
	PC_DROP_CONDITION_MAX          = 2
};


// Enum EFGame.EFConst.AvatarAssemblyCatogory
enum class EAvatarAssemblyCatogory : uint8_t
{
	AVATA_ASSEMBLY_CATEGORY_EQUIP  = 0,
	AVATA_ASSEMBLY_CATEGORY_SPECIAL = 1,
	AVATA_ASSEMBLY_CATEGORY_MAX    = 2
};


// Enum EFGame.EFConst.AvatarAssemblySubCatogory
enum class EAvatarAssemblySubCatogory : uint8_t
{
	AVATA_ASSEMBLY_SUB_CATEGORY_ALL = 0,
	AVATA_ASSEMBLY_SUB_CATEGORY_NORMAL = 1,
	AVATA_ASSEMBLY_SUB_CATEGORY_CHAOS = 2,
	AVATA_ASSEMBLY_SUB_CATEGORY_ABYSS_DUNGEON = 3,
	AVATA_ASSEMBLY_SUB_CATEGORY_ABYSS_RAID = 4,
	AVATA_ASSEMBLY_SUB_CATEGORY_LIFE = 5,
	AVATA_ASSEMBLY_SUB_CATEGORY_VOYAGE = 6,
	AVATA_ASSEMBLY_SUB_CATEGORY_MAX = 7
};


// Enum EFGame.EFConst.EstherLinkPointAcquireType
enum class EstherLinkPointAcquireType : uint8_t
{
	ESTHER_LINK_POINT_ACQUIRE_TYPE_CLEAR_DUNGEON = 0,
	ESTHER_LINK_POINT_ACQUIRE_TYPE_MAX = 1
};


// Enum EFGame.EFConst.GrowthModeMissionType
enum class EGrowthModeMissionType : uint8_t
{
	GROWTH_MODE_MISSION_TYPE_REQUIRED = 0,
	GROWTH_MODE_MISSION_TYPE_SELECTION = 1,
	GROWTH_MODE_MISSION_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.GrowthModeAction
enum class EGrowthModeAction : uint8_t
{
	GROWTH_MODE_ACTION_ENTER       = 0,
	GROWTH_MODE_ACTION_MENU        = 1,
	GROWTH_MODE_ACTION_RETURN      = 2,
	GROWTH_MODE_ACTION_QUIT        = 3,
	GROWTH_MODE_ACTION_MAX         = 4
};


// Enum EFGame.EFConst.StrongholdState
enum class EStrongholdState : uint8_t
{
	STRONGHOLD_STATE_WAITING       = 0,
	STRONGHOLD_STATE_OCCUPYING     = 1,
	STRONGHOLD_STATE_FIGHTING      = 2,
	STRONGHOLD_STATE_OCCUPATION_COMPLETED = 3,
	STRONGHOLD_STATE_MAX           = 4
};


// Enum EFGame.EFConst.PlayerState
enum class EPlayerState : uint8_t
{
	PLAYER_STATE_NORMAL            = 0,
	PLAYER_STATE_AFK               = 1,
	PLAYER_STATE_MAX               = 2
};


// Enum EFGame.EFConst.ItemGradeOptionType
enum class EItemGradeOptionType : uint8_t
{
	ITEM_GRADE_OPTION_TYPE_NONE    = 0,
	ITEM_GRADE_OPTION_TYPE_BRACELET = 1,
	ITEM_GRADE_OPTION_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.AbilityFeatureExecType
enum class EAbilityFeatureExecType : uint8_t
{
	ABILITY_FEATURE_EXEC_TYPE_ALWAYS = 0,
	ABILITY_FEATURE_EXEC_TYPE_RATIO = 1,
	ABILITY_FEATURE_EXEC_TYPE_TIMED_RATIO = 2,
	ABILITY_FEATURE_EXEC_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.AbilityOreGrade
enum class EAbilityOreGrade : uint8_t
{
	ABILITY_ORE_GRADE_G01          = 0,
	ABILITY_ORE_GRADE_G02          = 1,
	ABILITY_ORE_GRADE_G03          = 2,
	ABILITY_ORE_GRADE_G04          = 3,
	ABILITY_ORE_GRADE_G05          = 4,
	ABILITY_ORE_GRADE_G06          = 5,
	ABILITY_ORE_GRADE_G07          = 6,
	ABILITY_ORE_GRADE_G08          = 7,
	ABILITY_ORE_GRADE_G09          = 8,
	ABILITY_ORE_GRADE_G10          = 9,
	ABILITY_ORE_GRADE_MAX          = 10
};


// Enum EFGame.EFConst.AchievementObjectiveUpdateProc
enum class EAchievementObjectiveUpdateProc : uint8_t
{
	ACHIEVEMENT_OBJECTIVE_UPDATE_PROC_SINGLE = 0,
	ACHIEVEMENT_OBJECTIVE_UPDATE_PROC_ACCUMULATIVE = 1,
	ACHIEVEMENT_OBJECTIVE_UPDATE_PROC_CURRENT = 2,
	ACHIEVEMENT_OBJECTIVE_UPDATE_PROC_GREATER = 3,
	ACHIEVEMENT_OBJECTIVE_UPDATE_PROC_MAX = 4
};


// Enum EFGame.EFConst.AchievementFinishOrigin
enum class EAchievementFinishOrigin : uint8_t
{
	ACHIEVEMENT_FINISH_ORIGIN_NORMAL = 0,
	ACHIEVEMENT_FINISH_ORIGIN_REWARD = 1,
	ACHIEVEMENT_FINISH_ORIGIN_MAX  = 2
};


// Enum EFGame.EFConst.AchievementEventOrigin
enum class EAchievementEventOrigin : uint8_t
{
	ACHIEVEMENT_EVENT_ORIGIN_GAME  = 0,
	ACHIEVEMENT_EVENT_ORIGIN_CLIENT = 1,
	ACHIEVEMENT_EVENT_ORIGIN_FAM   = 2,
	ACHIEVEMENT_EVENT_ORIGIN_MAX   = 3
};


// Enum EFGame.EFConst.ActorClass
enum class EActorClass : uint8_t
{
	ACTOR_CLASS_CREATURE           = 0,
	ACTOR_CLASS_PROP               = 1,
	ACTOR_CLASS_PROJECTILE         = 2,
	ACTOR_CLASS_TRAP               = 3,
	ACTOR_CLASS_VEHICLE            = 4,
	ACTOR_CLASS_TOWER              = 5,
	ACTOR_CLASS_MAX                = 6
};


// Enum EFGame.EFConst.AbnormalEvent
enum class EAbnormalEvent : uint8_t
{
	ABNORMAL_EVENT_DOWN_START      = 0,
	ABNORMAL_EVENT_DOWN_END        = 1,
	ABNORMAL_EVENT_STAND_UP_START  = 2,
	ABNORMAL_EVENT_STAND_UP_END    = 3,
	ABNORMAL_EVENT_SWAY_START      = 4,
	ABNORMAL_EVENT_SWAY_END        = 5,
	ABNORMAL_EVENT_KNOCKBACK_START = 6,
	ABNORMAL_EVENT_KNOCKBACK_END   = 7,
	ABNORMAL_EVENT_KNOCKDOWN_START = 8,
	ABNORMAL_EVENT_KNOCKDOWN_END   = 9,
	ABNORMAL_EVENT_KNOCKDOWN_TWIST_START = 10,
	ABNORMAL_EVENT_KNOCKDOWN_TWIST_END = 11,
	ABNORMAL_EVENT_BOUND_START     = 12,
	ABNORMAL_EVENT_BOUND_END       = 13,
	ABNORMAL_EVENT_SPRING_BOUND_START = 14,
	ABNORMAL_EVENT_SPRING_BOUND_END = 15,
	ABNORMAL_EVENT_AIRBORNE_START  = 16,
	ABNORMAL_EVENT_AIRBORNE_END    = 17,
	ABNORMAL_EVENT_AIRBORNE_HIT_START = 18,
	ABNORMAL_EVENT_AIRBORNE_HIT_END = 19,
	ABNORMAL_EVENT_BRING_DOWN_START = 20,
	ABNORMAL_EVENT_BRING_DOWN_END  = 21,
	ABNORMAL_EVENT_THRUST_START    = 22,
	ABNORMAL_EVENT_THRUST_END      = 23,
	ABNORMAL_EVENT_FREEZE_START    = 24,
	ABNORMAL_EVENT_FREEZE_END      = 25,
	ABNORMAL_EVENT_STONE_START     = 26,
	ABNORMAL_EVENT_STONE_END       = 27,
	ABNORMAL_EVENT_FEAR_START      = 28,
	ABNORMAL_EVENT_FEAR_END        = 29,
	ABNORMAL_EVENT_SHACKLE_START   = 30,
	ABNORMAL_EVENT_SHACKLE_END     = 31,
	ABNORMAL_EVENT_STUN_START      = 32,
	ABNORMAL_EVENT_STUN_END        = 33,
	ABNORMAL_EVENT_POLYMORPH_START = 34,
	ABNORMAL_EVENT_POLYMORPH_END   = 35,
	ABNORMAL_EVENT_PLUNGE_START    = 36,
	ABNORMAL_EVENT_PLUNGE_END      = 37,
	ABNORMAL_EVENT_SILENCE_START   = 38,
	ABNORMAL_EVENT_SILENCE_END     = 39,
	ABNORMAL_EVENT_EARTHQUEAKE_START = 40,
	ABNORMAL_EVENT_EARTHQUEAKE_END = 41,
	ABNORMAL_EVENT_VERMIN_START    = 42,
	ABNORMAL_EVENT_VERMIN_END      = 43,
	ABNORMAL_EVENT_ELECTROCUTION_START = 44,
	ABNORMAL_EVENT_ELECTROCUTION_END = 45,
	ABNORMAL_EVENT_CONFINEMENT_START = 46,
	ABNORMAL_EVENT_CONFINEMENT_END = 47,
	ABNORMAL_EVENT_SLEEP_START     = 48,
	ABNORMAL_EVENT_SLEEP_END       = 49,
	ABNORMAL_EVENT_FREEZE_WEAK_START = 50,
	ABNORMAL_EVENT_FREEZE_WEAK_END = 51,
	ABNORMAL_EVENT_FREEZE_STRONG_START = 52,
	ABNORMAL_EVENT_FREEZE_STRONG_END = 53,
	ABNORMAL_EVENT_PROVOKE_START   = 54,
	ABNORMAL_EVENT_PROVOKE_END     = 55,
	ABNORMAL_EVENT_FREEZE_COUNTER_START = 56,
	ABNORMAL_EVENT_FREEZE_COUNTER_END = 57,
	ABNORMAL_EVENT_MIND_CONTROL_START = 58,
	ABNORMAL_EVENT_MIND_CONTROL_END = 59,
	ABNORMAL_EVENT_MAX             = 60
};


// Enum EFGame.EFConst.InvisibleReason
enum class EInvisibleReason : uint8_t
{
	INVISIBLE_REASON_ADMIN         = 0,
	INVISIBLE_REASON_COLOSSEUM_OBSERVER = 1,
	INVISIBLE_REASON_VEHICLE_SLOT  = 2,
	INVISIBLE_REASON_OBSERVER_MODE = 3,
	INVISIBLE_REASON_TOWN_VIEW     = 4,
	INVISIBLE_REASON_MAX           = 5
};


// Enum EFGame.EFConst.ActionDisableReason
enum class EActionDisableReason : uint8_t
{
	ACTION_DISABLE_REASON_NONE     = 0,
	ACTION_DISABLE_REASON_MOTION_PROCESSING = 1,
	ACTION_DISABLE_REASON_ABNORMAL_STATUS = 2,
	ACTION_DISABLE_REASON_ABNORMAL_ACTION_COUNT = 3,
	ACTION_DISABLE_REASON_MANUAL   = 4,
	ACTION_DISABLE_REASON_IN_TOWER = 5,
	ACTION_DISABLE_REASON_ACTION_SPEED_ZERO = 6,
	ACTION_DISABLE_REASON_TRACK_MOVING = 7,
	ACTION_DISABLE_REASON_RIDE_ON_VEHICLE = 8,
	ACTION_DISABLE_REASON_INVISIBLE = 9,
	ACTION_DISABLE_REASON_BE_GRABBED = 10,
	ACTION_DISABLE_REASON_DIR_CHANGE_ONLY = 11,
	ACTION_DISABLE_REASON_FLIGHT   = 12,
	ACTION_DISABLE_REASON_SCENE_REPLAY = 13,
	ACTION_DISABLE_REASON_MAX      = 14
};


// Enum EFGame.EFConst.AiFileVersion
enum class EAiFileVersion : uint8_t
{
	AI_FILE_VERSION                = 0,
	AI_FILE_VERSION01              = 1,
	AI_FILE_VERSION_MAX            = 2
};


// Enum EFGame.EFConst.AiNodeType
enum class EAiNodeType : uint8_t
{
	AI_NODE_TYPE_ACTION            = 0,
	AI_NODE_TYPE_CONDITION         = 1,
	AI_NODE_TYPE_MAX               = 2
};


// Enum EFGame.EFConst.AiStateActionType
enum class EAiStateActionType : uint8_t
{
	AI_STATE_ACTION_TYPE_CANCEL_SKILL = 0,
	AI_STATE_ACTION_TYPE_CHANGE_IDLE_EMOTION = 1,
	AI_STATE_ACTION_TYPE_CHANGE_STATE = 2,
	AI_STATE_ACTION_TYPE_INTERACTION = 3,
	AI_STATE_ACTION_TYPE_EMIT_SIGNAL = 4,
	AI_STATE_ACTION_TYPE_INVINCIBLE = 5,
	AI_STATE_ACTION_TYPE_MOVE_TO_TARGET = 6,
	AI_STATE_ACTION_TYPE_MOVE_TO_POSITION = 7,
	AI_STATE_ACTION_TYPE_PATROL    = 8,
	AI_STATE_ACTION_TYPE_RESET_SIGNAL = 9,
	AI_STATE_ACTION_TYPE_TELEPORT  = 10,
	AI_STATE_ACTION_TYPE_USE_SKILL = 11,
	AI_STATE_ACTION_TYPE_SET_BALLOON = 12,
	AI_STATE_ACTION_TYPE_SET_FACTION = 13,
	AI_STATE_ACTION_TYPE_ADD_STATE_BUFF = 14,
	AI_STATE_ACTION_TYPE_ADD_STATUS_EFFECT = 15,
	AI_STATE_ACTION_TYPE_LIFE_VESSEL = 16,
	AI_STATE_ACTION_TYPE_HELP_SIGNAL = 17,
	AI_STATE_ACTION_TYPE_CHANGE_MOVE_TYPE = 18,
	AI_STATE_ACTION_TYPE_DESPAWN   = 19,
	AI_STATE_ACTION_TYPE_MOVE_FROM_AWAY_TARGET = 20,
	AI_STATE_ACTION_TYPE_MOVE_TO_RELATIVE_POSITION = 21,
	AI_STATE_ACTION_TYPE_SET_PATROL_INDEX = 22,
	AI_STATE_ACTION_TYPE_REMOVE_STATUS_EFFECT = 23,
	AI_STATE_ACTION_TYPE_SPECIAL_USE_SKILL = 24,
	AI_STATE_ACTION_TYPE_SET_GAMENOTE = 25,
	AI_STATE_ACTION_TYPE_SEND_NPC_SIGNAL_STRING = 26,
	AI_STATE_ACTION_TYPE_MAX       = 27
};


// Enum EFGame.EFConst.AiFlag
enum class EAiFlag : uint8_t
{
	AI_FLAG_NODE_ENABLED           = 0,
	AI_FLAG_PAUSED                 = 1,
	AI_FLAG_FACTION_TASK_IN_PROGRESS = 2,
	AI_FLAG_HELP_SIGNALED          = 3,
	AI_FLAG_TAKED_DAMAGE           = 4,
	AI_FLAG_GROGGY_ACTIVATED       = 5,
	AI_FLAG_PARALYZATION_ACTIVATED = 6,
	AI_FLAG_FORCED_TIMER           = 7,
	AI_FLAG_COUNTER_FREEZE         = 8,
	AI_FLAG_MAX                    = 9
};


// Enum EFGame.EFConst.AiSkill
enum class EAiSkill : uint8_t
{
	AI_CHOSEN_SKILL                = 0,
	AI_FORCED_SKILL                = 1,
	AI_BURROW_START_SKILL          = 2,
	AI_BURROW_END_SKILL            = 3,
	AI_USED_SKILL                  = 4,
	AI_SKILL_MAX                   = 5,
	AI_MAX                         = 6
};


// Enum EFGame.EFConst.AiMoveMood
enum class EAiMoveMood : uint8_t
{
	AI_MOVE_MOOD_WALK              = 0,
	AI_MOVE_MOOD_RUN               = 1,
	AI_MOVE_MOOD_STOP              = 2,
	AI_MOVE_MOOD_SPEED             = 3,
	AI_MOVE_MOOD_BURROW            = 4,
	AI_MOVE_MOOD_FAST_RUN          = 5,
	AI_MOVE_MOOD_MAX               = 6
};


// Enum EFGame.EFConst.AiValue
enum class EAiValue : uint8_t
{
	AI_VALUE_NONE                  = 0,
	AI_VALUE_CHANGE_SKILL_SET      = 1,
	AI_VALUE_CHOOSE_SKILL          = 2,
	AI_VALUE_FACTION               = 3,
	AI_VALUE_BALLOON               = 4,
	AI_VALUE_CHANGE_STATE          = 5,
	AI_VALUE_DESPAWN               = 6,
	AI_VALUE_INFINITY              = 7,
	AI_VALUE_USE_SKILL             = 8,
	AI_VALUE_HELP_SIGNAL           = 9,
	AI_VALUE_INVINCIBLE            = 10,
	AI_VALUE_MOVE_SPEED            = 11,
	AI_VALUE_COMBO_SKILL           = 12,
	AI_VALUE_STATUS_EFFECT         = 13,
	AI_VALUE_GLOBAL_COOL_TIME      = 14,
	AI_VALUE_GO_TO_HOME            = 15,
	AI_VALUE_STAT_RECOVERY         = 16,
	AI_VALUE_MAX                   = 17
};


// Enum EFGame.EFConst.CompareType
enum class ECompareType : uint8_t
{
	COMPARE_TYPE_EQUAL             = 0,
	COMPARE_TYPE_NOT_EQUAL         = 1,
	COMPARE_TYPE_LESS              = 2,
	COMPARE_TYPE_LESS_EQUAL        = 3,
	COMPARE_TYPE_GREATER           = 4,
	COMPARE_TYPE_GREATER_EQUAL     = 5,
	COMPARE_TYPE_MAX               = 6
};


// Enum EFGame.EFConst.PatrolState
enum class EPatrolState : uint8_t
{
	PATROL_STATE_BACKWARD          = 0,
	PATROL_STATE_PAUSE             = 1,
	PATROL_STATE_END               = 2,
	PATROL_STATE_MAX               = 3
};


// Enum EFGame.EFConst.PatrolSet
enum class EPatrolSet : uint8_t
{
	PATROL_SET_PATROL              = 0,
	PATROL_SET_FORCE_START         = 1,
	PATROL_SET_PAUSE               = 2,
	PATROL_SET_NONE                = 3,
	PATROL_SET_MAX                 = 4
};


// Enum EFGame.EFConst.ChangeTargetType
enum class EChangeTargetType : uint8_t
{
	CHANGE_TARGET_TYPE_DISTANCE    = 0,
	CHANGE_TARGET_TYPE_SKILL_RANGE = 1,
	CHANGE_TARGET_TYPE_ALL         = 2,
	CHANGE_TARGET_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.ChooseTargetType
enum class EChooseTargetType : uint8_t
{
	CHOOSE_TARGET_TYPE_HEIGHEST    = 0,
	CHOOSE_TARGET_TYPE_LOWEST      = 1,
	CHOOSE_TARGET_TYPE_DISTANCE_VALUE = 2,
	CHOOSE_TARGET_TYPE_HEIGHEST_HP = 3,
	CHOOSE_TARGET_TYPE_LOWEST_HP   = 4,
	CHOOSE_TARGET_TYPE_RANDOM      = 5,
	CHOOSE_TARGET_TYPE_NO_SELECT   = 6,
	CHOOSE_TARGET_TYPE_AROUND_ATTACKER = 7,
	CHOOSE_TARGET_TYPE_MAX         = 8
};


// Enum EFGame.EFConst.TargetAngleType
enum class ETargetAngleType : uint8_t
{
	TARGET_ANGLE_TYPE_NONE         = 0,
	TARGET_ANGLE_TYPE_LEFT         = 1,
	TARGET_ANGLE_TYPE_RIGHT        = 2,
	TARGET_ANGLE_TYPE_FRONT        = 3,
	TARGET_ANGLE_TYPE_BACK         = 4,
	TARGET_ANGLE_TYPE_CUSTOM       = 5,
	TARGET_ANGLE_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.TargetHoldType
enum class ETargetHoldType : uint8_t
{
	TARGET_HOLD_TYPE_TICK          = 0,
	TARGET_HOLD_TYPE_ATTACK_COUNT  = 1,
	TARGET_HOLD_TYPE_FIXED         = 2,
	TARGET_HOLD_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.TargetType
enum class ETargetType : uint8_t
{
	TARGET_TYPE_PRIMARY            = 0,
	TARGET_TYPE_MASTER             = 1,
	TARGET_TYPE_FOLLOW_OBJECT      = 2,
	TARGET_TYPE_NPC                = 3,
	TARGET_TYPE_MAX                = 4
};


// Enum EFGame.EFConst.CheckTargetType
enum class ECheckTargetType : uint8_t
{
	CHECK_TARGET_TYPE_SELF         = 0,
	CHECK_TARGET_TYPE_PRIMARY      = 1,
	CHECK_TARGET_TYPE_FOLLOW_OBJECT = 2,
	CHECK_TARGET_TYPE_SUMMON_MASTER = 3,
	CHECK_TARGET_TYPE_MAX          = 4
};


// Enum EFGame.EFConst.CheckRangeType
enum class ECheckRangeType : uint8_t
{
	CHECK_RANGE_TYPE_BOTH          = 0,
	CHECK_RANGE_TYPE_MIN_RANGE     = 1,
	CHECK_RANGE_TYPE_MAX_RANGE     = 2,
	CHECK_RANGE_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.ReturnStatus
enum class EReturnStatus : uint8_t
{
	RETURN_STATUS_BEGIN            = 0,
	RETURN_STATUS_END              = 1,
	RETURN_STATUS_MAX              = 2
};


// Enum EFGame.EFConst.ChooseSkillOption
enum class EChooseSkillOption : uint8_t
{
	CHOOSE_SKILL_OPTION_MIN_DISTANCE = 0,
	CHOOSE_SKILL_OPTION_STANDING   = 1,
	CHOOSE_SKILL_OPTION_MAX        = 2
};


// Enum EFGame.EFConst.AiContentType
enum class EAiContentType : uint8_t
{
	AI_CONTENT_TYPE_GROGGY         = 0,
	AI_CONTENT_TYPE_PARALYZATION   = 1,
	AI_CONTENT_TYPE_BLOCKSKILL     = 2,
	AI_CONTENT_TYPE_COUNTER_FREEZE = 3,
	AI_CONTENT_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.TargetFilter
enum class ETargetFilter : uint8_t
{
	TARGET_FILTER_ALLY             = 0,
	TARGET_FILTER_ENEMY            = 1,
	TARGET_FILTER_PRIMARY_ENEMY    = 2,
	TARGET_FILTER_SPECIFIED_INDEX  = 3,
	TARGET_FILTER_PC               = 4,
	TARGET_FILTER_ALL              = 5,
	TARGET_FILTER_PC_AND_ALLY      = 6,
	TARGET_FILTER_MAX              = 7
};


// Enum EFGame.EFConst.AiSummonType
enum class EAiSummonType : uint8_t
{
	AI_SUMMON_TYPE_NPC             = 0,
	AI_SUMMON_TYPE_TRAP            = 1,
	AI_SUMMON_TYPE_PROP            = 2,
	AI_SUMMON_TYPE_MAX             = 3
};


// Enum EFGame.EFConst.AiTickStatus
enum class EAiTickStatus : uint8_t
{
	AI_TICK_STATUS_START           = 0,
	AI_TICK_STATUS_PAUSE           = 1,
	AI_TICK_STATUS_RESUME          = 2,
	AI_TICK_STATUS_RESET           = 3,
	AI_TICK_STATUS_MAX             = 4
};


// Enum EFGame.EFConst.AiPrimaryEnemyType
enum class EAiPrimaryEnemyType : uint8_t
{
	AI_PRIMARY_ENEMY_ALL           = 0,
	AI_PRIMARY_ENEMY_PC            = 1,
	AI_PRIMARY_ENEMY_NPC           = 2,
	AI_PRIMARY_ENEMY_MAX           = 3
};


// Enum EFGame.EFConst.AiModType
enum class EAiModType : uint8_t
{
	AI_MOD_TYPE_CUBE               = 0,
	AI_MOD_TYPE_TOWER              = 1,
	AI_MOD_TYPE_PLATINUM_AREA      = 2,
	AI_MOD_TYPE_TOWN_DEFENCE       = 3,
	AI_MOD_TYPE_BOSS_RUSH          = 4,
	AI_MOD_TYPE_MAX                = 5
};


// Enum EFGame.EFConst.AiPointType
enum class EAiPointType : uint8_t
{
	AI_POINT_TYPE_GROGGY           = 0,
	AI_POINT_TYPE_PARALYZATION     = 1,
	AI_POINT_TYPE_MAX              = 2
};


// Enum EFGame.EFConst.AiMoveType
enum class EAiMoveType : uint8_t
{
	AI_MOVE_TYPE_NORMAL            = 0,
	AI_MOVE_TYPE_PATROL            = 1,
	AI_MOVE_TYPE_MAX               = 2
};


// Enum EFGame.EFConst.AiSummonDistanceType
enum class EAiSummonDistanceType : uint8_t
{
	AI_SUMMON_DISTANCE_TYPE_FOLLOW = 0,
	AI_SUMMON_DISTANCE_TYPE_RETURN = 1,
	AI_SUMMON_DISTANCE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.AiMasterSlaveOrderType
enum class EAiMasterSlaveOrderType : uint8_t
{
	AI_MASTER_SLAVE_ORDER_TYPE_TO_MASTER = 0,
	AI_MASTER_SLAVE_ORDER_TYPE_TO_SLAVE = 1,
	AI_MASTER_SLAVE_ORDER_TYPE_MAX = 2
};


// Enum EFGame.EFConst.AiComparePositionType
enum class EAiComparePositionType : uint8_t
{
	AI_COMPARE_POSITION_TYPE_SPAWN_POSITION = 0,
	AI_COMPARE_POSITION_TYPE_SPOT  = 1,
	AI_COMPARE_POSITION_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.AiAddBuffConditionType
enum class EAiAddBuffConditionType : uint8_t
{
	AI_ADD_BUFF_CONDITION_TYPE_NONE = 0,
	AI_ADD_BUFF_CONDITION_TYPE_HIGHEST_BUFF_STACK_COUNT = 1,
	AI_ADD_BUFF_CONDITION_TYPE_MAX = 2
};


// Enum EFGame.EFConst.AiDelayType
enum class EAiDelayType : uint8_t
{
	AI_DELAY_TYPE_NORMAL           = 0,
	AI_DELAY_TYPE_SKILL            = 1,
	AI_DELAY_TYPE_BULLET_TIME      = 2,
	AI_DELAY_TYPE_HEARTBEAT        = 3,
	AI_DELAY_TYPE_MAX              = 4
};


// Enum EFGame.EFConst.BattlefieldFaction
enum class EBattlefieldFaction : uint8_t
{
	BATTLEFIELD_FACTION_UNCHANGE   = 0,
	BATTLEFIELD_FACTION_TEAM       = 1,
	BATTLEFIELD_FACTION_MAX        = 2
};


// Enum EFGame.EFConst.BattlefieldGuildNotifyType
enum class EBattlefieldGuildNotifyType : uint8_t
{
	BATTLEFIELD_GUILD_NOTIFY_TYPE_NONE = 0,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_CREATE = 1,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_ENTERER_COUNT = 2,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_DESTROY = 3,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_ENTRY_RESCTRICTION_EXPIRE = 4,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_UPDATE_INSTANCE_STATE = 5,
	BATTLEFIELD_GUILD_NOTIFY_TYPE_MAX = 6
};


// Enum EFGame.EFConst.BattlefieldGuildUpdateType
enum class EBattlefieldGuildUpdateType : uint8_t
{
	BATTLEFIELD_GUILD_UPDATE_TYPE_NONE = 0,
	BATTLEFIELD_GUILD_UPDATE_TYPE_ENLIST = 1,
	BATTLEFIELD_GUILD_UPDATE_TYPE_CANCEL = 2,
	BATTLEFIELD_GUILD_UPDATE_TYPE_RESULT = 3,
	BATTLEFIELD_GUILD_UPDATE_TYPE_OCCUPY = 4,
	BATTLEFIELD_GUILD_UPDATE_TYPE_RANKING = 5,
	BATTLEFIELD_GUILD_UPDATE_TYPE_REWARD = 6,
	BATTLEFIELD_GUILD_UPDATE_TYPE_MAX = 7
};


// Enum EFGame.EFConst.BattlefieldSearchType
enum class EBattlefieldSearchType : uint8_t
{
	BATTLEFIELD_SEARCH_TYPE_NONE   = 0,
	BATTLEFIELD_SEARCH_TYPE_MATCH_STATUS = 1,
	BATTLEFIELD_SEARCH_TYPE_RANK_STATUS = 2,
	BATTLEFIELD_SEARCH_TYPE_OCCUPIED_STATUS = 3,
	BATTLEFIELD_SEARCH_TYPE_LAST_WEEK_RANK = 4,
	BATTLEFIELD_SEARCH_TYPE_MAX    = 5
};


// Enum EFGame.EFConst.BattlefieldRequestType
enum class EBattlefieldRequestType : uint8_t
{
	BATTLEFIELD_REQUEST_TYPE_NONE  = 0,
	BATTLEFIELD_REQUEST_TYPE_MEMBER_ENTER = 1,
	BATTLEFIELD_REQUEST_TYPE_GUILD_LEVEL_UPDATE = 2,
	BATTLEFIELD_REQUEST_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.BattlefieldEnlistCancelReason
enum class EBattlefieldEnlistCancelReason : uint8_t
{
	BATTLEFIELD_ENLIST_CANCEL_REASON_NONE = 0,
	BATTLEFIELD_ENLIST_CANCEL_REASON_USER = 1,
	BATTLEFIELD_ENLIST_CANCEL_REASON_ADMIN = 2,
	BATTLEFIELD_ENLIST_CANCEL_REASON_SYSTEM = 3,
	BATTLEFIELD_ENLIST_CANCEL_REASON_MAX = 4
};


// Enum EFGame.EFConst.BattlefieldScoreOrigin
enum class EBattlefieldScoreOrigin : uint8_t
{
	BATTLEFIELD_SCORE_ORIGIN_KILL  = 0,
	BATTLEFIELD_SCORE_ORIGIN_PROP  = 1,
	BATTLEFIELD_SCORE_ORIGIN_NPC   = 2,
	BATTLEFIELD_SCORE_ORIGIN_SKILL_EFFECT = 3,
	BATTLEFIELD_SCORE_ORIGIN_ASSIST = 4,
	BATTLEFIELD_SCORE_ORIGIN_MAX   = 5
};


// Enum EFGame.EFConst.BattlefieldCheckConditionType
enum class EBattlefieldCheckConditionType : uint8_t
{
	BATTLEFIELD_CHECK_CONDITION_TYPE_NONE = 0,
	BATTLEFIELD_CHECK_CONDITION_TYPE_INVITE = 1,
	BATTLEFIELD_CHECK_CONDITION_TYPE_INVITE_ACCEPT = 2,
	BATTLEFIELD_CHECK_CONDITION_TYPE_ENTER_TRY = 3,
	BATTLEFIELD_CHECK_CONDITION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.BattlefieldOpenMatchEnlistType
enum class EBattlefieldOpenMatchEnlistType : uint8_t
{
	BATTLEFIELD_OPEN_MATCH_ENLIST_TYPE_PERSONAL = 0,
	BATTLEFIELD_OPEN_MATCH_ENLIST_TYPE_PARTY = 1,
	BATTLEFIELD_OPEN_MATCH_ENLIST_TYPE_PERSONAL_AND_PARTY = 2,
	BATTLEFIELD_OPEN_MATCH_ENLIST_TYPE_TROOP = 3,
	BATTLEFIELD_OPEN_MATCH_ENLIST_TYPE_MAX = 4
};


// Enum EFGame.EFConst.PaidContentsType
enum class EPaidContentsType : uint8_t
{
	PAID_CONTENTS_TYPE_NONE        = 0,
	PAID_CONTENTS_TYPE_ITEM_ASSEMBLY = 1,
	PAID_CONTENTS_TYPE_ANCIENT_ORB_IDENTIFY = 2,
	PAID_CONTENTS_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.RandomLootBoxState
enum class ERandomLootBoxState : uint8_t
{
	RANDOM_LOOT_BOX_STATE_NONE     = 0,
	RANDOM_LOOT_BOX_STATE_PENDING  = 1,
	RANDOM_LOOT_BOX_STATE_ALLOWED  = 2,
	RANDOM_LOOT_BOX_STATE_FORBIDDEN = 3,
	RANDOM_LOOT_BOX_STATE_MAX      = 4
};


// Enum EFGame.EFConst.CardBattleStateEvent
enum class ECardBattleStateEvent : uint8_t
{
	CARD_BATTLE_STATE_EVENT_START  = 0,
	CARD_BATTLE_STATE_EVENT_PLAYER_TRUN_END = 1,
	CARD_BATTLE_STATE_EVENT_ENEMY_TURN_END = 2,
	CARD_BATTLE_STATE_EVENT_PLAYER_TEAM_DIED = 3,
	CARD_BATTLE_STATE_EVENT_ENEMY_TEAM_DIED = 4,
	CARD_BATTLE_STATE_EVENT_FINISH = 5,
	CARD_BATTLE_STATE_EVENT_GIVE_UP = 6,
	CARD_BATTLE_STATE_EVENT_MAX    = 7
};


// Enum EFGame.EFConst.CardContextState
enum class ECardContextState : uint8_t
{
	CARD_CONTEXT_STATE_NONE        = 0,
	CARD_CONTEXT_STATE_INIT        = 1,
	CARD_CONTEXT_STATE_READY       = 2,
	CARD_CONTEXT_STATE_PROCESS     = 3,
	CARD_CONTEXT_STATE_MAX         = 4
};


// Enum EFGame.EFConst.CardBaseParam
enum class ECardBaseParam : uint8_t
{
	CARD_BASE_PARAM_MAX_HP         = 0,
	CARD_BASE_PARAM_ATTACK_POWER   = 1,
	CARD_BASE_PARAM_HIT_RATE       = 2,
	CARD_BASE_PARAM_DODGE_RATE     = 3,
	CARD_BASE_PARAM_CRITICAL_HIT_RATE = 4,
	CARD_BASE_PARAM_CRITICAL_DODGE_RATE = 5,
	CARD_BASE_PARAM_RECEIVE_DAMAGE = 6,
	CARD_BASE_PARAM_APPLY_DAMAGE   = 7,
	CARD_BASE_PARAM_MAX            = 8
};


// Enum EFGame.EFConst.CardCompareType
enum class ECardCompareType : uint8_t
{
	CARD_COMPARE_TYPE_NONE         = 0,
	CARD_COMPARE_TYPE_GREATER      = 1,
	CARD_COMPARE_TYPE_LESS         = 2,
	CARD_COMPARE_TYPE_EQUAL        = 3,
	CARD_COMPARE_TYPE_ODD          = 4,
	CARD_COMPARE_TYPE_EVEN         = 5,
	CARD_COMPARE_TYPE_MAX          = 6
};


// Enum EFGame.EFConst.ChaosPartyMemberCount
enum class EChaosPartyMemberCount : uint8_t
{
	CHAOS_PARTY_MEMBER_COUNT_1     = 0,
	CHAOS_PARTY_MEMBER_COUNT_11    = 1,
	CHAOS_PARTY_MEMBER_COUNT_16    = 2,
	CHAOS_PARTY_MEMBER_COUNT_21_MAX = 3,
	CHAOS_PARTY_MEMBER_COUNT_MAX   = 4
};


// Enum EFGame.EFConst.AttackRangeType
enum class EAttackRangeType : uint8_t
{
	ATTACK_RANGE_TYPE_MELEE        = 0,
	ATTACK_RANGE_TYPE_RANGED       = 1,
	ATTACK_RANGE_TYPE_MAX          = 2
};


// Enum EFGame.EFConst.CommonActionOrigin
enum class ECommonActionOrigin : uint8_t
{
	COMMON_ACTION_ORIGIN_NONE      = 0,
	COMMON_ACTION_ORIGIN_AUTO      = 1,
	COMMON_ACTION_ORIGIN_SKILLBOOK = 2,
	COMMON_ACTION_ORIGIN_TEMP      = 3,
	COMMON_ACTION_ORIGIN_LIFESKILL_RESET = 4,
	COMMON_ACTION_ORIGIN_ADMIN     = 5,
	COMMON_ACTION_ORIGIN_JUMPING_REWARD = 6,
	COMMON_ACTION_ORIGIN_MAX       = 7
};


// Enum EFGame.EFConst.CommonActionRemoveOrigin
enum class ECommonActionRemoveOrigin : uint8_t
{
	COMMON_ACTION_REMOVE_ORIGIN_NONE = 0,
	COMMON_ACTION_REMOVE_ORIGIN_LIFESKILL_RESET = 1,
	COMMON_ACTION_REMOVE_ORIGIN_TEMP = 2,
	COMMON_ACTION_REMOVE_ORIGIN_ADMIN = 3,
	COMMON_ACTION_REMOVE_ORIGIN_MAX = 4
};


// Enum EFGame.EFConst.CommonActionPointOrigin
enum class ECommonActionPointOrigin : uint8_t
{
	COMMON_ACTION_POINT_ORIGIN_LEVELUP = 0,
	COMMON_ACTION_POINT_ORIGIN_ROOKIE = 1,
	COMMON_ACTION_POINT_ORIGIN_ADMIN = 2,
	COMMON_ACTION_POINT_ORIGIN_QUEST = 3,
	COMMON_ACTION_POINT_ORIGIN_LEARN_SKILL = 4,
	COMMON_ACTION_POINT_ORIGIN_ITEM = 5,
	COMMON_ACTION_POINT_ORIGIN_PERMANENT = 6,
	COMMON_ACTION_POINT_ORIGIN_LEARN_LIFE_TECHNIQUE_TIER = 7,
	COMMON_ACTION_POINT_ORIGIN_MAX = 8
};


// Enum EFGame.EFConst.CreatureClass
enum class ECreatureClass : uint8_t
{
	CREATURE_CLASS_PC              = 0,
	CREATURE_CLASS_NPC             = 1,
	CREATURE_CLASS_MAX             = 2
};


// Enum EFGame.EFConst.IgnoreImmuneType
enum class EIgnoreImmuneType : uint8_t
{
	IGNORE_IMMUNE_DAMAGE           = 0,
	IGNORE_IMMUNE_ABNORMAL_MOVE    = 1,
	IGNORE_IMMUNE_ABNORMAL_STATUS  = 2,
	IGNORE_IMMUNE_MAX              = 3
};


// Enum EFGame.EFConst.PutDamageResult
enum class EPutDamageResult : uint8_t
{
	PUT_DAMAGE_RESULT_SUCCESS      = 0,
	PUT_DAMAGE_RESULT_FAILURE_UNKNOWN = 1,
	PUT_DAMAGE_RESULT_FAILURE_DEAD = 2,
	PUT_DAMAGE_RESULT_FAILURE_INVINCIBLE = 3,
	PUT_DAMAGE_RESULT_FAILURE_LIFE_VESSEL = 4,
	PUT_DAMAGE_RESULT_FAILURE_INVALID_HP = 5,
	PUT_DAMAGE_RESULT_MAX          = 6
};


// Enum EFGame.EFConst.DevShapeGroup
enum class EDevShapeGroup : uint8_t
{
	DEV_SHAPE_GROUP_SECTOR         = 0,
	DEV_SHAPE_GROUP_PHYSX          = 1,
	DEV_SHAPE_GROUP_PATH           = 2,
	DEV_SHAPE_GROUP_PC             = 3,
	DEV_SHAPE_GROUP_NPC            = 4,
	DEV_SHAPE_GROUP_DROP           = 5,
	DEV_SHAPE_GROUP_PROP           = 6,
	DEV_SHAPE_GROUP_TRAP           = 7,
	DEV_SHAPE_GROUP_SKILL_EFFECT   = 8,
	DEV_SHAPE_GROUP_PC_SKILL_RANGE = 9,
	DEV_SHAPE_GROUP_NPC_SKILL_RANGE = 10,
	DEV_SHAPE_GROUP_PROJECTILE     = 11,
	DEV_SHAPE_GROUP_PROJECTILE_PATH = 12,
	DEV_SHAPE_GROUP_ROOT_MOTION    = 13,
	DEV_SHAPE_GROUP_SUPER_ARMOR    = 14,
	DEV_SHAPE_GROUP_VEHICLE        = 15,
	DEV_SHAPE_GROUP_TRANSIT        = 16,
	DEV_SHAPE_GROUP_TOWER          = 17,
	DEV_SHAPE_GROUP_NAVI_GRID      = 18,
	DEV_SHAPE_GROUP_DIRECTIONAL_ATTACK = 19,
	DEV_SHAPE_GROUP_STAT           = 20,
	DEV_SHAPE_GROUP_MAX            = 21
};


// Enum EFGame.EFConst.DevSkillEffectFilterShape
enum class EDevSkillEffectFilterShape : uint8_t
{
	DEV_SKILL_EFFECT_FILTER_SHAPE_ORIGIN_INSIGHT = 0,
	DEV_SKILL_EFFECT_FILTER_SHAPE_ORIGIN_OUTSIGHT = 1,
	DEV_SKILL_EFFECT_FILTER_SHAPE_MAX = 2
};


// Enum EFGame.EFConst.AiLogGroup
enum class EAiLogGroup : uint8_t
{
	AI_LOG_GROUP_ENABLE            = 0,
	AI_LOG_GROUP_NODE              = 1,
	AI_LOG_GROUP_RAGE              = 2,
	AI_LOG_GROUP_AIPOINT           = 3,
	AI_LOG_GROUP_TARGETTING        = 4,
	AI_LOG_GROUP_PARTS             = 5,
	AI_LOG_GROUP_THREAT            = 6,
	AI_LOG_GROUP_SIGNAL            = 7,
	AI_LOG_GROUP_VARIABLE          = 8,
	AI_LOG_GROUP_FOLLOWER          = 9,
	AI_LOG_GROUP_SKILL             = 10,
	AI_LOG_GROUP_MAX               = 11
};


// Enum EFGame.EFConst.ObjectCounterType
enum class EObjectCounterType : uint8_t
{
	OBJECT_COUNTER_TYPE_COMMON_TIMER_VERY_FAST = 0,
	OBJECT_COUNTER_TYPE_COMMON_TIMER_FAST = 1,
	OBJECT_COUNTER_TYPE_COMMON_TIMER_MEDIUM = 2,
	OBJECT_COUNTER_TYPE_COMMON_TIMER_SLOW = 3,
	OBJECT_COUNTER_TYPE_COMMON_TIMER_VERY_SLOW = 4,
	OBJECT_COUNTER_TYPE_COMMON_ARCHIVE = 5,
	OBJECT_COUNTER_TYPE_ACTOR_AUTO_RECOVERY = 6,
	OBJECT_COUNTER_TYPE_ACTOR_MOTION = 7,
	OBJECT_COUNTER_TYPE_ACTOR_SKILL = 8,
	OBJECT_COUNTER_TYPE_ACTOR_WARP = 9,
	OBJECT_COUNTER_TYPE_ACTOR_INIT_STAT = 10,
	OBJECT_COUNTER_TYPE_CREATURE_COMBAT = 11,
	OBJECT_COUNTER_TYPE_NPC_AI     = 12,
	OBJECT_COUNTER_TYPE_NPC_AI_STATE = 13,
	OBJECT_COUNTER_TYPE_NPC_AI_THREAT = 14,
	OBJECT_COUNTER_TYPE_NPC_DESTROY_SKILL = 15,
	OBJECT_COUNTER_TYPE_NPC_MAKER_HEARTBEAT = 16,
	OBJECT_COUNTER_TYPE_NPC_PART_SET = 17,
	OBJECT_COUNTER_TYPE_PC_IDENTITY = 18,
	OBJECT_COUNTER_TYPE_PC_OBJECT_CONTROL = 19,
	OBJECT_COUNTER_TYPE_PC_CHASER_CONTEXT = 20,
	OBJECT_COUNTER_TYPE_PC_QUEST_JOURNAL = 21,
	OBJECT_COUNTER_TYPE_PC_REVIVE_CONTEXT = 22,
	OBJECT_COUNTER_TYPE_PC_PROP_CONTEXT = 23,
	OBJECT_COUNTER_TYPE_PC_LOG_CONTEXT = 24,
	OBJECT_COUNTER_TYPE_PC_PORTAL_BUNDLE = 25,
	OBJECT_COUNTER_TYPE_PC_PVP_CORRECTING = 26,
	OBJECT_COUNTER_TYPE_PC_ABILITY_FEATURE = 27,
	OBJECT_COUNTER_TYPE_PC_ITEM_DURABILITY = 28,
	OBJECT_COUNTER_TYPE_PC_WORLD_UPDATE = 29,
	OBJECT_COUNTER_TYPE_PC_ACHIEVEMENT_JOURNAL = 30,
	OBJECT_COUNTER_TYPE_PC_ACHIEVEMENT_CACHE = 31,
	OBJECT_COUNTER_TYPE_PC_ITEM_CRAFT_CONTEXT = 32,
	OBJECT_COUNTER_TYPE_PC_MONEY_CONTEXT = 33,
	OBJECT_COUNTER_TYPE_PC_DATABASE_UPDATE = 34,
	OBJECT_COUNTER_TYPE_PC_PLAYTIME_EVENT = 35,
	OBJECT_COUNTER_TYPE_PC_FRIENDSHIP_EVENT = 36,
	OBJECT_COUNTER_TYPE_PC_EVENT_MISSION_JOURNAL = 37,
	OBJECT_COUNTER_TYPE_PROJECTILE_UPDATE = 38,
	OBJECT_COUNTER_TYPE_PROP_HEARTBEAT = 39,
	OBJECT_COUNTER_TYPE_TRANSIT_MOVE = 40,
	OBJECT_COUNTER_TYPE_TRAP_DISPATCH = 41,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_SELF = 42,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_SECTOR = 43,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_PHYSX = 44,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_PATH = 45,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_SKILL_EFFECT = 46,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_SKILL_RANGE = 47,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_ROOT_MOTION = 48,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_SUPER_ARMOR = 49,
	OBJECT_COUNTER_TYPE_DEV_SHAPE_STAT = 50,
	OBJECT_COUNTER_TYPE_MAX        = 51
};


// Enum EFGame.EFConst.FriendshipTalkConditionType
enum class EFriendshipTalkConditionType : uint8_t
{
	FRIENDSHIP_TALK_CONDITION_TYPE_NONE = 0,
	FRIENDSHIP_TALK_CONDITION_TYPE_FRIENDSHIP = 1,
	FRIENDSHIP_TALK_CONDITION_TYPE_TENDENCY_STATUS = 2,
	FRIENDSHIP_TALK_CONDITION_TYPE_TENDENCY_MAX = 3,
	FRIENDSHIP_TALK_CONDITION_TYPE_MAX = 4
};


// Enum EFGame.EFConst.GameActionExecResult
enum class EGameActionExecResult : uint8_t
{
	GAME_ACTION_EXEC_RESULT_NONE   = 0,
	GAME_ACTION_EXEC_RESULT_PARTIAL = 1,
	GAME_ACTION_EXEC_RESULT_FULL   = 2,
	GAME_ACTION_EXEC_RESULT_MAX    = 3
};


// Enum EFGame.EFConst.CommonActionExecType
enum class ECommonActionExecType : uint8_t
{
	COMMON_ACTION_EXEC_TYPE_INSTANT = 0,
	COMMON_ACTION_EXEC_TYPE_TOGGLE = 1,
	COMMON_ACTION_EXEC_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.LifeTrapState
enum class ELifeTrapState : uint8_t
{
	LIFE_TRAP_STATE_SETUP          = 0,
	LIFE_TRAP_STATE_EXECUTE        = 1,
	LIFE_TRAP_STATE_REMOVE         = 2,
	LIFE_TRAP_STATE_MAX            = 3
};


// Enum EFGame.EFConst.LifeTrapProfession
enum class ELifeTrapProfession : uint8_t
{
	LIFE_TRAP_PROFESSION_HUNTING   = 0,
	LIFE_TRAP_PROFESSION_FISHING   = 1,
	LIFE_TRAP_PROFESSION_VOYAGE_EXPLORATION = 2,
	LIFE_TRAP_PROFESSION_MAX       = 3
};


// Enum EFGame.EFConst.DieGameActionContentsType
enum class EDieGameActionContentsType : uint8_t
{
	DIE_GAME_ACTION_CONTENTS_TYPE_NA = 0,
	DIE_GAME_ACTION_CONTENTS_TYPE_TOWER = 1,
	DIE_GAME_ACTION_CONTENTS_TYPE_MAX = 2
};


// Enum EFGame.EFConst.VoyageActionRestrictionType
enum class EVoyageActionRestrictionType : uint8_t
{
	VOYAGE_ACTION_RESTRICTION_TYPE_NONE = 0,
	VOYAGE_ACTION_RESTRICTION_TYPE_PROP_HIT = 1,
	VOYAGE_ACTION_RESTRICTION_TYPE_PROP_PICKUP = 2,
	VOYAGE_ACTION_RESTRICTION_TYPE_VEHICLE = 3,
	VOYAGE_ACTION_RESTRICTION_TYPE_AWAKENING_SKILL = 4,
	VOYAGE_ACTION_RESTRICTION_TYPE_BATTLE_SKILL = 5,
	VOYAGE_ACTION_RESTRICTION_TYPE_LIFE_SKILL = 6,
	VOYAGE_ACTION_RESTRICTION_TYPE_SOCIAL_SKILL = 7,
	VOYAGE_ACTION_RESTRICTION_TYPE_MUSIC_PLAY = 8,
	VOYAGE_ACTION_RESTRICTION_TYPE_DUEL = 9,
	VOYAGE_ACTION_RESTRICTION_TYPE_BATTLE_ITEM = 10,
	VOYAGE_ACTION_RESTRICTION_TYPE_PROP_TOUCH = 11,
	VOYAGE_ACTION_RESTRICTION_TYPE_NPC_CLICK = 12,
	VOYAGE_ACTION_RESTRICTION_TYPE_EQUIP_SET = 13,
	VOYAGE_ACTION_RESTRICTION_TYPE_LIFE_TOOL_SET = 14,
	VOYAGE_ACTION_RESTRICTION_TYPE_EQUIP_PRESET = 15,
	VOYAGE_ACTION_RESTRICTION_TYPE_MAX = 16
};


// Enum EFGame.EFConst.GuildTaskType
enum class EGuildTaskType : uint8_t
{
	GUILD_TASK_TYPE_NONE           = 0,
	GUILD_TASK_TYPE_CREATE         = 1,
	GUILD_TASK_TYPE_CREATE_RESULT  = 2,
	GUILD_TASK_TYPE_DELEGATE       = 3,
	GUILD_TASK_TYPE_DISBAND        = 4,
	GUILD_TASK_TYPE_INVITE         = 5,
	GUILD_TASK_TYPE_INVITE_ACCEPT  = 6,
	GUILD_TASK_TYPE_JOIN           = 7,
	GUILD_TASK_TYPE_JOIN_ACCEPT    = 8,
	GUILD_TASK_TYPE_KICK           = 9,
	GUILD_TASK_TYPE_LEAVE          = 10,
	GUILD_TASK_TYPE_MODIFY_GRADE   = 11,
	GUILD_TASK_TYPE_MODIFY_HEADER  = 12,
	GUILD_TASK_TYPE_MODIFY_RECOMMENDATION = 13,
	GUILD_TASK_TYPE_PROMOTE        = 14,
	GUILD_TASK_TYPE_SCHEDULE_DISBAND = 15,
	GUILD_TASK_TYPE_SEARCH         = 16,
	GUILD_TASK_TYPE_UPDATE_EXP     = 17,
	GUILD_TASK_TYPE_UPDATE_CREATION_DATE_MAP = 18,
	GUILD_TASK_TYPE_UPDATE_MEMBER  = 19,
	GUILD_TASK_TYPE_PC_RECORD_IN_AND_OUT = 20,
	GUILD_TASK_TYPE_PENDING_JOIN_REMOVE = 21,
	GUILD_TASK_TYPE_DISBAND_STATE_NOTIFY = 22,
	GUILD_TASK_TYPE_FORCED_DISBAND = 23,
	GUILD_TASK_TYPE_FORCED_DELEGATE = 24,
	GUILD_TASK_TYPE_NEWBIE_AUTO_PROMOTE = 25,
	GUILD_TASK_TYPE_ACCOUNT_RESET_PROCESS = 26,
	GUILD_TASK_TYPE_BATTLEFIELD_NOTIFY = 27,
	GUILD_TASK_TYPE_BATTLEFIELD_UPDATE = 28,
	GUILD_TASK_TYPE_BATTLEFIELD_RANK_REWARD = 29,
	GUILD_TASK_TYPE_BATTLEFIELD_FORCED_CLEAR = 30,
	GUILD_TASK_TYPE_UPDATE_DATABASE_RANK = 31,
	GUILD_TASK_TYPE_SCHEDULE_UPDATE_RANK = 32,
	GUILD_TASK_TYPE_SCHEDULE_LEAVE_PENALTY = 33,
	GUILD_TASK_TYPE_FORCED_CLEAR_LEAVE_PENALTY = 34,
	GUILD_TASK_TYPE_FORCED_CHANGE_EXP = 35,
	GUILD_TASK_TYPE_FORCED_SET_RATING = 36,
	GUILD_TASK_TYPE_FORCED_PROMOTE = 37,
	GUILD_TASK_TYPE_DONATION       = 38,
	GUILD_TASK_TYPE_UPDATE_RESOURCE = 39,
	GUILD_TASK_TYPE_ATTENDANCE     = 40,
	GUILD_TASK_TYPE_ATTENDANCE_RESULT = 41,
	GUILD_TASK_TYPE_MERCENARY_JOIN = 42,
	GUILD_TASK_TYPE_MERCENARY_LEAVE = 43,
	GUILD_TASK_TYPE_SCHEDULE_WEEKLY_DISTRIBUTION = 44,
	GUILD_TASK_TYPE_DISTRIBUTION_SET = 45,
	GUILD_TASK_TYPE_RESEARCH       = 46,
	GUILD_TASK_TYPE_RESEARCH_NOTIFY = 47,
	GUILD_TASK_TYPE_RESEARCH_SUPPORT = 48,
	GUILD_TASK_TYPE_RESEARCH_SUPPORT_RESULT = 49,
	GUILD_TASK_TYPE_SCHEDULE_RESEARCH = 50,
	GUILD_TASK_TYPE_MERCENARY_LIST = 51,
	GUILD_TASK_TYPE_BATTLEFIELD_GRADE_POINT_UPDATE = 52,
	GUILD_TASK_TYPE_SCHEDULE_DAILY_INIT = 53,
	GUILD_TASK_TYPE_SKILL_SLOT_CHANGE = 54,
	GUILD_TASK_TYPE_SKILL_RESOURCE_BUY = 55,
	GUILD_TASK_TYPE_MERCENARY_REWARD = 56,
	GUILD_TASK_TYPE_FORCED_WEEKLY_DISTRIBUTION = 57,
	GUILD_TASK_TYPE_UPDATE_WEEKLY_CONTRIBUTION = 58,
	GUILD_TASK_TYPE_DONATION_ROLLBACK = 59,
	GUILD_TASK_TYPE_FORCED_UPDATE_CONTRIBUTION = 60,
	GUILD_TASK_TYPE_FORCED_DAILY_RESET = 61,
	GUILD_TASK_TYPE_FORCED_SET_DISTRIBUTION = 62,
	GUILD_TASK_TYPE_MERCENARY_RESET = 63,
	GUILD_TASK_TYPE_FORCED_CLEAR_DISTRIBUTION_DATE = 64,
	GUILD_TASK_TYPE_CONTENTS_VOTE_START = 65,
	GUILD_TASK_TYPE_CONTENTS_VOTE_CAST = 66,
	GUILD_TASK_TYPE_CONTENTS_NOTICE_CHANGE = 67,
	GUILD_TASK_TYPE_OBJECTIVE_UPDATE = 68,
	GUILD_TASK_TYPE_OBJECTIVE_SELECT = 69,
	GUILD_TASK_TYPE_OBJECTIVE_ADD_POINT = 70,
	GUILD_TASK_TYPE_OBJECTIVE_WEEKLY_REWARD = 71,
	GUILD_TASK_TYPE_GOLD_DISTRIBUTION = 72,
	GUILD_TASK_TYPE_JOIN_TYPE_CHANGE = 73,
	GUILD_TASK_TYPE_GUILD_MARK_BUY = 74,
	GUILD_TASK_TYPE_NAME_CHANGE    = 75,
	GUILD_TASK_TYPE_NAME_CHANGE_RESULT = 76,
	GUILD_TASK_TYPE_MAX            = 77
};


// Enum EFGame.EFConst.GuildLogReason
enum class EGuildLogReason : uint8_t
{
	GUILD_LOG_REASON_NONE          = 0,
	GUILD_LOG_REASON_SYSTEM        = 1,
	GUILD_LOG_REASON_USER          = 2,
	GUILD_LOG_REASON_ADMIN         = 3,
	GUILD_LOG_REASON_MAX           = 4
};


// Enum EFGame.EFConst.GuildLeaveType
enum class EGuildLeaveType : uint8_t
{
	GUILD_LEAVE_TYPE_NONE          = 0,
	GUILD_LEAVE_TYPE_NORMAL        = 1,
	GUILD_LEAVE_TYPE_DISBAND       = 2,
	GUILD_LEAVE_TYPE_ACCOUNT_RESET = 3,
	GUILD_LEAVE_TYPE_KICK          = 4,
	GUILD_LEAVE_TYPE_MAX           = 5
};


// Enum EFGame.EFConst.IdentitySystemEvent
enum class EIdentitySystemEvent : uint8_t
{
	IDENTITY_SYSTEM_EVENT_NONE     = 0,
	IDENTITY_SYSTEM_EVENT_SKILL_CUSTOMIZED = 1,
	IDENTITY_SYSTEM_EVENT_PROJECTILE_TAG_CUSTOMIZE = 2,
	IDENTITY_SYSTEM_EVENT_PROJECTILE_EXPIRED = 3,
	IDENTITY_SYSTEM_EVENT_TARGET_MARKING_EXPIRED = 4,
	IDENTITY_SYSTEM_EVENT_SKILL_INVALIDATED = 5,
	IDENTITY_SYSTEM_EVENT_MAX      = 6
};


// Enum EFGame.EFConst.IdentitySystemCustomizedType
enum class EIdentitySystemCustomizedType : uint8_t
{
	IDENTITY_SYSTEM_CUSTOMIZED_TYPE_NONE = 0,
	IDENTITY_SYSTEM_CUSTOMIZED_TYPE_INFIGHER_AMPLIFY_SHOCK_DAMAGE = 1,
	IDENTITY_SYSTEM_CUSTOMIZED_TYPE_DESTROYER_AMPLIFY_GAUGE_PER_CORE = 2,
	IDENTITY_SYSTEM_CUSTOMIZED_TYPE_DESTROYER_GAIN_GAUGE_BY_HIT = 3,
	IDENTITY_SYSTEM_CUSTOMIZED_TYPE_MAX = 4
};


// Enum EFGame.EFConst.InfighterConsumeShockType
enum class EInfighterConsumeShockType : uint8_t
{
	INFIGHTER_CONSUME_SHOCK_TYPE_FULL = 0,
	INFIGHTER_CONSUME_SHOCK_TYPE_RECOVER_PERCENT = 1,
	INFIGHTER_CONSUME_SHOCK_TYPE_MAX = 2
};


// Enum EFGame.EFConst.IdentityContentsEvent
enum class EIdentityContentsEvent : uint8_t
{
	IDENTITY_CONTENTS_EVENT_VEHICLE_GET_OFF = 0,
	IDENTITY_CONTENTS_EVENT_POLYMORPH_REMOVE = 1,
	IDENTITY_CONTENTS_EVENT_ENTER_TRANSIT = 2,
	IDENTITY_CONTENTS_EVENT_LEAVE_TRANSIT = 3,
	IDENTITY_CONTENTS_EVENT_CLIENT_EVENT_TRIGGER = 4,
	IDENTITY_CONTENTS_EVENT_CLIENT_CONTENTS_TRIGGER = 5,
	IDENTITY_CONTENTS_EVENT_MAX    = 6
};


// Enum EFGame.EFConst.ItemStackResult
enum class EItemStackResult : uint8_t
{
	ITEM_STACK_COMPLETE            = 0,
	ITEM_STACK_INCOMPLETE          = 1,
	ITEM_STACK_ERROR               = 2,
	ITEM_STACK_MAX                 = 3
};


// Enum EFGame.EFConst.DropSiteIndex
enum class EDropSiteIndex : uint8_t
{
	DROP_SITE_INDEX_CONTEXT        = 0,
	DROP_SITE_INDEX_ZONE           = 1,
	DROP_SITE_INDEX_MAX            = 2
};


// Enum EFGame.EFConst.LogCategory
enum class ELogCategory : uint8_t
{
	LOG_CATEGORY_GAME              = 0,
	LOG_CATEGORY_ACCOUNT           = 1,
	LOG_CATEGORY_MAX               = 2
};


// Enum EFGame.EFConst.LogWriterType
enum class ELogWriterType : uint8_t
{
	LOG_WRITER_TYPE_NETWORK        = 0,
	LOG_WRITER_TYPE_FILE           = 1,
	LOG_WRITER_TYPE_JSON           = 2,
	LOG_WRITER_TYPE_KAFKA          = 3,
	LOG_WRITER_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.AccountLogType
enum class EAccountLogType : uint8_t
{
	ACCOUNT_LOG_TYPE_LOGIN         = 0,
	ACCOUNT_LOG_TYPE_LOGOUT        = 1,
	ACCOUNT_LOG_TYPE_LOGOUT_ABNORMAL = 2,
	ACCOUNT_LOG_TYPE_AGREE_TERMS   = 3,
	ACCOUNT_LOG_TYPE_TRY_LOGIN     = 4,
	ACCOUNT_LOG_TYPE_CREATE_ACCOUNT = 5,
	ACCOUNT_LOG_TYPE_SELECT_WORLD  = 6,
	ACCOUNT_LOG_TYPE_CHARACTER_LIST = 7,
	ACCOUNT_LOG_TYPE_DUP_LOGIN     = 8,
	ACCOUNT_LOG_TYPE_MOUSE_SELECT  = 9,
	ACCOUNT_LOG_TYPE_MOUSE_SWAP    = 10,
	ACCOUNT_LOG_TYPE_PC_ROOM_START = 11,
	ACCOUNT_LOG_TYPE_PC_ROOM_END   = 12,
	ACCOUNT_LOG_TYPE_PC_ROOM_PLAY  = 13,
	ACCOUNT_LOG_TYPE_PC_ROOM_REWARD_FAIL = 14,
	ACCOUNT_LOG_TYPE_AUX_PASSWORD_NEW = 15,
	ACCOUNT_LOG_TYPE_AUX_PASSWORD_CHANGE = 16,
	ACCOUNT_LOG_TYPE_AUX_PASSWORD_MATCH = 17,
	ACCOUNT_LOG_TYPE_AUX_PASSWORD_MISMATCH = 18,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_START = 19,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_END = 20,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_PLAY = 21,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_REWARD_FAIL = 22,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_NEW_REWARD = 23,
	ACCOUNT_LOG_TYPE_PREMIUM_ACCOUNT_REWARD_ONCE_FAIL = 24,
	ACCOUNT_LOG_TYPE_NEW_USER_ROLL_BOOK_START = 25,
	ACCOUNT_LOG_TYPE_RETURNING_USER_ROLL_BOOK_START = 26,
	ACCOUNT_LOG_TYPE_ANTI_THEFT_CONTEXT_CHANGE = 27,
	ACCOUNT_LOG_TYPE_MAX           = 28
};


// Enum EFGame.EFConst.GameLogType
enum class EGameLogType : uint8_t
{
	GAME_LOG_TYPE_ADMIN_CMD        = 0,
	GAME_LOG_TYPE_SYSTEM_ALERT     = 1,
	GAME_LOG_TYPE_FIRST_SEND_OVERFLOW = 2,
	GAME_LOG_TYPE_SECOND_SEND_OVERFLOW = 3,
	GAME_LOG_TYPE_SOCKET_DISCONNECT_NORMAL = 4,
	GAME_LOG_TYPE_SOCKET_DISCONNECT_ABNORMAL = 5,
	GAME_LOG_TYPE_SOCKET_KERNEL_PENDING_BYTES = 6,
	GAME_LOG_TYPE_ACCOUNT_LOGIN    = 7,
	GAME_LOG_TYPE_ACCOUNT_LOGOUT   = 8,
	GAME_LOG_TYPE_ACCOUNT_LOGOUT_ABNORMAL = 9,
	GAME_LOG_TYPE_ACCOUNT_AGREE_TERMS = 10,
	GAME_LOG_TYPE_HACK_FAST_PING   = 11,
	GAME_LOG_TYPE_HACK_FAST_MOVE   = 12,
	GAME_LOG_TYPE_HACK_FAST_NORMAL_ATTACK = 13,
	GAME_LOG_TYPE_HACK_MISMATCH_SKILL_MOMENT = 14,
	GAME_LOG_TYPE_HACK_SKIPPED_SKILL_FINISH = 15,
	GAME_LOG_TYPE_HACK_MISMATCH_PROJECTILE_MOMENT = 16,
	GAME_LOG_TYPE_HACK_FAST_PROJECTILE = 17,
	GAME_LOG_TYPE_HACK_PACKET_FLOODING = 18,
	GAME_LOG_TYPE_HACK_INVALID_PACKET = 19,
	GAME_LOG_TYPE_HACK_MALFORMED_PACKET = 20,
	GAME_LOG_TYPE_HACK_FISHING_FAST_SUCCESS = 21,
	GAME_LOG_TYPE_HACK_INVALID_MOVE_POSITION = 22,
	GAME_LOG_TYPE_HACK_XIGN_CODE_DISCONNECT = 23,
	GAME_LOG_TYPE_HACK_INVALID_PACKET_ID = 24,
	GAME_LOG_TYPE_HACK_INVALID_PACKET_SIZE = 25,
	GAME_LOG_TYPE_HACK_INVALID_PACKET_SEQUENCE = 26,
	GAME_LOG_TYPE_HACK_INVALID_PEER_STATE = 27,
	GAME_LOG_TYPE_HACK_MALFORMED_POSTMARK = 28,
	GAME_LOG_TYPE_HACK_MALFORMED_PACKET_BODY = 29,
	GAME_LOG_TYPE_HACK_NULL_PACKET_HANDLER = 30,
	GAME_LOG_TYPE_HACK_FORGED_CODE = 31,
	GAME_LOG_TYPE_HACK_ANTI_CHEAT  = 32,
	GAME_LOG_TYPE_HACK_KARMA_DISCONNECT = 33,
	GAME_LOG_TYPE_HACK_MUST_TRIGGER_NOT_EXECUTED = 34,
	GAME_LOG_TYPE_HACK_AUTO_PLAY_RECORD = 35,
	GAME_LOG_TYPE_HACK_INPUT_AUTO_PLAY_RECORD = 36,
	GAME_LOG_TYPE_HACK_EAC_ERROR   = 37,
	GAME_LOG_TYPE_HACK_EAC_REGISTER = 38,
	GAME_LOG_TYPE_HACK_EAC_UNREGISTER = 39,
	GAME_LOG_TYPE_HACK_EAC_KICK    = 40,
	GAME_LOG_TYPE_HACK_EAC_SEND    = 41,
	GAME_LOG_TYPE_HACK_EAC_RECV    = 42,
	GAME_LOG_TYPE_HACK_OVER_ACCUMULATE_NORMAL_ATTACK = 43,
	GAME_LOG_TYPE_PC_CREATE        = 44,
	GAME_LOG_TYPE_PC_DELETE        = 45,
	GAME_LOG_TYPE_PC_DELETE_PENDING = 46,
	GAME_LOG_TYPE_PC_DELETE_CANCEL = 47,
	GAME_LOG_TYPE_PC_ENTER         = 48,
	GAME_LOG_TYPE_PC_LEAVE         = 49,
	GAME_LOG_TYPE_PC_HEARTBEAT     = 50,
	GAME_LOG_TYPE_PC_DEATH         = 51,
	GAME_LOG_TYPE_PC_CLASS_CHANGE  = 52,
	GAME_LOG_TYPE_PC_REVIVE        = 53,
	GAME_LOG_TYPE_PC_CHANNEL_CHANGE = 54,
	GAME_LOG_TYPE_PC_RENAME        = 55,
	GAME_LOG_TYPE_PC_LOOK_CHANGE   = 56,
	GAME_LOG_TYPE_PC_PROLOGUE_SKIP_SELECT = 57,
	GAME_LOG_TYPE_PC_GET_EXCESS    = 58,
	GAME_LOG_TYPE_PC_PUT_EXCESS    = 59,
	GAME_LOG_TYPE_PC_JUMPING_START = 60,
	GAME_LOG_TYPE_PC_JUMPING_PROGRESS = 61,
	GAME_LOG_TYPE_PC_JUMPING_FINISH = 62,
	GAME_LOG_TYPE_PC_SLOT_EXPAND   = 63,
	GAME_LOG_TYPE_PC_ESCAPE        = 64,
	GAME_LOG_TYPE_PC_MAIN_CHANGE   = 65,
	GAME_LOG_TYPE_LEVEL_UP         = 66,
	GAME_LOG_TYPE_LIFE_LEVEL_UP    = 67,
	GAME_LOG_TYPE_PVP_LEVEL_UP     = 68,
	GAME_LOG_TYPE_EXPEDITION_LEVEL_UP = 69,
	GAME_LOG_TYPE_COMBAT_EXP       = 70,
	GAME_LOG_TYPE_COMBAT_EXP_V2    = 71,
	GAME_LOG_TYPE_LIFE_EXP         = 72,
	GAME_LOG_TYPE_LIFE_EXP_V2      = 73,
	GAME_LOG_TYPE_PVP_EXP          = 74,
	GAME_LOG_TYPE_PVP_EXP_V2       = 75,
	GAME_LOG_TYPE_EXPEDITION_EXP   = 76,
	GAME_LOG_TYPE_EXPEDITION_EXP_V2 = 77,
	GAME_LOG_TYPE_ZONE_ENTER       = 78,
	GAME_LOG_TYPE_ZONE_LEAVE       = 79,
	GAME_LOG_TYPE_PORT_ENTER       = 80,
	GAME_LOG_TYPE_PORT_LEAVE       = 81,
	GAME_LOG_TYPE_SQUARE_HOLE_REGISTER = 82,
	GAME_LOG_TYPE_SQUARE_HOLE_USE  = 83,
	GAME_LOG_TYPE_COLOSSEUM_START_IN_WORLD = 84,
	GAME_LOG_TYPE_COLOSSEUM_START_IN_GAME = 85,
	GAME_LOG_TYPE_COLOSSEUM_FINISH_IN_GAME = 86,
	GAME_LOG_TYPE_COLOSSEUM_FINISH_IN_WORLD = 87,
	GAME_LOG_TYPE_COLOSSEUM_ORDER_FINISH = 88,
	GAME_LOG_TYPE_COLOSSEUM_ROUND_START = 89,
	GAME_LOG_TYPE_COLOSSEUM_ROUND_FINISH = 90,
	GAME_LOG_TYPE_COLOSSEUM_SEASON_REWARD = 91,
	GAME_LOG_TYPE_COLOSSEUM_MATCHING_START = 92,
	GAME_LOG_TYPE_COLOSSEUM_OBSERVER_ENTER = 93,
	GAME_LOG_TYPE_COLOSSEUM_OBSERVER_LEAVE = 94,
	GAME_LOG_TYPE_COLOSSEUM_OBSERVER_COMMAND = 95,
	GAME_LOG_TYPE_COLOSSEUM_ROOM_CREATE = 96,
	GAME_LOG_TYPE_COLOSSEUM_ROOM_DESTROY = 97,
	GAME_LOG_TYPE_COLOSSEUM_MMR_DEDUCT = 98,
	GAME_LOG_TYPE_COLOSSEUM_PENALTY_CHANGE = 99,
	GAME_LOG_TYPE_CUMULATIVE_POINT_ADD = 100,
	GAME_LOG_TYPE_CUMULATIVE_POINT_REWARD = 101,
	GAME_LOG_TYPE_MOD_START        = 102,
	GAME_LOG_TYPE_MOD_ENTER        = 103,
	GAME_LOG_TYPE_MOD_LEAVE        = 104,
	GAME_LOG_TYPE_MOD_RESULT       = 105,
	GAME_LOG_TYPE_MOD_CUBE_PROCEED = 106,
	GAME_LOG_TYPE_MOD_CUBE_BUFF    = 107,
	GAME_LOG_TYPE_MOD_CUBE_RESULT  = 108,
	GAME_LOG_TYPE_MOD_CUBE_END     = 109,
	GAME_LOG_TYPE_MOD_TOWER_START  = 110,
	GAME_LOG_TYPE_MOD_TOWER_RESULT = 111,
	GAME_LOG_TYPE_MOD_TOWER_END    = 112,
	GAME_LOG_TYPE_MOD_PLATINUM_AREA_START = 113,
	GAME_LOG_TYPE_MOD_PLATINUM_AREA_FINISH = 114,
	GAME_LOG_TYPE_MOD_PLATINUM_AREA_RETURN = 115,
	GAME_LOG_TYPE_MOD_PLATINUM_AREA_END = 116,
	GAME_LOG_TYPE_MOD_BOSSRUSH_START = 117,
	GAME_LOG_TYPE_MOD_BOSSRUSH_RESULT = 118,
	GAME_LOG_TYPE_MOD_BOSSRUSH_END = 119,
	GAME_LOG_TYPE_MOD_BOSSRUSH_STOP_VOTE_START = 120,
	GAME_LOG_TYPE_MOD_BOSSRUSH_STOP_VOTE_CAST = 121,
	GAME_LOG_TYPE_MOD_BOSSRUSH_STOP_VOTE_FINISH = 122,
	GAME_LOG_TYPE_MOD_WAYOFTHRONE_START = 123,
	GAME_LOG_TYPE_MOD_WAYOFTHRONE_RESULT = 124,
	GAME_LOG_TYPE_MOD_WAYOFTHRONE_REWARD = 125,
	GAME_LOG_TYPE_MOD_WAYOFTHRONE_RANK_REWARD = 126,
	GAME_LOG_TYPE_CHAOS_GATE_CREATE = 127,
	GAME_LOG_TYPE_CHAOS_GATE_NOENTRY = 128,
	GAME_LOG_TYPE_CHAOS_GATE_DESTROY = 129,
	GAME_LOG_TYPE_CHAOS_GATE_ENTER = 130,
	GAME_LOG_TYPE_CHAOS_GATE_LEAVE = 131,
	GAME_LOG_TYPE_CHAOS_GATE_RESULT = 132,
	GAME_LOG_TYPE_ITEM_ADD         = 133,
	GAME_LOG_TYPE_ITEM_REMOVE      = 134,
	GAME_LOG_TYPE_ITEM_BUY         = 135,
	GAME_LOG_TYPE_ITEM_SELL        = 136,
	GAME_LOG_TYPE_ITEM_REDEEM      = 137,
	GAME_LOG_TYPE_ITEM_DESTROY     = 138,
	GAME_LOG_TYPE_ITEM_SPLIT       = 139,
	GAME_LOG_TYPE_ITEM_MERGE       = 140,
	GAME_LOG_TYPE_ITEM_INCREASE    = 141,
	GAME_LOG_TYPE_ITEM_DECREASE    = 142,
	GAME_LOG_TYPE_ITEM_EQUIP_IN    = 143,
	GAME_LOG_TYPE_ITEM_EQUIP_OUT   = 144,
	GAME_LOG_TYPE_ITEM_STORAGE_IN  = 145,
	GAME_LOG_TYPE_ITEM_STORAGE_OUT = 146,
	GAME_LOG_TYPE_ITEM_LIFE_TOOL_IN = 147,
	GAME_LOG_TYPE_ITEM_LIFE_TOOL_OUT = 148,
	GAME_LOG_TYPE_ITEM_TOWN_TEMP_IN = 149,
	GAME_LOG_TYPE_ITEM_TOWN_TEMP_OUT = 150,
	GAME_LOG_TYPE_ITEM_USE         = 151,
	GAME_LOG_TYPE_ITEM_REPAIR      = 152,
	GAME_LOG_TYPE_ITEM_TRADE       = 153,
	GAME_LOG_TYPE_ITEM_TRADE_ERROR = 154,
	GAME_LOG_TYPE_ITEM_PENDING     = 155,
	GAME_LOG_TYPE_ITEM_PENDING_EXECUTE = 156,
	GAME_LOG_TYPE_ITEM_CARVE       = 157,
	GAME_LOG_TYPE_ITEM_ASSEMBLY_ADD = 158,
	GAME_LOG_TYPE_ITEM_ASSEMBLY_FINISH = 159,
	GAME_LOG_TYPE_ITEM_ASSEMBLY_RECEIVE = 160,
	GAME_LOG_TYPE_ITEM_DISASSEMBLY_REQUEST = 161,
	GAME_LOG_TYPE_ITEM_STASH_EXPAND = 162,
	GAME_LOG_TYPE_ITEM_EQUIP_PRESET_EXPAND = 163,
	GAME_LOG_TYPE_ITEM_EQUIP_PRESET_APPLY = 164,
	GAME_LOG_TYPE_ITEM_AVATAR_EQUIP_PRESET_EXPAND = 165,
	GAME_LOG_TYPE_ITEM_AVATAR_EQUIP_PRESET_APPLY = 166,
	GAME_LOG_TYPE_ITEM_GEM_EQUIP_PRESET_EXPAND = 167,
	GAME_LOG_TYPE_ITEM_GEM_EQUIP_PRESET_APPLY = 168,
	GAME_LOG_TYPE_ITEM_USE_VOYAGE_SECRET_MAP = 169,
	GAME_LOG_TYPE_ITEM_EXCHANGE    = 170,
	GAME_LOG_TYPE_ITEM_POLISH_ADD  = 171,
	GAME_LOG_TYPE_ITEM_POLISH_VERIFY = 172,
	GAME_LOG_TYPE_ITEM_EXPIRE      = 173,
	GAME_LOG_TYPE_ITEM_BARTER      = 174,
	GAME_LOG_TYPE_ITEM_EXTRA_STAT_CHANGE = 175,
	GAME_LOG_TYPE_ITEM_POLISH_BONUS_CHANGE = 176,
	GAME_LOG_TYPE_ITEM_POLISH_BONUS_CONFIRM = 177,
	GAME_LOG_TYPE_ITEM_ENCHANT_SLOT_IMBUE = 178,
	GAME_LOG_TYPE_ITEM_ENCHANT_SLOT_REMOVE_IMBUE = 179,
	GAME_LOG_TYPE_ITEM_ENCHANT_SLOT_CHANGE = 180,
	GAME_LOG_TYPE_ITEM_ENCHANT_SLOT_UNLOCK = 181,
	GAME_LOG_TYPE_ITEM_ABILITY_UNLOCK_PROGRESS = 182,
	GAME_LOG_TYPE_ITEM_ABILITY_UNLOCK_FINISH = 183,
	GAME_LOG_TYPE_ITEM_ABILITY_ENGRAVE = 184,
	GAME_LOG_TYPE_ITEM_BIND_CHANGE = 185,
	GAME_LOG_TYPE_ITEM_ADD_MAX_COUNT_CHANGE = 186,
	GAME_LOG_TYPE_ITEM_POST_PROCESS = 187,
	GAME_LOG_TYPE_ITEM_ENHANCE_FEED = 188,
	GAME_LOG_TYPE_ITEM_ENHANCE_LEVEL_UP = 189,
	GAME_LOG_TYPE_ITEM_ENHANCE_OPTION_CHANGE = 190,
	GAME_LOG_TYPE_ITEM_ENHANCE_OPTION_CONFIRM = 191,
	GAME_LOG_TYPE_ITEM_ENHANCE_INHERIT = 192,
	GAME_LOG_TYPE_ITEM_AUTO_PURGE  = 193,
	GAME_LOG_TYPE_ITEM_SEAL        = 194,
	GAME_LOG_TYPE_ITEM_UNSEAL      = 195,
	GAME_LOG_TYPE_ITEM_TRADE_COUNT_CHANGE = 196,
	GAME_LOG_TYPE_ITEM_MAGIC_SCROLL_ENHANCE = 197,
	GAME_LOG_TYPE_ITEM_MAGIC_SCROLL_APPLY = 198,
	GAME_LOG_TYPE_ITEM_MAGIC_SCROLL_EXTRACT = 199,
	GAME_LOG_TYPE_ITEM_SMART_DROP_EXECUTE = 200,
	GAME_LOG_TYPE_ITEM_SMART_DROP_BOX_CREATE = 201,
	GAME_LOG_TYPE_ITEM_DROP_BOX_RESENT = 202,
	GAME_LOG_TYPE_ITEM_DROP_BOX_DELETED = 203,
	GAME_LOG_TYPE_ITEM_GRADE_UP    = 204,
	GAME_LOG_TYPE_ITEM_OPTION_READJUST = 205,
	GAME_LOG_TYPE_ITEM_OPTION_EXTRACT = 206,
	GAME_LOG_TYPE_ITEM_SOCKET_UNLOCK = 207,
	GAME_LOG_TYPE_ITEM_SOCKET_CHANGE = 208,
	GAME_LOG_TYPE_ITEM_SOCKET_REVERT = 209,
	GAME_LOG_TYPE_ITEM_SOCKET_AMPLIFY = 210,
	GAME_LOG_TYPE_ITEM_GEM_INSTALL = 211,
	GAME_LOG_TYPE_ITEM_GEM_UNINSTALL = 212,
	GAME_LOG_TYPE_ITEM_GEM_CHANGE  = 213,
	GAME_LOG_TYPE_ITEM_GEM_MERGE   = 214,
	GAME_LOG_TYPE_ITEM_GEM_AUTO_MERGE_CONFIG = 215,
	GAME_LOG_TYPE_ITEM_TRIPOD_STASH_STORE = 216,
	GAME_LOG_TYPE_ITEM_TRIPOD_STASH_APPLY = 217,
	GAME_LOG_TYPE_ITEM_IDENTIFY    = 218,
	GAME_LOG_TYPE_ITEM_RESEARCH_START = 219,
	GAME_LOG_TYPE_ITEM_RESEARCH_FINISH = 220,
	GAME_LOG_TYPE_ITEM_RESEARCH_RECEIVE = 221,
	GAME_LOG_TYPE_ITEM_TRANSMUTE   = 222,
	GAME_LOG_TYPE_ITEM_PAID_SERVICE_TRY = 223,
	GAME_LOG_TYPE_ITEM_PAID_SERVICE_COMMIT = 224,
	GAME_LOG_TYPE_ITEM_TINT_CHANGE = 225,
	GAME_LOG_TYPE_ITEM_TINT_MATERIAL_BUY = 226,
	GAME_LOG_TYPE_ITEM_TINT_RESTORE = 227,
	GAME_LOG_TYPE_ITEM_AUTO_DISASSEMBLY_CONFIG = 228,
	GAME_LOG_TYPE_ITEM_IMMEDIATELY_USE = 229,
	GAME_LOG_TYPE_ITEM_BRACELET_OPTION_ENCHANT_FINISH = 230,
	GAME_LOG_TYPE_ITEM_SET_TRANSFER = 231,
	GAME_LOG_TYPE_ITEM_ESTHER_WEAPON_EVOLUTION = 232,
	GAME_LOG_TYPE_ITEM_ESTHER_WEAPON_ADD_EXP = 233,
	GAME_LOG_TYPE_ITEM_BRACELET_UPGRADE = 234,
	GAME_LOG_TYPE_EQUIP_ENGRAVE    = 235,
	GAME_LOG_TYPE_TOKEN_ITEM_INCREASE = 236,
	GAME_LOG_TYPE_TOKEN_ITEM_DECREASE = 237,
	GAME_LOG_TYPE_AVATAR_ITEM_REFORM_COMPOSITE = 238,
	GAME_LOG_TYPE_AVATAR_ITEM_REFORM_DISASSEMBLE = 239,
	GAME_LOG_TYPE_AVATAR_ASSEMBLY_FINISH = 240,
	GAME_LOG_TYPE_INDEX_FILTER_ITEM_DROP = 241,
	GAME_LOG_TYPE_INDEX_FILTER_ITEM_OBTAIN = 242,
	GAME_LOG_TYPE_MONEY_INCREASE   = 243,
	GAME_LOG_TYPE_MONEY_DECREASE   = 244,
	GAME_LOG_TYPE_ETC_MONEY_INCREASE = 245,
	GAME_LOG_TYPE_ETC_MONEY_DECREASE = 246,
	GAME_LOG_TYPE_MONEY_BOX_BUY    = 247,
	GAME_LOG_TYPE_MONEY_REMAINDER  = 248,
	GAME_LOG_TYPE_RAID_RESULT      = 249,
	GAME_LOG_TYPE_RAID_START       = 250,
	GAME_LOG_TYPE_RAID_ENTER       = 251,
	GAME_LOG_TYPE_RAID_LEAVE       = 252,
	GAME_LOG_TYPE_RAID_COMBAT_REPORT = 253,
	GAME_LOG_TYPE_RAID_PAID_REWARD = 254,
	GAME_LOG_TYPE_RAID_LEAVE_VOTE_START = 255,
	GAME_LOG_TYPE_RAID_LEAVE_VOTE_CAST = 256,
	GAME_LOG_TYPE_RAID_LEAVE_VOTE_FINISH = 257,
	GAME_LOG_TYPE_RAID_CHANGED_RESET_GAUGE = 258,
	GAME_LOG_TYPE_QUEST_ACCEPT     = 259,
	GAME_LOG_TYPE_QUEST_SUCCESS    = 260,
	GAME_LOG_TYPE_QUEST_FAILURE    = 261,
	GAME_LOG_TYPE_QUEST_ABANDON    = 262,
	GAME_LOG_TYPE_QUEST_REWARD     = 263,
	GAME_LOG_TYPE_QUEST_ACCEPT_FAILED = 264,
	GAME_LOG_TYPE_QUEST_STAGE_COMPLETE = 265,
	GAME_LOG_TYPE_QUEST_POINT_ADD  = 266,
	GAME_LOG_TYPE_QUEST_POINT_REWARD = 267,
	GAME_LOG_TYPE_QUEST_POINT_GRADE_UP = 268,
	GAME_LOG_TYPE_QUEST_ITEM_ADD   = 269,
	GAME_LOG_TYPE_QUEST_ITEM_REMOVE = 270,
	GAME_LOG_TYPE_QUEST_PERIOD_REPEAT = 271,
	GAME_LOG_TYPE_QUEST_COMPLETE   = 272,
	GAME_LOG_TYPE_QUEST_POLISH_DELETE = 273,
	GAME_LOG_TYPE_QUEST_POINT_POLISH_DELETE = 274,
	GAME_LOG_TYPE_COOP_QUEST_START = 275,
	GAME_LOG_TYPE_COOP_QUEST_SUCCESS = 276,
	GAME_LOG_TYPE_COOP_QUEST_FAILURE = 277,
	GAME_LOG_TYPE_COOP_QUEST_MEMBER_JOIN = 278,
	GAME_LOG_TYPE_COOP_QUEST_MEMBER_SUCCESS = 279,
	GAME_LOG_TYPE_COOP_QUEST_MEMBER_FAILURE = 280,
	GAME_LOG_TYPE_COOP_QUEST_MEMBER_GIVEUP = 281,
	GAME_LOG_TYPE_COOP_QUEST_MEMBER_REWARD = 282,
	GAME_LOG_TYPE_SKILL_ADD        = 283,
	GAME_LOG_TYPE_SKILL_REMOVE     = 284,
	GAME_LOG_TYPE_SKILL_POINT_INCREASE = 285,
	GAME_LOG_TYPE_SKILL_POINT_DECREASE = 286,
	GAME_LOG_TYPE_SKILL_INITIALIZE = 287,
	GAME_LOG_TYPE_SKILL_CUSTOMIZE  = 288,
	GAME_LOG_TYPE_SKILL_LEVELUP    = 289,
	GAME_LOG_TYPE_SKILL_START      = 290,
	GAME_LOG_TYPE_SKILL_PRESET_APPLY = 291,
	GAME_LOG_TYPE_SKILL_QUICK_SLOT_UPDATE = 292,
	GAME_LOG_TYPE_COMMON_ACTION_ADD = 293,
	GAME_LOG_TYPE_COMMON_ACTION_REMOVE = 294,
	GAME_LOG_TYPE_COMMON_ACTION_POINT_INCREASE = 295,
	GAME_LOG_TYPE_COMMON_ACTION_POINT_DECREASE = 296,
	GAME_LOG_TYPE_COMMON_ACTION_INITIALIZE = 297,
	GAME_LOG_TYPE_COMMON_ACTION_LEVELUP = 298,
	GAME_LOG_TYPE_COMMON_ACTION_START = 299,
	GAME_LOG_TYPE_COMMON_ACTION_END = 300,
	GAME_LOG_TYPE_MAIL_SEND_USER   = 301,
	GAME_LOG_TYPE_MAIL_SEND_SYSTEM = 302,
	GAME_LOG_TYPE_MAIL_SEND_BACK   = 303,
	GAME_LOG_TYPE_MAIL_DELETE      = 304,
	GAME_LOG_TYPE_MAIL_READ        = 305,
	GAME_LOG_TYPE_MAIL_UNPACK_MONEY = 306,
	GAME_LOG_TYPE_MAIL_UNPACK_ITEM = 307,
	GAME_LOG_TYPE_MAIL_PAYMENT_RECEIVE = 308,
	GAME_LOG_TYPE_MAIL_DELETE_SENT = 309,
	GAME_LOG_TYPE_MAIL_RECLAIM_SENT = 310,
	GAME_LOG_TYPE_SHIP_ADD         = 311,
	GAME_LOG_TYPE_SHIP_REMOVE      = 312,
	GAME_LOG_TYPE_SHIP_LEVELUP     = 313,
	GAME_LOG_TYPE_SHIP_LEVELUP_FAIL = 314,
	GAME_LOG_TYPE_SHIP_REPAIR      = 315,
	GAME_LOG_TYPE_SHIP_REPAIR_FAIL = 316,
	GAME_LOG_TYPE_SHIP_REPAIR_COMPLETE = 317,
	GAME_LOG_TYPE_SHIP_RESUPPLY    = 318,
	GAME_LOG_TYPE_SHIP_CHANGE      = 319,
	GAME_LOG_TYPE_SHIP_WRECK       = 320,
	GAME_LOG_TYPE_SHIP_AVATAR_ADD  = 321,
	GAME_LOG_TYPE_SHIP_AVATAR_CHANGE = 322,
	GAME_LOG_TYPE_SHIP_AVATAR_TOLERANCE_CHANGE = 323,
	GAME_LOG_TYPE_SHIP_AVATAR_TOLERANCE_INITIALIZE = 324,
	GAME_LOG_TYPE_CREW_ADD         = 325,
	GAME_LOG_TYPE_CREW_REMOVE      = 326,
	GAME_LOG_TYPE_CREW_CHANGE      = 327,
	GAME_LOG_TYPE_MUSIC_ADD        = 328,
	GAME_LOG_TYPE_MUSIC_REMOVE     = 329,
	GAME_LOG_TYPE_MUSIC_REGISTER_RETURN_POSITION = 330,
	GAME_LOG_TYPE_MUSIC_PLAY_TOWN_PORTAL = 331,
	GAME_LOG_TYPE_ADV_BOOK_TASK_INCREASE = 332,
	GAME_LOG_TYPE_ADV_BOOK_REWARD  = 333,
	GAME_LOG_TYPE_ADV_BOOK_RANK_CHANGE = 334,
	GAME_LOG_TYPE_ACHIEVEMENT_FINISH = 335,
	GAME_LOG_TYPE_ACHIEVEMENT_REWARD_ITEM = 336,
	GAME_LOG_TYPE_ACHIEVEMENT_REWARD_TITLE = 337,
	GAME_LOG_TYPE_ACHIEVEMENT_OBJECTIVE_FINISH = 338,
	GAME_LOG_TYPE_CHAT             = 339,
	GAME_LOG_TYPE_OPEN_CHAT_CREATE = 340,
	GAME_LOG_TYPE_OPEN_CHAT_INVITE = 341,
	GAME_LOG_TYPE_OPEN_CHAT_ACCEPT = 342,
	GAME_LOG_TYPE_OPEN_CHAT_JOIN   = 343,
	GAME_LOG_TYPE_OPEN_CHAT_LEAVE  = 344,
	GAME_LOG_TYPE_OPEN_CHAT_DELEGATE = 345,
	GAME_LOG_TYPE_OPEN_CHAT_DISBAND = 346,
	GAME_LOG_TYPE_OPEN_CHAT_RENAME = 347,
	GAME_LOG_TYPE_PARTY_AUCTION_FINISH = 348,
	GAME_LOG_TYPE_PARTY_CREATE     = 349,
	GAME_LOG_TYPE_PARTY_JOIN       = 350,
	GAME_LOG_TYPE_PARTY_LEAVE      = 351,
	GAME_LOG_TYPE_PARTY_KICKVOTE_PROGRESS = 352,
	GAME_LOG_TYPE_PARTY_KICKVOTE_RESULT = 353,
	GAME_LOG_TYPE_PARTY_INVITE_REQUEST = 354,
	GAME_LOG_TYPE_PARTY_INVITE_RESPONSE = 355,
	GAME_LOG_TYPE_PARTY_ROOM_CREATE = 356,
	GAME_LOG_TYPE_PARTY_ROOM_DESTROY = 357,
	GAME_LOG_TYPE_PARTY_ROOM_MEMBER_JOIN = 358,
	GAME_LOG_TYPE_PARTY_ROOM_MEMBER_LEAVE = 359,
	GAME_LOG_TYPE_PARTY_ROOM_CANDIATE_JOIN = 360,
	GAME_LOG_TYPE_PARTY_ROOM_CANDIATE_LEAVE = 361,
	GAME_LOG_TYPE_PARTY_BOARD_CREATE = 362,
	GAME_LOG_TYPE_PARTY_BOARD_DESTROY = 363,
	GAME_LOG_TYPE_PARTY_BOARD_JOIN = 364,
	GAME_LOG_TYPE_PARTY_BOARD_LEAVE = 365,
	GAME_LOG_TYPE_PARTY_BOARD_REJECT = 366,
	GAME_LOG_TYPE_PARTY_BOARD_CHANGE = 367,
	GAME_LOG_TYPE_TROOP_CREATE     = 368,
	GAME_LOG_TYPE_TROOP_JOIN       = 369,
	GAME_LOG_TYPE_TROOP_LEAVE      = 370,
	GAME_LOG_TYPE_TROOP_TRANSFER   = 371,
	GAME_LOG_TYPE_GUILD_CREATE     = 372,
	GAME_LOG_TYPE_GUILD_DISBAND    = 373,
	GAME_LOG_TYPE_GUILD_DISBAND_CANCEL = 374,
	GAME_LOG_TYPE_GUILD_PROMOTE    = 375,
	GAME_LOG_TYPE_GUILD_DELEGATE   = 376,
	GAME_LOG_TYPE_GUILD_JOIN       = 377,
	GAME_LOG_TYPE_GUILD_JOIN_ACCEPT = 378,
	GAME_LOG_TYPE_GUILD_KICK       = 379,
	GAME_LOG_TYPE_GUILD_LEAVE      = 380,
	GAME_LOG_TYPE_GUILD_MARK_CHANGE = 381,
	GAME_LOG_TYPE_GUILD_GRADE_CHANGE = 382,
	GAME_LOG_TYPE_GUILD_HEADER_CHANGE = 383,
	GAME_LOG_TYPE_GUILD_STASH_EXPAND = 384,
	GAME_LOG_TYPE_GUILD_STASH_ITEM_DEPOSIT = 385,
	GAME_LOG_TYPE_GUILD_STASH_ITEM_WITHDRAW = 386,
	GAME_LOG_TYPE_GUILD_STASH_ITEM_MOVE = 387,
	GAME_LOG_TYPE_GUILD_STASH_MONEY_DEPOSIT = 388,
	GAME_LOG_TYPE_GUILD_STASH_MONEY_WITHDRAW = 389,
	GAME_LOG_TYPE_GUILD_INVITE     = 390,
	GAME_LOG_TYPE_GUILD_JOIN_REQUEST = 391,
	GAME_LOG_TYPE_GUILD_EXP_CHANGE = 392,
	GAME_LOG_TYPE_GUILD_LEVEL_CHANGE = 393,
	GAME_LOG_TYPE_GUILD_RESOURCE_CHANGE = 394,
	GAME_LOG_TYPE_GUILD_CONTRIBUTION_CHANGE = 395,
	GAME_LOG_TYPE_GUILD_WEEKLY_CONTRIBUTION_CHANGE = 396,
	GAME_LOG_TYPE_GUILD_DONATION   = 397,
	GAME_LOG_TYPE_GUILD_DONATION_ROLLBACK = 398,
	GAME_LOG_TYPE_GUILD_ATTENDANCE = 399,
	GAME_LOG_TYPE_GUILD_RESEARCH_START = 400,
	GAME_LOG_TYPE_GUILD_RESEARCH_COMPLETE = 401,
	GAME_LOG_TYPE_GUILD_RESEARCH_SUPPORT = 402,
	GAME_LOG_TYPE_GUILD_DISTRIBUTION_SETTING_CHANGE = 403,
	GAME_LOG_TYPE_GUILD_DISTRIBUTION_TO_GUILD = 404,
	GAME_LOG_TYPE_GUILD_DISTRIBUTION_TO_MEMBER = 405,
	GAME_LOG_TYPE_GUILD_OBJECTIVE_SELECT = 406,
	GAME_LOG_TYPE_GUILD_OBJECTIVE_WEEKLY_REWARD = 407,
	GAME_LOG_TYPE_GUILD_OBJECTIVE_UPDATE = 408,
	GAME_LOG_TYPE_GUILD_OBJECTIVE_POINT_ADD = 409,
	GAME_LOG_TYPE_GUILD_CONTENTS_JOIN_VOTE = 410,
	GAME_LOG_TYPE_GUILD_JOIN_CONFIG_CHAGNE = 411,
	GAME_LOG_TYPE_GUILD_NAME_CHAGNE = 412,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_CREATE = 413,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_SCHEDULE = 414,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_CLEAR = 415,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_CHANGE_PAUSE = 416,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_START = 417,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_RESULT_PARTICIPANT = 418,
	GAME_LOG_TYPE_GUILD_WORLD_EVENT_RESULT_SETTLED = 419,
	GAME_LOG_TYPE_BUDDY_REQUEST    = 420,
	GAME_LOG_TYPE_BUDDY_RESPONSE   = 421,
	GAME_LOG_TYPE_BLOCK_REMOVE     = 422,
	GAME_LOG_TYPE_BLOCK_REQUEST    = 423,
	GAME_LOG_TYPE_BUDDY_REMOVE     = 424,
	GAME_LOG_TYPE_MATCH_ENLIST     = 425,
	GAME_LOG_TYPE_MATCH_ENLIST_FAIL = 426,
	GAME_LOG_TYPE_MATCH_CANCEL     = 427,
	GAME_LOG_TYPE_MATCH_CONFIRM_REQUESTED = 428,
	GAME_LOG_TYPE_MATCH_CONFIRMED  = 429,
	GAME_LOG_TYPE_MATCH_COMPLETED  = 430,
	GAME_LOG_TYPE_WARP_BY_MATCHING = 431,
	GAME_LOG_TYPE_WARP_TO_SITE_FAIL = 432,
	GAME_LOG_TYPE_COLOSSEUM_ENLIST = 433,
	GAME_LOG_TYPE_COLOSSEUM_ENLIST_FAIL = 434,
	GAME_LOG_TYPE_COLOSSEUM_CANCEL = 435,
	GAME_LOG_TYPE_COLOSSEUM_CONFIRM_REQUESTED = 436,
	GAME_LOG_TYPE_COLOSSEUM_CONFIRMED = 437,
	GAME_LOG_TYPE_BALANCE_TOP_GRADE_NPC_KILL = 438,
	GAME_LOG_TYPE_BALANCE_FIELD_BOSS_KILL = 439,
	GAME_LOG_TYPE_HONOR_TITLE_REMOVE = 440,
	GAME_LOG_TYPE_WALLPAPER_ADD    = 441,
	GAME_LOG_TYPE_WALLPAPER_REMOVE = 442,
	GAME_LOG_TYPE_WALLPAPER_USE    = 443,
	GAME_LOG_TYPE_PARTY_DUNGEON_CREATE = 444,
	GAME_LOG_TYPE_SECRET_DUNGEON_CREATE = 445,
	GAME_LOG_TYPE_DUNGEON_CLEARED  = 446,
	GAME_LOG_TYPE_SECRET_DUNGEON_RESULT = 447,
	GAME_LOG_TYPE_DUNGEON_ENTER    = 448,
	GAME_LOG_TYPE_CHAOS_DUNGEON_ENTER = 449,
	GAME_LOG_TYPE_CHAOS_DUNGEON_CLEARED = 450,
	GAME_LOG_TYPE_CHAOS_DUNGEON_CHANGE_ENTRANCECOUNT = 451,
	GAME_LOG_TYPE_DUNGEON_RESULT   = 452,
	GAME_LOG_TYPE_FIRST_VISIT_EFFECT = 453,
	GAME_LOG_TYPE_REVERSE_RUIN_ENTER = 454,
	GAME_LOG_TYPE_REVERSE_RUIN_CHANGE_ROOM = 455,
	GAME_LOG_TYPE_REVERSE_RUIN_CHANGE_STAGE = 456,
	GAME_LOG_TYPE_REVERSE_RUIN_STAGE_CLEAR = 457,
	GAME_LOG_TYPE_REVERSE_RUIN_STAGE_FAILURE = 458,
	GAME_LOG_TYPE_PERIOD_REWARD_COUNT_CHANGE = 459,
	GAME_LOG_TYPE_ZONE_VOTE_START  = 460,
	GAME_LOG_TYPE_ZONE_VOTE_CAST   = 461,
	GAME_LOG_TYPE_ZONE_VOTE_FINISH = 462,
	GAME_LOG_TYPE_FRIENDSHIP_ACTION = 463,
	GAME_LOG_TYPE_FRIENDSHIP_REWARD = 464,
	GAME_LOG_TYPE_FRIENDSHIP_GRADE_CHANGE = 465,
	GAME_LOG_TYPE_FRIENDSHIP_POINT_INCREASE = 466,
	GAME_LOG_TYPE_FRIENDSHIP_POINT_DECREASE = 467,
	GAME_LOG_TYPE_ISLAND_SLAVE_LIBERATE = 468,
	GAME_LOG_TYPE_LIFE_HUNTING_CHANGE_WAY_POINT = 469,
	GAME_LOG_TYPE_LIFE_HUNTING_INSTALL_TRAP = 470,
	GAME_LOG_TYPE_LIFE_HUNTING_REMOVE_TRAP = 471,
	GAME_LOG_TYPE_LIFE_HUNTING_OPEN_TRAP = 472,
	GAME_LOG_TYPE_LIFE_HUNTING_PREMATURE_TRAP = 473,
	GAME_LOG_TYPE_LIFE_ARCHEOLOGY_ARTIFACT_OPEN = 474,
	GAME_LOG_TYPE_MARKET_ADD       = 475,
	GAME_LOG_TYPE_MARKET_CANCEL    = 476,
	GAME_LOG_TYPE_MARKET_RETURN    = 477,
	GAME_LOG_TYPE_MARKET_BUY       = 478,
	GAME_LOG_TYPE_MARKET_SELL      = 479,
	GAME_LOG_TYPE_MARKET_BUNDLE_CHANGE = 480,
	GAME_LOG_TYPE_AUCTION_ADD      = 481,
	GAME_LOG_TYPE_AUCTION_REMOVE   = 482,
	GAME_LOG_TYPE_AUCTION_BUY      = 483,
	GAME_LOG_TYPE_AUCTION_MAKE_BID = 484,
	GAME_LOG_TYPE_AUCTION_CANCEL_BID = 485,
	GAME_LOG_TYPE_AUCTION_SELL     = 486,
	GAME_LOG_TYPE_AUCTION_WATCH    = 487,
	GAME_LOG_TYPE_AUCTION_UNWATCH  = 488,
	GAME_LOG_TYPE_PAID_CASH_INCREMENT_BEGIN = 489,
	GAME_LOG_TYPE_PAID_CASH_INCREMENT_COMMIT = 490,
	GAME_LOG_TYPE_PAID_CASH_DECREMENT_BEGIN = 491,
	GAME_LOG_TYPE_PAID_CASH_DECREMENT_COMMIT = 492,
	GAME_LOG_TYPE_PAID_CASH_INCREMENT_FAIL = 493,
	GAME_LOG_TYPE_PAID_CASH_DECREMENT_FAIL = 494,
	GAME_LOG_TYPE_PAID_PACKAGE_BUY = 495,
	GAME_LOG_TYPE_PAID_PACKAGE_GIFT = 496,
	GAME_LOG_TYPE_PAID_PACKAGE_UNPACK_TRY = 497,
	GAME_LOG_TYPE_PAID_PACKAGE_UNPACK_COMMIT = 498,
	GAME_LOG_TYPE_PAID_PACKAGE_UNPACK_CANCEL = 499,
	GAME_LOG_TYPE_PAID_TOKEN_CHANGE = 500,
	GAME_LOG_TYPE_PAID_ACTION_BEGIN = 501,
	GAME_LOG_TYPE_PAID_ACTION_COMMIT = 502,
	GAME_LOG_TYPE_PAID_ACTION_CANCEL = 503,
	GAME_LOG_TYPE_FCS_INIT_TRANSACTION = 504,
	GAME_LOG_TYPE_FCS_INIT_TRANSACTION_RESULT = 505,
	GAME_LOG_TYPE_FCS_COMMIT_TRANSACTION = 506,
	GAME_LOG_TYPE_FCS_COMMIT_TRANSACTION_RESULT = 507,
	GAME_LOG_TYPE_PC_ROOM_REWARD   = 508,
	GAME_LOG_TYPE_STOCK_ADD_START  = 509,
	GAME_LOG_TYPE_STOCK_ADD_FINISH = 510,
	GAME_LOG_TYPE_STOCK_CANCEL_START = 511,
	GAME_LOG_TYPE_STOCK_CANCEL_FINISH = 512,
	GAME_LOG_TYPE_STOCK_RESULT     = 513,
	GAME_LOG_TYPE_STOCK_TAKE_START = 514,
	GAME_LOG_TYPE_STOCK_TAKE_FINISH = 515,
	GAME_LOG_TYPE_STOCK_HEARTBEAT  = 516,
	GAME_LOG_TYPE_STOCK_CONTROL    = 517,
	GAME_LOG_TYPE_STOCK_REDEEM_RESULT = 518,
	GAME_LOG_TYPE_EXPEDITION_REWARD = 519,
	GAME_LOG_TYPE_EXPEDITION_LEVEL_ADJUST = 520,
	GAME_LOG_TYPE_DUEL_FINISH      = 521,
	GAME_LOG_TYPE_VICTORY_CREST_ADD = 522,
	GAME_LOG_TYPE_VICTORY_CREST_INSCRIBE = 523,
	GAME_LOG_TYPE_VICTORY_CREST_UNLOCK_PLATE = 524,
	GAME_LOG_TYPE_VICTORY_CREST_SELECT = 525,
	GAME_LOG_TYPE_VICTORY_CREST_DICE_PLATE = 526,
	GAME_LOG_TYPE_VICTORY_CREST_COMMIT_PLATE = 527,
	GAME_LOG_TYPE_LIFE_FISHING_INSTALL_TRAP = 528,
	GAME_LOG_TYPE_LIFE_FISHING_REMOVE_TRAP = 529,
	GAME_LOG_TYPE_LIFE_FISHING_OPEN_TRAP = 530,
	GAME_LOG_TYPE_LIFE_FISHING_NET_RESULT = 531,
	GAME_LOG_TYPE_TROPHY_AUCTION_START = 532,
	GAME_LOG_TYPE_TROPHY_AUCTION   = 533,
	GAME_LOG_TYPE_TROPHY_AUCTION_BID = 534,
	GAME_LOG_TYPE_TROPHY_AUCTION_BID_CANCEL = 535,
	GAME_LOG_TYPE_TROPHY_AUCTION_BID_RESULT = 536,
	GAME_LOG_TYPE_CARD_ADD         = 537,
	GAME_LOG_TYPE_CARD_REMOVE      = 538,
	GAME_LOG_TYPE_CARD_GROWTH      = 539,
	GAME_LOG_TYPE_CARD_AWAKE       = 540,
	GAME_LOG_TYPE_CARD_INHERIT     = 541,
	GAME_LOG_TYPE_CARD_INHERIT_RETRY = 542,
	GAME_LOG_TYPE_CARD_STORAGE_EXPAND = 543,
	GAME_LOG_TYPE_CARD_DECK_EXPAND = 544,
	GAME_LOG_TYPE_CARD_BATTLE_FINISH = 545,
	GAME_LOG_TYPE_CARD_DECK_CHANGE = 546,
	GAME_LOG_TYPE_CARD_GROW_POINT_CHANGE = 547,
	GAME_LOG_TYPE_VEHICLE_RIDE_ON  = 548,
	GAME_LOG_TYPE_VEHICLE_GET_OFF  = 549,
	GAME_LOG_TYPE_VEHICLE_ADD      = 550,
	GAME_LOG_TYPE_VEHICLE_REMOVE   = 551,
	GAME_LOG_TYPE_VOYAGE_NATIVE_VILLIAGE = 552,
	GAME_LOG_TYPE_VOYAGE_DESTROYED = 553,
	GAME_LOG_TYPE_VOYAGE_LINER_ENTER = 554,
	GAME_LOG_TYPE_VOYAGE_LUCK_INCREASE = 555,
	GAME_LOG_TYPE_VOYAGE_LUCK_DECREASE = 556,
	GAME_LOG_TYPE_VOYAGE_LUCK_MAX_ADD = 557,
	GAME_LOG_TYPE_PERMANENT_ATTR_ACQUIRE = 558,
	GAME_LOG_TYPE_NPC_PEDDLER_SPAWN = 559,
	GAME_LOG_TYPE_NPC_FIELD_BOSS_SPAWN = 560,
	GAME_LOG_TYPE_NPC_SPAWN_BY_TRIGGER = 561,
	GAME_LOG_TYPE_TOWN_BASE_LEVEL_UP = 562,
	GAME_LOG_TYPE_TOWN_BASE_EXP    = 563,
	GAME_LOG_TYPE_TOWN_ENTER       = 564,
	GAME_LOG_TYPE_TOWN_ENTER_FAILED = 565,
	GAME_LOG_TYPE_TOWN_LEAVE       = 566,
	GAME_LOG_TYPE_TOWN_EXPEL       = 567,
	GAME_LOG_TYPE_TOWN_NAME_CHANGE = 568,
	GAME_LOG_TYPE_TOWN_INTRODUCTION_CHANGE = 569,
	GAME_LOG_TYPE_TOWN_ACTIVITY_POINT_CHANGE = 570,
	GAME_LOG_TYPE_TOWN_OPEN_AREA   = 571,
	GAME_LOG_TYPE_TOWN_SLOT_ADD    = 572,
	GAME_LOG_TYPE_TOWN_RESEARCH_START = 573,
	GAME_LOG_TYPE_TOWN_RESEARCH_FINISH = 574,
	GAME_LOG_TYPE_TOWN_RESEARCH_FINISH_PAID = 575,
	GAME_LOG_TYPE_TOWN_SHIP_REPAIR = 576,
	GAME_LOG_TYPE_TOWN_SHIP_ADDED  = 577,
	GAME_LOG_TYPE_TOWN_DISPATCH_MISSION_START = 578,
	GAME_LOG_TYPE_TOWN_DISPATCH_MISSION_FINISH = 579,
	GAME_LOG_TYPE_TOWN_DISPATCH_MISSION_FINISH_PAID = 580,
	GAME_LOG_TYPE_TOWN_DISPATCH_MISSION_REFRESH = 581,
	GAME_LOG_TYPE_TOWN_DISPATCH_CREW_RECRUIT = 582,
	GAME_LOG_TYPE_TOWN_NPC_DRESS_BUY = 583,
	GAME_LOG_TYPE_TOWN_NPC_DRESS_EQUIP = 584,
	GAME_LOG_TYPE_TOWN_REDUCE_TIME_MISSION = 585,
	GAME_LOG_TYPE_TOWN_REDUCE_TIME_ASSEMBLY = 586,
	GAME_LOG_TYPE_TOWN_REDUCE_TIME_RESEARCH = 587,
	GAME_LOG_TYPE_TOWN_EFFECT_SLOT_EQUIP = 588,
	GAME_LOG_TYPE_TOWN_EFFECT_SLOT_UNEQUIP = 589,
	GAME_LOG_TYPE_TOWN_ASSEMBLY_ADD = 590,
	GAME_LOG_TYPE_TOWN_ASSEMBLY_FINISH_PAID = 591,
	GAME_LOG_TYPE_TOWN_ASSEMBLY_RECEIVE = 592,
	GAME_LOG_TYPE_TOWN_ASSEMBLY_ALL_RECEIVE = 593,
	GAME_LOG_TYPE_TOWN_ASSEMBLY_CANCEL = 594,
	GAME_LOG_TYPE_TOWN_PROP_ADD    = 595,
	GAME_LOG_TYPE_TOWN_PLACEMENT_START = 596,
	GAME_LOG_TYPE_TOWN_PLACEMENT_SAVE = 597,
	GAME_LOG_TYPE_TOWN_PLACEMENT_FINISH = 598,
	GAME_LOG_TYPE_TOWN_MANAGE_MODE_BEGIN = 599,
	GAME_LOG_TYPE_TOWN_MANAGE_MODE_END = 600,
	GAME_LOG_TYPE_TOWN_TRADE_STATE_CHANGE = 601,
	GAME_LOG_TYPE_TOWN_TRADE_NPC_SELECT = 602,
	GAME_LOG_TYPE_TOWN_TRADE_NPC_SPAWN = 603,
	GAME_LOG_TYPE_TOWN_TRADE_NPC_DESPAWN = 604,
	GAME_LOG_TYPE_TOWN_TRADE_ITEM_BUY = 605,
	GAME_LOG_TYPE_TOWN_PLACEMENT_OBJECT_ADD = 606,
	GAME_LOG_TYPE_TOWN_PLACEMENT_OBJECT_UPDATE = 607,
	GAME_LOG_TYPE_TOWN_PLACEMENT_OBJECT_REMOVE = 608,
	GAME_LOG_TYPE_TOWN_BUILDING_LEVEL_UP = 609,
	GAME_LOG_TYPE_TOWN_MAX_ACTIVITY_POINT_INCREASE = 610,
	GAME_LOG_TYPE_TOWN_CHEF_COOK   = 611,
	GAME_LOG_TYPE_TOWN_CHEF_FEAST_EAT = 612,
	GAME_LOG_TYPE_TOWN_INTEREST_BY_ME = 613,
	GAME_LOG_TYPE_TOWN_INTEREST_BY_MATE = 614,
	GAME_LOG_TYPE_TOWN_PERMISSION_CHANGE = 615,
	GAME_LOG_TYPE_TOWN_TRAINING_START = 616,
	GAME_LOG_TYPE_TOWN_TRAINING_FINISH = 617,
	GAME_LOG_TYPE_TOWN_PET_NICE_CHANGE = 618,
	GAME_LOG_TYPE_TOWN_PET_GIFT    = 619,
	GAME_LOG_TYPE_TOWN_PET_FARM_ADD = 620,
	GAME_LOG_TYPE_TOWN_PET_FARM_REMOVE = 621,
	GAME_LOG_TYPE_TOWN_PET_WORKSHOP_ADD = 622,
	GAME_LOG_TYPE_TOWN_PET_WORKSHOP_REMOVE = 623,
	GAME_LOG_TYPE_TENDENCY_POINT_INCREASE = 624,
	GAME_LOG_TYPE_BATTLEFIELD_ENLIST = 625,
	GAME_LOG_TYPE_BATTLEFIELD_CANCEL = 626,
	GAME_LOG_TYPE_BATTLEFIELD_CREATE = 627,
	GAME_LOG_TYPE_BATTLEFIELD_DESTROY = 628,
	GAME_LOG_TYPE_BATTLEFIELD_ENTER = 629,
	GAME_LOG_TYPE_BATTLEFIELD_EXIT = 630,
	GAME_LOG_TYPE_BATTLEFIELD_RESULT = 631,
	GAME_LOG_TYPE_BATTLEFIELD_SPECIAL_START = 632,
	GAME_LOG_TYPE_BATTLEFIELD_SPECIAL_END = 633,
	GAME_LOG_TYPE_BATTLEFIELD_WEEKLY_RESET_START = 634,
	GAME_LOG_TYPE_BATTLEFIELD_WEEKLY_RESET_END = 635,
	GAME_LOG_TYPE_BATTLEFIELD_ENTRANCE_OCCUPY = 636,
	GAME_LOG_TYPE_BATTLEFIELD_RANK_REWARD_GUILD = 637,
	GAME_LOG_TYPE_BATTLEFIELD_RANK_REWARD_MEMBER = 638,
	GAME_LOG_TYPE_BATTLEFIELD_MATCH_CREATE = 639,
	GAME_LOG_TYPE_BATTLEFIELD_KICK = 640,
	GAME_LOG_TYPE_BATTLEFIELD_COMBAT_REPORT = 641,
	GAME_LOG_TYPE_BATTLEFIELD_GUILD_SKILL_USE = 642,
	GAME_LOG_TYPE_CONFIG_MOUSE     = 643,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_01 = 644,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_02 = 645,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_03 = 646,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_04 = 647,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_XMOD = 648,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_CMOD = 649,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_NET = 650,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_MACRO = 651,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_SPEED = 652,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_SCREEN = 653,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_TOOL = 654,
	GAME_LOG_TYPE_SERVICE_DEV_TEAM_XIGN_CODE_UNKNOWN = 655,
	GAME_LOG_TYPE_VOICE_CHAT_AUTH_GENERATE = 656,
	GAME_LOG_TYPE_PVP_WEEKLY_POINT_INCREASE = 657,
	GAME_LOG_TYPE_PVP_WEEKLY_REWARD = 658,
	GAME_LOG_TYPE_MVP_RAW_REPORT   = 659,
	GAME_LOG_TYPE_MVP_RESULT_REPORT = 660,
	GAME_LOG_TYPE_MVP_REPORT       = 661,
	GAME_LOG_TYPE_PET_ADD          = 662,
	GAME_LOG_TYPE_PET_SUMMON       = 663,
	GAME_LOG_TYPE_PET_UNSUMMON     = 664,
	GAME_LOG_TYPE_PET_CHANGE_EFFECT = 665,
	GAME_LOG_TYPE_PET_CHANGE_NAME  = 666,
	GAME_LOG_TYPE_PET_CHANGE_CONFIG = 667,
	GAME_LOG_TYPE_PET_ADD_EXP      = 668,
	GAME_LOG_TYPE_PET_PROMOTION    = 669,
	GAME_LOG_TYPE_PET_SKILL        = 670,
	GAME_LOG_TYPE_PET_POLYMORPH    = 671,
	GAME_LOG_TYPE_PET_POLYMORPH_UNLOCK = 672,
	GAME_LOG_TYPE_PET_INVENTORY_EXPAND_UNLOCK = 673,
	GAME_LOG_TYPE_PAID_BUFF_ADD    = 674,
	GAME_LOG_TYPE_STAGE_PER_REWARD_PROCESS = 675,
	GAME_LOG_TYPE_STAGE_PER_REWARD_REWARD = 676,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_RECRUIT_CREATE = 677,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_RECRUIT_JOIN = 678,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_RECRUIT_JOIN_RESULT = 679,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_RECRUIT_ACCEPT = 680,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_GRADE_POINT = 681,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_GUILD_GRADE_POINT = 682,
	GAME_LOG_TYPE_BATTLEFIELD_MERCENARY_REWARD_GIVE = 683,
	GAME_LOG_TYPE_WARP_POINT_SAVE  = 684,
	GAME_LOG_TYPE_WARP_POINT_USE   = 685,
	GAME_LOG_TYPE_WARP_POINT_EXPAND = 686,
	GAME_LOG_TYPE_WARP_POINT_NAME_CHANGE = 687,
	GAME_LOG_TYPE_GACHA_DRAW       = 688,
	GAME_LOG_TYPE_GACHA_REWARD     = 689,
	GAME_LOG_TYPE_PREMIUM_ACCOUNT_REWARD = 690,
	GAME_LOG_TYPE_ROLL_BOOK_EVENT_ATTEND = 691,
	GAME_LOG_TYPE_ROLL_BOOK_EVENT_REWARD = 692,
	GAME_LOG_TYPE_HOT_TIME_EVENT_ATTEND = 693,
	GAME_LOG_TYPE_HOT_TIME_EVENT_REWARD = 694,
	GAME_LOG_TYPE_EVENT_PACKAGE_ADD_START = 695,
	GAME_LOG_TYPE_EVENT_PACKAGE_ADD_FINISH = 696,
	GAME_LOG_TYPE_WELCOME_BOOST_REWARD = 697,
	GAME_LOG_TYPE_PC_SLOT_UPDATE   = 698,
	GAME_LOG_TYPE_CONTENTS_RANK_REWARD_REVERSE_RUIN = 699,
	GAME_LOG_TYPE_BEHAVIOR_PATTERN = 700,
	GAME_LOG_TYPE_EVENT_MISSION_OBJECTIVE_SUCCESS = 701,
	GAME_LOG_TYPE_EVENT_MISSION_CATEGORY_REWARD = 702,
	GAME_LOG_TYPE_EVENT_MISSION_OBJECTIVE_REWARD = 703,
	GAME_LOG_TYPE_EVENT_MISSION_OBJECTIVE_COUNT = 704,
	GAME_LOG_TYPE_EVENT_MISSION_CATEGORY_REMOVED = 705,
	GAME_LOG_TYPE_EVENT_MISSION_OBJECTIVE_REMOVED = 706,
	GAME_LOG_TYPE_PREMIUM_ACCOUNT_REWARD_ONCE = 707,
	GAME_LOG_TYPE_SELFIE_WITH_ZONE = 708,
	GAME_LOG_TYPE_SKILL_RUNE_ADD   = 709,
	GAME_LOG_TYPE_SKILL_RUNE_CARVE = 710,
	GAME_LOG_TYPE_SKILL_RUNE_UNCARVE = 711,
	GAME_LOG_TYPE_LIFE_TOOL_REPAIR = 712,
	GAME_LOG_TYPE_LIFE_TOOL_RESTORATION = 713,
	GAME_LOG_TYPE_PC_EXPRESS_MARK  = 714,
	GAME_LOG_TYPE_LIFE_ENERGY_RECOVERY = 715,
	GAME_LOG_TYPE_LIFE_ENERGY_USE  = 716,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_EXP = 717,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_MONEY = 718,
	GAME_LOG_TYPE_PENDING_COMMAND_REMOVE_MONEY = 719,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_LIFE_EXP = 720,
	GAME_LOG_TYPE_PENDING_COMMAND_FINISH_ACHIEVEMENT = 721,
	GAME_LOG_TYPE_PENDING_COMMAND_HANDLE_FRIENDSHIP_TRUST = 722,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_ITEM = 723,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_PERMANENT_ATTR = 724,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_EXPEDITION_EXP = 725,
	GAME_LOG_TYPE_PENDING_COMMAND_ACQUIRE_ISLAND_HEART = 726,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_RAID_REWARD_COUNT = 727,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_EDEN_REWARD_COUNT = 728,
	GAME_LOG_TYPE_PENDING_COMMAND_ADD_CARD = 729,
	GAME_LOG_TYPE_PENDING_COMMAND_INIT_RAID_LICENSE_SEASON = 730,
	GAME_LOG_TYPE_PENDING_COMMAND_COMPLETE_QUEST = 731,
	GAME_LOG_TYPE_CHALLENGE_PRESET_APPLY = 732,
	GAME_LOG_TYPE_CHALLENGE_PRESET_SELECT = 733,
	GAME_LOG_TYPE_CHALLENGE_PRESET_REMOVE = 734,
	GAME_LOG_TYPE_CHALLENGE_PRESET_CHANGE_NAME = 735,
	GAME_LOG_TYPE_BATTLE_SLOT_CHANGE = 736,
	GAME_LOG_TYPE_BATTLE_SLOT_SWAP = 737,
	GAME_LOG_TYPE_BATTLE_SLOT_UPDATE = 738,
	GAME_LOG_TYPE_BATTLE_SLOT_PRESET_CHANGE = 739,
	GAME_LOG_TYPE_EPIC_SKILL_USE   = 740,
	GAME_LOG_TYPE_EPIC_SKILL_GAUGE_CHANGE = 741,
	GAME_LOG_TYPE_EMOTICON_ADD     = 742,
	GAME_LOG_TYPE_LIFE_BOOSTING_GAUGE_RECOVERY = 743,
	GAME_LOG_TYPE_TOWN_FARM_RESET  = 744,
	GAME_LOG_TYPE_TOWN_ENTRY_AND_PERMISSION = 745,
	GAME_LOG_TYPE_ARK_PASS_MISSION_SUCCESS = 746,
	GAME_LOG_TYPE_ARK_PASS_MISSION_OBJECTIVE_COUNT = 747,
	GAME_LOG_TYPE_ARK_PASS_EXP_ADD = 748,
	GAME_LOG_TYPE_ARK_PASS_LEVEL_UP = 749,
	GAME_LOG_TYPE_ARK_PASS_LEVEL_REWARD_RECEIVE = 750,
	GAME_LOG_TYPE_ARK_PASS_PAID_ACTION = 751,
	GAME_LOG_TYPE_TOWN_JUMPING_KNOWLEDGE_LEARN = 752,
	GAME_LOG_TYPE_TOWN_JUMPING_KNOWLEDGE_REWARD = 753,
	GAME_LOG_TYPE_EVENT_MISSION_PC_SELECT = 754,
	GAME_LOG_TYPE_PLAYER_STATE_UPDATE = 755,
	GAME_LOG_TYPE_COMBINED_PRESET_UPDATE = 756,
	GAME_LOG_TYPE_COUNTER_ATTACK   = 757,
	GAME_LOG_TYPE_MAX              = 758
};


// Enum EFGame.EFConst.MatchConfirmType
enum class EMatchConfirmType : uint8_t
{
	MATCH_CONFIRM_TYPE_NO_ANSWER   = 0,
	MATCH_CONFIRM_TYPE_YES         = 1,
	MATCH_CONFIRM_TYPE_NO          = 2,
	MATCH_CONFIRM_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.GameLogStorageOp
enum class EGameLogStorageOp : uint8_t
{
	GAME_LOG_STORAGE_OP_REMOVE     = 0,
	GAME_LOG_STORAGE_OP_ADD        = 1,
	GAME_LOG_STORAGE_OP_MAX        = 2
};


// Enum EFGame.EFConst.CardAddOrigin
enum class ECardAddOrigin : uint8_t
{
	CARD_ADD_ORIGIN_USE_ITEM       = 0,
	CARD_ADD_ORIGIN_EXCESS_STORAGE = 1,
	CARD_ADD_ORIGIN_ADMIN_CMD      = 2,
	CARD_ADD_ORIGIN_PENDING_COMMAND = 3,
	CARD_ADD_ORIGIN_MAX            = 4
};


// Enum EFGame.EFConst.ColosseumPenaltyChangeReason
enum class EColosseumPenaltyChangeReason : uint8_t
{
	COLOSSEUM_PENALTY_CHANGE_REASON_NONE = 0,
	COLOSSEUM_PENALTY_CHANGE_REASON_COUNT_INCREASE = 1,
	COLOSSEUM_PENALTY_CHANGE_REASON_UPDATE = 2,
	COLOSSEUM_PENALTY_CHANGE_REASON_ADMIN = 3,
	COLOSSEUM_PENALTY_CHANGE_REASON_MAX = 4
};


// Enum EFGame.EFConst.PlayerStateUpdateReason
enum class EPlayerStateUpdateReason : uint8_t
{
	PLAYER_STATE_UPDATE_REASON_NONE = 0,
	PLAYER_STATE_UPDATE_REASON_MANUAL = 1,
	PLAYER_STATE_UPDATE_REASON_AUTO = 2,
	PLAYER_STATE_UPDATE_REASON_MAX = 3
};


// Enum EFGame.EFConst.LootOwnerType
enum class ELootOwnerType : uint8_t
{
	LOOT_OWNER_TYPE_INDIVIDUAL     = 0,
	LOOT_OWNER_TYPE_PARTY          = 1,
	LOOT_OWNER_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.ModStateEvent
enum class EModStateEvent : uint8_t
{
	MOD_STATE_EVENT_INTRO          = 0,
	MOD_STATE_EVENT_START          = 1,
	MOD_STATE_EVENT_FINISH         = 2,
	MOD_STATE_EVENT_REWARD         = 3,
	MOD_STATE_EVENT_CHOOSE_NEXT_DOOR = 4,
	MOD_STATE_EVENT_FINALIZE       = 5,
	MOD_STATE_EVENT_DESTROY        = 6,
	MOD_STATE_EVENT_VICTORY        = 7,
	MOD_STATE_EVENT_HIDE_ALL_BOX   = 8,
	MOD_STATE_EVENT_MAX            = 9
};


// Enum EFGame.EFConst.ModCubeDoor
enum class EModCubeDoor : uint8_t
{
	MOD_CUBE_DOOR_EAST             = 0,
	MOD_CUBE_DOOR_WEST             = 1,
	MOD_CUBE_DOOR_SOUTH            = 2,
	MOD_CUBE_DOOR_NORTH            = 3,
	MOD_CUBE_DOOR_MAX              = 4
};


// Enum EFGame.EFConst.ThreatType
enum class EThreatType : uint8_t
{
	THREAT_TYPE_NORMAL             = 0,
	THREAT_TYPE_ACTIVE             = 1,
	THREAT_TYPE_HELP               = 2,
	THREAT_TYPE_PARTY              = 3,
	THREAT_TYPE_FORCE              = 4,
	THREAT_TYPE_MAX                = 5
};


// Enum EFGame.EFConst.NpcPurposeType
enum class ENpcPurposeType : uint8_t
{
	NPC_PURPOSE_TYPE_NORMAL        = 0,
	NPC_PURPOSE_TYPE_NPC_WAVE      = 1,
	NPC_PURPOSE_TYPE_PLATINUM_PROP_HUNTING = 2,
	NPC_PURPOSE_TYPE_TRAINING_MODE = 3,
	NPC_PURPOSE_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.NpcPartRegenType
enum class ENpcPartRegenType : uint8_t
{
	NPC_PART_REGEN_TYPE_TICK       = 0,
	NPC_PART_REGEN_TYPE_SKILL      = 1,
	NPC_PART_REGEN_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.RageType
enum class ERageType : uint8_t
{
	RAGE_TYPE_NONE                 = 0,
	RAGE_TYPE_DAMAGE_COUNT         = 1,
	RAGE_TYPE_DAMAGE               = 2,
	RAGE_TYPE_TICK                 = 3,
	RAGE_TYPE_HELP                 = 4,
	RAGE_TYPE_HP_RATE              = 5,
	RAGE_TYPE_MAX                  = 6
};


// Enum EFGame.EFConst.RageActionType
enum class ERageActionType : uint8_t
{
	RAGE_ACTION_TYPE_NONE          = 0,
	RAGE_ACTION_TYPE_CHANGE_STATE  = 1,
	RAGE_ACTION_TYPE_USE_SKILL     = 2,
	RAGE_ACTION_TYPE_ABNORMAL_MOVE = 3,
	RAGE_ACTION_TYPE_MAX           = 4
};


// Enum EFGame.EFConst.ReviveNpcPartOrigin
enum class EReviveNpcPartOrigin : uint8_t
{
	REVIVE_NPC_PART_ORIGIN_SYSTEM  = 0,
	REVIVE_NPC_PART_ORIGIN_GOHOME  = 1,
	REVIVE_NPC_PART_ORIGIN_LOST_TARGET = 2,
	REVIVE_NPC_PART_ORIGIN_REGEN   = 3,
	REVIVE_NPC_PART_ORIGIN_MAX     = 4
};


// Enum EFGame.EFConst.NpcWaveState
enum class ENpcWaveState : uint8_t
{
	NPC_WAVE_STATE_PREPARING       = 0,
	NPC_WAVE_STATE_ACTIVE          = 1,
	NPC_WAVE_STATE_INACTIVE        = 2,
	NPC_WAVE_STATE_MAX             = 3
};


// Enum EFGame.EFConst.NpcWaveCompleteType
enum class ENpcWaveCompleteType : uint8_t
{
	NPC_WAVE_COMPLETE_TYPE_ALL     = 0,
	NPC_WAVE_COMPLETE_TYPE_APPOINTED = 1,
	NPC_WAVE_COMPLETE_TYPE_RATIO   = 2,
	NPC_WAVE_COMPLETE_TYPE_GRADE   = 3,
	NPC_WAVE_COMPLETE_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.NpcWaveGroupType
enum class ENpcWaveGroupType : uint8_t
{
	NPC_WAVE_GROUP_TYPE_ALL        = 0,
	NPC_WAVE_GROUP_TYPE_RANDOM     = 1,
	NPC_WAVE_GROUP_TYPE_RANDOM_OVERLAP = 2,
	NPC_WAVE_GROUP_TYPE_REPEAT     = 3,
	NPC_WAVE_GROUP_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.NpcWaveNodeType
enum class ENpcWaveNodeType : uint8_t
{
	NPC_WAVE_NODE_TYPE_ALL         = 0,
	NPC_WAVE_NODE_TYPE_RANDOM      = 1,
	NPC_WAVE_NODE_TYPE_RANDOM_OVERLAP = 2,
	NPC_WAVE_NODE_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.NpcWaveSpawnType
enum class ENpcWaveSpawnType : uint8_t
{
	NPC_WAVE_SPAWN_TYPE_GROUP      = 0,
	NPC_WAVE_SPAWN_TYPE_RANDOM     = 1,
	NPC_WAVE_SPAWN_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.NpcWaveGroupSpawnType
enum class ENpcWaveGroupSpawnType : uint8_t
{
	NPC_WAVE_GROUP_SPAWN_TYPE_CONCURRENT = 0,
	NPC_WAVE_GROUP_SPAWN_TYPE_SEQUENTIAL = 1,
	NPC_WAVE_GROUP_SPAWN_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.NpcWavePositionType
enum class ENpcWavePositionType : uint8_t
{
	NPC_WAVE_POSITION_TYPE_NONE    = 0,
	NPC_WAVE_POSITION_TYPE_SPOT    = 1,
	NPC_WAVE_POSITION_TYPE_GROUP   = 2,
	NPC_WAVE_POSITION_TYPE_GROUP_OVERLAP = 3,
	NPC_WAVE_POSITION_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.NpcWaveMethod
enum class ENpcWaveMethod : uint8_t
{
	NPC_WAVE_METHOD_TIME           = 0,
	NPC_WAVE_METHOD_RATIO          = 1,
	NPC_WAVE_METHOD_MAX            = 2
};


// Enum EFGame.EFConst.NpcMoveSpotType
enum class ENpcMoveSpotType : uint8_t
{
	NPC_MOVE_SPOT_TYPE_DIRECT      = 0,
	NPC_MOVE_SPOT_TYPE_DEVIOUS     = 1,
	NPC_MOVE_SPOT_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.NpcExpireType
enum class ENpcExpireType : uint8_t
{
	NPC_EXPIRE_TYPE_NONE           = 0,
	NPC_EXPIRE_TYPE_TIME           = 1,
	NPC_EXPIRE_TYPE_MAX            = 2
};


// Enum EFGame.EFConst.NpcAdminChangeType
enum class ENpcAdminChangeType : uint8_t
{
	NPC_ADMIN_CHANGE_TYPE_GRADE    = 0,
	NPC_ADMIN_CHANGE_TYPE_SPECIES  = 1,
	NPC_ADMIN_CHANGE_TYPE_DAMAGE_ATTRIBUTE = 2,
	NPC_ADMIN_CHANGE_TYPE_IMMUNE_ID = 3,
	NPC_ADMIN_CHANGE_TYPE_PARALYZATION_MAX_POINT = 4,
	NPC_ADMIN_CHANGE_TYPE_PARTS_MASK = 5,
	NPC_ADMIN_CHANGE_TYPE_STAT_SIGHT_RANGE = 6,
	NPC_ADMIN_CHANGE_TYPE_STAT_WAR_RANGE = 7,
	NPC_ADMIN_CHANGE_TYPE_STAT_PURSUIT_RANGE = 8,
	NPC_ADMIN_CHANGE_TYPE_MAX      = 9
};


// Enum EFGame.EFConst.NpcBehaviorControlType
enum class ENpcBehaviorControlType : uint8_t
{
	NPC_BEHAVIOR_CONTROL_NO_USE    = 0,
	NPC_BEHAVIOR_CONTROL_IDLE      = 1,
	NPC_BEHAVIOR_CONTROL_BATTLE    = 2,
	NPC_BEHAVIOR_CONTROL_MAX       = 3
};


// Enum EFGame.EFConst.NpcCommandType
enum class ENpcCommandType : uint8_t
{
	NPC_COMMAND_TYPE_MOVE          = 0,
	NPC_COMMAND_TYPE_USE_SKILL     = 1,
	NPC_COMMAND_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.NpcMoveToHomeType
enum class ENpcMoveToHomeType : uint8_t
{
	NPC_MOVE_TO_HOME_TYPE_NEAR_LOCATION = 0,
	NPC_MOVE_TO_HOME_TYPE_RETURN_POS = 1,
	NPC_MOVE_TO_HOME_TYPE_SPAWN_POS = 2,
	NPC_MOVE_TO_HOME_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.NpcAiPointType
enum class ENpcAiPointType : uint8_t
{
	NPC_AI_POINT_TYPE_NONE         = 0,
	NPC_AI_POINT_TYPE_ITEM         = 1,
	NPC_AI_POINT_TYPE_PARALYZATION = 2,
	NPC_AI_POINT_TYPE_GROGGY       = 3,
	NPC_AI_POINT_TYPE_BLOCK_SKILL  = 4,
	NPC_AI_POINT_TYPE_MAX          = 5
};


// Enum EFGame.EFConst.ObjectClass
enum class EObjectClass : uint8_t
{
	OBJECT_CLASS_ACTOR             = 0,
	OBJECT_CLASS_DROP_BOX          = 1,
	OBJECT_CLASS_WALL              = 2,
	OBJECT_CLASS_TRANSIT           = 3,
	OBJECT_CLASS_BEACON            = 4,
	OBJECT_CLASS_NPC_MAKER         = 5,
	OBJECT_CLASS_MAX               = 6
};


// Enum EFGame.EFConst.ObjectTimerType
enum class EObjectTimerType : uint8_t
{
	OBJECT_TIMER_TYPE_VERY_FAST    = 0,
	OBJECT_TIMER_TYPE_FAST         = 1,
	OBJECT_TIMER_TYPE_MEDIUM       = 2,
	OBJECT_TIMER_TYPE_SLOW         = 3,
	OBJECT_TIMER_TYPE_VERY_SLOW    = 4,
	OBJECT_TIMER_TYPE_MAX          = 5
};


// Enum EFGame.EFConst.ZoneBindState
enum class EZoneBindState : uint8_t
{
	ZONE_BIND_STATE_VOID           = 0,
	ZONE_BIND_STATE_ENTERING       = 1,
	ZONE_BIND_STATE_LEAVING        = 2,
	ZONE_BIND_STATE_NORMAL         = 3,
	ZONE_BIND_STATE_MOVING         = 4,
	ZONE_BIND_STATE_DELETING       = 5,
	ZONE_BIND_STATE_MAX            = 6
};


// Enum EFGame.EFConst.MoveResult
enum class EMoveResult : uint8_t
{
	MOVE_RESULT_MOVED              = 0,
	MOVE_RESULT_GOAL_REACHED       = 1,
	MOVE_RESULT_CANNOT_MOVE        = 2,
	MOVE_RESULT_ERROR              = 3,
	MOVE_RESULT_MAX                = 4
};


// Enum EFGame.EFConst.ParamType
enum class EParamType : uint8_t
{
	PARAM_TYPE_ABSOLUTE            = 0,
	PARAM_TYPE_RELATIVE            = 1,
	PARAM_TYPE_MAX                 = 2
};


// Enum EFGame.EFConst.CollisionResult
enum class ECollisionResult : uint8_t
{
	COLLISION_RESULT_ERROR         = 0,
	COLLISION_RESULT_EXIST         = 1,
	COLLISION_RESULT_NONE          = 2,
	COLLISION_RESULT_MAX           = 3
};


// Enum EFGame.EFConst.PCEntryPlan
enum class EPCEntryPlan : uint8_t
{
	PC_ENTRY_PLAN_UNKNOWN          = 0,
	PC_ENTRY_PLAN_CURRENT_DB_POS   = 1,
	PC_ENTRY_PLAN_CURRENT_BASE_POS = 2,
	PC_ENTRY_PLAN_LAST_DB_POS      = 3,
	PC_ENTRY_PLAN_LAST_BASE_POS    = 4,
	PC_ENTRY_PLAN_SESSION_DOC_POS  = 5,
	PC_ENTRY_PLAN_RVR_FIELD_RET_POS = 6,
	PC_ENTRY_PLAN_MAX              = 7
};


// Enum EFGame.EFConst.PCDeleteCode
enum class EPCDeleteCode : uint8_t
{
	PC_DELETE_CODE_NOT_SET         = 0,
	PC_DELETE_CODE_NOT_DELETED     = 1,
	PC_DELETE_CODE_DELETED_BY_USER = 2,
	PC_DELETE_CODE_DELETED_BY_ADMIN = 3,
	PC_DELETE_CODE_MAX             = 4
};


// Enum EFGame.EFConst.ProjectileAccelType
enum class EProjectileAccelType : uint8_t
{
	PROJECTILE_ACCEL_TYPE_NONE     = 0,
	PROJECTILE_ACCEL_TYPE_RELATIVE = 1,
	PROJECTILE_ACCEL_TYPE_ABSOLUTE = 2,
	PROJECTILE_ACCEL_TYPE_DE_ACCEL_WITH_TIME = 3,
	PROJECTILE_ACCEL_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.ProjectileAimType
enum class EProjectileAimType : uint8_t
{
	PROJECTILE_AIM_TYPE_SELECTED   = 0,
	PROJECTILE_AIM_TYPE_DIRECTION  = 1,
	PROJECTILE_AIM_TYPE_AIM_POS    = 2,
	PROJECTILE_AIM_TYPE_CONTROL_TARGET_POS = 3,
	PROJECTILE_AIM_TYPE_CASTER_POS = 4,
	PROJECTILE_AIM_TYPE_AUTO_TARGET_POS = 5,
	PROJECTILE_AIM_TYPE_MAX        = 6
};


// Enum EFGame.EFConst.ProjectileAreaType
enum class EProjectileAreaType : uint8_t
{
	PROJECTILE_AREA_TYPE_IMPACT    = 0,
	PROJECTILE_AREA_TYPE_SKILL     = 1,
	PROJECTILE_AREA_TYPE_MAX       = 2
};


// Enum EFGame.EFConst.ProjectileBankDataAddendType
enum class EProjectileBankDataAddendType : uint8_t
{
	PROJECTILE_BANK_DATA_ADDEND_TYPE_NONE = 0,
	PROJECTILE_BANK_DATA_ADDEND_TYPE_DIST_DAMAGE_RATIO = 1,
	PROJECTILE_BANK_DATA_ADDEND_TYPE_HIT_DAMAGE_RATIO = 2,
	PROJECTILE_BANK_DATA_ADDEND_TYPE_INVOKE_SKILL_EFFECT_DAMAGE_RATIO = 3,
	PROJECTILE_BANK_DATA_ADDEND_TYPE_HIT_SKILL_EFFECT_DAMAGE_RATIO = 4,
	PROJECTILE_BANK_DATA_ADDEND_TYPE_MAX = 5
};


// Enum EFGame.EFConst.ProjectileBankDataIntType
enum class EProjectileBankDataIntType : uint8_t
{
	PROJECTILE_BANK_DATA_INT_TYPE_NONE = 0,
	PROJECTILE_BANK_DATA_INT_TYPE_AREABUFF_ID = 1,
	PROJECTILE_BANK_DATA_INT_TYPE_MAX = 2
};


// Enum EFGame.EFConst.ProjectileProcType
enum class EProjectileProcType : uint8_t
{
	PROJECTILE_PROC_TYPE_SET_TARGET = 0,
	PROJECTILE_PROC_TYPE_TRACE     = 1,
	PROJECTILE_PROC_TYPE_TIMER     = 2,
	PROJECTILE_PROC_TYPE_ACCEL     = 3,
	PROJECTILE_PROC_TYPE_SKILL_EFFECT = 4,
	PROJECTILE_PROC_TYPE_SET_SKELETAL_MESH = 5,
	PROJECTILE_PROC_TYPE_TIER_CHECK_SKILL_EFFECT = 6,
	PROJECTILE_PROC_TYPE_TIER_CHECK_BANK_DATA = 7,
	PROJECTILE_PROC_TYPE_BANK_DATA = 8,
	PROJECTILE_PROC_TYPE_AURA_BUFF = 9,
	PROJECTILE_PROC_TYPE_SEQUENTIAL_SKILL_EFFECT = 10,
	PROJECTILE_PROC_TYPE_MAX       = 11
};


// Enum EFGame.EFConst.ProjectileTraceTargetSelectType
enum class EProjectileTraceTargetSelectType : uint8_t
{
	PROJECTILE_TRACE_TARGET_SELECT_TYPE_RANGE = 0,
	PROJECTILE_TRACE_TARGET_SELECT_TYPE_TARGET = 1,
	PROJECTILE_TRACE_TARGET_SELECT_TYPE_MAX = 2
};


// Enum EFGame.EFConst.ProjectileType
enum class EProjectileType : uint8_t
{
	PROJECTILE_TYPE_AREA           = 0,
	PROJECTILE_TYPE_GRENADE        = 1,
	PROJECTILE_TYPE_MISSILE        = 2,
	PROJECTILE_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.ProjectileTraceIdleMoveType
enum class EProjectileTraceIdleMoveType : uint8_t
{
	PROJECTILE_TRACE_IDLE_MOVE_TYPE_MOVE = 0,
	PROJECTILE_TRACE_IDLE_MOVE_TYPE_STOP = 1,
	PROJECTILE_TRACE_IDLE_MOVE_TYPE_EXPLODE = 2,
	PROJECTILE_TRACE_IDLE_MOVE_TYPE_DESTROY = 3,
	PROJECTILE_TRACE_IDLE_MOVE_TYPE_MAX = 4
};


// Enum EFGame.EFConst.ProjectileHitType
enum class EProjectileHitType : uint8_t
{
	PROJECTILE_HIT_TYPE_MOVING_PATH = 0,
	PROJECTILE_HIT_TYPE_SKILL_EFFECT = 1,
	PROJECTILE_HIT_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.ProjectileTraceTargetOption
enum class EProjectileTraceTargetOption : uint8_t
{
	PROJECTILE_TRACE_TARGET_OPTION_NONE = 0,
	PROJECTILE_TRACE_TARGET_OPTION_SELF_ONLY = 1,
	PROJECTILE_TRACE_TARGET_OPTION_MAX = 2
};


// Enum EFGame.EFConst.QuestActionType
enum class EQuestActionType : uint8_t
{
	QUEST_ACTION_TYPE_ACQUIRE_QUEST_ITEM = 0,
	QUEST_ACTION_TYPE_GIVE_BUFF    = 1,
	QUEST_ACTION_TYPE_GIVE_QUEST_ITEM = 2,
	QUEST_ACTION_TYPE_GIVE_RANDOM_BUFF = 3,
	QUEST_ACTION_TYPE_MAX          = 4
};


// Enum EFGame.EFConst.QuestOfferFailureRatioType
enum class EQuestOfferFailureRatioType : uint8_t
{
	QUEST_OFFER_FAILURE_RATIO_TYPE_NONE = 0,
	QUEST_OFFER_FAILURE_RATIO_TYPE_ITEM = 1,
	QUEST_OFFER_FAILURE_RATIO_TYPE_BUFF = 2,
	QUEST_OFFER_FAILURE_RATIO_TYPE_MAX = 3
};


// Enum EFGame.EFConst.QuestOfferReturnType
enum class EQuestOfferReturnType : uint8_t
{
	QUEST_OFFER_RETURN_TYPE_NONE   = 0,
	QUEST_OFFER_RETURN_TYPE_QUEST_COMPLETE = 1,
	QUEST_OFFER_RETURN_TYPE_QUEST_STAGE_COMPLETE = 2,
	QUEST_OFFER_RETURN_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.QuestEventType
enum class EQuestEventType : uint8_t
{
	QUEST_EVENT_TYPE_NONE          = 0,
	QUEST_EVENT_TYPE_FORCE_REFRESH = 1,
	QUEST_EVENT_TYPE_USE_ITEM      = 2,
	QUEST_EVENT_TYPE_APPLY_ITEM_EFFECT = 3,
	QUEST_EVENT_TYPE_APPLY_PROP_EFFECT = 4,
	QUEST_EVENT_TYPE_EQUIP_ITEM    = 5,
	QUEST_EVENT_TYPE_TALK_NPC      = 6,
	QUEST_EVENT_TYPE_KILL_NPC      = 7,
	QUEST_EVENT_TYPE_KILL_NPC_WITH_ITEM = 8,
	QUEST_EVENT_TYPE_KILL_NPC_WITH_QUESTITEM = 9,
	QUEST_EVENT_TYPE_NPC_WAVE_COMPLETED = 10,
	QUEST_EVENT_TYPE_INTERACT_PROP = 11,
	QUEST_EVENT_TYPE_ENTER_PROP    = 12,
	QUEST_EVENT_TYPE_LEAVE_PROP    = 13,
	QUEST_EVENT_TYPE_STAY_TIMER_TICK = 14,
	QUEST_EVENT_TYPE_STAY_TIMER_FINISHED = 15,
	QUEST_EVENT_TYPE_DROP_PICKUP_PROP = 16,
	QUEST_EVENT_TYPE_THROW_PICKUP_PROP = 17,
	QUEST_EVENT_TYPE_CONVOY_ARRIVED = 18,
	QUEST_EVENT_TYPE_CONVOY_DIED   = 19,
	QUEST_EVENT_TYPE_ESCAPE_POSITION = 20,
	QUEST_EVENT_TYPE_DIED          = 21,
	QUEST_EVENT_TYPE_TIMER_EXPIRED = 22,
	QUEST_EVENT_TYPE_STAGE_TIMER_EXPIRED = 23,
	QUEST_EVENT_TYPE_PICKUP_PROP_USE_SKILL = 24,
	QUEST_EVENT_TYPE_CLASS_CHANGED = 25,
	QUEST_EVENT_TYPE_DESTROY_TOWER = 26,
	QUEST_EVENT_TYPE_VISIT_ZONE    = 27,
	QUEST_EVENT_TYPE_USE_SKILL     = 28,
	QUEST_EVENT_TYPE_USE_COMMON_ACTION = 29,
	QUEST_EVENT_TYPE_ACQUIRE_QUEST_ITEM = 30,
	QUEST_EVENT_TYPE_USE_QUEST_ITEM = 31,
	QUEST_EVENT_TYPE_APPLY_QUEST_ITEM_EFFECT = 32,
	QUEST_EVENT_TYPE_BALLOON_TALK_NPC = 33,
	QUEST_EVENT_TYPE_NPC_FRIENDSHIP = 34,
	QUEST_EVENT_TYPE_CLEAR_DUNGEON = 35,
	QUEST_EVENT_TYPE_MOVED_ZONE    = 36,
	QUEST_EVENT_TYPE_JOIN_PARTY    = 37,
	QUEST_EVENT_TYPE_USE_ITEM_TO_FAIL = 38,
	QUEST_EVENT_TYPE_USE_SQUARE_HOLE = 39,
	QUEST_EVENT_TYPE_CHECK_NPC_HP  = 40,
	QUEST_EVENT_TYPE_LEAVE_VOLUME  = 41,
	QUEST_EVENT_TYPE_ADD_STATUS_EFFECT = 42,
	QUEST_EVENT_TYPE_REMOVE_STATUS_EFFECT = 43,
	QUEST_EVENT_TYPE_REMOVE_STATUS_EFFECT_FAIL = 44,
	QUEST_EVENT_TYPE_HAVE_MONEY    = 45,
	QUEST_EVENT_TYPE_FORCE_FAIL_QUEST = 46,
	QUEST_EVENT_TYPE_FORCE_FAIL_QUEST_STAGE = 47,
	QUEST_EVENT_TYPE_ADD_SHIP      = 48,
	QUEST_EVENT_TYPE_UPGRADE_SHIP  = 49,
	QUEST_EVENT_TYPE_ADD_VOYAGE_CREW = 50,
	QUEST_EVENT_TYPE_RIDE_VEHICLE_FAIL = 51,
	QUEST_EVENT_TYPE_TOWN_INSTALL_PLACEMENT_OBJECT = 52,
	QUEST_EVENT_TYPE_TOWN_DISPATCH_MISSION = 53,
	QUEST_EVENT_TYPE_TOWN_EMPLOY_NPC = 54,
	QUEST_EVENT_TYPE_TOWN_PRODUCUCTION = 55,
	QUEST_EVENT_TYPE_TOWN_TALK_WITH_NPC = 56,
	QUEST_EVENT_TYPE_TOWN_DEPLOY_NPC = 57,
	QUEST_EVENT_TYPE_TOWN_DISMISS_NPC = 58,
	QUEST_EVENT_TYPE_CARD_BATTLE   = 59,
	QUEST_EVENT_TYPE_KILL_PLAYER   = 60,
	QUEST_EVENT_TYPE_USE_MONEY     = 61,
	QUEST_EVENT_TYPE_PLAY_COLOSSEUM = 62,
	QUEST_EVENT_TYPE_USE_FRIENDSHIP_ACTION = 63,
	QUEST_EVENT_TYPE_GATHER_FRIENDSHIP_POINT = 64,
	QUEST_EVENT_TYPE_TOWN_UPGRADE_BUILDING = 65,
	QUEST_EVENT_TYPE_COLLECT_PROP  = 66,
	QUEST_EVENT_TYPE_START_MOD     = 67,
	QUEST_EVENT_TYPE_PROCESS_ITEM  = 68,
	QUEST_EVENT_TYPE_CHANGE_MOD_STAGE = 69,
	QUEST_EVENT_TYPE_FINISH_MOD    = 70,
	QUEST_EVENT_TYPE_USE_LIFE_WITH_PROP = 71,
	QUEST_EVENT_TYPE_USE_VOYAGE_WITH_PROP = 72,
	QUEST_EVENT_TYPE_TOWN_PRODUCE_BOOST = 73,
	QUEST_EVENT_TYPE_FLUSH_DATABASE = 74,
	QUEST_EVENT_TYPE_INTERACT_FLOATING_MATTER = 75,
	QUEST_EVENT_TYPE_KILL_ASSIST_PLAYER = 76,
	QUEST_EVENT_TYPE_TOKEN_ITEM    = 77,
	QUEST_EVENT_TYPE_MOD_PLATINUM_COOP = 78,
	QUEST_EVENT_TYPE_RIDE_VEHICLE  = 79,
	QUEST_EVENT_TYPE_TOWN_DISPATCH_EMPLOY_CREW = 80,
	QUEST_EVENT_TYPE_TOWN_DISPATCH_MISSION_END = 81,
	QUEST_EVENT_TYPE_TOWN_RESEARCH_COMPLETE = 82,
	QUEST_EVENT_TYPE_TOWN_OPEN_SITE_AREA = 83,
	QUEST_EVENT_TYPE_TOWN_DISPATCH_MISSION_START = 84,
	QUEST_EVENT_TYPE_KILL_HIT_PROP = 85,
	QUEST_EVENT_TYPE_GATHER_REVERSERUIN_POINT = 86,
	QUEST_EVENT_TYPE_CLEAR_TROOP_SUB_QUEST = 87,
	QUEST_EVENT_TYPE_COOP_TREASURE_SALVAGE = 88,
	QUEST_EVENT_TYPE_PLAY_COLOSSEUM_KILL = 89,
	QUEST_EVENT_TYPE_PLAY_COLOSSEUM_ASSIST = 90,
	QUEST_EVENT_TYPE_ITEM_ASSEMBLY = 91,
	QUEST_EVENT_TYPE_GATHER_LIFE_EXP = 92,
	QUEST_EVENT_TYPE_TIME_DEFENSE_START = 93,
	QUEST_EVENT_TYPE_TIME_DEFENSE_FINISHED = 94,
	QUEST_EVENT_TYPE_CLEAR_TUTORIAL = 95,
	QUEST_EVENT_TYPE_RAID_SOUL_REWARD = 96,
	QUEST_EVENT_TYPE_VISIT_ASSEMBLE_VOLUME = 97,
	QUEST_EVENT_TYPE_TOWN_CHEF_START = 98,
	QUEST_EVENT_TYPE_ACHIEVE_ITEM_LEVEL = 99,
	QUEST_EVENT_TYPE_CLEAR_UI_TUTORIAL = 100,
	QUEST_EVENT_TYPE_CHANGE_REALM  = 101,
	QUEST_EVENT_TYPE_OCCUPY_STRONG_HOLD = 102,
	QUEST_EVENT_TYPE_GATHER_BATTLEFIELD_POINT = 103,
	QUEST_EVENT_TYPE_USE_SKILL_PERFECT_STAGE = 104,
	QUEST_EVENT_TYPE_MAX           = 105
};


// Enum EFGame.EFConst.QuestRemoveOptionType
enum class EQuestRemoveOptionType : uint8_t
{
	QUEST_REMOVE_OPTION_TYPE_BUFF  = 0,
	QUEST_REMOVE_OPTION_TYPE_QUEST_ITEM = 1,
	QUEST_REMOVE_OPTION_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.QuestGatherPointConditionType
enum class EQuestGatherPointConditionType : uint8_t
{
	QUEST_GATHER_POINT_CONDITION_TYPE_NONE = 0,
	QUEST_GATHER_POINT_CONDITION_TYPE_APPLY_PICKUP_EFFECT = 1,
	QUEST_GATHER_POINT_CONDITION_TYPE_GATHER_QUEST_ITEM = 2,
	QUEST_GATHER_POINT_CONDITION_TYPE_INTERACT_PROP = 3,
	QUEST_GATHER_POINT_CONDITION_TYPE_KILL_MONSTER = 4,
	QUEST_GATHER_POINT_CONDITION_TYPE_KILL_PLAYER = 5,
	QUEST_GATHER_POINT_CONDITION_TYPE_USE_PICKUP_PROP = 6,
	QUEST_GATHER_POINT_CONDITION_TYPE_KILL_MONSTER_WITH_ITEM = 7,
	QUEST_GATHER_POINT_CONDITION_TYPE_KILL_MONSTER_WITH_QUEST_ITEM = 8,
	QUEST_GATHER_POINT_CONDITION_TYPE_USE_QUEST_ITEM = 9,
	QUEST_GATHER_POINT_CONDITION_TYPE_DEAD_ENEMY_PLAYER = 10,
	QUEST_GATHER_POINT_CONDITION_TYPE_MAX = 11
};


// Enum EFGame.EFConst.QuestGatherPointKillPlayerSubType
enum class EQuestGatherPointKillPlayerSubType : uint8_t
{
	QUEST_GATHER_POINT_KILL_PLAYER_SUB_TYPE_NONE = 0,
	QUEST_GATHER_POINT_KILL_PLAYER_SUB_TYPE_KILL = 1,
	QUEST_GATHER_POINT_KILL_PLAYER_SUB_TYPE_ASSIST = 2,
	QUEST_GATHER_POINT_KILL_PLAYER_SUB_TYPE_DIED = 3,
	QUEST_GATHER_POINT_KILL_PLAYER_SUB_TYPE_MAX = 4
};


// Enum EFGame.EFConst.CardRefundType
enum class ECardRefundType : uint8_t
{
	CARD_REFUND_TYPE_NORMAL        = 0,
	CARD_REFUND_TYPE_FULL          = 1,
	CARD_REFUND_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.CardExpType
enum class ECardExpType : uint8_t
{
	CARD_EXP_TYPE_ADD              = 0,
	CARD_EXP_TYPE_DELETE           = 1,
	CARD_EXP_TYPE_REFUND           = 2,
	CARD_EXP_TYPE_MAX              = 3
};


// Enum EFGame.EFConst.ActionType
enum class EActionType : uint8_t
{
	ACTION_TYPE_NONE               = 0,
	ACTION_TYPE_EXEC_ACTION        = 1,
	ACTION_TYPE_MEMORIZE_POS       = 2,
	ACTION_TYPE_TOGGLE_COLLISION   = 3,
	ACTION_TYPE_EMIT_TRIGGER_SIGNAL = 4,
	ACTION_TYPE_PARALYZATION       = 5,
	ACTION_TYPE_CHANGE_NPC_STATUS  = 6,
	ACTION_TYPE_MAX                = 7
};


// Enum EFGame.EFConst.AuraTargetType
enum class EAuraTargetType : uint8_t
{
	AURA_TARGET_TYPE_SELF          = 0,
	AURA_TARGET_TYPE_TARGET        = 1,
	AURA_TARGET_TYPE_ALL           = 2,
	AURA_TARGET_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.AuraConditionType
enum class EAuraConditionType : uint8_t
{
	AURA_CONDITION_TYPE_TARGET_COUNT_GREATER = 0,
	AURA_CONDITION_TYPE_TARGET_COUNT_LESS = 1,
	AURA_CONDITION_TYPE_TARGET_CHECK_BUFF = 2,
	AURA_CONDITION_TYPE_TARGET_CHECK_BUFF_EXCLUDE = 3,
	AURA_CONDITION_TYPE_TARGET_COUNT_EQUAL = 4,
	AURA_CONDITION_TYPE_TARGET_COUNT_NOT_EQUAL = 5,
	AURA_CONDITION_TYPE_TARGET_MAX = 6
};


// Enum EFGame.EFConst.AuraActionType
enum class EAuraActionType : uint8_t
{
	AURA_ACTION_TYPE_ADD_BUFF      = 0,
	AURA_ACTION_TYPE_ADD_BUFF_TARGET_COUNT = 1,
	AURA_ACTION_TYPE_REMOVE_BUFF   = 2,
	AURA_ACTION_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.CheckQuickSlotType
enum class ECheckQuickSlotType : uint8_t
{
	CHECK_QUICK_SLOT_TYPE_SKILL    = 0,
	CHECK_QUICK_SLOT_TYPE_LIFE_SKILL = 1,
	CHECK_QUICK_SLOT_TYPE_POLYMORPH_SKILL = 2,
	CHECK_QUICK_SLOT_TYPE_VOYAGE_SKILL = 3,
	CHECK_QUICK_SLOT_TYPE_PROP_SKILL = 4,
	CHECK_QUICK_SLOT_TYPE_MAX      = 5
};


// Enum EFGame.EFConst.SkillRootmotionMoveType
enum class ESkillRootmotionMoveType : uint8_t
{
	SKILL_ROOTMOTION_MOVE_TYPE_NORMAL = 0,
	SKILL_ROOTMOTION_MOVE_TYPE_CONSTNUMBER = 1,
	SKILL_ROOTMOTION_MOVE_TYPE_MOUSEPOS = 2,
	SKILL_ROOTMOTION_MOVE_TYPE_FRONTOFTARGET = 3,
	SKILL_ROOTMOTION_MOVE_TYPE_TARGET = 4,
	SKILL_ROOTMOTION_MOVE_TYPE_MAX = 5
};


// Enum EFGame.EFConst.SkillEffectHealType
enum class ESkillEffectHealType : uint8_t
{
	SKILL_EFFECT_HEAL_TYPE_MIN_MAX = 0,
	SKILL_EFFECT_HEAL_TYPE_CASTER_MAXHP_PERCENT = 1,
	SKILL_EFFECT_HEAL_TYPE_FULL_CHARGE = 2,
	SKILL_EFFECT_HEAL_TYPE_TARGET_MAXHP_PERCENT = 3,
	SKILL_EFFECT_HEAL_TYPE_MAX     = 4
};


// Enum EFGame.EFConst.SkillResetType
enum class ESkillResetType : uint8_t
{
	SKILL_RESET_TYPE_CLIENT_REQUEST = 0,
	SKILL_RESET_TYPE_GAME_ACTION   = 1,
	SKILL_RESET_TYPE_FIRST_LOGIN   = 2,
	SKILL_RESET_TYPE_CLASS_CHANGE  = 3,
	SKILL_RESET_TYPE_CLASS_CHANGE_PREVIEW = 4,
	SKILL_RESET_TYPE_CLASS_CHANGE_REVERT = 5,
	SKILL_RESET_TYPE_MAX           = 6
};


// Enum EFGame.EFConst.SkillRemoveOrigin
enum class ESkillRemoveOrigin : uint8_t
{
	SKILL_REMOVE_ORIGIN_NONE       = 0,
	SKILL_REMOVE_ORIGIN_LIFESKILL_RESET = 1,
	SKILL_REMOVE_ORIGIN_MAX        = 2
};


// Enum EFGame.EFConst.SkillPointOrigin
enum class ESkillPointOrigin : uint8_t
{
	SKILL_POINT_ORIGIN_LEVELUP     = 0,
	SKILL_POINT_ORIGIN_ROOKIE      = 1,
	SKILL_POINT_ORIGIN_ADMIN       = 2,
	SKILL_POINT_ORIGIN_QUEST       = 3,
	SKILL_POINT_ORIGIN_LEARN_SKILL = 4,
	SKILL_POINT_ORIGIN_ITEM        = 5,
	SKILL_POINT_ORIGIN_PERMANENT   = 6,
	SKILL_POINT_ORIGIN_CLASS_PREVIEW = 7,
	SKILL_POINT_ORIGIN_MAX         = 8
};


// Enum EFGame.EFConst.SkillRotateType
enum class ESkillRotateType : uint8_t
{
	SKILL_ROTATE_TYPE_NONE         = 0,
	SKILL_ROTATE_TYPE_DEGREE       = 1,
	SKILL_ROTATE_TYPE_DEGREE_ABSOLUTE = 2,
	SKILL_ROTATE_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.SkillFinishReason
enum class ESkillFinishReason : uint8_t
{
	SKILL_FINISH_REASON_NONE       = 0,
	SKILL_FINISH_REASON_SUCCESS    = 1,
	SKILL_FINISH_REASON_CANCELED   = 2,
	SKILL_FINISH_REASON_MAX        = 3
};


// Enum EFGame.EFConst.SuperArmorOrigin
enum class ESuperArmorOrigin : uint8_t
{
	SUPER_ARMOR_ORIGIN_STATUS_EFFECT = 0,
	SUPER_ARMOR_ORIGIN_VF_IRON_BUBBLE = 1,
	SUPER_ARMOR_ORIGIN_TIME_STOP   = 2,
	SUPER_ARMOR_ORIGIN_MAX         = 3
};


// Enum EFGame.EFConst.StatusEffectTemplateType
enum class EStatusEffectTemplateType : uint8_t
{
	STATUS_EFFECT_TEMPLATE_TYPE_NONE = 0,
	STATUS_EFFECT_TEMPLATE_TYPE_ABNORMAL = 1,
	STATUS_EFFECT_TEMPLATE_TYPE_DOT = 2,
	STATUS_EFFECT_TEMPLATE_TYPE_HOT = 3,
	STATUS_EFFECT_TEMPLATE_TYPE_DUMMY = 4,
	STATUS_EFFECT_TEMPLATE_TYPE_MAX = 5
};


// Enum EFGame.EFConst.StatusEffectDotDamageType
enum class EStatusEffectDotDamageType : uint8_t
{
	STATUS_EFFECT_DOT_DAMAGE_TYPE_MINMAX = 0,
	STATUS_EFFECT_DOT_DAMAGE_TYPE_MAXHP = 1,
	STATUS_EFFECT_DOT_DAMAGE_TYPE_HP = 2,
	STATUS_EFFECT_DOT_DAMAGE_FORMULA = 3,
	STATUS_EFFECT_DOT_DAMAGE_MAX   = 4
};


// Enum EFGame.EFConst.StatusEffectWoundDamageType
enum class EStatusEffectWoundDamageType : uint8_t
{
	STATUS_EFFECT_WOUND_DAMAGE_TYPE_ALL = 0,
	STATUS_EFFECT_WOUND_DAMAGE_TYPE_PHYSICS = 1,
	STATUS_EFFECT_WOUND_DAMAGE_TYPE_MAGIC = 2,
	STATUS_EFFECT_WOUND_DAMAGE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectFixedDamageType
enum class EStatusEffectFixedDamageType : uint8_t
{
	STATUS_EFFECT_FIXED_DAMAGE_TYPE_NORMAL = 0,
	STATUS_EFFECT_FIXED_DAMAGE_TYPE_MAXHP = 1,
	STATUS_EFFECT_FIXED_DAMAGE_TYPE_HP = 2,
	STATUS_EFFECT_FIXED_DAMAGE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectHealType
enum class EStatusEffectHealType : uint8_t
{
	STATUS_EFFECT_HEAL_TYPE_MINMAX = 0,
	STATUS_EFFECT_HEAL_TYPE_TARGET_MAXHP = 1,
	STATUS_EFFECT_HEAL_TYPE_CASTER_MAXHP = 2,
	STATUS_EFFECT_HEAL_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.StatusEffectStackType
enum class EStatusEffectStackType : uint8_t
{
	STATUS_EFFECT_STACK_TYPE_NONE  = 0,
	STATUS_EFFECT_STACK_TYPE_SAME_CASTER = 1,
	STATUS_EFFECT_STACK_TYPE_ANY   = 2,
	STATUS_EFFECT_STACK_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.StatusEffectAmplifyTargetType
enum class EStatusEffectAmplifyTargetType : uint8_t
{
	STATUS_EFFECT_AMPLIFY_TARGET_TYPE_ALL = 0,
	STATUS_EFFECT_AMPLIFY_TARGET_TYPE_CASTER = 1,
	STATUS_EFFECT_AMPLIFY_TARGET_TYPE_PARTY = 2,
	STATUS_EFFECT_AMPLIFY_TARGET_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectRemoveOrigin
enum class EStatusEffectRemoveOrigin : uint8_t
{
	STATUS_EFFECT_REMOVE_ORIGIN_NORMAL = 0,
	STATUS_EFFECT_REMOVE_ORIGIN_MOD_CUBE = 1,
	STATUS_EFFECT_REMOVE_ORIGIN_CHAOS_DUNGEON = 2,
	STATUS_EFFECT_REMOVE_ORIGIN_GAME_ACTION = 3,
	STATUS_EFFECT_REMOVE_ORIGIN_NPC_END_COMBAT = 4,
	STATUS_EFFECT_REMOVE_ORIGIN_REVERSE_RUIN = 5,
	STATUS_EFFECT_REMOVE_ORIGIN_EDEN_GATE = 6,
	STATUS_EFFECT_REMOVE_ORIGIN_POLYMORPH = 7,
	STATUS_EFFECT_REMOVE_ORIGIN_MAX = 8
};


// Enum EFGame.EFConst.StatusEffectRemoveType
enum class EStatusEffectRemoveType : uint8_t
{
	STATUS_EFFECT_REMOVE_TYPE_ID   = 0,
	STATUS_EFFECT_REMOVE_TYPE_ALL  = 1,
	STATUS_EFFECT_REMOVE_TYPE_CANCEL_TYPE = 2,
	STATUS_EFFECT_REMOVE_TYPE_BUFF_COUNT = 3,
	STATUS_EFFECT_REMOVE_TYPE_BUFF_CANCEL_TYPE = 4,
	STATUS_EFFECT_REMOVE_TYPE_BUFF_RANDOM = 5,
	STATUS_EFFECT_REMOVE_TYPE_DEBUFF_COUNT = 6,
	STATUS_EFFECT_REMOVE_TYPE_DEBUFF_CANCEL_TYPE = 7,
	STATUS_EFFECT_REMOVE_TYPE_DEBUFF_RANDOM = 8,
	STATUS_EFFECT_REMOVE_TYPE_DEBUFF_CANNOT_MOVE = 9,
	STATUS_EFFECT_REMOVE_TYPE_CASTER_NOT_OWNER = 10,
	STATUS_EFFECT_REMOVE_TYPE_MAX  = 11
};


// Enum EFGame.EFConst.StatusEffectShieldType
enum class EStatusEffectShieldType : uint8_t
{
	STATUS_EFFECT_SHIELD_TYPE_TABLE = 0,
	STATUS_EFFECT_SHIELD_TYPE_MAXHP = 1,
	STATUS_EFFECT_SHIELD_TYPE_CASTER_MAXHP = 2,
	STATUS_EFFECT_SHIELD_TYPE_WARLORD_SHIELD_OF_BATTLEFIELD = 3,
	STATUS_EFFECT_SHIELD_TYPE_MASTER_MAXHP = 4,
	STATUS_EFFECT_SHIELD_TYPE_MAX  = 5
};


// Enum EFGame.EFConst.StatusEffectMinionEventType
enum class EStatusEffectMinionEventType : uint8_t
{
	STATUS_EFFECT_MINION_EVENT_NONE = 0,
	STATUS_EFFECT_MINION_EVENT_TYPE_DELIVER_DAMAGE = 1,
	STATUS_EFFECT_MINION_EVENT_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectTargetSearchType
enum class EStatusEffectTargetSearchType : uint8_t
{
	STATUS_EFFECT_TARGET_SEARCH_TYPE_BUFF = 0,
	STATUS_EFFECT_TARGET_SEARCH_TYPE_SKILL_EFFECT = 1,
	STATUS_EFFECT_TARGET_SEARCH_TYPE_PRIMARY = 2,
	STATUS_EFFECT_TARGET_SEARCH_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectSelectCasterType
enum class EStatusEffectSelectCasterType : uint8_t
{
	STATUS_EFFECT_SELECT_CASTER_TYPE_INVOKER = 0,
	STATUS_EFFECT_SELECT_CASTER_TYPE_OWNER = 1,
	STATUS_EFFECT_SELECT_CASTER_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectDisguiseCombatType
enum class EStatusEffectDisguiseCombatType : uint8_t
{
	STATUS_EFFECT_DISGUISE_COMBAT_TYPE_DISGUISE = 0,
	STATUS_EFFECT_DISGUISE_COMBAT_TYPE_CANCEL = 1,
	STATUS_EFFECT_DISGUISE_COMBAT_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectDisguiseActionExpireType
enum class EStatusEffectDisguiseActionExpireType : uint8_t
{
	STATUS_EFFECT_DISGUISE_ACTION_EXPIRE_TYPE_SKILL_AND_ITEM = 0,
	STATUS_EFFECT_DISGUISE_ACTION_EXPIRE_TYPE_NONE = 1,
	STATUS_EFFECT_DISGUISE_ACTION_EXPIRE_TYPE_SKILL_AND_ITEM_WITHOUT_HEAL = 2,
	STATUS_EFFECT_DISGUISE_ACTION_EXPIRE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectDisguiseDamageExpireType
enum class EStatusEffectDisguiseDamageExpireType : uint8_t
{
	STATUS_EFFECT_DISGUISE_DAMAGE_EXPIRE_TYPE_ALL = 0,
	STATUS_EFFECT_DISGUISE_DAMAGE_EXPIRE_TYPE_NONE = 1,
	STATUS_EFFECT_DISGUISE_DAMAGE_EXPIRE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectInvokeSkillEffectConditionType
enum class EStatusEffectInvokeSkillEffectConditionType : uint8_t
{
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_NONE = 0,
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_TARGET = 1,
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_HP_GREATER = 2,
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_HP_LESS = 3,
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_STATUS_EFFECT_TYPE = 4,
	STATUS_EFFECT_INVOKE_SKILL_EFFECT_CONDITION_TYPE_MAX = 5
};


// Enum EFGame.EFConst.StatusEffectConsumeMpType
enum class EStatusEffectConsumeMpType : uint8_t
{
	STATUS_EFFECT_CONSUME_MP_TYPE_ABSOLUTE = 0,
	STATUS_EFFECT_CONSUME_MP_TYPE_TARGET_MAXMP_PERCENT = 1,
	STATUS_EFFECT_CONSUME_MP_TYPE_TARGET_MP_PERCENT = 2,
	STATUS_EFFECT_CONSUME_MP_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectReflectDamageType
enum class EStatusEffectReflectDamageType : uint8_t
{
	STATUS_EFFECT_REFLECT_DAMAGE_TYPE_ABSOLUTE = 0,
	STATUS_EFFECT_REFLECT_DAMAGE_TYPE_CASTER_MAX_HP_PERCENT = 1,
	STATUS_EFFECT_REFLECT_DAMAGE_TYPE_CASTER_HP_PERCENT = 2,
	STATUS_EFFECT_REFLECT_DAMAGE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.StatusEffectLayerType
enum class EStatusEffectLayerType : uint8_t
{
	STATUS_EFFECT_LAYER_TYPE       = 0,
	STATUS_EFFECT_LAYER_TYPE01     = 1,
	STATUS_EFFECT_LAYER_TYPE02     = 2,
	STATUS_EFFECT_LAYER_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.SkillFormulaDamageRule
enum class ESkillFormulaDamageRule : uint8_t
{
	SKILL_FORMULA_DAMAGE_RULE_ABSOLUTE = 0,
	SKILL_FORMULA_DAMAGE_RULE_RELATIVE = 1,
	SKILL_FORMULA_DAMAGE_RULE_MAX  = 2
};


// Enum EFGame.EFConst.SkillMoveType
enum class ESkillMoveType : uint8_t
{
	SKILL_MOVE_TYPE_DIRECTION      = 0,
	SKILL_MOVE_TYPE_TARGET         = 1,
	SKILL_MOVE_TYPE_DESTINATION    = 2,
	SKILL_MOVE_TYPE_MAX            = 3
};


// Enum EFGame.EFConst.IntrinsicSkillType
enum class EIntrinsicSkillType : uint8_t
{
	INTRINSIC_SKILL_TYPE_DEFAULT_ATTACK = 0,
	INTRINSIC_SKILL_TYPE_BARE_HAND_ATTACK = 1,
	INTRINSIC_SKILL_TYPE_DODGE     = 2,
	INTRINSIC_SKILL_TYPE_GET_UP    = 3,
	INTRINSIC_SKILL_TYPE_MAX       = 4
};


// Enum EFGame.EFConst.NpcSkillStageConditionType
enum class ENpcSkillStageConditionType : uint8_t
{
	NPC_SKILL_STAGE_CONDITION_TYPE_PROBABILITY = 0,
	NPC_SKILL_STAGE_CONDITION_TYPE_SKILLEFFECT_HIT = 1,
	NPC_SKILL_STAGE_CONDITION_TYPE_CHECKAREA = 2,
	NPC_SKILL_STAGE_CONDITION_TYPE_STATUS_EFFECT = 3,
	NPC_SKILL_STAGE_CONDITION_TYPE_NPC_STATUS = 4,
	NPC_SKILL_STAGE_CONDITION_TYPE_MAX = 5
};


// Enum EFGame.EFConst.SkillNextStageConditionType
enum class ESkillNextStageConditionType : uint8_t
{
	SKILL_NEXT_STAGE_CONDITION_TYPE_TAKE_DAMAGE = 0,
	SKILL_NEXT_STAGE_CONDITION_TYPE_HIT_EFFECT = 1,
	SKILL_NEXT_STAGE_CONDITION_TYPE_MAX = 2
};


// Enum EFGame.EFConst.SkillEffectApproachAimType
enum class ESkillEffectApproachAimType : uint8_t
{
	SKILL_EFFECT_APPROACH_AIM_TYPE_TARGET = 0,
	SKILL_EFFECT_APPROACH_AIM_TYPE_CLIENT_AIM = 1,
	SKILL_EFFECT_APPROACH_AIM_TYPE_SELF_NPC = 2,
	SKILL_EFFECT_APPROACH_AIM_TYPE_TARGET_BACK = 3,
	SKILL_EFFECT_APPROACH_AIM_TYPE_SELF_PC = 4,
	SKILL_EFFECT_APPROACH_AIM_TYPE_MAX = 5
};


// Enum EFGame.EFConst.SkillEffectDropLootOwnerType
enum class ESkillEffectDropLootOwnerType : uint8_t
{
	SKILL_EFFECT_DROP_LOOT_OWNER_TARGET = 0,
	SKILL_EFFECT_DROP_LOOT_OWNER_TARGET_PARTY = 1,
	SKILL_EFFECT_DROP_LOOT_OWNER_TARGET_EVERY_PC = 2,
	SKILL_EFFECT_DROP_LOOT_OWNER_MAX = 3
};


// Enum EFGame.EFConst.SummonNpcCommandType
enum class ESummonNpcCommandType : uint8_t
{
	SUMMON_NPC_COMMAND_TYPE_ADD_BUFF = 0,
	SUMMON_NPC_COMMAND_TYPE_REMOVE_BUFF = 1,
	SUMMON_NPC_COMMAND_TYPE_USE_SKILL = 2,
	SUMMON_NPC_COMMAND_TYPE_USE_SKILL_POS = 3,
	SUMMON_NPC_COMMAND_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.SkillChangeFailReason
enum class ESkillChangeFailReason : uint8_t
{
	SKILL_CHANGE_FAIL_REASON_NONE  = 0,
	SKILL_CHANGE_FAIL_REASON_WHILE_CAST = 1,
	SKILL_CHANGE_FAIL_REASON_WHILE_CHAIN_SKILL = 2,
	SKILL_CHANGE_FAIL_REASON_ABNORMAL_STATUS = 3,
	SKILL_CHANGE_FAIL_REASON_INVALID_SKILL_COOL_DOWN = 4,
	SKILL_CHANGE_FAIL_REASON_NOT_MAX_STATCK_COUNT = 5,
	SKILL_CHANGE_FAIL_REASON_MAX   = 6
};


// Enum EFGame.EFConst.MotionResolverType
enum class EMotionResolverType : uint8_t
{
	MOTION_RESOLVER_TYPE_NPC       = 0,
	MOTION_RESOLVER_TYPE_PC        = 1,
	MOTION_RESOLVER_TYPE_PVP       = 2,
	MOTION_RESOLVER_TYPE_MAX       = 3
};


// Enum EFGame.EFConst.SkillBonusAttackResultType
enum class ESkillBonusAttackResultType : uint8_t
{
	SKILL_BONUS_ATTACK_RESULT_TYPE_NONE = 0,
	SKILL_BONUS_ATTACK_RESULT_TYPE_INFLICT = 1,
	SKILL_BONUS_ATTACK_RESULT_TYPE_KILLED = 2,
	SKILL_BONUS_ATTACK_RESULT_TYPE_MAX = 3
};


// Enum EFGame.EFConst.WithoutSkillType
enum class EWithoutSkillType : uint8_t
{
	WITHOUT_SKILL_TYPE_MOVING      = 0,
	WITHOUT_SKILL_TYPE_GETUP       = 1,
	WITHOUT_SKILL_TYPE_AWAKENING   = 2,
	WITHOUT_SKILL_TYPE_MAX         = 3
};


// Enum EFGame.EFConst.TargetableConditionType
enum class ETargetableConditionType : uint8_t
{
	TARGETABLE_CONDITION_TYPE_SKILL = 0,
	TARGETABLE_CONDITION_TYPE_BEHIT = 1,
	TARGETABLE_CONDITION_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.StatusEffectActorType
enum class EStatusEffectActorType : uint8_t
{
	STATUS_EFFECT_ACTOR_TYPE_NONE  = 0,
	STATUS_EFFECT_ACTOR_TYPE_OWNER = 1,
	STATUS_EFFECT_ACTOR_TYPE_EXCEPT_OWNER = 2,
	STATUS_EFFECT_ACTOR_TYPE_MAX   = 3
};


// Enum EFGame.EFConst.CollisionDisableType
enum class ECollisionDisableType : uint8_t
{
	COLLISION_DISABLE_TYPE_ALL     = 0,
	COLLISION_DISABLE_TYPE_BODY    = 1,
	COLLISION_DISABLE_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.AiPointAmplifyTargetType
enum class EAiPointAmplifyTargetType : uint8_t
{
	AI_POINT_AMPLIFY_TARGET_TYPE_TARGET = 0,
	AI_POINT_AMPLIFY_TARGET_TYPE_CASTER = 1,
	AI_POINT_AMPLIFY_TARGET_TYPE_MAX = 2
};


// Enum EFGame.EFConst.SkillTierRangeType
enum class ESkillTierRangeType : uint8_t
{
	SKILL_TIER_RANGE_TYPE_0_TO     = 0,
	SKILL_TIER_RANGE_TYPE_1_TO     = 1,
	SKILL_TIER_RANGE_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.SkillRuneAddOrigin
enum class ESkillRuneAddOrigin : uint8_t
{
	SKILL_RUNE_ADD_ORIGIN_ITEM     = 0,
	SKILL_RUNE_ADD_ORIGIN_ADMIN    = 1,
	SKILL_RUNE_ADD_ORIGIN_MAX      = 2
};


// Enum EFGame.EFConst.PolymorphPcSyncType
enum class EPolymorphPcSyncType : uint8_t
{
	POLYMORPH_PC_SYNC_TYPE_ALL     = 0,
	POLYMORPH_PC_SYNC_TYPE_DIR_ONLY = 1,
	POLYMORPH_PC_SYNC_TYPE_NONE    = 2,
	POLYMORPH_PC_SYNC_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.NeutralizeType
enum class ENeutralizeType : uint8_t
{
	NEUTRALIZE_TYPE_PARALYZE       = 0,
	NEUTRALIZE_TYPE_GROGGY         = 1,
	NEUTRALIZE_TYPE_COUNTER_ATTACK = 2,
	NEUTRALIZE_TYPE_BLOCK_SKILL    = 3,
	NEUTRALIZE_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.PartsAttackDamageType
enum class EPartsAttackDamageType : uint8_t
{
	PARTS_ATTACK_DAMAGE_TYPE_FIXED = 0,
	PARTS_ATTACK_DAMAGE_TYPE_PERCENTAGE = 1,
	PARTS_ATTACK_DAMAGE_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.ProjectileCreateType
enum class EProjectileCreateType : uint8_t
{
	PROJECTILE_CREATE_TYPE_NONE    = 0,
	PROJECTILE_CREATE_TYPE_WORLD_POSITION_START_POSITION = 1,
	PROJECTILE_CREATE_TYPE_WORLD_POSITION_TARGET_POSITION = 2,
	PROJECTILE_CREATE_TYPE_SPOT_GROUP_START_POSITION = 3,
	PROJECTILE_CREATE_TYPE_SPOT_GROUP_TARGET_POSITION = 4,
	PROJECTILE_CREATE_TYPE_MAX     = 5
};


// Enum EFGame.EFConst.ExternalForceType
enum class ExternalForceType : uint8_t
{
	EXTERNAL_FORCE_TYPE_WIND_ZONE  = 0,
	EXTERNAL_FORCE_TYPE_MAX        = 1
};


// Enum EFGame.EFConst.SlangFilterApiType
enum class ESlangFilterApiType : uint8_t
{
	SLANG_FILTER_API_DEFAULT       = 0,
	SLANG_FILTER_API_WEGAME        = 1,
	SLANG_FILTER_API_CLEAN_SPEAK   = 2,
	SLANG_FILTER_API_MAX           = 3
};


// Enum EFGame.EFConst.SpawnNodeType
enum class ESpawnNodeType : uint8_t
{
	SPAWN_NODE_TYPE_NPC            = 0,
	SPAWN_NODE_TYPE_PROP           = 1,
	SPAWN_NODE_TYPE_TRAP           = 2,
	SPAWN_NODE_TYPE_TOWER          = 3,
	SPAWN_NODE_TYPE_VEHICLE        = 4,
	SPAWN_NODE_TYPE_MAX            = 5
};


// Enum EFGame.EFConst.SpawnResult
enum class ESpawnResult : uint8_t
{
	SPAWN_RESULT_FULL              = 0,
	SPAWN_RESULT_PENDING           = 1,
	SPAWN_RESULT_ERROR_OCCURED     = 2,
	SPAWN_RESULT_FILTERED_ID       = 3,
	SPAWN_RESULT_MAX               = 4
};


// Enum EFGame.EFConst.DistributedSerialNumberType
enum class EDistributedSerialNumberType : uint8_t
{
	DISTRIBUTED_SERIAL_NUMBER_TYPE_ITEM = 0,
	DISTRIBUTED_SERIAL_NUMBER_TYPE_CARD = 1,
	DISTRIBUTED_SERIAL_NUMBER_TYPE_PET = 2,
	DISTRIBUTED_SERIAL_NUMBER_TYPE_TOWN_OBJECT = 3,
	DISTRIBUTED_SERIAL_NUMBER_TYPE_SKILL_RUNE = 4,
	DISTRIBUTED_SERIAL_NUMBER_TYPE_MAX = 5
};


// Enum EFGame.EFConst.AssetErrorType
enum class EAssetErrorType : uint8_t
{
	ASSET_ERROR_TYPE_ZONE_ID       = 0,
	ASSET_ERROR_TYPE_QUEST_ID      = 1,
	ASSET_ERROR_TYPE_ITEM_ID       = 2,
	ASSET_ERROR_TYPE_ITEM_ASSEMBLY_ID = 3,
	ASSET_ERROR_TYPE_NPC_ID        = 4,
	ASSET_ERROR_TYPE_NPC_FRIENDSHIP_ID = 5,
	ASSET_ERROR_TYPE_PROP_ID       = 6,
	ASSET_ERROR_TYPE_ACHIEVEMENT   = 7,
	ASSET_ERROR_TYPE_MAX           = 8
};


// Enum EFGame.EFConst.TownExpReason
enum class ETownExpReason : uint8_t
{
	TOWN_EXP_REASON_NONE           = 0,
	TOWN_EXP_REASON_ADMIN          = 1,
	TOWN_EXP_REASON_FINISH_RESEARCH = 2,
	TOWN_EXP_REASON_FINISH_ASSEMBLY = 3,
	TOWN_EXP_REASON_FINISH_DISPATCH = 4,
	TOWN_EXP_REASON_CHEF_COOK      = 5,
	TOWN_EXP_REASON_MAX            = 6
};


// Enum EFGame.EFConst.TownChangeLogReason
enum class ETownChangeLogReason : uint8_t
{
	TOWN_CHANGE_LOG_REASON_NONE    = 0,
	TOWN_CHANGE_LOG_REASON_ADMIN   = 1,
	TOWN_CHANGE_LOG_REASON_BM      = 2,
	TOWN_CHANGE_LOG_REASON_NORMAL  = 3,
	TOWN_CHANGE_LOG_REASON_MAX     = 4
};


// Enum EFGame.EFConst.TownNameChangeResult
enum class ETownNameChangeResult : uint8_t
{
	TOWN_NAME_CHANGE_RESULT_SUCCESS = 0,
	TOWN_NAME_CHANGE_RESULT_UNKNOWN = 1,
	TOWN_NAME_CHANGE_RESULT_SAME_NAME = 2,
	TOWN_NAME_CHANGE_RESULT_SHORT_NAME = 3,
	TOWN_NAME_CHANGE_RESULT_LONG_NAME = 4,
	TOWN_NAME_CHANGE_RESULT_INVALID_NAME = 5,
	TOWN_NAME_CHANGE_RESULT_NOT_ENOUGH_COST = 6,
	TOWN_NAME_CHANGE_RESULT_FORBIDDEN_NAME = 7,
	TOWN_NAME_CHANGE_RESULT_INVALID_ACHIEVEMENT_ID = 8,
	TOWN_NAME_CHANGE_RESULT_MAX    = 9
};


// Enum EFGame.EFConst.TownStatType
enum class ETownStatType : uint8_t
{
	TOWN_STAT_TYPE_NONE            = 0,
	TOWN_STAT_TYPE_SHIP_MAX_COUNT_PLUS = 1,
	TOWN_STAT_TYPE_DISPATCH_SELECT_TRADE_PLUS = 2,
	TOWN_STAT_TYPE_DISPATCH_SELECT_COMBAT_PLUS = 3,
	TOWN_STAT_TYPE_DISPATCH_SELECT_EXPLORE_PLUS = 4,
	TOWN_STAT_TYPE_DISPATCH_SELECT_SCHEDULE_PLUS = 5,
	TOWN_STAT_TYPE_REDUCE_BUILD_SHIP_TIME_PERCENT = 6,
	TOWN_STAT_TYPE_DISPATCH_MAX_RENEW_PLUS = 7,
	TOWN_STAT_TYPE_DISPATCH_FRIENDSHIP_NPC = 8,
	TOWN_STAT_TYPE_DISPATCH_CREW_CANDIDATE_PLUS = 9,
	TOWN_STAT_TYPE_DISPATCH_CREW_RENEW_COUNT_PLUS = 10,
	TOWN_STAT_TYPE_SHIP_MAX_LEVEL_PLUS = 11,
	TOWN_STAT_TYPE_CREW_MAX_COUNT_PLUS = 12,
	TOWN_STAT_TYPE_MAX             = 13
};


// Enum EFGame.EFConst.TownDispatchStatType
enum class ETownDispatchStatType : uint8_t
{
	TOWN_DISPATCH_STAT_TYPE_NONE   = 0,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_REWARD_TOWN_COIN_PERCENT = 1,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_REWARD_EXP_PERCENT = 2,
	TOWN_DISPATCH_STAT_TYPE_NULLIFY_CREW_DAMAGE_RATIO = 3,
	TOWN_DISPATCH_STAT_TYPE_REDUCE_MISSION_MOVE_TIME_PERCENT = 4,
	TOWN_DISPATCH_STAT_TYPE_REDUCE_MISSION_TOWN_RES_COST_PERCENT = 5,
	TOWN_DISPATCH_STAT_TYPE_DECREASE_SHIP_DAMAGE_PERCENT = 6,
	TOWN_DISPATCH_STAT_TYPE_REDUCE_MISSION_CONDUCT_TIME_PERCENT = 7,
	TOWN_DISPATCH_STAT_TYPE_ALL_REWARD_INCREASE_PERCENT = 8,
	TOWN_DISPATCH_STAT_TYPE_MISSION_MUST_SUCCESS = 9,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_MISSION_MOVE_TIME_PERCENT = 10,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_MISSION_CONDUCT_TIME_PERCENT = 11,
	TOWN_DISPATCH_STAT_TYPE_ALL_REWARD_DECREASE_PERCENT = 12,
	TOWN_DISPATCH_STAT_TYPE_DECREASE_MISSION_SUCCESS_RATE = 13,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_BASE_STAT_COMBAT_PERCENT = 14,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_BASE_STAT_TRADE_PERCENT = 15,
	TOWN_DISPATCH_STAT_TYPE_INCREASE_BASE_STAT_EXPLORE_PERCENT = 16,
	TOWN_DISPATCH_STAT_TYPE_MAX    = 17
};


// Enum EFGame.EFConst.DispatchSkillEffectStage
enum class EDispatchSkillEffectStage : uint8_t
{
	DISPATCH_SKILL_EFFECT_STAGE_FINISH_MISSION = 0,
	DISPATCH_SKILL_EFFECT_STAGE_EVENT_BONUS = 1,
	DISPATCH_SKILL_EFFECT_STAGE_MISSION_BONUS = 2,
	DISPATCH_SKILL_EFFECT_STAGE_MAX = 3
};


// Enum EFGame.EFConst.TownResearchRewardOrigin
enum class ETownResearchRewardOrigin : uint8_t
{
	TOWN_RESEARCH_REWARD_ORIGIN_NONE = 0,
	TOWN_RESEARCH_REWARD_ORIGIN_ITEM = 1,
	TOWN_RESEARCH_REWARD_ORIGIN_ADMIN = 2,
	TOWN_RESEARCH_REWARD_ORIGIN_RESEARCH_COMPLETE = 3,
	TOWN_RESEARCH_REWARD_ORIGIN_MAX = 4
};


// Enum EFGame.EFConst.TownFarmResetOrigin
enum class ETownFarmResetOrigin : uint8_t
{
	TOWN_FARM_RESET_ORIGIN_NORMAL  = 0,
	TOWN_FARM_RESET_ORIGIN_ADMIN   = 1,
	TOWN_FARM_RESET_ORIGIN_MAX     = 2
};


// Enum EFGame.EFConst.TriggerDataVersion
enum class ETriggerDataVersion : uint8_t
{
	TriggerDataVersion             = 0,
	TriggerDataVersion01           = 1,
	TriggerDataVersion_MAX         = 2
};


// Enum EFGame.EFConst.ZoneCategory
enum class EZoneCategory : uint8_t
{
	ZONE_CATEGORY_PERSISTENT       = 0,
	ZONE_CATEGORY_PARTY            = 1,
	ZONE_CATEGORY_CONTEXT          = 2,
	ZONE_CATEGORY_PERSONAL         = 3,
	ZONE_CATEGORY_MAX              = 4
};


// Enum EFGame.EFConst.ZoneChannelStatus
enum class EZoneChannelStatus : uint8_t
{
	ZONE_CHANNEL_STATUS_CLOSED     = 0,
	ZONE_CHANNEL_STATUS_OPEN       = 1,
	ZONE_CHANNEL_STATUS_FULL       = 2,
	ZONE_CHANNEL_STATUS_MAX        = 3
};


// Enum EFGame.EFConst.ZoneChannelGuessMode
enum class EZoneChannelGuessMode : uint8_t
{
	ZONE_CHANNEL_GUESS_MODE_LOCAL  = 0,
	ZONE_CHANNEL_GUESS_MODE_GLOBAL = 1,
	ZONE_CHANNEL_GUESS_MODE_MAX    = 2
};


// Enum EFGame.EFConst.ZoneClearState
enum class EZoneClearState : uint8_t
{
	ZONE_CLEAR_STATE_NORMAL        = 0,
	ZONE_CLEAR_STATE_CLEARED       = 1,
	ZONE_CLEAR_STATE_FAILED        = 2,
	ZONE_CLEAR_STATE_MAX           = 3
};


// Enum EFGame.EFConst.KickOutReason
enum class EKickOutReason : uint8_t
{
	KICK_OUT_REASON_INVALID_PARTY  = 0,
	KICK_OUT_REASON_TIME_LIMIT_EXCEEDED = 1,
	KICK_OUT_REASON_DEATH_COUNT_LIMIT_EXCEEDED = 2,
	KICK_OUT_REASON_MAX            = 3
};


// Enum EFGame.EFConst.BroadcastMode
enum class EBroadcastMode : uint8_t
{
	BROADCAST_MODE_NONE            = 0,
	BROADCAST_MODE_SECTOR          = 1,
	BROADCAST_MODE_ALL             = 2,
	BROADCAST_MODE_MAX             = 3
};


// Enum EFGame.EFConst.HeightMode
enum class EHeightMode : uint8_t
{
	HEIGHT_MODE_NONE               = 0,
	HEIGHT_MODE_ADJUST             = 1,
	HEIGHT_MODE_MAX                = 2
};


// Enum EFGame.EFConst.SDElementType
enum class ESDElementType : uint8_t
{
	SD_ELEMENT_TYPE_MONSTER        = 0,
	SD_ELEMENT_TYPE_BOSS           = 1,
	SD_ELEMENT_TYPE_LUCKY_MONSTER  = 2,
	SD_ELEMENT_TYPE_LUCKY_MONSTER_MANY = 3,
	SD_ELEMENT_TYPE_NPC            = 4,
	SD_ELEMENT_TYPE_REWARD_CHEST   = 5,
	SD_ELEMENT_TYPE_TREASURE_CHEST_MANY = 6,
	SD_ELEMENT_TYPE_TREASURE_CHEST = 7,
	SD_ELEMENT_TYPE_HERBALISM      = 8,
	SD_ELEMENT_TYPE_MINING         = 9,
	SD_ELEMENT_TYPE_MONSTER_WEAK   = 10,
	SD_ELEMENT_TYPE_HERBALISM_MANY = 11,
	SD_ELEMENT_TYPE_MINING_MANY    = 12,
	SD_ELEMENT_TYPE_MONSTER_SPECIAL = 13,
	SD_ELEMENT_TYPE_MONSTER_STRONG = 14,
	SD_ELEMENT_TYPE_LUMBERING      = 15,
	SD_ELEMENT_TYPE_LUMBERING_MANY = 16,
	SD_ELEMENT_TYPE_PROP_FIGURE    = 17,
	SD_ELEMENT_TYPE_PROP_HIT       = 18,
	SD_ELEMENT_TYPE_TRAP           = 19,
	SD_ELEMENT_TYPE_ARCHAEOLOGY    = 20,
	SD_ELEMENT_TYPE_ETC            = 21,
	SD_ELEMENT_TYPE_MAX            = 22
};


// Enum EFGame.EFConst.ChaosGateCarveState
enum class EChaosGateCarveState : uint8_t
{
	CHAOS_GATE_CARVE_STATE_NONE    = 0,
	CHAOS_GATE_CARVE_STATE_PROGRESS = 1,
	CHAOS_GATE_CARVE_STATE_FINISH  = 2,
	CHAOS_GATE_CARVE_STATE_MAX     = 3
};


// Enum EFGame.EFConst.ZoneAction
enum class EZoneAction : uint8_t
{
	ZONE_ACTION_CUSTOMIZE          = 0,
	ZONE_ACTION_USE_POTION         = 1,
	ZONE_ACTION_USE_RAID_BATTLE_ITEM = 2,
	ZONE_ACTION_USE_COMMON_BATTLE_ITEM = 3,
	ZONE_ACTION_USE_DUNGEON_BATTLE_ITEM = 4,
	ZONE_ACTION_USE_AWAKENING_SKILL = 5,
	ZONE_ACTION_USE_GETUP_SKILL    = 6,
	ZONE_ACTION_PVP                = 7,
	ZONE_ACTION_CHANGE_CHANNEL     = 8,
	ZONE_ACTION_MIGRATE_SUMMONED_NPC = 9,
	ZONE_ACTION_VICTORY_CREST      = 10,
	ZONE_ACTION_SUMMON_VEHICLE     = 11,
	ZONE_ACTION_DUEL               = 12,
	ZONE_ACTION_USE_USEUP_ITEM     = 13,
	ZONE_ACTION_USE_PVP_BATTLE_ITEM = 14,
	ZONE_ACTION_COLOSSEUM_ENLIST   = 15,
	ZONE_ACTION_MAX                = 16
};


// Enum EFGame.EFConst.MoveMode
enum class EMoveMode : uint8_t
{
	MOVE_MODE_IDLE                 = 0,
	MOVE_MODE_DOWN                 = 1,
	MOVE_MODE_STAND_UP             = 2,
	MOVE_MODE_SWAY                 = 3,
	MOVE_MODE_BRING_DOWN           = 4,
	MOVE_MODE_ATTACK               = 5,
	MOVE_MODE_BE_HIT               = 6,
	MOVE_MODE_PATH                 = 7,
	MOVE_MODE_PATH_ERROR           = 8,
	MOVE_MODE_PATH_SKILL_ATTACK    = 9,
	MOVE_MODE_PATH_SKILL_ATTACK_ERROR = 10,
	MOVE_MODE_TRACK                = 11,
	MOVE_MODE_ROTATE_PROP          = 12,
	MOVE_MODE_LINE                 = 13,
	MOVE_MODE_MAX                  = 14
};


// Enum EFGame.EFConst.MoveResultType
enum class EMoveResultType : uint8_t
{
	MOVE_RESULT_TYPE_SUCCESS       = 0,
	MOVE_RESULT_TYPE_FAILURE_UNKNOWN = 1,
	MOVE_RESULT_TYPE_FAILURE_MOVING = 2,
	MOVE_RESULT_TYPE_FAILURE_ZONE_INVALID_STATE = 3,
	MOVE_RESULT_TYPE_FAILURE_DIFF_ZONE = 4,
	MOVE_RESULT_TYPE_FAILURE_INVALID_DEST_POS = 5,
	MOVE_RESULT_TYPE_MAX           = 6
};


// Enum EFGame.EFConst.MotionProcessingMode
enum class EMotionProcessingMode : uint8_t
{
	MOTION_PROCESSING_MODE_NONE    = 0,
	MOTION_PROCESSING_MODE_INTERPOLATE = 1,
	MOTION_PROCESSING_MODE_MAX     = 2
};


// Enum EFGame.EFConst.ZoneLeaveFailReason
enum class EZoneLeaveFailReason : uint8_t
{
	ZONE_LEAVE_FAIL_REASON_NONE    = 0,
	ZONE_LEAVE_FAIL_REASON_DUNGEON_EVENT = 1,
	ZONE_LEAVE_FAIL_REASON_PC_EVENT = 2,
	ZONE_LEAVE_FAIL_REASON_RESERVED_EVENT = 3,
	ZONE_LEAVE_FAIL_REASON_USE_ITEM = 4,
	ZONE_LEAVE_FAIL_REASON_MAX     = 5
};


// Enum EFGame.EFConst.MoveDebugOrigin
enum class EMoveDebugOrigin : uint8_t
{
	MOVE_DEBUG_ORIGIN_NONE         = 0,
	MOVE_DEBUG_ORIGIN_TELEPORT     = 1,
	MOVE_DEBUG_ORIGIN_SKILL_MOVE   = 2,
	MOVE_DEBUG_ORIGIN_MOVE_INSTANT = 3,
	MOVE_DEBUG_ORIGIN_MOTION_CIRCULAR_ARC = 4,
	MOVE_DEBUG_ORIGIN_MOTION_DOWN  = 5,
	MOVE_DEBUG_ORIGIN_MOTION_LINE  = 6,
	MOVE_DEBUG_ORIGIN_MOTION_LINE01 = 7,
	MOVE_DEBUG_ORIGIN_MOTION_PATH  = 8,
	MOVE_DEBUG_ORIGIN_MOTION_ROOT  = 9,
	MOVE_DEBUG_ORIGIN_MOTION_ROOT01 = 10,
	MOVE_DEBUG_ORIGIN_MOTION_QUERY = 11,
	MOVE_DEBUG_ORIGIN_MOTION_TRACK = 12,
	MOVE_DEBUG_ORIGIN_MOTION_STOP  = 13,
	MOVE_DEBUG_ORIGIN_VEHICLE_BEFORE = 14,
	MOVE_DEBUG_ORIGIN_VEHICLE_OFF  = 15,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_MOVE_OBJECT = 16,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_MOVE_SELF = 17,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_ADD_OBJECT = 18,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_REMOVE_OBJECT = 19,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_MIGRATE_OBJECT = 20,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_MIGRATE_OBJECT01 = 21,
	MOVE_DEBUG_ORIGIN_TRANSIT_TASK_MIGRATE_OBJECT02 = 22,
	MOVE_DEBUG_ORIGIN_ETC          = 23,
	MOVE_DEBUG_ORIGIN_MAX          = 24
};


// Enum EFGame.EFConst.ReverseRuinDataAddResult
enum class EReverseRuinDataAddResult : uint8_t
{
	REVERSE_RUIN_DATA_ADD_RESULT_NONE = 0,
	REVERSE_RUIN_DATA_ADD_RESULT_ACCOUNT_NEW = 1,
	REVERSE_RUIN_DATA_ADD_RESULT_PC_NEW = 2,
	REVERSE_RUIN_DATA_ADD_RESULT_PC_UPDATE = 3,
	REVERSE_RUIN_DATA_ADD_RESULT_MAX = 4
};


// Enum EFGame.EFConst.AbilityKitGrade
enum class EAbilityKitGrade : uint8_t
{
	ABILITY_KIT_GRADE_OLD          = 0,
	ABILITY_KIT_GRADE_COMMON       = 1,
	ABILITY_KIT_GRADE_FINE         = 2,
	ABILITY_KIT_GRADE_SUPERIOR     = 3,
	ABILITY_KIT_GRADE_LEGENDARY    = 4,
	ABILITY_KIT_GRADE_MAX          = 5
};


// Enum EFGame.EFConst.AbilityOrbState
enum class EAbilityOrbState : uint8_t
{
	ABILITY_ORB_STATE_NONE         = 0,
	ABILITY_ORB_STATE_SUCCESS      = 1,
	ABILITY_ORB_STATE_FAILURE      = 2,
	ABILITY_ORB_STATE_MAX          = 3
};


// Enum EFGame.EFConst.AbilityOrbSign
enum class EAbilityOrbSign : uint8_t
{
	ABILITY_ORB_SIGN_NONE          = 0,
	ABILITY_ORB_SIGN_PLUS          = 1,
	ABILITY_ORB_SIGN_MINUS         = 2,
	ABILITY_ORB_SIGN_MAX           = 3
};


// Enum EFGame.EFConst.AbilityGrade
enum class EAbilityGrade : uint8_t
{
	ABILITY_GRADE_MINUS            = 0,
	ABILITY_GRADE_MINUS01          = 1,
	ABILITY_GRADE_MINUS02          = 2,
	ABILITY_GRADE_NA               = 3,
	ABILITY_GRADE_PLUS             = 4,
	ABILITY_GRADE_PLUS01           = 5,
	ABILITY_GRADE_PLUS02           = 6,
	ABILITY_GRADE_MAX              = 7
};


// Enum EFGame.EFConst.AddonType
enum class EAddonType : uint8_t
{
	ADDON_TYPE_NONE                = 0,
	ADDON_TYPE_SLOT                = 1,
	ADDON_TYPE_STAT                = 2,
	ADDON_TYPE_ABILITY_POINT       = 3,
	ADDON_TYPE_COMBAT_EFFECT       = 4,
	ADDON_TYPE_SKILL_DAMAGE        = 5,
	ADDON_TYPE_SKILL_CRITICAL_RATIO = 6,
	ADDON_TYPE_SKILL_CRITICAL_DAMAGE = 7,
	ADDON_TYPE_SKILL_PENETRATION   = 8,
	ADDON_TYPE_NPC_GRADE_LESS_DAMAGE = 9,
	ADDON_TYPE_NPC_GRADE_LESS_CRITICAL_RATIO = 10,
	ADDON_TYPE_NPC_GRADE_LESS_CRITICAL_DAMAGE = 11,
	ADDON_TYPE_NPC_GRADE_LESS_PENETRATION = 12,
	ADDON_TYPE_NPC_GRADE_GREATER_DAMAGE = 13,
	ADDON_TYPE_NPC_GRADE_GREATER_CRITICAL_RATIO = 14,
	ADDON_TYPE_NPC_GRADE_GREATER_CRITICAL_DAMAGE = 15,
	ADDON_TYPE_NPC_GRADE_GREATER_PENETRATION = 16,
	ADDON_TYPE_NPC_SPECIES_DAMAGE  = 17,
	ADDON_TYPE_NPC_SPECIES_CRITICAL_RATIO = 18,
	ADDON_TYPE_NPC_SPECIES_CRITICAL_DAMAGE = 19,
	ADDON_TYPE_NPC_SPECIES_PENETRATION = 20,
	ADDON_TYPE_NPC_ATTR_DAMAGE     = 21,
	ADDON_TYPE_NPC_ATTR_CRITICAL_RATIO = 22,
	ADDON_TYPE_NPC_ATTR_CRITICAL_DAMAGE = 23,
	ADDON_TYPE_NPC_ATTR_PENETRATION = 24,
	ADDON_TYPE_MANA_REDUCTION      = 25,
	ADDON_TYPE_SKILL_MANA_REDUCTION = 26,
	ADDON_TYPE_SKILL_COOLDOWN_REDUCTION = 27,
	ADDON_TYPE_ABILITY_FEATURE     = 28,
	ADDON_TYPE_CLASS_OPTION        = 29,
	ADDON_TYPE_ABILITY_POINT_PASSIVE = 30,
	ADDON_TYPE_INSTRUMENT          = 31,
	ADDON_TYPE_SKILL_FEATURE       = 32,
	ADDON_TYPE_NPC_ADAPTATION      = 33,
	ADDON_TYPE_SKILL_GROUP_DAMAGE  = 34,
	ADDON_TYPE_SKILL_GROUP_COOLDOWN_REDUCTION = 35,
	ADDON_TYPE_SKILL_LEVEL         = 36,
	ADDON_TYPE_SKILL_FEATURE_LEVEL = 37,
	ADDON_TYPE_LIFE_CASTING_SPEED  = 38,
	ADDON_TYPE_LIFE_CASTING_TIER   = 39,
	ADDON_TYPE_LIFE_BONUS_TYPE_SUCCESS = 40,
	ADDON_TYPE_LIFE_BONUS_TYPE_EXTRA = 41,
	ADDON_TYPE_LIFE_BONUS_TYPE_SKILL_BONUS = 42,
	ADDON_TYPE_LIFE_BONUS_TYPE_MINIGAME_PERFECT = 43,
	ADDON_TYPE_LIFE_DURABILITY_BONUS = 44,
	ADDON_TYPE_LIFE_MINI_GAME_DIFFICULTY = 45,
	ADDON_TYPE_COMBAT_EFFECT_COOLDOWN_REDUCTION = 46,
	ADDON_TYPE_SKILL_DAMAGE_ADDEND = 47,
	ADDON_TYPE_AWAKENING_USABLE_COUNT_ADDEND = 48,
	ADDON_TYPE_MAX                 = 49
};


// Enum EFGame.EFConst.AffinityType
enum class EAffinityType : uint8_t
{
	AFFINITY_TYPE_NONE             = 0,
	AFFINITY_TYPE_SELF             = 1,
	AFFINITY_TYPE_PARTY            = 2,
	AFFINITY_TYPE_ENEMY            = 3,
	AFFINITY_TYPE_ALLY             = 4,
	AFFINITY_TYPE_ALL_WITHOUT_SELF = 5,
	AFFINITY_TYPE_ALL              = 6,
	AFFINITY_TYPE_PARTY_WITHOUT_SELF = 7,
	AFFINITY_TYPE_ALLY_WITHOUT_SELF = 8,
	AFFINITY_TYPE_ALL_WITHOUT_SUMMON_NPC = 9,
	AFFINITY_TYPE_ENEMY_WITHOUT_SUMMON_NPC = 10,
	AFFINITY_TYPE_MAX              = 11
};


// Enum EFGame.EFConst.AbnormalStatusType
enum class EAbnormalStatusType : uint8_t
{
	ABNORMAL_STATUS_TYPE_NONE      = 0,
	ABNORMAL_STATUS_TYPE_FREEZE    = 1,
	ABNORMAL_STATUS_TYPE_STONE     = 2,
	ABNORMAL_STATUS_TYPE_FEAR      = 3,
	ABNORMAL_STATUS_TYPE_STUN      = 4,
	ABNORMAL_STATUS_TYPE_POLYMORPH = 5,
	ABNORMAL_STATUS_TYPE_SILENCE   = 6,
	ABNORMAL_STATUS_TYPE_EARTHQUAKE = 7,
	ABNORMAL_STATUS_TYPE_VERMIN    = 8,
	ABNORMAL_STATUS_TYPE_ELECTROCUTION = 9,
	ABNORMAL_STATUS_TYPE_CONFINEMENT = 10,
	ABNORMAL_STATUS_TYPE_SLEEP     = 11,
	ABNORMAL_STATUS_TYPE_PROVOKE   = 12,
	ABNORMAL_STATUS_TYPE_MIND_CONTROL = 13,
	ABNORMAL_STATUS_TYPE_MAX       = 14
};


// Enum EFGame.EFConst.AuthTokenType
enum class EAuthTokenType : uint8_t
{
	AUTH_TOKEN_TYPE_CLIENT         = 0,
	AUTH_TOKEN_TYPE_LOGIN          = 1,
	AUTH_TOKEN_TYPE_ENTRY          = 2,
	AUTH_TOKEN_TYPE_GAME           = 3,
	AUTH_TOKEN_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.AssetViewType
enum class EAssetViewType : uint8_t
{
	ASSET_VIEW_TYPE_NONE           = 0,
	ASSET_VIEW_TYPE_ALL            = 1,
	ASSET_VIEW_TYPE_CLIENT         = 2,
	ASSET_VIEW_TYPE_SERVER         = 3,
	ASSET_VIEW_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.AffectionTalkRewardStatus
enum class EAffectionTalkRewardStatus : uint8_t
{
	AFFECTION_TALK_REWARD_STATUS_NONE = 0,
	AFFECTION_TALK_REWARD_STATUS_REWARD = 1,
	AFFECTION_TALK_REWARD_STATUS_DONE = 2,
	AFFECTION_TALK_REWARD_STATUS_MAX = 3
};


// Enum EFGame.EFConst.AffectionStatus
enum class EAffectionStatus : uint8_t
{
	AFFECTION_STATUS_OFF           = 0,
	AFFECTION_STATUS_TALK_STEP     = 1,
	AFFECTION_STATUS_TALK_STEP01   = 2,
	AFFECTION_STATUS_TALK_DONE     = 3,
	AFFECTION_STATUS_MEMORIAL      = 4,
	AFFECTION_STATUS_MEMORIAL_REWARD = 5,
	AFFECTION_STATUS_MEMORIAL_DONE = 6,
	AFFECTION_STATUS_MAX           = 7
};


// Enum EFGame.EFConst.AffectionLongingStatus
enum class EAffectionLongingStatus : uint8_t
{
	AFFECTION_LONGING_STATUS_OFF   = 0,
	AFFECTION_LONGING_STATUS_ACTIVE = 1,
	AFFECTION_LONGING_STATUS_REWARD_ONLY = 2,
	AFFECTION_LONGING_STATUS_INACTIVE = 3,
	AFFECTION_LONGING_STATUS_MAX   = 4
};


// Enum EFGame.EFConst.AddonOrigin
enum class EAddonOrigin : uint8_t
{
	ADDON_ORIGIN_ADMIN             = 0,
	ADDON_ORIGIN_ITEM_EQUIP        = 1,
	ADDON_ORIGIN_ITEM_CRYSTAL      = 2,
	ADDON_ORIGIN_ITEM_ABILITY_STONE = 3,
	ADDON_ORIGIN_SKILL_LEVEL       = 4,
	ADDON_ORIGIN_SKILL_FEATURE     = 5,
	ADDON_ORIGIN_STATUS_EFFECT     = 6,
	ADDON_ORIGIN_ABILITY_POINT     = 7,
	ADDON_ORIGIN_VICTORY_CREST     = 8,
	ADDON_ORIGIN_ITEM_AVATAR_CRYSTAL = 9,
	ADDON_ORIGIN_SKILL_RUNE        = 10,
	ADDON_ORIGIN_CARD_EFFECT       = 11,
	ADDON_ORIGIN_LIFE_TOOL         = 12,
	ADDON_ORIGIN_CHALLENGE_PRESET  = 13,
	ADDON_ORIGIN_ESTHER_LINK       = 14,
	ADDON_ORIGIN_TRAINING_MODE     = 15,
	ADDON_ORIGIN_MAX               = 16
};


// Enum EFGame.EFConst.AttendanceLimitType
enum class EAttendanceLimitType : uint8_t
{
	ATTENDANCE_LIMIT_TYPE_NONE     = 0,
	ATTENDANCE_LIMIT_TYPE_CHAOS_GATE = 1,
	ATTENDANCE_LIMIT_TYPE_ISLAND   = 2,
	ATTENDANCE_LIMIT_TYPE_GLOBAL   = 3,
	ATTENDANCE_LIMIT_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.WorldIslandEventType
enum class EWorldIslandEventType : uint8_t
{
	WORLD_ISLAND_EVENT_NONE        = 0,
	WORLD_ISLAND_EVENT_CREATE_ENTRY = 1,
	WORLD_ISLAND_EVENT_SYNC_ENTRY  = 2,
	WORLD_ISLAND_EVENT_CLOSE_ENTRY = 3,
	WORLD_ISLAND_EVENT_REMOVE_ENTRY = 4,
	WORLD_ISLAND_EVENT_CREATE_ZONE = 5,
	WORLD_ISLAND_EVENT_DESTROY_ZONE = 6,
	WORLD_ISLAND_EVENT_MAX         = 7
};


// Enum EFGame.EFConst.WorldObjectStatType
enum class EWorldObjectStatType : uint8_t
{
	WORLD_OBJECT_STAT_TYPE_NONE    = 0,
	WORLD_OBJECT_STAT_TYPE_DURABILITY = 1,
	WORLD_OBJECT_STAT_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.VoiceChatInfoRelayType
enum class EVoiceChatInfoRelayType : uint8_t
{
	VOICE_CHAT_INFO_RELAY_TYPE_AUTH_INFO = 0,
	VOICE_CHAT_INFO_RELAY_TYPE_MEMBER_INFO = 1,
	VOICE_CHAT_INFO_RELAY_TYPE_MAX = 2
};


// Enum EFGame.EFConst.VoyageLinerZoneState
enum class EVoyageLinerZoneState : uint8_t
{
	VOYAGE_LINER_ZONE_STATE_NONE   = 0,
	VOYAGE_LINER_ZONE_STATE_CREATING = 1,
	VOYAGE_LINER_ZONE_STATE_ENTERING = 2,
	VOYAGE_LINER_ZONE_STATE_WATING = 3,
	VOYAGE_LINER_ZONE_STATE_FINISH = 4,
	VOYAGE_LINER_ZONE_STATE_MAX    = 5
};


// Enum EFGame.EFConst.TownOperatorCommandType
enum class ETownOperatorCommandType : uint8_t
{
	TOWN_OPERATOR_COMMAND_TYPE_NONE = 0,
	TOWN_OPERATOR_COMMAND_TYPE_CHANGE_NAME = 1,
	TOWN_OPERATOR_COMMAND_TYPE_CLEAR_INTRODUCTION = 2,
	TOWN_OPERATOR_COMMAND_TYPE_REMOVE_NPC_DRESS = 3,
	TOWN_OPERATOR_COMMAND_TYPE_REMOVE_CREW = 4,
	TOWN_OPERATOR_COMMAND_TYPE_REMOVE_PLACEMENT = 5,
	TOWN_OPERATOR_COMMAND_TYPE_MAX = 6
};


// Enum EFGame.EFConst.TownCacheType
enum class ETownCacheType : uint8_t
{
	TOWN_CACHE_TYPE_NONE           = 0,
	TOWN_CACHE_TYPE_GUEST_UPDATE   = 1,
	TOWN_CACHE_TYPE_GUEST_REMOVE   = 2,
	TOWN_CACHE_TYPE_EXPEL_ADD      = 3,
	TOWN_CACHE_TYPE_PERMISSION_UPDATE = 4,
	TOWN_CACHE_TYPE_TOWN_INFO      = 5,
	TOWN_CACHE_TYPE_CONDITION_UPDATE = 6,
	TOWN_CACHE_TYPE_MAX            = 7
};


// Enum EFGame.EFConst.TownDispatchMissionStatus
enum class ETownDispatchMissionStatus : uint8_t
{
	TOWN_DISPATCH_MISSION_STATUS_NONE = 0,
	TOWN_DISPATCH_MISSION_STATUS_READY = 1,
	TOWN_DISPATCH_MISSION_STATUS_ACTIVE = 2,
	TOWN_DISPATCH_MISSION_STATUS_MAX = 3
};


// Enum EFGame.EFConst.TownDispatchMissionCommand
enum class ETownDispatchMissionCommand : uint8_t
{
	TOWN_DISPATCH_MISSION_COMMAND_NONE = 0,
	TOWN_DISPATCH_MISSION_COMMAND_ADD = 1,
	TOWN_DISPATCH_MISSION_COMMAND_REMOVE = 2,
	TOWN_DISPATCH_MISSION_COMMAND_MAX = 3
};


// Enum EFGame.EFConst.TownAdminRequest
enum class ETownAdminRequest : uint8_t
{
	TOWN_ADMIN_REQUEST_NONE        = 0,
	TOWN_ADMIN_REQUEST_CHANGE_TOWN_LEVEL = 1,
	TOWN_ADMIN_REQUEST_ADD_TOWN_EXP = 2,
	TOWN_ADMIN_REQUEST_MAX         = 3
};


// Enum EFGame.EFConst.StockCancelReason
enum class EStockCancelReason : uint8_t
{
	STOCK_CANCEL_REASON_USER_REQUEST = 0,
	STOCK_CANCEL_REASON_TIMEOUT    = 1,
	STOCK_CANCEL_REASON_GM         = 2,
	STOCK_CANCEL_REASON_MAX        = 3
};


// Enum EFGame.EFConst.StockOpType
enum class EStockOpType : uint8_t
{
	STOCK_OP_TYPE_NONE             = 0,
	STOCK_OP_TYPE_ADD              = 1,
	STOCK_OP_TYPE_CANCEL_BY_USER   = 2,
	STOCK_OP_TYPE_CANCEL_BY_SYSTEM = 3,
	STOCK_OP_TYPE_TAKE             = 4,
	STOCK_OP_TYPE_MAX              = 5
};


// Enum EFGame.EFConst.SecretPropDropType
enum class ESecretPropDropType : uint8_t
{
	SECRET_PROP_DROP_TYPE_NONE     = 0,
	SECRET_PROP_DROP_TYPE_GIVE     = 1,
	SECRET_PROP_DROP_TYPE_GROUND   = 2,
	SECRET_PROP_DROP_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.ShipLackSupplyStatus
enum class EShipLackSupplyStatus : uint8_t
{
	SHIP_LACK_SUPPLY_STATUS_NONE   = 0,
	SHIP_LACK_SUPPLY_STATUS_LACK1  = 1,
	SHIP_LACK_SUPPLY_STATUS_LACK2  = 2,
	SHIP_LACK_SUPPLY_STATUS_NORMAL = 3,
	SHIP_LACK_SUPPLY_STATUS_MAX    = 4
};


// Enum EFGame.EFConst.ServerHealthType
enum class EServerHealthType : uint8_t
{
	SERVER_HEALTH_TYPE_NONE        = 0,
	SERVER_HEALTH_TYPE_UPTIME      = 1,
	SERVER_HEALTH_TYPE_USED_MEMORY = 2,
	SERVER_HEALTH_TYPE_REMAIN_DISK = 3,
	SERVER_HEALTH_TYPE_REMAIN_ITEM = 4,
	SERVER_HEALTH_TYPE_DATABASE_ERROR = 5,
	SERVER_HEALTH_TYPE_OODLE_COMPRATE = 6,
	SERVER_HEALTH_TYPE_OODLE_COUNTRATE = 7,
	SERVER_HEALTH_TYPE_OODLE_SIZERATE = 8,
	SERVER_HEALTH_TYPE_NORMAL_PEER_DISCONNECT = 9,
	SERVER_HEALTH_TYPE_ABNORMAL_PEER_DISCONNECT = 10,
	SERVER_HEALTH_TYPE_AGENT_DISCONNECT = 11,
	SERVER_HEALTH_TYPE_MAX         = 12
};


// Enum EFGame.EFConst.RestorePartyType
enum class ERestorePartyType : uint8_t
{
	RESTORE_PARTY_TYPE_PARTY       = 0,
	RESTORE_PARTY_TYPE_PARTY_ROOM  = 1,
	RESTORE_PARTY_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.PvPRankingType
enum class EPvPRankingType : uint8_t
{
	PVP_RANKING_TYPE_NONE          = 0,
	PVP_RANKING_TYPE_COLOSSEUM     = 1,
	PVP_RANKING_TYPE_WAP           = 2,
	PVP_RANKING_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.PaidTokenUsage
enum class EPaidTokenUsage : uint8_t
{
	PAID_TOKEN_USAGE_NONE          = 0,
	PAID_TOKEN_USAGE_EVENT         = 1,
	PAID_TOKEN_USAGE_NORMAL        = 2,
	PAID_TOKEN_USAGE_MAX           = 3
};


// Enum EFGame.EFConst.PaidSeviceChangeReason
enum class EPaidSeviceChangeReason : uint8_t
{
	PAID_SERVICE_CHANGE_REASON_NONE = 0,
	PAID_SERVICE_CHANGE_REASON_CHANGED = 1,
	PAID_SERVICE_CHANGE_REASON_EXPIRED = 2,
	PAID_SERVICE_CHANGE_REASON_MAX = 3
};


// Enum EFGame.EFConst.PartyInfoRelayType
enum class EPartyInfoRelayType : uint8_t
{
	PARTY_INFO_RELAY_TYPE_INFO     = 0,
	PARTY_INFO_RELAY_TYPE_LEAVE_RESULT_BY_DESTROY = 1,
	PARTY_INFO_RELAY_TYPE_RENEW_NOTIFY = 2,
	PARTY_INFO_RELAY_TYPE_LEAVE_RESULT_BY_INFO = 3,
	PARTY_INFO_RELAY_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.PCSummaryPropertyType
enum class EPCSummaryPropertyType : uint8_t
{
	PCSUMMARY_PROPERTY_LEVEL       = 0,
	PCSUMMARY_PROPERTY_MAX_ITEM_LEVEL = 1,
	PCSUMMARY_PROPERTY_CLASS       = 2,
	PCSUMMARY_PROPERTY_EXPEDITION_LEVEL = 3,
	PCSUMMARY_PROPERTY_ARK_PASS_CONDITION = 4,
	PCSUMMARY_PROPERTY_MAX         = 5
};


// Enum EFGame.EFConst.PCLimitType
enum class EPCLimitType : uint8_t
{
	PC_LIMIT_PARTY_VOTE_APPROVED_PROPOSE = 0,
	PC_LIMIT_PARTY_VOTE_APPROVED_MAX = 1
};


// Enum EFGame.EFConst.PaidPurchaseUnpackState
enum class EPaidPurchaseUnpackState : uint8_t
{
	PAID_PURCHASE_UNPACK_STATE_DEFAULT = 0,
	PAID_PURCHASE_UNPACK_STATE_PENDING = 1,
	PAID_PURCHASE_UNPACK_STATE_UNPACKED = 2,
	PAID_PURCHASE_UNPACK_STATE_DELIVER_START = 3,
	PAID_PURCHASE_UNPACK_STATE_DELIVER_END = 4,
	PAID_PURCHASE_UNPACK_STATE_MAX = 5
};


// Enum EFGame.EFConst.PaidCashEventStatus
enum class EPaidCashEventStatus : uint8_t
{
	PAID_CASH_EVENT_STATUS_DEFAULT = 0,
	PAID_CASH_EVENT_STATUS_FINISHED = 1,
	PAID_CASH_EVENT_STATUS_ERROR_OCCURED = 2,
	PAID_CASH_EVENT_STATUS_MAX     = 3
};


// Enum EFGame.EFConst.PaidEventStatus
enum class EPaidEventStatus : uint8_t
{
	PAID_EVENT_STAUS_NONE          = 0,
	PAID_EVENT_STAUS_PENDING       = 1,
	PAID_EVENT_STAUS_STARTED       = 2,
	PAID_EVENT_STAUS_FINISHED      = 3,
	PAID_EVENT_STAUS_CANCELED      = 4,
	PAID_EVENT_STAUS_MAX           = 5
};


// Enum EFGame.EFConst.PaidEventType
enum class EPaidEventType : uint8_t
{
	PAID_EVENT_TYPE_NONE           = 0,
	PAID_EVENT_TYPE_ACTION         = 1,
	PAID_EVENT_TYPE_NPC_SHOP       = 2,
	PAID_EVENT_TYPE_TRADE          = 3,
	PAID_EVENT_TYPE_ITEM_ASSEMBLY  = 4,
	PAID_EVENT_TYPE_GACHA          = 5,
	PAID_EVENT_TYPE_GACHA_REWARD   = 6,
	PAID_EVENT_TYPE_ANCIENT_ORB_IDENTIFY = 7,
	PAID_EVENT_TYPE_PAID_SERVICE_ITEM = 8,
	PAID_EVENT_TYPE_WEB_UNPACK     = 9,
	PAID_EVENT_TYPE_MAX            = 10
};


// Enum EFGame.EFConst.PartyLeaveReason
enum class EPartyLeaveReason : uint8_t
{
	PARTY_LEAVE_REASON_REQUEST     = 0,
	PARTY_LEAVE_REASON_KICK_BY_USER = 1,
	PARTY_LEAVE_REASON_KICK_BY_VOTE = 2,
	PARTY_LEAVE_REASON_KICK_BY_TIMEOUT = 3,
	PARTY_LEAVE_REASON_SYSTEM      = 4,
	PARTY_LEAVE_REASON_SYSTEM_MATCH = 5,
	PARTY_LEAVE_REASON_SYSTEM_REENTRY = 6,
	PARTY_LEAVE_REASON_SYSTEM_FORCE = 7,
	PARTY_LEAVE_REASON_TRAINING    = 8,
	PARTY_LEAVE_REASON_PARTY_ROOM  = 9,
	PARTY_LEAVE_REASON_MAX         = 10
};


// Enum EFGame.EFConst.PartyJoinReason
enum class EPartyJoinReason : uint8_t
{
	PARTY_JOIN_REASON_INVITATION   = 0,
	PARTY_JOIN_REASON_APPLICATION  = 1,
	PARTY_JOIN_REASON_SYSTEM       = 2,
	PARTY_JOIN_REASON_SYSTEM_MATCH = 3,
	PARTY_JOIN_REASON_SYSTEM_REENTRY = 4,
	PARTY_JOIN_REASON_RE           = 5,
	PARTY_JOIN_REASON_MAX          = 6
};


// Enum EFGame.EFConst.ParamChangeType
enum class EParamChangeType : uint8_t
{
	PARAM_CHANGE_TYPE_INC          = 0,
	PARAM_CHANGE_TYPE_DEC          = 1,
	PARAM_CHANGE_TYPE_INC_PERCENT  = 2,
	PARAM_CHANGE_TYPE_DEC_PERCENT  = 3,
	PARAM_CHANGE_TYPE_MAX          = 4
};


// Enum EFGame.EFConst.PaidShopStatus
enum class EPaidShopStatus : uint8_t
{
	PAID_SHOP_STATUS_CLOSED        = 0,
	PAID_SHOP_STATUS_OPEN_TO_ADMIN = 1,
	PAID_SHOP_STATUS_OPEN_TO_PUBLIC = 2,
	PAID_SHOP_STATUS_MAX           = 3
};


// Enum EFGame.EFConst.PacketThreadType
enum class EPacketThreadType : uint8_t
{
	PACKET_THREAD_TYPE_SINGLE      = 0,
	PACKET_THREAD_TYPE_FREE        = 1,
	PACKET_THREAD_TYPE_MAX         = 2
};


// Enum EFGame.EFConst.OpenChatMemberUpdateType
enum class EOpenChatMemberUpdateType : uint8_t
{
	OPEN_CHAT_MEMBER_UPDATE_TYPE_NONE = 0,
	OPEN_CHAT_MEMBER_UPDATE_TYPE_EXPEDITION_LEVEL = 1,
	OPEN_CHAT_MEMBER_UPDATE_TYPE_PLAYER_CLASS = 2,
	OPEN_CHAT_MEMBER_UPDATE_TYPE_NAME = 3,
	OPEN_CHAT_MEMBER_UPDATE_TYPE_MAX_ITEM_LEVEL = 4,
	OPEN_CHAT_MEMBER_UPDATE_TYPE_MAX = 5
};


// Enum EFGame.EFConst.MailSendBackReason
enum class EMailSendBackReason : uint8_t
{
	MAIL_SEND_BACK_REASON_NONE     = 0,
	MAIL_SEND_BACK_REASON_USER_REQUEST = 1,
	MAIL_SEND_BACK_REASON_EXPIRED  = 2,
	MAIL_SEND_BACK_REASON_RECLAIMED = 3,
	MAIL_SEND_BACK_REASON_RECEIVER_DELETED = 4,
	MAIL_SEND_BACK_REASON_MAX      = 5
};


// Enum EFGame.EFConst.MailOpenReason
enum class EMailOpenReason : uint8_t
{
	MAIL_OPEN_REASON_GET_ITEM      = 0,
	MAIL_OPEN_REASON_GET_MONEY     = 1,
	MAIL_OPEN_REASON_READ          = 2,
	MAIL_OPEN_REASON_RECLAIM       = 3,
	MAIL_OPEN_REASON_COMMIT        = 4,
	MAIL_OPEN_REASON_ROLLBACK      = 5,
	MAIL_OPEN_REASON_SEND_BACK     = 6,
	MAIL_OPEN_REASON_MAX           = 7
};


// Enum EFGame.EFConst.MailReturnStatus
enum class EMailReturnStatus : uint8_t
{
	MAIL_RETURN_STATUS_NONE        = 0,
	MAIL_RETURN_STATUS_RETURNED    = 1,
	MAIL_RETURN_STATUS_RECEIVED    = 2,
	MAIL_RETURN_STATUS_RECEIVE_PENDING = 3,
	MAIL_RETURN_STATUS_MAX         = 4
};


// Enum EFGame.EFConst.InstantRecallType
enum class EInstantRecallType : uint8_t
{
	INSTANT_RECALL_TYPE_NONE       = 0,
	INSTANT_RECALL_TYPE_COLOSSEUM  = 1,
	INSTANT_RECALL_TYPE_CHAOS_DUNGEON = 2,
	INSTANT_RECALL_TYPE_MOD        = 3,
	INSTANT_RECALL_TYPE_DUNGEON    = 4,
	INSTANT_RECALL_TYPE_RAID       = 5,
	INSTANT_RECALL_TYPE_BATTLEFIELD = 6,
	INSTANT_RECALL_TYPE_REVERSE_RUIN = 7,
	INSTANT_RECALL_TYPE_MAX        = 8
};


// Enum EFGame.EFConst.GachaShopCommand
enum class EGachaShopCommand : uint8_t
{
	GACHA_SHOP_COMMAND_RELOAD      = 0,
	GACHA_SHOP_COMMAND_SET_STATUS  = 1,
	GACHA_SHOP_COMMAND_MAX         = 2
};


// Enum EFGame.EFConst.GachaShopStatus
enum class EGachaShopStatus : uint8_t
{
	GACHA_SHOP_STATUS_CLOSED       = 0,
	GACHA_SHOP_STATUS_OPEN_TO_ADMIN = 1,
	GACHA_SHOP_STATUS_OPEN_TO_PUBLIC = 2,
	GACHA_SHOP_STATUS_MAX          = 3
};


// Enum EFGame.EFConst.GuildUndistributedReason
enum class EGuildUndistributedReason : uint8_t
{
	GUILD_UNDISTRIBUTED_REASON_NONE = 0,
	GUILD_UNDISTRIBUTED_REASON_MIN_CONTRIBUTION = 1,
	GUILD_UNDISTRIBUTED_REASON_NO_AUTHORITY = 2,
	GUILD_UNDISTRIBUTED_REASON_ZERO_DISTRIBUTION_RATE = 3,
	GUILD_UNDISTRIBUTED_REASON_MAX = 4
};


// Enum EFGame.EFConst.GuildSystemMailType
enum class EGuildSystemMailType : uint8_t
{
	GUILD_SYSTEM_MAIL_TYPE_NONE    = 0,
	GUILD_SYSTEM_MAIL_TYPE_JOIN_ACCEPT = 1,
	GUILD_SYSTEM_MAIL_TYPE_JOIN_REJECT = 2,
	GUILD_SYSTEM_MAIL_TYPE_KICK    = 3,
	GUILD_SYSTEM_MAIL_TYPE_KICK_PENALTY = 4,
	GUILD_SYSTEM_MAIL_TYPE_FORCED_DELEGATE_OLD_MASTER = 5,
	GUILD_SYSTEM_MAIL_TYPE_FORCED_DELEGATE_NEW_MASTER = 6,
	GUILD_SYSTEM_MAIL_TYPE_DISBAND = 7,
	GUILD_SYSTEM_MAIL_TYPE_DISBAND_PENALTY = 8,
	GUILD_SYSTEM_MAIL_TYPE_DISTRIBUTION = 9,
	GUILD_SYSTEM_MAIL_TYPE_MERCENARY_REWARD = 10,
	GUILD_SYSTEM_MAIL_TYPE_MERCENARY_FIRE = 11,
	GUILD_SYSTEM_MAIL_TYPE_UNDISTRIBUTED_REASON = 12,
	GUILD_SYSTEM_MAIL_TYPE_BATTLEFIELD_DEATHMATCH_PENALTY_WARNING = 13,
	GUILD_SYSTEM_MAIL_TYPE_BATTLEFIELD_DEATHMATCH_PENALTY_APPLY = 14,
	GUILD_SYSTEM_MAIL_TYPE_GOLD_DISTRIBUTION_BY_CONTRIBUTION = 15,
	GUILD_SYSTEM_MAIL_TYPE_GOLD_UNDISTRIBUTED_REASON = 16,
	GUILD_SYSTEM_MAIL_TYPE_GIVE_REMAINDER_GOLD_TO_MASTER = 17,
	GUILD_SYSTEM_MAIL_TYPE_GOLD_DISTRIBUTION_BY_MASTER = 18,
	GUILD_SYSTEM_MAIL_TYPE_GOLD_DISTRIBUTION = 19,
	GUILD_SYSTEM_MAIL_TYPE_MAX     = 20
};


// Enum EFGame.EFConst.ExpType
enum class ExpType : uint8_t
{
	EXP_TYPE_COMBAT                = 0,
	EXP_TYPE_LIFE                  = 1,
	EXP_TYPE_EXPEDITION            = 2,
	EXP_TYPE_PVP                   = 3,
	EXP_TYPE_MAX                   = 4
};


// Enum EFGame.EFConst.EventMissionCategoryRewardIndex
enum class EventMissionCategoryRewardIndex : uint8_t
{
	EVENT_MISSION_CATEGORY_REWARD_INDEX_NONE = 0,
	EVENT_MISSION_CATEGORY_REWARD_INDEX = 1,
	EVENT_MISSION_CATEGORY_REWARD_INDEX01 = 2,
	EVENT_MISSION_CATEGORY_REWARD_INDEX02 = 3,
	EVENT_MISSION_CATEGORY_REWARD_INDEX_MAX = 4
};


// Enum EFGame.EFConst.EventPackageUuidPostfix
enum class EventPackageUuidPostfix : uint8_t
{
	EVENT_PACKAGE_UUID_POSTFIX_NONE = 0,
	EVENT_PACKAGE_UUID_POSTFIX_ACCOUNT = 1,
	EVENT_PACKAGE_UUID_POSTFIX_EXPEDITION = 2,
	EVENT_PACKAGE_UUID_POSTFIX_PC  = 3,
	EVENT_PACKAGE_UUID_POSTFIX_GENERATE = 4,
	EVENT_PACKAGE_UUID_POSTFIX_MAX = 5
};


// Enum EFGame.EFConst.EventPackageExpireType
enum class EventPackageExpireType : uint8_t
{
	EVENT_PACKAGE_EXPIRE_TYPE_NONE = 0,
	EVENT_PACKAGE_EXPIRE_TYPE_DURATION = 1,
	EVENT_PACKAGE_EXPIRE_TYPE_DEADLINE = 2,
	EVENT_PACKAGE_EXPIRE_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.EventPackageOrigin
enum class EventPackageOrigin : uint8_t
{
	EVENT_PACKAGE_ORIGIN_NONE      = 0,
	EVENT_PACKAGE_ORIGIN_ADMIN     = 1,
	EVENT_PACKAGE_ORIGIN_NEW_USER  = 2,
	EVENT_PACKAGE_ORIGIN_RETURN_USER = 3,
	EVENT_PACKAGE_ORIGIN_GAME_ACTION = 4,
	EVENT_PACKAGE_ORIGIN_MAX       = 5
};


// Enum EFGame.EFConst.DynamicIslandType
enum class EDynamicIslandType : uint8_t
{
	DYNAMIC_ISLAND_TYPE_CHANNEL    = 0,
	DYNAMIC_ISLAND_TYPE_WORLD      = 1,
	DYNAMIC_ISLAND_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.ContentLeaveType
enum class EContentLeaveType : uint8_t
{
	CONTENT_LEAVE_TYPE_NONE        = 0,
	CONTENT_LEAVE_TYPE_EXPEL       = 1,
	CONTENT_LEAVE_TYPE_EXIT        = 2,
	CONTENT_LEAVE_TYPE_REENTER     = 3,
	CONTENT_LEAVE_TYPE_SELF_PARTY_LEAVE = 4,
	CONTENT_LEAVE_TYPE_VOTE        = 5,
	CONTENT_LEAVE_TYPE_MAX         = 6
};


// Enum EFGame.EFConst.CcuType
enum class ECcuType : uint8_t
{
	CCU_TYPE_FIELD                 = 0,
	CCU_TYPE_CITY                  = 1,
	CCU_TYPE_DUNGEON               = 2,
	CCU_TYPE_MOD                   = 3,
	CCU_TYPE_CHAOSGATE             = 4,
	CCU_TYPE_COLOSSEUM             = 5,
	CCU_TYPE_BATTLEFIELD           = 6,
	CCU_TYPE_MAX                   = 7
};


// Enum EFGame.EFConst.ColosseumPlayerApplicationStage
enum class EColosseumPlayerApplicationStage : uint8_t
{
	COLOSSEUM_PLAYER_APPLICATION_STAGE_NONE = 0,
	COLOSSEUM_PLAYER_APPLICATION_STAGE_LOBBY = 1,
	COLOSSEUM_PLAYER_APPLICATION_STAGE_CONFIRM = 2,
	COLOSSEUM_PLAYER_APPLICATION_STAGE_PLAY = 3,
	COLOSSEUM_PLAYER_APPLICATION_STAGE_MAX = 4
};


// Enum EFGame.EFConst.ColosseumQueryType
enum class EColosseumQueryType : uint8_t
{
	COLOSSEUM_QUERY_TYPE_LOBBY_PC_COUNT = 0,
	COLOSSEUM_QUERY_TYPE_LOBBY_PC_COUNT_BY_TYPE = 1,
	COLOSSEUM_QUERY_TYPE_LOBBY_PC_LIST = 2,
	COLOSSEUM_QUERY_TYPE_CONFIRM_WAIT_PC_COUNT = 3,
	COLOSSEUM_QUERY_TYPE_CONFIRM_WAIT_PC_LIST = 4,
	COLOSSEUM_QUERY_TYPE_COLOSSEUM_POINT = 5,
	COLOSSEUM_QUERY_TYPE_PARTY_MATCH_PC_COUNT = 6,
	COLOSSEUM_QUERY_TYPE_MAX       = 7
};


// Enum EFGame.EFConst.BookmarkType
enum class EBookmarkType : uint8_t
{
	BOOKMARK_TYPE_NONE             = 0,
	BOOKMARK_TYPE_COMMON_SOCIAL_ACTION = 1,
	BOOKMARK_TYPE_TRIPOD           = 2,
	BOOKMARK_TYPE_AVATAR_ASSEMBLY  = 3,
	BOOKMARK_TYPE_MAX              = 4
};


// Enum EFGame.EFConst.BattlefieldMercenaryRecruitControl
enum class EBattlefieldMercenaryRecruitControl : uint8_t
{
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_NONE = 0,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_CREATE = 1,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_DESTROY = 2,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_SEARCH = 3,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_INSPECT = 4,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_JOIN = 5,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_LEAVE = 6,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_ACCEPT = 7,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_REJECT = 8,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_GUILD_PC_JOIN_LIST = 9,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_PC_JOIN_LIST = 10,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_GUILD_GRADE_POINT_VOTE = 11,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_MERCENARY_GRADE_POINT_VOTE = 12,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_MERCENARY_REWARD = 13,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_DESTROY_ALL = 14,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_GUILD_MERCENARY_RESET = 15,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_GUILD_GRADE_POINT_LIST = 16,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_MERCENARY_GRADE_POINT_LIST = 17,
	BATTLEFIELD_MERCENARY_RECRUIT_CONTROL_MAX = 18
};


// Enum EFGame.EFConst.BattlefieldControlType
enum class EBattlefieldControlType : uint8_t
{
	BATTLEFIELD_CONTROL_TYPE_NONE  = 0,
	BATTLEFIELD_CONTROL_TYPE_ENLIST = 1,
	BATTLEFIELD_CONTROL_TYPE_ENTER = 2,
	BATTLEFIELD_CONTROL_TYPE_MATCH = 3,
	BATTLEFIELD_CONTROL_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.BattlefieldPenaltyReason
enum class EBattlefieldPenaltyReason : uint8_t
{
	BATTLEFIELD_PENALTY_REASON_NONE = 0,
	BATTLEFIELD_PENALTY_REASON_ILLEGAL_PROGRAM = 1,
	BATTLEFIELD_PENALTY_REASON_HACK = 2,
	BATTLEFIELD_PENALTY_REASON_ABUSE = 3,
	BATTLEFIELD_PENALTY_REASON_ETC = 4,
	BATTLEFIELD_PENALTY_REASON_MAX = 5
};


// Enum EFGame.EFConst.BuddyListCacheType
enum class EBuddyListCacheType : uint8_t
{
	BUDDY_LIST_CACHE_TYPE_NONE     = 0,
	BUDDY_LIST_CACHE_TYPE_GET_LIST = 1,
	BUDDY_LIST_CACHE_TYPE_ADD      = 2,
	BUDDY_LIST_CACHE_TYPE_DELETE   = 3,
	BUDDY_LIST_CACHE_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.BuddyRecordUpdateType
enum class EBuddyRecordUpdateType : uint8_t
{
	BUDDY_RECORD_UPDATE_TYPE_NONE  = 0,
	BUDDY_RECORD_UPDATE_TYPE_GROUP = 1,
	BUDDY_RECORD_UPDATE_TYPE_ACCEPT_BUDDY = 2,
	BUDDY_RECORD_UPDATE_TYPE_MEMO  = 3,
	BUDDY_RECORD_UPDATE_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.BlackListCacheType
enum class EBlackListCacheType : uint8_t
{
	BLACK_LIST_CACHE_TYPE_NONE     = 0,
	BLACK_LIST_CACHE_TYPE_GET_LIST = 1,
	BLACK_LIST_CACHE_TYPE_ADD      = 2,
	BLACK_LIST_CACHE_TYPE_DELETE   = 3,
	BLACK_LIST_CACHE_TYPE_MAX      = 4
};


// Enum EFGame.EFConst.AuctionRemoveReason
enum class EAuctionRemoveReason : uint8_t
{
	AUCTION_REMOVE_REASON_USER_REQUEST = 0,
	AUCTION_REMOVE_REASON_TIMEOUT  = 1,
	AUCTION_REMOVE_REASON_SOLD_OUT = 2,
	AUCTION_REMOVE_REASON_GM_CANCEL = 3,
	AUCTION_REMOVE_REASON_GM_DELETE = 4,
	AUCTION_REMOVE_REASON_MAX      = 5
};


// Enum EFGame.EFConst.AdminKickType
enum class EAdminKickType : uint8_t
{
	ADMIN_KICK_TYPE_LOGIN          = 0,
	ADMIN_KICK_TYPE_BASIC          = 1,
	ADMIN_KICK_TYPE_BAN            = 2,
	ADMIN_KICK_TYPE_AUTH_LEVEL     = 3,
	ADMIN_KICK_TYPE_MAX            = 4
};


// Enum EFGame.EFConst.AdminPlayerColosseumRecordOpType
enum class EAdminPlayerColosseumRecordOpType : uint8_t
{
	ADMIN_PLAYER_COLOSSEUM_RECORD_OP_QUERY = 0,
	ADMIN_PLAYER_COLOSSEUM_RECORD_OP_UPDATE = 1,
	ADMIN_PLAYER_COLOSSEUM_RECORD_OP_RESET = 2,
	ADMIN_PLAYER_COLOSSEUM_RECORD_OP_DORMANT_RELEGATION = 3,
	ADMIN_PLAYER_COLOSSEUM_RECORD_OP_MAX = 4
};


// Enum EFGame.EFConst.EDataUnitType
enum class EDataUnitType : uint8_t
{
	DataUnit_UPK                   = 0,
	DataUnit_Quest                 = 1,
	DataUnit_NPCFunction           = 2,
	DataUnit_DeployMap             = 3,
	DataUnit_TriggerMap            = 4,
	DataUnit_Minimap               = 5,
	DataUnit_UI                    = 6,
	DataUnit_ColorOption           = 7,
	DataUnit_Action                = 8,
	DataUnit_DevelopOption         = 9,
	DataUnit_EnvirObjectMap        = 10,
	DataUnit_TestOption            = 11,
	DataUnit_DefaultUserOption     = 12,
	DataUnit_UserOption            = 13,
	DataUnit_AccountOption         = 14,
	DataUnit_MatineeSync           = 15,
	DataUnit_EnvirObjectTemplate   = 16,
	DataUnit_TooltipInfo           = 17,
	DataUnit_UISoundTheme          = 18,
	DataUnit_Movie                 = 19,
	DataUnit_QuestPerform          = 20,
	DataUnit_ParticleSound         = 21,
	DataUnit_Sound                 = 22,
	DataUnit_PropLookInfo          = 23,
	DataUnit_DropModelLookInfo     = 24,
	DataUnit_ShipLookInfo          = 25,
	DataUnit_ItemLookInfo          = 26,
	DataUnit_TrapLookInfo          = 27,
	DataUnit_GibsModelLookInfo     = 28,
	DataUnit_GibsParticleLookInfo  = 29,
	DataUnit_HumanLookInfo         = 30,
	DataUnit_TowerLookInfo         = 31,
	DataUnit_MonsterLookInfo       = 32,
	DataUnit_TransporterLookInfo   = 33,
	DataUnit_VehicleLookInfo       = 34,
	DataUnit_FunctionNPCLocation   = 35,
	DataUnit_WebInfo               = 36,
	DataUnit_TownObjectLookInfo    = 37,
	DataUnit_Summons               = 38,
	DataUnit_Icon                  = 39,
	DataUnit_SummonsEditorFilter   = 40,
	DataUnit_LOAGo                 = 41,
	DataUnit_ActionCategory        = 42,
	DataUnit_PropCollision         = 43,
	DataUnit_TowerCollision        = 44,
	DataUnit_TrackMove             = 45,
	DataUnit_Filter                = 46,
	DataUnit_UIProperties          = 47,
	DataUnit_CharacterCustomizing  = 48,
	DataUnit_CharacterCustomizingRule = 49,
	DataUnit_MAX                   = 50
};


// Enum EFGame.EFConst.ZoneObjectSyncStatus
enum class EZoneObjectSyncStatus : uint8_t
{
	ZONE_OBJECT_SYNC_STATUS_NONE   = 0,
	ZONE_OBJECT_SYNC_STATUS_ZONE   = 1,
	ZONE_OBJECT_SYNC_STATUS_SECTOR = 2,
	ZONE_OBJECT_SYNC_STATUS_MAX    = 3
};


// Enum EFGame.EFConst.WorldMapLayerType
enum class EWorldMapLayerType : uint8_t
{
	WORLDMAP_LAYER_TYPE_WORLD      = 0,
	WORLDMAP_LAYER_TYPE_CONTINENT  = 1,
	WORLDMAP_LAYER_TYPE_ZONE       = 2,
	WORLDMAP_LAYER_TYPE_VOYAGE     = 3,
	WORLDMAP_LAYER_TYPE_MAX        = 4
};


// Enum EFGame.EFConst.VehicleGrade
enum class EVehicleGrade : uint8_t
{
	VEHICLE_GRADE_NORMAL           = 0,
	VEHICLE_GRADE_BM               = 1,
	VEHICLE_GRADE_MAX              = 2
};


// Enum EFGame.EFConst.FallDownCameraType
enum class EFallDownCameraType : uint8_t
{
	FALLDOWN_CAMERA_TYPE_NONE      = 0,
	FALLDOWN_CAMERA_TYPE           = 1,
	FALLDOWN_CAMERA_TYPE01         = 2,
	FALLDOWN_CAMERA_TYPE02         = 3,
	FALLDOWN_CAMERA_TYPE03         = 4,
	FALLDOWN_CAMERA_TYPE04         = 5,
	FALLDOWN_CAMERA_TYPE_MAX       = 6
};


// Enum EFGame.EFConst.EXIT_MENU_POSITION_TYPE
enum class EXIT_MENU_POSITION_TYPE : uint8_t
{
	EXIT_MENU_POSITION_NONE        = 0,
	EXIT_MENU_POSITION_MAIN        = 1,
	EXIT_MENU_POSITION_LEFTBOTTOM  = 2,
	EXIT_MENU_POSITION_RIGHTBOTTOM = 3,
	EXIT_MENU_POSITION_MAX         = 4
};


// Enum EFGame.EFConst.GuildResearchCategoryType
enum class EGuildResearchCategoryType : uint8_t
{
	GuildResearchCategoryType_None = 0,
	GuildResearchCategoryType_Reward_Enhance = 1,
	GuildResearchCategoryType_Skill_Enhance = 2,
	GuildResearchCategoryType_Skill_Support = 3,
	GuildResearchCategoryType_Quest_Enhance = 4,
	GuildResearchCategoryType_Max  = 5
};


// Enum EFGame.EFConst.GuildContentsBannerType
enum class EGuildContentsBannerType : uint8_t
{
	GuildContentsBannerType_DeathMatch = 0,
	GuildContentsBannerType_FieldBoss = 1,
	GuildContentsBannerType_Fortress = 2,
	GuildContentsBannerType_ResearchTarget = 3,
	GuildContentsBannerType_GuildWeekObjective = 4,
	GuildContentsBannerType_Update = 5,
	GuildContentsBannerType_OccupyWar = 6,
	GuildContentsBannerType_MAX    = 7
};


// Enum EFGame.EFConst.GuildContentType
enum class EGuildContentType : uint8_t
{
	GuildContentType_DeathMatch    = 0,
	GuildContentType_FieldBoss     = 1,
	GuildContentType_ResearchTarget = 2,
	GuildContentType_GuildWeekObjective = 3,
	GuildContentType_Update        = 4,
	GuildContentType_OccupyWar     = 5,
	GuildContentType_MAX           = 6
};


// Enum EFGame.EFConst.RestrictionState
enum class ERestrictionState : uint8_t
{
	RestrictionState_NoChange      = 0,
	RestrictionState_Disable       = 1,
	RestrictionState_Max           = 2
};


// Enum EFGame.EFConst.RestrictionType
enum class ERestrictionType : uint8_t
{
	RestrictionType_Potion         = 0,
	RestrictionType_Equipment      = 1,
	RestrictionType_Skill          = 2,
	RestrictionType_BattleItem     = 3,
	RestrictionType_Max            = 4
};


// Enum EFGame.EFConst.UndefinedIconType
enum class EUndefinedIconType : uint8_t
{
	UNDEFINED_ICON_WALLPAPER       = 0,
	UNDEFINED_ICON_HONORTITLE      = 1,
	UNDEFINED_ICON_LUCKYENERGY_MAXINCREASE = 2,
	UNDEFINED_ICON_LUCKYENERGY_REGEN = 3,
	UNDEFINED_ICON_EXPEDITION_EXP  = 4,
	UNDEFINED_ICON_MAX             = 5
};


// Enum EFGame.EFConst.UsageCategory
enum class EUsageCategory : uint8_t
{
	USAGE_CATEGORY_ASSEMBLY        = 0,
	USAGE_CATEGORY_EVOLUTION       = 1,
	USAGE_CATEGORY_BARTERING       = 2,
	USAGE_CATEGORY_UPGRADE_SHIP    = 3,
	USAGE_CATEGORY_MAX             = 4
};


// Enum EFGame.EFConst.UITutorialMsgBoxSize
enum class EUITutorialMsgBoxSize : uint8_t
{
	UI_TUTORIAL_MSG_BOX_SIZE_NONE  = 0,
	UI_TUTORIAL_MSG_BOX_SIZE_SMALL = 1,
	UI_TUTORIAL_MSG_BOX_SIZE_MEDIUM = 2,
	UI_TUTORIAL_MSG_BOX_SIZE_LARGE = 3,
	UI_TUTORIAL_MSG_BOX_SIZE_MAX   = 4
};


// Enum EFGame.EFConst.UITutorialMsgBoxPosType
enum class EUITutorialMsgBoxPosType : uint8_t
{
	UI_TUTORIAL_MSG_BOX_POS_NONE   = 0,
	UI_TUTORIAL_MSG_BOX_POS_NORTH_WEST = 1,
	UI_TUTORIAL_MSG_BOX_POS_NORTH  = 2,
	UI_TUTORIAL_MSG_BOX_POS_NORTH_EAST = 3,
	UI_TUTORIAL_MSG_BOX_POS_EAST_A = 4,
	UI_TUTORIAL_MSG_BOX_POS_EAST_B = 5,
	UI_TUTORIAL_MSG_BOX_POS_SOUTH_EAST = 6,
	UI_TUTORIAL_MSG_BOX_POS_SOUTH  = 7,
	UI_TUTORIAL_MSG_BOX_POS_SOUTH_WEST = 8,
	UI_TUTORIAL_MSG_BOX_POS_WEST_A = 9,
	UI_TUTORIAL_MSG_BOX_POS_WEST_B = 10,
	UI_TUTORIAL_MSG_BOX_POS_MAX    = 11
};


// Enum EFGame.EFConst.UITutorialNextStepCondition
enum class EUITutorialNextStepCondition : uint8_t
{
	UI_TUTORIAL_NEXTSTEP_CONDITION_NONE = 0,
	UI_TUTORIAL_NEXTSTEP_CONDITION_MSG_BOX_CLICK = 1,
	UI_TUTORIAL_NEXTSTEP_CONDITION_AREA_CLICK = 2,
	UI_TUTORIAL_NEXTSTEP_CONDITION_HOT_KEY = 3,
	UI_TUTORIAL_NEXTSTEP_CONDITION_USE_ITEM = 4,
	UI_TUTORIAL_NEXTSTEP_CONDITION_NPC_INTERACTION = 5,
	UI_TUTORIAL_NEXTSTEP_CONDITION_NPC_ABILITY_STONE = 6,
	UI_TUTORIAL_NEXTSTEP_CONDITION_TARGET_ITEM_CLICK = 7,
	UI_TUTORIAL_NEXTSTEP_CONDITION_MAX = 8
};


// Enum EFGame.EFConst.UIUnitTypeIndex
enum class EUIUnitTypeIndex : uint8_t
{
	UI_UNIT_TYPE_INDEX_NONE        = 0,
	UI_UNIT_TYPE_PIS               = 1,
	UI_UNIT_TYPE_DIALOG_SYSTEM     = 2,
	UI_UNIT_TYPE_DIALOG_SYSTEM_NEW = 3,
	UI_UNIT_TYPE_TERUMS_OF_SERVICE = 4,
	UI_UNIT_TYPE_RATING            = 5,
	UI_UNIT_TYPE_LOGIN             = 6,
	UI_UNIT_TYPE_LOGIN_SERVERLIST  = 7,
	UI_UNIT_TYPE_LOGIN_COPYRIGHT   = 8,
	UI_UNIT_TYPE_CHARACTER_SELECT_TOP = 9,
	UI_UNIT_TYPE_CHARACTER_SELECT_WALLPAER = 10,
	UI_UNIT_TYPE_CHARACTER_SELECT_BOTTOM = 11,
	UI_UNIT_TYPE_CHARACTER_SELECT_LIST = 12,
	UI_UNIT_TYPE_CHARACTER_SELECT_EXPEDITION = 13,
	UI_UNIT_TYPE_CHARACTER_SELECT_CONTROL = 14,
	UI_UNIT_TYPE_CHARACTER_SELECT_CONTROLBOTTOM = 15,
	UI_UNIT_TYPE_CLASSSELECT_MOVIE = 16,
	UI_UNIT_TYPE_CLASSSELECT_DETAILPAGE = 17,
	UI_UNIT_TYPE_CLASSSELECT_BOTTOM = 18,
	UI_UNIT_TYPE_CHARACTER_CUSTOMIZING_NAME_GROUP = 19,
	UI_UNIT_TYPE_CHARACTER_CUSTOMIZING_BOTTON_GROUP = 20,
	UI_UNIT_TYPE_CHARACTER_CUSTOMIZING_DETALE_PAGE = 21,
	UI_UNIT_TYPE_CHARACTER_CUSTOMIZING_SYSBUTTON_GROUP = 22,
	UI_UNIT_TYPE_CHARACTER_CUSTOMIZING_LEFT_GROUP = 23,
	UI_UNIT_TYPE_FISHINGNET_MINIGAME = 24,
	UI_UNIT_TYPE_EXCAVATION_MINIGAME = 25,
	UI_UNIT_TYPE_INVENTORY         = 26,
	UI_UNIT_TYPE_NPC_INTERACTION_COMMON = 27,
	UI_UNIT_TYPE_NPC_INTERACTION_WARE_HOUSE = 28,
	UI_UNIT_TYPE_NPC_INTERACTION_REPAIR = 29,
	UI_UNIT_TYPE_NPC_INTERACTION_COLOSSEUM = 30,
	UI_UNIT_TYPE_NPC_INTERACTION_SHOP = 31,
	UI_UNIT_TYPE_NPC_INTERACTION_BARTER = 32,
	UI_UNIT_TYPE_NPC_INTERACTION_ABILITY_REFINE = 33,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEM_CRAFT = 34,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEM_ASSEMBLY = 35,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEM_ASSEMBLY_RECIPE = 36,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEM_DISASSEMBLY = 37,
	UI_UNIT_TYPE_NPC_INTERACTION_CUMULATIVE_REWARD = 38,
	UI_UNIT_TYPE_NPC_INTERACTION_SDMAPEXCHANGE = 39,
	UI_UNIT_TYPE_NPC_INTERACTION_RAIDLICENSE = 40,
	UI_UNIT_TYPE_EXIT_MENU         = 41,
	UI_UNIT_TYPE_HOT_KEY           = 42,
	UI_UNIT_TYPE_EDITOR_RESOLUTION = 43,
	UI_UNIT_TYPE_EXIT_WINDOW       = 44,
	UI_UNIT_TYPE_QUICKSLOT_SHORTCUT = 45,
	UI_UNIT_TYPE_QUICKSLOT_DURABILITYSTATE = 46,
	UI_UNIT_TYPE_QUICKSLOT_QUICKMENU = 47,
	UI_UNIT_TYPE_QUICKSLOT_TPSVIEW = 48,
	UI_UNIT_TYPE_QUEST_MINI_INFO   = 49,
	UI_UNIT_TYPE_QUEST_SUMMARY     = 50,
	UI_UNIT_TYPE_QUEST_JOURNAL     = 51,
	UI_UNIT_TYPE_CHARACTER_INFO    = 52,
	UI_UNIT_TYPE_OTHERCHARACTER_INFO = 53,
	UI_UNIT_TYPE_USERTRADE         = 54,
	UI_UNIT_TYPE_NEW_TOOL_TIP      = 55,
	UI_UNIT_TYPE_PARTY             = 56,
	UI_UNIT_TYPE_SIMPLEPARTY       = 57,
	UI_UNIT_TYPE_DEAD_SCENE        = 58,
	UI_UNIT_TYPE_PARTYINVITE       = 59,
	UI_UNIT_TYPE_PARTYDICE         = 60,
	UI_UNIT_TYPE_PARTYMATCHING     = 61,
	UI_UNIT_TYPE_QUICKMENU         = 62,
	UI_UNIT_TYPE_HEADSTATUS        = 63,
	UI_UNIT_TYPE_SKILL_BOOK        = 64,
	UI_UNIT_TYPE_TARGETSTATUS      = 65,
	UI_UNIT_TYPE_MINIMAP           = 66,
	UI_UNIT_TYPE_EXPANDED_MINIMAP  = 67,
	UI_UNIT_TYPE_DROPITEM          = 68,
	UI_UNIT_TYPE_COMMONOBJECT      = 69,
	UI_UNIT_TYPE_CINEMACAPTION     = 70,
	UI_UNIT_TYPE_IDENTITY_DEFAULTSKIN = 71,
	UI_UNIT_TYPE_IDENTITY_BERSERKERSKIN = 72,
	UI_UNIT_TYPE_IDENTITY_DESTROYERSKIN = 73,
	UI_UNIT_TYPE_IDENTITY_WARLORDSKIN = 74,
	UI_UNIT_TYPE_IDENTITY_HOLYKNIGHTSKIN = 75,
	UI_UNIT_TYPE_IDENTITY_ARCANASKIN = 76,
	UI_UNIT_TYPE_IDENTITY_SUMMONERSKIN = 77,
	UI_UNIT_TYPE_IDENTITY_BATTLEMASTERSKIN = 78,
	UI_UNIT_TYPE_IDENTITY_INFIGHTERSKIN = 79,
	UI_UNIT_TYPE_IDENTITY_KIMASTERSKIN = 80,
	UI_UNIT_TYPE_IDENTITY_LANCEMASTERSKIN = 81,
	UI_UNIT_TYPE_IDENTITY_HAWKEYESKIN = 82,
	UI_UNIT_TYPE_IDENTITY_DEVILHUNTERSKIN = 83,
	UI_UNIT_TYPE_IDENTITY_BLASTERSKIN = 84,
	UI_UNIT_TYPE_IDENTITY_SCOUTERSKIN = 85,
	UI_UNIT_TYPE_IDENTITY_BARDSKIN = 86,
	UI_UNIT_TYPE_IDENTITY_KIMASTERGAUGESKIN = 87,
	UI_UNIT_TYPE_IDENTITY_DEMONICSKIN = 88,
	UI_UNIT_TYPE_IDENTITY_BLADESKIN = 89,
	UI_UNIT_TYPE_IDENTITY_REAPERSKIN = 90,
	UI_UNIT_TYPE_COLORPICKER       = 91,
	UI_UNIT_TYPE_CUSTOM_COLORPICKER = 92,
	UI_UNIT_TYPE_CHATMESSAGE       = 93,
	UI_UNIT_TYPE_CHATMESSAGEOPTION = 94,
	UI_UNIT_TYPE_CHATTING          = 95,
	UI_UNIT_TYPE_CHATTINGFILTEROPTION = 96,
	UI_UNIT_TYPE_ANNOUNCE          = 97,
	UI_UNIT_TYPE_DAMAGETEXT        = 98,
	UI_UNIT_TYPE_STYLISHCOMBO      = 99,
	UI_UNIT_TYPE_EXPERIENCEBAR     = 100,
	UI_UNIT_TYPE_TUTORIAL          = 101,
	UI_UNIT_TYPE_SOCIALSKILL       = 102,
	UI_UNIT_TYPE_LIFESKILL         = 103,
	UI_UNIT_TYPE_COLOSSEUM_RESULT  = 104,
	UI_UNIT_TYPE_COLOSSEUM_OBSERVER = 105,
	UI_UNIT_TYPE_COLOSSEUM_TOP     = 106,
	UI_UNIT_TYPE_COLOSSEUM_PARTY_TDM = 107,
	UI_UNIT_TYPE_COLOSSEUM_PARTY_FFA = 108,
	UI_UNIT_TYPE_COLOSSEUM_PARTY_ELI = 109,
	UI_UNIT_TYPE_COLOSSEUM_RESULT_NEW = 110,
	UI_UNIT_TYPE_COLOSSEUM_HEAD_STATUS = 111,
	UI_UNIT_TYPE_COLOSSEUM_RANK_INFO = 112,
	UI_UNIT_TYPE_COLOSSEUM_RANKING_BOARD = 113,
	UI_UNIT_TYPE_COLOSSEUM_SPECTATOR = 114,
	UI_UNIT_TYPE_CLASS_PREVIEW     = 115,
	UI_UNIT_TYPE_INTERACTION_KEY_ICON = 116,
	UI_UNIT_TYPE_MAIL              = 117,
	UI_UNIT_TYPE_MAIL_READ         = 118,
	UI_UNIT_TYPE_MOD_CUBE          = 119,
	UI_UNIT_TYPE_MOD_TOWNDEFENCE   = 120,
	UI_UNIT_TYPE_MOD_TOWER         = 121,
	UI_UNIT_TYPE_MOD_PLATINUM_AREA = 122,
	UI_UNIT_TYPE_MOD_TOWER_ENTRANCE = 123,
	UI_UNIT_TYPE_MOD_BOSS          = 124,
	UI_UNIT_TYPE_MUSIC             = 125,
	UI_UNIT_TYPE_BUDDY             = 126,
	UI_UNIT_TYPE_BUDDY_ADVENTURE   = 127,
	UI_UNIT_TYPE_MOD_RESULT        = 128,
	UI_UNIT_TYPE_MOD_CUBE_RESULT   = 129,
	UI_UNIT_TYPE_MOD_TOWNDEFENCE_RESULT = 130,
	UI_UNIT_TYPE_MOD_TOWER_RESULT  = 131,
	UI_UNIT_TYPE_MOD_PLATINUMAREA_RESULT = 132,
	UI_UNIT_TYPE_MOD_BOSS_RESULT   = 133,
	UI_UNIT_TYPE_ADVENTUREBOOK     = 134,
	UI_UNIT_TYPE_ACQUIREITEM       = 135,
	UI_UNIT_TYPE_SECRET_DUNGEON_ENTRY_MAP = 136,
	UI_UNIT_TYPE_SECRET_DUNGEON_ENTRY_CONFIRM = 137,
	UI_UNIT_TYPE_SECRET_DUNGEON_ENTRY_PROGRESS = 138,
	UI_UNIT_TYPE_MOD_ENTRANCE      = 139,
	UI_UNIT_TYPE_QUEST_NOTE        = 140,
	UI_UNIT_TYPE_CHAOSGATE_PROGRESS = 141,
	UI_UNIT_TYPE_CHAOSGATE_SCOREBOARD = 142,
	UI_UNIT_TYPE_RAID_ENTRANCE     = 143,
	UI_UNIT_TYPE_WEEKLY_RAID_ENTRANCE = 144,
	UI_UNIT_TYPE_RAID_HUD          = 145,
	UI_UNIT_TYPE_RAID_CLEAR        = 146,
	UI_UNIT_TYPE_RAID_FAIL         = 147,
	UI_UNIT_TYPE_RAID_EXIT_NOTICE  = 148,
	UI_UNIT_TYPE_MOVIE_PLAYER      = 149,
	UI_UNIT_TYPE_NOTICE            = 150,
	UI_UNIT_TYPE_NOTICE_MOD        = 151,
	UI_UNIT_TYPE_MAP               = 152,
	UI_UNIT_TYPE_CINEMATIC_ENTRANCE = 153,
	UI_UNIT_TYPE_ACHIEVEMENT       = 154,
	UI_UNIT_TYPE_RANDOM_BOX        = 155,
	UI_UNIT_TYPE_SELECT_BOX        = 156,
	UI_UNIT_TYPE_NORMAL_BOX        = 157,
	UI_UNIT_TYPE_UNLOCK_BOX        = 158,
	UI_UNIT_TYPE_GAME_NOTE         = 159,
	UI_UNIT_TYPE_BUFF_ANNOUNCE     = 160,
	UI_UNIT_TYPE_SYSTEM_OPTION     = 161,
	UI_UNIT_TYPE_GLOBAL_TIMER      = 162,
	UI_UNIT_TYPE_CONTENTS_UNLOCK   = 163,
	UI_UNIT_TYPE_LIFEVESSEL        = 164,
	UI_UNIT_TYPE_LOGIN_BACKGROUND  = 165,
	UI_UNIT_TYPE_GAMERATING        = 166,
	UI_UNIT_TYPE_GAMEWAITING       = 167,
	UI_UNIT_TYPE_INSTANCE_DUNGEON_ENTRANCE = 168,
	UI_UNIT_TYPE_GUILD_SEARCH      = 169,
	UI_UNIT_TYPE_GUILD             = 170,
	UI_UNIT_TYPE_FRIENDSHIP        = 171,
	UI_UNIT_TYPE_NETWORKSTATE      = 172,
	UI_UNIT_TYPE_EQUIP_PRESET      = 173,
	UI_UNIT_TYPE_ADVENTURE_OBJECT  = 174,
	UI_UNIT_TYPE_LIFETOOLDURABILITY = 175,
	UI_UNIT_TYPE_OCEAN_HUD         = 176,
	UI_UNIT_TYPE_OCEAN_RUDDER      = 177,
	UI_UNIT_TYPE_ANCHOR_MODE       = 178,
	UI_UNIT_TYPE_ANCHOR_MODE_SAIL  = 179,
	UI_UNIT_TYPE_ANCHOR_MODE_CREW  = 180,
	UI_UNIT_TYPE_ANCHOR_MODE_AVATAR = 181,
	UI_UNIT_TYPE_ANCHOR_MODE_UPGRADE = 182,
	UI_UNIT_TYPE_DUNGEON_QUEST_PROGRESS = 183,
	UI_UNIT_TYPE_DUNGEON_FAIL      = 184,
	UI_UNIT_TYPE_QUEST_COOP_INFO   = 185,
	UI_UNIT_TYPE_QUEST_COOP_RESULT_INFO = 186,
	UI_UNIT_TYPE_INTERACTION_MARK  = 187,
	UI_UNIT_TYPE_ARCANA_CARDBOOK   = 188,
	UI_UNIT_TYPE_HONOR             = 189,
	UI_UNIT_TYPE_VICTORYCREST      = 190,
	UI_UNIT_TYPE_VICTORYCREST_PLATECHANGE = 191,
	UI_UNIT_TYPE_CASH_SHOP         = 192,
	UI_UNIT_TYPE_MARKET            = 193,
	UI_UNIT_TYPE_WATER_MARK        = 194,
	UI_UNIT_TYPE_NPC_INTERACTION_EVOLUTION = 195,
	UI_UNIT_TYPE_CURRENCY_BAR      = 196,
	UI_UNIT_TYPE_CURRENCY_INFO     = 197,
	UI_UNIT_TYPE_CURRENCY_EXCHANGE = 198,
	UI_UNIT_TYPE_WEB_PAGE          = 199,
	UI_UNIT_TYPE_PERSONAL_DUNGEON_ENTRANCE = 200,
	UI_UNIT_TYPE_DUEL_RESULT       = 201,
	UI_UNIT_TYPE_MOD_WAITING_INFO  = 202,
	UI_UNIT_TYPE_CANDIDATE         = 203,
	UI_UNIT_TYPE_PIP               = 204,
	UI_UNIT_TYPE_ITEM_DICTIONARY   = 205,
	UI_UNIT_TYPE_INTERRUPTSKILL    = 206,
	UI_UNIT_TYPE_TROPHYAUCTION     = 207,
	UI_UNIT_TYPE_VOYAGE_TRANSPORT  = 208,
	UI_UNIT_TYPE_ENGRAVE_BOOK      = 209,
	UI_UNIT_TYPE_ENGRAVE_ITEM      = 210,
	UI_UNIT_TYPE_FRIENDSHIP_GIFT   = 211,
	UI_UNIT_TYPE_COUPON            = 212,
	UI_UNIT_TYPE_CARD_STORAGE      = 213,
	UI_UNIT_TYPE_HELP_DESK         = 214,
	UI_UNIT_TYPE_MILESTONE         = 215,
	UI_UNIT_TYPE_PRACTICE          = 216,
	UI_UNIT_TYPE_CARD_BATTLE_ENTRANCE = 217,
	UI_UNIT_TYPE_CARD_BATTLE       = 218,
	UI_UNIT_TYPE_INPUTKEY_PERFECTZONE = 219,
	UI_UNIT_TYPE_ITEM_REFORGE      = 220,
	UI_UNIT_TYPE_ITEM_REMODEL      = 221,
	UI_UNIT_TYPE_INTERNETCAFE_BENEFIT = 222,
	UI_UNIT_TYPE_QUEST_COMPETITION_COOP_RESULT_INFO = 223,
	UI_UNIT_TYPE_PERIOD_QUEST_NOTICE_BOARD = 224,
	UI_UNIT_TYPE_CHAOSDUNGEON_ENTRANCE = 225,
	UI_UNIT_TYPE_CHAOSDUNGEON_RESULT = 226,
	UI_UNIT_TYPE_VOYAGE_DIVING     = 227,
	UI_UNIT_TYPE_AUX_PASSWORD      = 228,
	UI_UNIT_TYPE_CONTENTS_UNLOCK_SECOND = 229,
	UI_UNIT_TYPE_CASH_CHARGE       = 230,
	UI_UNIT_TYPE_USERREPORT        = 231,
	UI_UNIT_TYPE_PROLOGUE_SKIP     = 232,
	UI_UNIT_TYPE_CALENDAR          = 233,
	UI_UNIT_TYPE_TOKENITEM_INFO    = 234,
	UI_UNIT_TYPE_VEHICLE           = 235,
	UI_UNIT_TYPE_GUIDE_BOOK        = 236,
	UI_UNIT_TYPE_ROLL_BOOK         = 237,
	UI_UNIT_TYPE_HOT_TIME          = 238,
	UI_UNIT_TYPE_STOCK             = 239,
	UI_UNIT_TYPE_OCEAN_LUCK        = 240,
	UI_UNIT_TYPE_NPC_INTERACTION_AVATAR_REFORM = 241,
	UI_UNIT_TYPE_NPC_INTERACTION_AVATAR_DISASSEMBLY = 242,
	UI_UNIT_TYPE_NPC_INTERACTION_ENCHANT_AVATAR = 243,
	UI_UNIT_TYPE_CASH_SHOP_PURCHASE = 244,
	UI_UNIT_TYPE_CASH_SHOP_SEARCH_USER = 245,
	UI_UNIT_TYPE_CASH_SHOP_CART    = 246,
	UI_UNIT_TYPE_CASH_SHOP_SEND_GIFT = 247,
	UI_UNIT_TYPE_CASH_SHOP_TAKE    = 248,
	UI_UNIT_TYPE_CASH_SHOP_CONFIRM_RECEIPT = 249,
	UI_UNIT_TYPE_CASH_SHOP_PREVIEW = 250,
	UI_UNIT_TYPE_CASH_SHOP_PAIDSERVICE = 251,
	UI_UNIT_TYPE_CASH_SHOP_DUPLICATE_PURCHASE = 252,
	UI_UNIT_TYPE_CASH_SHOP_CONFIRM_BUY = 253,
	UI_UNIT_TYPE_CASH_SHOP_CONFIRM_GIFT = 254,
	UI_UNIT_TYPE_EVENT_GUIDE       = 255,
	UI_UNIT_TYPE_TOP_INFO_NOTICE   = 256,
	UI_UNIT_TYPE_NVIDIA_HIGHLIGHT  = 257,
	UI_UNIT_TYPE_BATTLEFIELD_ENTRANCE = 258,
	UI_UNIT_TYPE_BATTLEFIELD_RANK_REWARD = 259,
	UI_UNIT_TYPE_BATTLEFIELD_TERMS = 260,
	UI_UNIT_TYPE_BATTLEFIELD_RANKING = 261,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_ENTER = 262,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_PLAY = 263,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_SURRENDER = 264,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_OBSERVER = 265,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_SCORE = 266,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_RESULT = 267,
	UI_UNIT_TYPE_BATTLEFIELD_HEAD_STATUS = 268,
	UI_UNIT_TYPE_BATTLEFIELD_BOSS  = 269,
	UI_UNIT_TYPE_BATTLEFIELD_BOSS_SUCCESS = 270,
	UI_UNIT_TYPE_BATTLEFIELD_BOSS_FAILED = 271,
	UI_UNIT_TYPE_BATTLEFIELD_BOSS_NOTICE = 272,
	UI_UNIT_TYPE_GUILD_SKILL       = 273,
	UI_UNIT_TYPE_CUMULATIVE_VIEWER = 274,
	UI_UNIT_TYPE_LIFE_REMAIN_ACTION_COUNT = 275,
	UI_UNIT_TYPE_BATTLEFIELD_REWARD_NOTICE = 276,
	UI_UNIT_TYPE_SMARTPING_PANEL   = 277,
	UI_UNIT_TYPE_SMARTPING_PANEL_SMALL = 278,
	UI_UNIT_TYPE_SMARTPING_NAMEPLATE = 279,
	UI_UNIT_TYPE_EASY_RAID_ENTRANCE = 280,
	UI_UNIT_TYPE_COLOSSEUM_SCORE   = 281,
	UI_UNIT_TYPE_PVP_INFO          = 282,
	UI_UNIT_TYPE_EXCESS_INVEN      = 283,
	UI_UNIT_TYPE_CURRENCY_STORAGE  = 284,
	UI_UNIT_TYPE_VOICE_CHAT        = 285,
	UI_UNIT_TYPE_VOICE_CHAT_HUD    = 286,
	UI_UNIT_TYPE_PARTYMATCHING_V2  = 287,
	UI_UNIT_TYPE_PARTYMATCHING_JOIN = 288,
	UI_UNIT_TYPE_PVP_LEVEL_INFO    = 289,
	UI_UNIT_TYPE_PVP_REWARD_INFO   = 290,
	UI_UNIT_TYPE_FRIENDSHIP_MUSIC  = 291,
	UI_UNIT_TYPE_PARTYMATCHING_DETAIL = 292,
	UI_UNIT_TYPE_JUMPING_MODE      = 293,
	UI_UNIT_TYPE_BATTLEFIELD_INVITE = 294,
	UI_UNIT_TYPE_CHARACTER_SELECT_JUMPING = 295,
	UI_UNIT_TYPE_CHARACTER_SELECT_JUMPING_BOTTOM = 296,
	UI_UNIT_TYPE_PET_INVENTORY     = 297,
	UI_UNIT_TYPE_PET_SKILL         = 298,
	UI_UNIT_TYPE_MVP_RESULT        = 299,
	UI_UNIT_TYPE_MVP_SHORTCUT      = 300,
	UI_UNIT_TYPE_PVP_RANKING_BOARD = 301,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMENHANCE_LEVELUP = 302,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMENHANCE_INHERIT = 303,
	UI_UNIT_TYPE_PET_CONTEXT_MENU  = 304,
	UI_UNIT_TYPE_TROOP_HUD         = 305,
	UI_UNIT_TYPE_TROOPDUNGEON_ENTRANCE = 306,
	UI_UNIT_TYPE_PET_INTERACTION   = 307,
	UI_UNIT_TYPE_FRIENDSHIP_SOCIALSKILL = 308,
	UI_UNIT_TYPE_TROOP_EDITOR      = 309,
	UI_UNIT_TYPE_EPIC_RAID_ENTRANCE = 310,
	UI_UNIT_TYPE_GUILD_SYSTEM      = 311,
	UI_UNIT_TYPE_RAID_STAGE_PER_REWARD_HUD = 312,
	UI_UNIT_TYPE_RAID_STAGE_PER_REWARD_RESULT = 313,
	UI_UNIT_TYPE_MERCENARY_RECRUIT_BOARD = 314,
	UI_UNIT_TYPE_MERCENARY_JOB_BOARD = 315,
	UI_UNIT_TYPE_BATTLEFIELD_DEATHMATCH_GUILD_VOTE = 316,
	UI_UNIT_TYPE_STAGE_PER_REWARD_BM_WINDOW = 317,
	UI_UNIT_TYPE_OBSERVER_MODE_RIGHT_FRAME = 318,
	UI_UNIT_TYPE_OBSERVER_MODE_BOTTOM_FRAME = 319,
	UI_UNIT_TYPE_RAID_STOP         = 320,
	UI_UNIT_TYPE_CONTENTS_TIMER    = 321,
	UI_UNIT_TYPE_WARP              = 322,
	UI_UNIT_TYPE_ACHIEVEMENT_MENU  = 323,
	UI_UNIT_TYPE_EXPEDITION_MENU   = 324,
	UI_UNIT_TYPE_REVERSERUIN_PROGRESS = 325,
	UI_UNIT_TYPE_REVERSERUIN_RESULT = 326,
	UI_UNIT_TYPE_REVERSERUIN_ENTRANCE = 327,
	UI_UNIT_TYPE_REVERSERUIN_CLEAR_GRADE_EFFECT = 328,
	UI_UNIT_TYPE_REVERSERUIN_RANKING = 329,
	UI_UNIT_TYPE_REVERSERUINNORMAL_PROGRESS = 330,
	UI_UNIT_TYPE_REVERSERUINNORMAL_RESULT = 331,
	UI_UNIT_TYPE_REVERSERUINNORMAL_ENTRANCE = 332,
	UI_UNIT_TYPE_ASTRA_EQUIP       = 333,
	UI_UNIT_TYPE_RAID_CLEAR_TIMEREWARD = 334,
	UI_UNIT_TYPE_NOTICE_CAMERA_ROTATION = 335,
	UI_UNIT_TYPE_CONTENTS_TIMER_CONFIG = 336,
	UI_UNIT_TYPE_COLOSSEUM_CUSTOM_WAIT_ROOM = 337,
	UI_UNIT_TYPE_COLOSSEUM_CUSTOM_MATCHING_ROOM = 338,
	UI_UNIT_TYPE_PREMIUMACCOUNT_BENEFIT = 339,
	UI_UNIT_TYPE_BATTLEFIELD_COOPERATION_ENTER = 340,
	UI_UNIT_TYPE_BATTLEFIELD_COOPERATION_SCORE = 341,
	UI_UNIT_TYPE_BATTLEFIELD_COOPERATION_RESULT = 342,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE = 343,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE_DETAIL = 344,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE_ROOM = 345,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE_ADMIN = 346,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE_INVITE = 347,
	UI_UNIT_TYPE_ITEM_SEAL         = 348,
	UI_UNIT_TYPE_EPIC_GATE_ENTRANCE = 349,
	UI_UNIT_TYPE_EPIC_GATE_PROGRESS = 350,
	UI_UNIT_TYPE_EPIC_GATE_FAIL_NOTICE = 351,
	UI_UNIT_TYPE_EPIC_GATE_STOP_NOTICE = 352,
	UI_UNIT_TYPE_EPIC_GATE_CLEAR_NOTICE = 353,
	UI_UNIT_TYPE_EPIC_GATE_RESULT  = 354,
	UI_UNIT_TYPE_EPIC_GATE_BM_WINDOW = 355,
	UI_UNIT_TYPE_LOGIN_EVENTTOKEN  = 356,
	UI_UNIT_TYPE_CHARACTER_SELECT_POSITION_CHANGE = 357,
	UI_UNIT_TYPE_GACHASHOP         = 358,
	UI_UNIT_TYPE_INDICATOR         = 359,
	UI_UNIT_TYPE_PROLOGUE_SKIP_BTN = 360,
	UI_UNIT_TYPE_TOWN_HUD          = 361,
	UI_UNIT_TYPE_TOWN_INFO         = 362,
	UI_UNIT_TYPE_TOWN_LABORATARY   = 363,
	UI_UNIT_TYPE_TOWN_NPC_DRESS_ROOM = 364,
	UI_UNIT_TYPE_TOWN_DISPATCH_MISSION = 365,
	UI_UNIT_TYPE_TOWN_DISPATCH_READY = 366,
	UI_UNIT_TYPE_TOWN_DISPATCH_SHIPMENT = 367,
	UI_UNIT_TYPE_TOWN_DISPATCH_MISSION_RESULT = 368,
	UI_UNIT_TYPE_TOWN_MANSION      = 369,
	UI_UNIT_TYPE_ADVENTURE_ISLAND_REWARD = 370,
	UI_UNIT_TYPE_ADVENTURE_ISLAND  = 371,
	UI_UNIT_TYPE_SECURITY_INFO_WINDOW = 372,
	UI_UNIT_TYPE_BEATRICE_INFO_WINDOW = 373,
	UI_UNIT_TYPE_AFFECTION_MEMORIAL_REWARD = 374,
	UI_UNIT_TYPE_LIVE_EVENT        = 375,
	UI_UNIT_TYPE_TOWN_RESEARCH     = 376,
	UI_UNIT_TYPE_COLUMN_TOP_INFO_NOTICE = 377,
	UI_UNIT_TYPE_EVENT_MISSION     = 378,
	UI_UNIT_TYPE_SELFIE_MODE       = 379,
	UI_UNIT_TYPE_TOWN_ITEM_ASSEMBLY = 380,
	UI_UNIT_TYPE_TOWN_MANAGEMENT   = 381,
	UI_UNIT_TYPE_ITEM_UPGRADE      = 382,
	UI_UNIT_TYPE_TOWN_BUILDING_STATUS = 383,
	UI_UNIT_TYPE_ITEM_SOCKET       = 384,
	UI_UNIT_TYPE_ITEM_CALIBRATE    = 385,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMOPTION_TRANSFER = 386,
	UI_UNIT_TYPE_TOWN_PLACEMENT_MAIN = 387,
	UI_UNIT_TYPE_TOWN_PLACEMENT_OPTION = 388,
	UI_UNIT_TYPE_TOWN_PLACEMENT_CONTROL = 389,
	UI_UNIT_TYPE_TOWN_PLACEMENT_GUIDE = 390,
	UI_UNIT_TYPE_NPC_ITEMGEM_INSTALL = 391,
	UI_UNIT_TYPE_NPC_ITEMGEM_SYNTHESIZE = 392,
	UI_UNIT_TYPE_NPC_ITEMGEM_TRANSFORM = 393,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMOPTION_EXTRACT = 394,
	UI_UNIT_TYPE_NPC_INTERACTION_LIFE_TOOL_REPAIR = 395,
	UI_UNIT_TYPE_MOD_GATEWAY       = 396,
	UI_UNIT_TYPE_ANCHOR_MODE_AVATAR_TOLERANCE_POINT = 397,
	UI_UNIT_TYPE_SKILL_RECOMMENDATION = 398,
	UI_UNIT_TYPE_RESERVE_          = 399,
	UI_UNIT_TYPE_RESERVE_01        = 400,
	UI_UNIT_TYPE_TOWN_INFO_NOTICE  = 401,
	UI_UNIT_TYPE_TOWN_MANAGEMENT_CAMERA = 402,
	UI_UNIT_TYPE_CARD_STORAGE_SEASON2 = 403,
	UI_UNIT_TYPE_DIFFICULTY_RAID_ENTRANCE = 404,
	UI_UNIT_TYPE_TOWN_TRADE_NPC_INFO = 405,
	UI_UNIT_TYPE_INPUT_BUFF_REMOVE_STATE = 406,
	UI_UNIT_TYPE_NPC_INTERACTION_TRIPODOPTION_STORAGE = 407,
	UI_UNIT_TYPE_YOZ_POT           = 408,
	UI_UNIT_TYPE_TUTORIAL_MODE     = 409,
	UI_UNIT_TYPE_ABYSS_RAID_RETRY  = 410,
	UI_UNIT_TYPE_ABYSS_RAID_PHASE_START = 411,
	UI_UNIT_TYPE_ABYSS_RAID_PHASE_SUCCESS = 412,
	UI_UNIT_TYPE_CHARACTER_SELECT_MAIN_SELECT = 413,
	UI_UNIT_TYPE_NINAVE_INFO_WINDOW = 414,
	UI_UNIT_TYPE_NPC_INTERACTION_ANCIENTORB_APPRAISE = 415,
	UI_UNIT_TYPE_NPC_INTERACTION_ANCIENTORB_RESEARCH = 416,
	UI_UNIT_TYPE_TOWN_OPTION       = 417,
	UI_UNIT_TYPE_TOWN_COMMUNITY    = 418,
	UI_UNIT_TYPE_NPC_INTERACTION_TOWN_CHEF = 419,
	UI_UNIT_TYPE_TOWN_CHEF_MENU    = 420,
	UI_UNIT_TYPE_TOWN_OTHER_INFO   = 421,
	UI_UNIT_TYPE_TOWN_VISITOR      = 422,
	UI_UNIT_TYPE_TUTORIAL_MODE_CLASS_IDENTITY_INFO = 423,
	UI_UNIT_TYPE_CHARACTER_SELECT_EXPRESS_DESC = 424,
	UI_UNIT_TYPE_CHARACTER_SELECT_EXPRESS_SELECT = 425,
	UI_UNIT_TYPE_WELCOME           = 426,
	UI_UNIT_TYPE_EVENT_EPIC_GATE_ENTRANCE = 427,
	UI_UNIT_TYPE_GUILD_MARK_CUSTOM = 428,
	UI_UNIT_TYPE_COLOSSEUM_FORT_ENTRANCE = 429,
	UI_UNIT_TYPE_GUILD_FLAG        = 430,
	UI_UNIT_TYPE_CHALLENGE_PRESET  = 431,
	UI_UNIT_TYPE_QUEST_COMPETITION_COOP_RESULT_SIMPLE_INFO = 432,
	UI_UNIT_TYPE_BATTLEFIELD_BIDDING_TERMS = 433,
	UI_UNIT_TYPE_EPIC_SKILL        = 434,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_ENTRANCE = 435,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_PROGRESS = 436,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_FAIL_NOTICE = 437,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_STOP_NOTICE = 438,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_CLEAR_NOTICE = 439,
	UI_UNIT_TYPE_BATTLEFIELD_OCCUPY_WEEK_INFO = 440,
	UI_UNIT_TYPE_EPIC_SKILL_ANI    = 441,
	UI_UNIT_TYPE_TOWN_TRAINING     = 442,
	UI_UNIT_TYPE_ITEM_QUALITY_UPGRADE = 443,
	UI_UNIT_TYPE_PVP_WEEKLY_EXP    = 444,
	UI_UNIT_TYPE_TOWN_PLACEMENT_SECTOR_INFO = 445,
	UI_UNIT_TYPE_TOWN_PLACEMENT_POSITION_INFO = 446,
	UI_UNIT_TYPE_TOWN_PLACEMENT_AREA_INFO = 447,
	UI_UNIT_TYPE_SCENE_REPLAY_MAIN = 448,
	UI_UNIT_TYPE_SCENE_REPLAY_SUB  = 449,
	UI_UNIT_TYPE_AVATAR_ASSEMBLY   = 450,
	UI_UNIT_TYPE_AVATAR_TINT       = 451,
	UI_UNIT_TYPE_MOD_WAYOFTHRONE_ENTRANCE = 452,
	UI_UNIT_TYPE_MOD_WAYOFTHRONE_PROGRESS = 453,
	UI_UNIT_TYPE_MOD_WAYOFTHRONE_RESULT = 454,
	UI_UNIT_TYPE_MOD_WAYOFTHRONE_RANKING = 455,
	UI_UNIT_TYPE_MOD_WAYOFTHRONE_RANKING_REWARD = 456,
	UI_UNIT_TYPE_PARTYMATCHING_UNIVERSE_SIMPLEMODE = 457,
	UI_UNIT_TYPE_EVENT_MISSION_REWARD = 458,
	UI_UNIT_TYPE_EMOTICONBALLON    = 459,
	UI_UNIT_TYPE_DUNGEON_TIMER     = 460,
	UI_UNIT_TYPE_MOVIE_PLAYER_FRAME = 461,
	UI_UNIT_TYPE_EPIC_GATE_COMMANDER_ENTRANCE_SPECIAL = 462,
	UI_UNIT_TYPE_PREVIEW_BOX       = 463,
	UI_UNIT_TYPE_CHARACTER_SELECT_PHOTO_SENSITIVE = 464,
	UI_UNIT_TYPE_TOWN_JUMPING      = 465,
	UI_UNIT_TYPE_VIRTUAL_KEYBOARD  = 466,
	UI_UNIT_TYPE_UI_TUTORIAL       = 467,
	UI_UNIT_TYPE_TRACK_MOVE_INPUTKEY = 468,
	UI_UNIT_TYPE_CASH_SHOP_STEAM_CHARGE_PAGE = 469,
	UI_UNIT_TYPE_GROWTH_MODE       = 470,
	UI_UNIT_TYPE_JUMPING_TUTORIAL_HUD = 471,
	UI_UNIT_TYPE_JUMPING_TUTORIAL_SKIP = 472,
	UI_UNIT_TYPE_PROCYON_COMPASS   = 473,
	UI_UNIT_TYPE_INGAME_MOVIE_PLAYER = 474,
	UI_UNIT_TYPE_ARKPASS_MAIN      = 475,
	UI_UNIT_TYPE_ARKPASS_MISSION   = 476,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMBRACELET_ENCHANT = 477,
	UI_UNIT_TYPE_IDENTITY_ELEMENTALMASTER = 478,
	UI_UNIT_TYPE_TOWN_DISPATCH_SHIP_REPAIR = 479,
	UI_UNIT_TYPE_LOATALK_CHAT      = 480,
	UI_UNIT_TYPE_LOATALK_INVITE    = 481,
	UI_UNIT_TYPE_LOATALK_MEMBER    = 482,
	UI_UNIT_TYPE_LOATALK_EMOTICON  = 483,
	UI_UNIT_TYPE_LOATALK_SETTING   = 484,
	UI_UNIT_TYPE_LOATALK_SETTING_ROOM = 485,
	UI_UNIT_TYPE_LOATALK_NOTICE    = 486,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMSET_TRANSFER = 487,
	UI_UNIT_TYPE_INTEGRATED_PRESET = 488,
	UI_UNIT_TYPE_NPC_INTERACTION_PET_ABILITY = 489,
	UI_UNIT_TYPE_NPC_INTERACTION_PET_EXP = 490,
	UI_UNIT_TYPE_NPC_INTERACTION_PET_PROMOTION = 491,
	UI_UNIT_TYPE_BARTER_PREVIEW    = 492,
	UI_UNIT_TYPE_TOWN_PET_FARM     = 493,
	UI_UNIT_TYPE_WEAPON_EVOLUTION  = 494,
	UI_UNIT_TYPE_TOWN_PET_FRIENDSHIP_ITEM_CHANGE = 495,
	UI_UNIT_TYPE_ESTHER_WEAPON_ASSEMBLY = 496,
	UI_UNIT_TYPE_BATTLEFIELD_REALM_RESULT = 497,
	UI_UNIT_TYPE_NPC_INTERACTION_ITEMBRACELET_UPGRADE = 498,
	UI_UNIT_TYPE_CUMULATIVE_POINT  = 499,
	UI_UNIT_TYPE_WELCOME_CHALLENGE = 500,
	UI_UNIT_TYPE_MAX               = 501
};


// Enum EFGame.EFConst.UISequenceCommandType
enum class EUISequenceCommandType : uint8_t
{
	UISEQUENCE_COMMAND_TYPE_NONE   = 0,
	UISEQUENCE_COMMAND_TYPE_SIMPLEMODE = 1,
	UISEQUENCE_COMMAND_TYPE_SCREENSHOTMODE = 2,
	UISEQUENCE_COMMAND_TYPE_UIPRESETMODE = 3,
	UISEQUENCE_COMMAND_TYPE_MAX    = 4
};


// Enum EFGame.EFConst.TownEffectSourceType
enum class ETownEffectSourceType : uint8_t
{
	TOWN_EFFECT_SOURCE_NONE        = 0,
	TOWN_EFFECT_SOURCE_RESEARCH    = 1,
	TOWN_EFFECT_SOURCE_BUILDING    = 2,
	TOWN_EFFECT_SOURCE_DRESS       = 3,
	TOWN_EFFECT_SOURCE_PLACEMENT   = 4,
	TOWN_EFFECT_SOURCE_MAX         = 5
};


// Enum EFGame.EFConst.TownDispatchMissionContentsType
enum class ETownDispatchMissionContentsType : uint8_t
{
	TOWN_DISPATCH_MISSION_CONTENTS_NONE = 0,
	TOWN_DISPATCH_MISSION_CONTENTS_RAID = 1,
	TOWN_DISPATCH_MISSION_CONTENTS_CUBE = 2,
	TOWN_DISPATCH_MISSION_CONTENTS_PLATINUM = 3,
	TOWN_DISPATCH_MISSION_CONTENTS_BOSS_RUSH = 4,
	TOWN_DISPATCH_MISSION_CONTENTS_CHAOS_DUNGEON = 5,
	TOWN_DISPATCH_MISSION_CONTENTS_LIFE = 6,
	TOWN_DISPATCH_MISSION_CONTENTS_MAX = 7
};


// Enum EFGame.EFConst.TownDispatchSkillType
enum class ETownDispatchSkillType : uint8_t
{
	TOWN_DISPATCH_SKILL_NONE       = 0,
	TOWN_DISPATCH_SKILL_OCEAN_AREA = 1,
	TOWN_DISPATCH_SKILL_HARDSHIP_MAIN = 2,
	TOWN_DISPATCH_SKILL_HARDSHIP_SUB = 3,
	TOWN_DISPATCH_SKILL_MAX        = 4
};


// Enum EFGame.EFConst.TownEffectMainCategory
enum class ETownEffectMainCategory : uint8_t
{
	TOWN_EFFECT_MAIN_CATEGORY_NONE = 0,
	TOWN_EFFECT_MAIN_CATEGORY_COMMON = 1,
	TOWN_EFFECT_MAIN_CATEGORY_MANSION = 2,
	TOWN_EFFECT_MAIN_CATEGORY_RESEARCH = 3,
	TOWN_EFFECT_MAIN_CATEGORY_ASSEMBLY = 4,
	TOWN_EFFECT_MAIN_CATEGORY_DISPATCH = 5,
	TOWN_EFFECT_MAIN_CATEGORY_TRADE = 6,
	TOWN_EFFECT_MAIN_CATEGORY_CHEF = 7,
	TOWN_EFFECT_MAIN_CATEGORY_EXPEDITION_SUPPORT = 8,
	TOWN_EFFECT_MAIN_CATEGORY_TRAINING = 9,
	TOWN_EFFECT_MAIN_CATEGORY_FARM = 10,
	TOWN_EFFECT_MAIN_CATEGORY_MAX  = 11
};


// Enum EFGame.EFConst.TownBuildingSizeType
enum class ETownBuildingSizeType : uint8_t
{
	TOWN_BUILDING_SIZE_TYPE_NORMAL = 0,
	TOWN_BUILDING_SIZE_TYPE_LARGE  = 1,
	TOWN_BUILDING_SIZE_TYPE_MAX    = 2
};


// Enum EFGame.EFConst.TargetUIType
enum class ETargetUIType : uint8_t
{
	TARGET_UI_NONE                 = 0,
	TARGET_UI_SPAWN_CALL           = 1,
	TARGET_UI_HIT_CALL             = 2,
	TARGET_UI_NO_CALL              = 3,
	TARGET_UI_MAX                  = 4
};


// Enum EFGame.EFConst.TutorialModeEventConditionType
enum class ETutorialModeEventConditionType : uint8_t
{
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_NONE = 0,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_GAUGE0_LESS = 1,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_GAUGE0_GREATER = 2,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_GAUGE1_LESS = 3,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_GAUGE1_GREATER = 4,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_STANCE = 5,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_IDENTITY_CATEGORY = 6,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_USE_SKILL = 7,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_STATUS_EFFECT = 8,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_STATUS_EFFECT_TYPE = 9,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_SKILL_ACTION = 10,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_SKILL_GRADE = 11,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_DAMAGE_HIT_OPTION_MASK = 12,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_ABNORMAL_MOVE_TYPE = 13,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_ABNORMAL_STATUS = 14,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_CHARGE_SKILL = 15,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_COMBO_SKILL = 16,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_HOLDING_SKILL = 17,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_STACK_SKILL = 18,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_CASTING_SKILL = 19,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_CHAIN_SKILL = 20,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_BLOCK_SKILL_TYPE = 21,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_USE_ITEM = 22,
	TUTORIAL_MODE_EVENT_CONDITION_TYPE_MAX = 23
};


// Enum EFGame.EFConst.TutorialModeEventType
enum class ETutorialModeEventType : uint8_t
{
	TUTORIAL_MODE_EVENT_TYPE_SKILL_START = 0,
	TUTORIAL_MODE_EVENT_TYPE_SKILL_FINISH = 1,
	TUTORIAL_MODE_EVENT_TYPE_IDENTITY_CHANGE = 2,
	TUTORIAL_MODE_EVENT_TYPE_COMMON_ACTION = 3,
	TUTORIAL_MODE_EVENT_TYPE_BLOCK_SKILL = 4,
	TUTORIAL_MODE_EVENT_TYPE_DAMAGE = 5,
	TUTORIAL_MODE_EVENT_TYPE_ABNORMAL_MOVE = 6,
	TUTORIAL_MODE_EVENT_TYPE_NPC_DESTRUSTION_PART = 7,
	TUTORIAL_MODE_EVENT_TYPE_ADD_STATUS_EFFECT = 8,
	TUTORIAL_MODE_EVENT_TYPE_REMOVE_STATUS_EFFECT = 9,
	TUTORIAL_MODE_EVENT_TYPE_MAX   = 10
};


// Enum EFGame.EFConst.TutorialModeUnitType
enum class ETutorialModeUnitType : uint8_t
{
	TUTORIAL_MODE_UNIT_TYPE_MOVE_SKILL = 0,
	TUTORIAL_MODE_UNIT_TYPE_GETUP_SKILL = 1,
	TUTORIAL_MODE_UNIT_TYPE_CASTING_SKILL = 2,
	TUTORIAL_MODE_UNIT_TYPE_CHARGE_SKILL = 3,
	TUTORIAL_MODE_UNIT_TYPE_HOLDING_SKILL = 4,
	TUTORIAL_MODE_UNIT_TYPE_COMBO_SKILL = 5,
	TUTORIAL_MODE_UNIT_TYPE_CHAIN_SKILL = 6,
	TUTORIAL_MODE_UNIT_TYPE_STACK_SKILL = 7,
	TUTORIAL_MODE_UNIT_TYPE_IDENTITY = 8,
	TUTORIAL_MODE_UNIT_TYPE_ABNORMAL_STATUS = 9,
	TUTORIAL_MODE_UNIT_TYPE_FREEZE_STRONG = 10,
	TUTORIAL_MODE_UNIT_TYPE_BATTLE_ITEM = 11,
	TUTORIAL_MODE_UNIT_TYPE_AWAKEN_SKILL = 12,
	TUTORIAL_MODE_UNIT_TYPE_BLOCK_SKILL = 13,
	TUTORIAL_MODE_UNIT_TYPE_FRONTAL_ATTACK = 14,
	TUTORIAL_MODE_UNIT_TYPE_BACK_ATTACK = 15,
	TUTORIAL_MODE_UNIT_TYPE_COUNTER_ATTACK = 16,
	TUTORIAL_MODE_UNIT_TYPE_NPC_DESTRUSTION_PART = 17,
	TUTORIAL_MODE_UNIT_TYPE_STATUS_EFFECT_CONFINEMENT = 18,
	TUTORIAL_MODE_UNIT_TYPE_MAX    = 19
};


// Enum EFGame.EFConst.TutorialModeGradeType
enum class ETutorialModeGradeType : uint8_t
{
	TUTORIAL_MODE_GRADE_TYPE_EASY  = 0,
	TUTORIAL_MODE_GRADE_TYPE_NORMAL = 1,
	TUTORIAL_MODE_GRADE_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.TutorialUIEventTargetSearchType
enum class ETutorialUIEventTargetSearchType : uint8_t
{
	TUTORIAL_UIEVENT_TARGETSEARCH_NONE = 0,
	TUTORIAL_UIEVENT_TARGETSEARCH_SKILLINDEX = 1,
	TUTORIAL_UIEVENT_TARGETSEARCH_ITEMINDEX = 2,
	TUTORIAL_UIEVENT_TARGETSEARCH_HOTKEY = 3,
	TUTORIAL_UIEVENT_TARGETSEARCH_ORDER = 4,
	TUTORIAL_UIEVENT_TARGETSEARCH_MAX = 5
};


// Enum EFGame.EFConst.TutorialUIEventTargetWidgetType
enum class ETutorialUIEventTargetWidgetType : uint8_t
{
	TUTORIAL_UIEVENT_TARGETWIDGET_NONE = 0,
	TUTORIAL_UIEVENT_TARGETWIDGET_SKILLQUICKSLOT = 1,
	TUTORIAL_UIEVENT_TARGETWIDGET_ITEMQUICKSLOT = 2,
	TUTORIAL_UIEVENT_TARGETWIDGET_SPECIALQUICKSLOT = 3,
	TUTORIAL_UIEVENT_TARGETWIDGET_INTERACTIONQUICKSLOT = 4,
	TUTORIAL_UIEVENT_TARGETWIDGET_QUICKMENUBUTTON = 5,
	TUTORIAL_UIEVENT_TARGETWIDGET_MINIMAP = 6,
	TUTORIAL_UIEVENT_TARGETWIDGET_EXPANDEDMINIMAP = 7,
	TUTORIAL_UIEVENT_TARGETWIDGET_IDENTITY = 8,
	TUTORIAL_UIEVENT_TARGETWIDGET_ITEMINVENTORY = 9,
	TUTORIAL_UIEVENT_TARGETWIDGET_MUSICBUTTON = 10,
	TUTORIAL_UIEVENT_TARGETWIDGET_TUTORIALSLOT = 11,
	TUTORIAL_UIEVENT_TARGETWIDGET_MAX = 12
};


// Enum EFGame.EFConst.TutorialConditionBindType
enum class ETutorialConditionBindType : uint8_t
{
	TUTORIAL_CONDITION_BIND_ACTIVATE = 0,
	TUTORIAL_CONDITION_BIND_COMPLETE = 1,
	TUTORIAL_CONDITION_BIND_FAIL   = 2,
	TUTORIAL_CONDITION_BIND_MAX    = 3
};


// Enum EFGame.EFConst.TutorialConditionType
enum class ETutorialConditionType : uint8_t
{
	TUTORIAL_CONDITION_ENTERVOLUME = 0,
	TUTORIAL_CONDITION_LEAVEVOLUME = 1,
	TUTORIAL_CONDITION_ACQUIREITEM = 2,
	TUTORIAL_CONDITION_USEITEM     = 3,
	TUTORIAL_CONDITION_ITEMDURABILITYCHANGE = 4,
	TUTORIAL_CONDITION_ACCEPTQUEST = 5,
	TUTORIAL_CONDITION_LEVELCHANGE = 6,
	TUTORIAL_CONDITION_LIFELEVELCHANGE = 7,
	TUTORIAL_CONDITION_ACQUIRESKILL = 8,
	TUTORIAL_CONDITION_USESKILL    = 9,
	TUTORIAL_CONDITION_CLASSCHANGE = 10,
	TUTORIAL_CONDITION_UIWINDOWOPEN = 11,
	TUTORIAL_CONDITION_UIWINDOWCLOSE = 12,
	TUTORIAL_CONDITION_STAT        = 13,
	TUTORIAL_CONDITION_IDENTITY    = 14,
	TUTORIAL_CONDITION_INTERACTPROP = 15,
	TUTORIAL_CONDITION_EXPLODETRAP = 16,
	TUTORIAL_CONDITION_ENDREMOTEEVENT = 17,
	TUTORIAL_CONDITION_PICKUPETHER = 18,
	TUTORIAL_CONDITION_DROPITEM    = 19,
	TUTORIAL_CONDITION_ACQUIRETITLE = 20,
	TUTORIAL_CONDITION_ACQUIREACHIEVEMENT = 21,
	TUTORIAL_CONDITION_COLOSSEUM   = 22,
	TUTORIAL_CONDITION_ANNOUNCE    = 23,
	TUTORIAL_CONDITION_ACQUIRE_ITEMCATEGORY = 24,
	TUTORIAL_CONDITION_HUD_CHANGE  = 25,
	TUTORIAL_CONDITION_COMPLETE_QUEST = 26,
	TUTORIAL_CONDITION_BUFF        = 27,
	TUTORIAL_CONDITION_ACQUIRE_CURRENCY = 28,
	TUTORIAL_CONDITION_EXPEDITION_LEVELCHANGE = 29,
	TUTORIAL_CONDITION_ACQUIRE_CREW = 30,
	TUTORIAL_CONDITION_VOYAGE_SUPPLY = 31,
	TUTORIAL_CONDITION_VOYAGE_EVENT = 32,
	TUTORIAL_CONDITION_VEHICLE     = 33,
	TUTORIAL_CONDITION_NPC_INTERACTION = 34,
	TUTORIAL_CONDITION_ENTER_ZONE  = 35,
	TUTORIAL_CONDITION_SCREENSHOTMODE = 36,
	TUTORIAL_CONDITION_APPROACH_NPC = 37,
	TUTORIAL_CONDITION_APPROACH_PROP = 38,
	TUTORIAL_CONDITION_VOYAGE_BOOSTGAUGE = 39,
	TUTORIAL_CONDITION_UICHILDWINDOWOPEN = 40,
	TUTORIAL_CONDITION_UICHILDWINDOWCLOSE = 41,
	TUTORIAL_CONDITION_ITEM_ABILITY = 42,
	TUTORIAL_CONDITION_LUCKYENERGY = 43,
	TUTORIAL_CONDITION_PET_ACTION  = 44,
	TUTORIAL_CONDITION_PC_STATE    = 45,
	TUTORIAL_CONDITION_MAX         = 46
};


// Enum EFGame.EFConst.TutorialEventType
enum class ETutorialEventType : uint8_t
{
	TUTORIAL_EVENT_NONE            = 0,
	TUTORIAL_EVENT_TUTORIALCONTROL = 1,
	TUTORIAL_EVENT_UIDIRECTSTART   = 2,
	TUTORIAL_EVENT_UIDIRECTEND     = 3,
	TUTORIAL_EVENT_UITUTORIALANNOUNCE = 4,
	TUTORIAL_EVENT_FREEZEGAME      = 5,
	TUTORIAL_EVENT_FREEZECLEARGAME = 6,
	TUTORIAL_EVENT_UICONTROL       = 7,
	TUTORIAL_EVENT_GAMENOTECONTROL = 8,
	TUTORIAL_EVENT_MAX             = 9
};


// Enum EFGame.EFConst.TutorialEventBindType
enum class ETutorialEventBindType : uint8_t
{
	TUTORIAL_EVENT_BIND_ACTIVATE   = 0,
	TUTORIAL_EVENT_BIND_DEACTIVATE = 1,
	TUTORIAL_EVENT_BIND_COMPLETE   = 2,
	TUTORIAL_EVENT_BIND_FAIL       = 3,
	TUTORIAL_EVENT_BIND_MAX        = 4
};


// Enum EFGame.EFConst.TargetingMethod
enum class ETargetingMethod : uint8_t
{
	TARGETING_NONE                 = 0,
	TARGETING_ENEMY                = 1,
	TARGETING_ALLY                 = 2,
	TARGETING_ONESELF              = 3,
	TARGETING_DIR_BY_INPUT         = 4,
	TARGETING_POS_BY_INPUT         = 5,
	TARGETING_ALLY_CORPSE          = 6,
	TARGETING_ENEMY_CORPSE         = 7,
	TARGETING_MAX                  = 8
};


// Enum EFGame.EFConst.SummonedNpcConditionalSkillType
enum class ESummonedNpcConditionalSkillType : uint8_t
{
	SUMMONED_NPC_CONDITIONAL_SKILL_TYPE_NORMAL = 0,
	SUMMONED_NPC_CONDITIONAL_SKILL_TYPE_TARGET_FIRST_DETECT = 1,
	SUMMONED_NPC_CONDITIONAL_SKILL_TYPE_MAX = 2
};


// Enum EFGame.EFConst.SummonedNpcShowType
enum class ESummonedNpcShowType : uint8_t
{
	SUMMONED_NPC_SHOW_TYPE_EVERYONE = 0,
	SUMMONED_NPC_SHOW_TYPE_LOCAL   = 1,
	SUMMONED_NPC_SHOW_TYPE_MAX     = 2
};


// Enum EFGame.EFConst.SYSTEMOPTION_SYSTEMKEY
enum class ESYSTEMOPTION_SYSTEMKEY : uint8_t
{
	SYSTEMOPTION_SYSTEMKEY_FIRSTCREATE = 0,
	SYSTEMOPTION_SYSTEMKEY_EXCESS_COMFIRM = 1,
	SYSTEMOPTION_SYSTEMKEY_RESERVE = 2,
	SYSTEMOPTION_SYSTEMKEY_RESERVE01 = 3,
	SYSTEMOPTION_SYSTEMKEY_RESERVE02 = 4,
	SYSTEMOPTION_SYSTEMKEY_RESERVE03 = 5,
	SYSTEMOPTION_SYSTEMKEY_MAX     = 6
};


// Enum EFGame.EFConst.SYSTEMOPTION_TAB
enum class ESYSTEMOPTION_TAB : uint8_t
{
	SYSTEMOPTION_TAB_VIDEO         = 0,
	SYSTEMOPTION_TAB_AUDIO         = 1,
	SYSTEMOPTION_TAB_ACCESSIBILITY = 2,
	SYSTEMOPTION_TAB_COMMUNITY     = 3,
	SYSTEMOPTION_TAB_COMMUNITY_CHATTING = 4,
	SYSTEMOPTION_TAB_COMMUNITY_MACRO = 5,
	SYSTEMOPTION_TAB_COMMUNITY_ALARM = 6,
	SYSTEMOPTION_TAB_GAMEPLAY      = 7,
	SYSTEMOPTION_TAB_GAMEPLAY_HUD  = 8,
	SYSTEMOPTION_TAB_GAMEPLAY_NAMETAG = 9,
	SYSTEMOPTION_TAB_KEY           = 10,
	SYSTEMOPTION_TAB_KEY_ACTION    = 11,
	SYSTEMOPTION_TAB_KEY_VOYAGE    = 12,
	SYSTEMOPTION_TAB_KEY_SKILL     = 13,
	SYSTEMOPTION_TAB_KEY_ITEM      = 14,
	SYSTEMOPTION_TAB_KEY_MENU      = 15,
	SYSTEMOPTION_TAB_KEY_SYSTEM    = 16,
	SYSTEMOPTION_TAB_KEY_MACRO     = 17,
	SYSTEMOPTION_TAB_CONTROLLER    = 18,
	SYSTEMOPTION_TAB_CONTROLLER_KEY = 19,
	SYSTEMOPTION_TAB_CONTROLLER_OPTION = 20,
	SYSTEMOPTION_TAB_MAX_INDEX     = 21,
	SYSTEMOPTION_TAB_MAX           = 22
};


// Enum EFGame.EFConst.SYSTEMOPTION_UI_DIRECTION
enum class ESYSTEMOPTION_UI_DIRECTION : uint8_t
{
	SYSTEMOPTION_DIRECTION_NONE    = 0,
	SYSTEMOPTION_DIRECTION_LEFT    = 1,
	SYSTEMOPTION_DIRECTION_RIGHT   = 2,
	SYSTEMOPTION_DIRECTION_BOTTOM  = 3,
	SYSTEMOPTION_DIRECTION_UP      = 4,
	SYSTEMOPTION_DIRECTION_MAX     = 5
};


// Enum EFGame.EFConst.SYSTEMOPTION_UI_COMPONENT
enum class ESYSTEMOPTION_UI_COMPONENT : uint8_t
{
	SYSTEMOPTION_COMBOBOX          = 0,
	SYSTEMOPTION_SLIDER            = 1,
	SYSTEMOPTION_CHECKBOX          = 2,
	SYSTEMOPTION_SHORTCUT          = 3,
	SYSTEMOPTION_COLOR             = 4,
	SYSTEMOPTION_LIST              = 5,
	SYSTEMOPTION_BUTTON            = 6,
	SYSTEMOPTION_TITLE             = 7,
	SYSTEMOPTION_SUBTITLE          = 8,
	SYSTEMOPTION_LINE              = 9,
	SYSTEMOPTION_TEXTINPUT         = 10,
	SYSTEMOPTION_LISTBOX           = 11,
	SYSTEMOPTION_IMAGE             = 12,
	SYSTEMOPTION_EPICTITLE         = 13,
	SYSTEMOPTION_COMPONENT_MAX     = 14,
	SYSTEMOPTION_MAX               = 15
};


// Enum EFGame.EFConst.SYSTEMOPTION_CATEGORY
enum class ESYSTEMOPTION_CATEGORY : uint8_t
{
	SYSTEMOPTION_CATEGORY_VIDEO    = 0,
	SYSTEMOPTION_CATEGORY_AUDIO    = 1,
	SYSTEMOPTION_CATEGORY_GAMEPLAY = 2,
	SYSTEMOPTION_CATEGORY_COMMUNITY = 3,
	SYSTEMOPTION_CATEGORY_CONTROLLER = 4,
	SYSTEMOPTION_CATEGORY_KEY      = 5,
	SYSTEMOPTION_CATEGORY_ACCESSIBILITY = 6,
	SYSTEMOPTION_CATEGORY_MAX      = 7
};


// Enum EFGame.EFConst.StatusEffectMindControlType
enum class EStatusEffectMindControlType : uint8_t
{
	STATUS_EFFECT_MIND_CONTROL_TYPE_ATTACK = 0,
	STATUS_EFFECT_MIND_CONTROL_TYPE_FOLLOW = 1,
	STATUS_EFFECT_MIND_CONTROL_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectIconShowType
enum class EStatusEffectIconShowType : uint8_t
{
	STATUS_EFFECT_ICON_SHOW_TYPE_NONE = 0,
	STATUS_EFFECT_ICON_SHOW_TYPE_ALL = 1,
	STATUS_EFFECT_ICON_SHOW_TYPE_CASTER_OR_PARTY = 2,
	STATUS_EFFECT_ICON_SHOW_TYPE_CASTER_OR_TARGET = 3,
	STATUS_EFFECT_ICON_SHOW_TYPE_MAX = 4
};


// Enum EFGame.EFConst.StatusEffectCollisionDisableType
enum class EStatusEffectCollisionDisableType : uint8_t
{
	STATUS_EFFECT_COLLISION_DISABLE_TYPE_ALL = 0,
	STATUS_EFFECT_COLLISION_DISABLE_TYPE_BODY = 1,
	STATUS_EFFECT_COLLISION_DISABLE_TYPE_MAX = 2
};


// Enum EFGame.EFConst.StatusEffectFontTarget
enum class EStatusEffectFontTarget : uint8_t
{
	STATUS_EFFECT_FONT_TARGET_NORMAL = 0,
	STATUS_EFFECT_FONT_TARGET_PARTY_CASTER = 1,
	STATUS_EFFECT_FONT_TARGET_SELFONLY = 2,
	STATUS_EFFECT_FONT_TARGET_MAX  = 3
};


// Enum EFGame.EFConst.StatusEffectTargetTooltipType
enum class EStatusEffectTargetTooltipType : uint8_t
{
	STATUS_EFFECT_TARGET_TOOLTIP_TYPE_NONE = 0,
	STATUS_EFFECT_TARGET_TOOLTIP_TYPE_SELF = 1,
	STATUS_EFFECT_TARGET_TOOLTIP_TYPE_PARTY = 2,
	STATUS_EFFECT_TARGET_TOOLTIP_TYPE_SELF_PARTY = 3,
	STATUS_EFFECT_TARGET_TOOLTIP_TYPE_MAX = 4
};


// Enum EFGame.EFConst.StatusEffectDetectType
enum class EStatusEffectDetectType : uint8_t
{
	STATUS_EFFECT_DETECT_TYPE_NONE = 0,
	STATUS_EFFECT_DETECT_TYPE_TRANSLUCENCE = 1,
	STATUS_EFFECT_DETECT_TYPE_NORMAL = 2,
	STATUS_EFFECT_DETECT_TYPE_MAX  = 3
};


// Enum EFGame.EFConst.SuperArmorTooltipType
enum class ESuperArmorTooltipType : uint8_t
{
	SUPER_ARMOR_TOOLTIP_TYPE_NONE  = 0,
	SUPER_ARMOR_TOOLTIP_TYPE_SWAY  = 1,
	SUPER_ARMOR_TOOLTIP_TYPE_HIT   = 2,
	SUPER_ARMOR_TOOLTIP_TYPE_HITSTATE = 3,
	SUPER_ARMOR_TOOLTIP_TYPE_MAX   = 4
};


// Enum EFGame.EFConst.StiffnessTooltipType
enum class EStiffnessTooltipType : uint8_t
{
	SKILL_STIFFNESS_TYPE_NONE      = 0,
	SKILL_STIFFNESS_TYPE_LOW       = 1,
	SKILL_STIFFNESS_TYPE_NORMAL    = 2,
	SKILL_STIFFNESS_TYPE_HIGH      = 3,
	SKILL_STIFFNESS_TYPE_HIGHER    = 4,
	SKILL_STIFFNESS_TYPE_HIGHEST   = 5,
	SKILL_STIFFNESS_TYPE_MAX       = 6
};


// Enum EFGame.EFConst.SkillMaxRangeProcType
enum class ESkillMaxRangeProcType : uint8_t
{
	SKILL_MAX_RANGE_PROC_TYPE_RANGE = 0,
	SKILL_MAX_RANGE_PROC_TYPE_WALK = 1,
	SKILL_MAX_RANGE_PROC_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.SkillViewCheckType
enum class ESkillViewCheckType : uint8_t
{
	SKILL_VIEW_CHECK_TYPE_NONE     = 0,
	SKILL_VIEW_CHECK_TYPE_NO_UPDATE_COLLISION_RADIUS = 1,
	SKILL_VIEW_CHECK_TYPE_UPDATE_COLLISION_RADIUS = 2,
	SKILL_VIEW_CHECK_TYPE_UPDATE_AREA_RADIUS = 3,
	SKILL_VIEW_CHECK_TYPE_UPDATE_NAV_MESH_OBSTACLE = 4,
	SKILL_VIEW_CHECK_TYPE_NO_UPDATE_VEHICLE_LIMIT = 5,
	SKILL_VIEW_CHECK_TYPE_MAX      = 6
};


// Enum EFGame.EFConst.SkillInvokeType
enum class ESkillInvokeType : uint8_t
{
	SKILL_INVOKE_TYPE_ACTIVE       = 0,
	SKILL_INVOKE_TYPE_PASSIVE      = 1,
	SKILL_INVOKE_TYPE_TOGGLE       = 2,
	SKILL_INVOKE_TYPE_MAX          = 3
};


// Enum EFGame.EFConst.SkillEffectStrength
enum class ESkillEffectStrength : uint8_t
{
	SKILL_EFFECT_STRENGTH          = 0,
	SKILL_EFFECT_STRENGTH01        = 1,
	SKILL_EFFECT_STRENGTH02        = 2,
	SKILL_EFFECT_STRENGTH03        = 3,
	SKILL_EFFECT_STRENGTH04        = 4,
	SKILL_EFFECT_STRENGTH05        = 5,
	SKILL_EFFECT_STRENGTH_MAX      = 6
};


// Enum EFGame.EFConst.SkillEffectPartsAttackType
enum class ESkillEffectPartsAttackType : uint8_t
{
	SKILL_EFFECT_PARTS_ATTACK_TYPE_NONE = 0,
	SKILL_EFFECT_PARTS_ATTACK_TYPE_PENETRATION = 1,
	SKILL_EFFECT_PARTS_ATTACK_TYPE_AMPUTATION = 2,
	SKILL_EFFECT_PARTS_ATTACK_TYPE_KNOCK = 3,
	SKILL_EFFECT_PARTS_ATTACK_TYPE_MAX = 4
};


// Enum EFGame.EFConst.ShopOpenType
enum class EShopOpenType : uint8_t
{
	SHOP_OPEN_TYPE_NONE            = 0,
	SHOP_OPEN_TYPE_SHOP            = 1,
	SHOP_OPEN_TYPE_BARTER          = 2,
	SHOP_OPEN_TYPE_AVATAR_BARTER   = 3,
	SHOP_OPEN_TYPE_MAX             = 4
};


// Enum EFGame.EFConst.ScreenShotModeType
enum class EScreenShotModeType : uint8_t
{
	SCREENSHOTMODE_TYPE_HIDE       = 0,
	SCREENSHOTMODE_TYPE_ABBREV_MODE = 1,
	SCREENSHOTMODE_TYPE_COMBAT_MODE = 2,
	SCREENSHOTMODE_TYPE_NOT_HIDE   = 3,
	SCREENSHOTMODE_MAX             = 4
};


// Enum EFGame.EFConst.SceneReplayCategory
enum class ESceneReplayCategory : uint8_t
{
	SCENE_REPLAY_CATEGORY_NONE     = 0,
	SCENE_REPLAY_CATEGORY_BEST_SCENE = 1,
	SCENE_REPLAY_CATEGORY_FRIENDSHIP_SCENE = 2,
	SCENE_REPLAY_CATEGORY_CONTENTS_SCENE = 3,
	SCENE_REPLAY_CATEGORY_PROLOGUE_SCENE = 4,
	SCENE_REPLAY_CATEGORY_MAX      = 5
};


// Enum EFGame.EFConst.SlotEffectType
enum class ESlotEffectType : uint8_t
{
	SLOT_EFFECT_TYPE_NONE          = 0,
	SLOT_EFFECT_TYPE_GEM_SYNTHESIZE = 1,
	SLOT_EFFECT_TYPE_MAX           = 2
};


// Enum EFGame.EFConst.RoomListFilterType
enum class ERoomListFilterType : uint8_t
{
	ROOM_LIST_FILTER_TYPE_NONE     = 0,
	ROOM_LIST_FILTER_TYPE_CONTENT_ONLY = 1,
	ROOM_LIST_FILTER_TYPE_LEVEL_ONLY = 2,
	ROOM_LIST_FILTER_TYPE_CHECKPOINT_ONLY = 3,
	ROOM_LIST_FILTER_TYPE_CONTENT_LEVEL = 4,
	ROOM_LIST_FILTER_TYPE_CONTENT_CHECKPOINT = 5,
	ROOM_LIST_FILTER_TYPE_LEVEL_CHECKPOINT = 6,
	ROOM_LIST_FILTER_TYPE_MAX      = 7
};


// Enum EFGame.EFConst.ResearchedRepairablePosition
enum class EResearchedRepairablePosition : uint8_t
{
	RESEARCHED_REPAIRABLE_POSITION_NONE = 0,
	RESEARCHED_REPAIRABLE_POSITION_EQUIPPED = 1,
	RESEARCHED_REPAIRABLE_POSITION_INVENTORY = 2,
	RESEARCHED_REPAIRABLE_POSITION_MAX = 3
};


// Enum EFGame.EFConst.ReplacementLookZoneType
enum class EReplacementLookZoneType : uint8_t
{
	REPLACEMENT_LOOK_ZONE_TYPE_NONE = 0,
	REPLACEMENT_LOOK_ZONE_TYPE_LOWEN = 1,
	REPLACEMENT_LOOK_ZONE_TYPE_LOSTSURVIVAL = 2,
	REPLACEMENT_LOOK_ZONE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.RepairableCategory
enum class ERepairableCategory : uint8_t
{
	REPAIRABLE_CATEGORY_ALL        = 0,
	REPAIRABLE_CATEGORY_EQUIPPED   = 1,
	REPAIRABLE_CATEGORY_INVENTORY  = 2,
	REPAIRABLE_CATEGORY_MAX        = 3
};


// Enum EFGame.EFConst.RestrictConditionType
enum class ERestrictConditionType : uint8_t
{
	RESTRICT_CONDITION_TYPE_NONE   = 0,
	RESTRICT_CONDITION_TYPE_ZONEBASE = 1,
	RESTRICT_CONDITION_TYPE_ZONETYPE = 2,
	RESTRICT_CONDITION_TYPE_MAX    = 3
};


// Enum EFGame.EFConst.QuestNoteAlignType
enum class EQuestNoteAlignType : uint8_t
{
	QUEST_NOTE_ALIGN_TYPE_CENTER   = 0,
	QUEST_NOTE_ALIGN_TYPE_LEFT     = 1,
	QUEST_NOTE_ALIGN_TYPE_RIGHT    = 2,
	QUEST_NOTE_ALIGN_TYPE_MAX      = 3
};


// Enum EFGame.EFConst.PolymorphHeadstatusType
enum class EPolymorphHeadstatusType : uint8_t
{
	POLYMORPH_HEADSTATUSTYPE_NONE  = 0,
	POLYMORPH_HEADSTATUSTYPE_NAMETAG = 1,
	POLYMORPH_HEADSTATUSTYPE_HIDE  = 2,
	POLYMORPH_HEADSTATUSTYPE_BALLOONONLY = 3,
	POLYMORPH_HEADSTATUSTYPE_MAX   = 4
};


// Enum EFGame.EFConst.PetEmotionEndCondition
enum class EPetEmotionEndCondition : uint8_t
{
	PET_EMOTION_END_CONDTION_NONE  = 0,
	PET_EMOTION_END_CONDTION_LOOP  = 1,
	PET_EMOTION_END_CONDTION_OWNER_COMMON_ACTION_END = 2,
	PET_EMOTION_END_CONDTION_MAX   = 3
};


// Enum EFGame.EFConst.PetEmotionTrigger
enum class EPetEmotionTrigger : uint8_t
{
	PET_EMOTION_TRIGGER_NONE       = 0,
	PET_EMOTION_TRIGGER_GET_ITEM   = 1,
	PET_EMOTION_TRIGGER_OWNER_LEVEL_UP = 2,
	PET_EMOTION_TRIGGER_OWNER_REVIVAL = 3,
	PET_EMOTION_TRIGGER_OWNER_DIED = 4,
	PET_EMOTION_TRIGGER_COMMONACTION_INTERACTION = 5,
	PET_EMOTION_TRIGGER_QUEST_CHECK = 6,
	PET_EMOTION_TRIGGER_DUEL       = 7,
	PET_EMOTION_TRIGGER_USE_PET_SKILL = 8,
	PET_EMOTION_TRIGGER_GET_GIFT   = 9,
	PET_EMOTION_TRIGGER_MAX        = 10
};


// Enum EFGame.EFConst.PcMapSymbolContentType
enum class EPcMapSymbolContentType : uint8_t
{
	PC_MAP_SYMOBL_CONTENT_TYPE_NONE = 0,
	PC_MAP_SYMOBL_CONTENT_TYPE_BATTLEFIELD_DEATH_MATCH = 1,
	PC_MAP_SYMOBL_CONTENT_TYPE_COOPERATION_QUEST = 2,
	PC_MAP_SYMOBL_CONTENT_TYPE_MAX = 3
};


// Enum EFGame.EFConst.CLASS_STAT_TYPE
enum class ECLASS_STAT_TYPE : uint8_t
{
	PC_STAT_TYPE_Attack            = 0,
	PC_STAT_TYPE_Agility           = 1,
	PC_STAT_TYPE_Defence           = 2,
	PC_STAT_TYPE_Support           = 3,
	PC_STAT_TYPE_Range             = 4,
	PC_STAT_TYPE_MAX               = 5
};


// Enum EFGame.EFConst.PartsAttackLevelTooltip
enum class EPartsAttackLevelTooltip : uint8_t
{
	PARTS_ATTACK_LEVEL_TOOLTIP_NONE = 0,
	PARTS_ATTACK_LEVEL_TOOLTIP     = 1,
	PARTS_ATTACK_LEVEL_TOOLTIP01   = 2,
	PARTS_ATTACK_LEVEL_TOOLTIP02   = 3,
	PARTS_ATTACK_LEVEL_TOOLTIP_MAX = 4
};


// Enum EFGame.EFConst.PartsAttacktooltipType
enum class EPartsAttacktooltipType : uint8_t
{
	PARTS_ATTACK_TOOLTIP_NONE      = 0,
	PARTS_ATTACK_TOOLTIP_PIERCE    = 1,
	PARTS_ATTACK_TOOLTIP_PIERCE01  = 2,
	PARTS_ATTACK_TOOLTIP_PIERCE02  = 3,
	PARTS_ATTACK_TOOLTIP_CUT       = 4,
	PARTS_ATTACK_TOOLTIP_CUT01     = 5,
	PARTS_ATTACK_TOOLTIP_CUT02     = 6,
	PARTS_ATTACK_TOOLTIP_HIT       = 7,
	PARTS_ATTACK_TOOLTIP_HIT01     = 8,
	PARTS_ATTACK_TOOLTIP_HIT02     = 9,
	PARTS_ATTACK_TOOLTIP_MAX       = 10
};


// Enum EFGame.EFConst.NpcParalyzationType
enum class ENpcParalyzationType : uint8_t
{
	NPC_PARALYZATION_UNKNOWN       = 0,
	NPC_PARALYZATION_NORMAL        = 1,
	NPC_PARALYZATION_ACTIVATE      = 2,
	NPC_PARALYZATION_IGNORE        = 3,
	NPC_PARALYZATION_LOCK          = 4,
	NPC_PARALYZATION_MAX           = 5
};


// Enum EFGame.EFConst.NPCInteractionFunctionSequenceType
enum class ENPCInteractionFunctionSequenceType : uint8_t
{
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_NONE = 0,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Talk = 1,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Quest = 2,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Shop = 3,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Present = 4,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Sailing = 5,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_RegisterBattleItem = 6,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Stash = 7,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Repair = 8,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Guild = 9,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Mail = 10,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Rumor = 11,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_CHARM_NO = 12,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Colosseum = 13,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Ability = 14,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Crystal = 15,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemAssembly = 16,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemDisassembly = 17,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Medal = 18,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_MedalQuest = 19,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Friendship = 20,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Barter = 21,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_SDMapExchange = 22,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_CoopQuest = 23,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Market = 24,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Evolution = 25,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Archology = 26,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Practice = 27,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Reforge = 28,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_CardBattle = 29,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_CardMake = 30,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Remodel = 31,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_MococoReward = 32,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_IslandHeartsReward = 33,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_IslandHeartsReturn = 34,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_Engrave = 35,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownNpcPoolNeria = 36,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownBuilding = 37,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownNpcPool = 38,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownFriendShipNpcPool = 39,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownDispatchRecruitCrew = 40,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownNpcInterview = 41,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownProduction = 42,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownDispatch = 43,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownDispatchShipManage = 44,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownDispatchCrewManage = 45,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownBuildingResearch = 46,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownDispatchResearch = 47,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_GiantHeartsReward = 48,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_GreatPicturesReward = 49,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarDisassembly = 50,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarReform = 51,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarCrestReform = 52,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_EnchantAvatar = 53,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarBarter = 54,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemEnhanceLevelUp = 55,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemEnhanceInherit = 56,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_PetSkill = 57,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemUpgrade = 58,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemSocketChange = 59,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemSocketAmplify = 60,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemOptionTransfer = 61,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemGemInstall = 62,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemGemTransform = 63,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemOptionExtract = 64,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_LifeToolRepair = 65,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemCalibrate = 66,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_VoyageAdventureReward = 67,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_WorldTreeLeafReward = 68,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AdventureMedalReward = 69,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_OrpheusStarReward = 70,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TripodOptionStorage = 71,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AncientOrbAppraise = 72,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AncientOrbResearch = 73,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_TownChef = 74,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemEnhanceLevelUpSpecial = 75,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemQualityUpgrade = 76,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarAssembly = 77,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_AvatarTint = 78,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemBraceletEnchant = 79,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemSetTransfer = 80,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_PetAbility = 81,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_PetExp = 82,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_PetPromotion = 83,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_EstherWeaponAssembly = 84,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_PetFriendshipItemChange = 85,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_EstherWeaponEvolution = 86,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_ItemBraceletUpgrade = 87,
	NPCINTERACTION_FUNCTION_SEQUENCE_TYPE_MAX = 88
};


// Enum EFGame.EFConst.NameShowTargetType
enum class ENameShowTargetType : uint8_t
{
	NAMESHOWTARGET_TYPE_NONE       = 0,
	NAMESHOWTARGET_TYPE_ALL        = 1,
	NAMESHOWTARGET_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.Nameplatetype
enum class ENameplatetype : uint8_t
{
	NAMEPLATE_TYPE_NONE            = 0,
	NAMEPLATE_TYPE_PLAYER_LOCAL    = 1,
	NAMEPLATE_TYPE_PLAYER_NEUTRAL  = 2,
	NAMEPLATE_TYPE_PLAYER_ENEMY    = 3,
	NAMEPLATE_TYPE_PLAYER_PARTY    = 4,
	NAMEPLATE_TYPE_PLAYER_GUILD    = 5,
	NAMEPLATE_TYPE_PLAYER_TROOP    = 6,
	NAMEPLATE_TYPE_QUEST_COOP_TEAM_A = 7,
	NAMEPLATE_TYPE_QUEST_COOP_TEAM_B = 8,
	NAMEPLATE_TYPE_NPC_NEUTRAL     = 9,
	NAMEPLATE_TYPE_NPC_FRIENDLY    = 10,
	NAMEPLATE_TYPE_NPC_ENEMY       = 11,
	NAMEPLATE_TYPE_NPC_ENEMY_BALANCE_26UP = 12,
	NAMEPLATE_TYPE_NPC_ENEMY_BALANCE_11UP25UP = 13,
	NAMEPLATE_TYPE_NPC_ENEMY_BALANCE_25DOWN10UP = 14,
	NAMEPLATE_TYPE_NPC_ENEMY_BALANCE_26DOWN = 15,
	NAMEPLATE_TYPE_MONSTER_FRIENDLY = 16,
	NAMEPLATE_TYPE_MONSTER_BALANCE_26UP = 17,
	NAMEPLATE_TYPE_MONSTER_BALANCE_11UP25UP = 18,
	NAMEPLATE_TYPE_MONSTER_BALANCE_25DOWN10UP = 19,
	NAMEPLATE_TYPE_MONSTER_BALANCE_26DOWN = 20,
	NAMEPLATE_TYPE_PROP            = 21,
	NAMEPLATE_TYPE_PROP_NOT_ENOUGH_LIFETIER = 22,
	NAMEPLATE_TYPE_MAX             = 23
};


// Enum EFGame.EFConst.NameCheckResultType
enum class ENameCheckResultType : uint8_t
{
	NAME_CHECK_RESULT_SUCCESS      = 0,
	NAME_CHECK_RESULT_NOT_ENOUGH_CHAR = 1,
	NAME_CHECK_RESULT_TOO_MANY_CHAR = 2,
	NAME_CHECK_RESULT_NOT_AVAILABLE_CHAR = 3,
	NAME_CHECK_RESULT_ERROR        = 4,
	NAME_CHECK_RESULT_MAX          = 5
};


// Enum EFGame.EFConst.MileStoneRewardType
enum class EMileStoneRewardType : uint8_t
{
	MILESTONE_REWARD_SHILLING      = 0,
	MILESTONE_REWARD_GOLD          = 1,
	MILESTONE_REWARD_LUPHEON_SEAL  = 2,
	MILESTONE_REWARD_PIRATE_COIN   = 3,
	MILESTONE_REWARD_ARCRASIUM     = 4,
	MILESTONE_REWARD_RUNE          = 5,
	MILESTONE_REWARD_BREATH_SUN    = 6,
	MILESTONE_REWARD_BREATH_MOON   = 7,
	MILESTONE_REWARD_BREATH_STAR   = 8,
	MILESTONE_REWARD_SECRET_MAP    = 9,
	MILESTONE_REWARD_ABILITY_STONE = 10,
	MILESTONE_REWARD_ENGRAVE_BOOK  = 11,
	MILESTONE_REWARD_PRESENT       = 12,
	MILESTONE_REWARD_CUISINE       = 13,
	MILESTONE_REWARD_BATTLE_ITEM   = 14,
	MILESTONE_REWARD_CREW          = 15,
	MILESTONE_REWARD_VESSEL_BLUEPRINT = 16,
	MILESTONE_REWARD_CARD          = 17,
	MILESTONE_REWARD_RIDES         = 18,
	MILESTONE_REWARD_SOLAR_STONE   = 19,
	MILESTONE_REWARD_ENHANCE_MATERIAL = 20,
	MILESTONE_REWARD_ENHANCE_ADDITIVE = 21,
	MILESTONE_REWARD_ENHANCE_BREAKTHROUGH = 22,
	MILESTONE_REWARD_MAX           = 23
};


// Enum EFGame.EFConst.MileStoneFilterOptionType
enum class EMileStoneFilterOptionType : uint8_t
{
	MILESTONE_FILTER_SINGLEPLAY    = 0,
	MILESTONE_FILTER_MULTIPLAY     = 1,
	MILESTONE_FILTER_PVE           = 2,
	MILESTONE_FILTER_PVP           = 3,
	MILESTONE_FILTER_CHAOSGATE     = 4,
	MILESTONE_FILTER_CHAOSDUNGEON  = 5,
	MILESTONE_FILTER_RAID          = 6,
	MILESTONE_FILTER_FIELDBOSS     = 7,
	MILESTONE_FILTER_TOWER         = 8,
	MILESTONE_FILTER_CUBE          = 9,
	MILESTONE_FILTER_CORRIDOR      = 10,
	MILESTONE_FILTER_PLATINUMFIELD = 11,
	MILESTONE_FILTER_COLOSSEUM     = 12,
	MILESTONE_FILTER_LUPHEON_SEAL  = 13,
	MILESTONE_FILTER_DUNGEON       = 14,
	MILESTONE_FILTER_ISLAND        = 15,
	MILESONTE_FILTER_ISLAND_GIENAH = 16,
	MILESONTE_FILTER_ISLAND_PROCYON = 17,
	MILESTONE_FILTER_SECRETDUNGEON = 18,
	MILESTONE_FILTER_REVERSE_RUIN  = 19,
	MILESTONE_FILTER_MAX           = 20,
	MileStoneFilterOptionType_MAX  = 21
};


// Enum EFGame.EFConst.MileStoneUnlockType
enum class EMileStoneUnlockType : uint8_t
{
	MILESTONE_CONTENTS_UNLOCK_NONE = 0,
	MILESTONE_CONTENTS_UNLOCK_CUBE_NORMAL_DIAOMND = 1,
	MILESTONE_CONTENTS_UNLOCK_TOWER_SHADOW_FLOORLEVEL = 2,
	MILESTONE_CONTENTS_UNLOCK_RAID_STEP = 3,
	MILESTONE_CONTENTS_UNLOCK_QUEST_CLEAR = 4,
	MILESTONE_CONTENTS_UNLOCK_CHARACTER_LEVEL = 5,
	MILESTONE_CONTENTS_UNLOCK_ITEM_LEVEL = 6,
	MILESTONE_CONTENTS_UNLOCK_MAX  = 7
};


// Enum EFGame.EFConst.MileStoneCategory
enum class EMileStoneCategory : uint8_t
{
	MILESTONE_CATEGORY_CONTENTS    = 0,
	MILESTONE_CATEGORY_REWARD      = 1,
	MILESTONE_CATEGORY_MAX         = 2
};


// Enum EFGame.EFConst.MileStoneType
enum class EMileStoneType : uint8_t
{
	MILESTONE_CONTENTS_NONE        = 0,
	MILESTONE_CONTENTS_CUBE        = 1,
	MILESTONE_CONTENTS_PLATINUM_FIELD = 2,
	MILESTONE_CONTENTS_TOWER       = 3,
	MILESTONE_CONTENTS_CHAOSGATE   = 4,
	MILESTONE_CONTENTS_RAID        = 5,
	MILESTONE_CONTENTS_FIELD_BOSS  = 6,
	MILESTONE_CONTENTS_ISLAND      = 7,
	MILESTONE_CONTENTS_ISLAND_GIENAH = 8,
	MILESTONE_CONTENTS_ISLAND_PROCYON = 9,
	MILESTONE_CONTENTS_CHAOS_DUNGEON = 10,
	MILESTONE_CONTENTS_COLOSSEUM   = 11,
	MILESTONE_CONTENTS_DUNGEON     = 12,
	MILESTONE_CONTENTS_CORRIDOR    = 13,
	MILESTONE_CONTENTS_LUPHEON_SEAL = 14,
	MILESTONE_CONTENTS_CARDBATTLE  = 15,
	MILESTONE_CONTENTS_ETC         = 16,
	MILESTONE_CONTENTS_BATTLEFIELD = 17,
	MILESTONE_CONTENTS_VOYAGE      = 18,
	MILESTONE_CONTENTS_EXCHANGE    = 19,
	MILESTONE_CONTENTS_SECRETDUNGEON = 20,
	MILESTONE_CONTENTS_ITEM_ENHANCE = 21,
	MILESTONE_CONTENTS_REVERSE_RUIN = 22,
	MILESTONE_CONTENTS_MAX         = 23
};


// Enum EFGame.EFConst.MoneyCategory
enum class EMoneyCategory : uint8_t
{
	MONEY_CATEGORY_BASIC           = 0,
	MONEY_CATEGORY_ACCOUNT         = 1,
	MONEY_CATEGORY_MESSENGERMEDAL  = 2,
	MONEY_CATEGORY_VOYAGE          = 3,
	MONEY_CATEGORY_CONTENTS        = 4,
	MONEY_CATEGORY_AREA            = 5,
	MONEY_CATEGORY_MAX             = 6
};


// Enum EFGame.EFConst.BattleFieldIconType
enum class EBattleFieldIconType : uint8_t
{
	BATTLEFIELD_ICON_DEATH_MATCH_A = 0,
	BATTLEFIELD_ICON_FIELD_BOSS_A  = 1,
	BATTLEFIELD_ICON_CHAOSGATE_A   = 2,
	BATTLEFIELD_ICON_CHAOSGATE_B   = 3,
	BATTLEFIELD_ICON_CHAOSGATE_C   = 4,
	BATTLEFIELD_ICON_CHAOSGATE_D   = 5,
	BATTLEFIELD_ICON_FORTRESS_A    = 6,
	BATTLEFIELD_ICON_ISLAND_OCCUPY_PVP = 7,
	BATTLEFIELD_ICON_ISLAND_OCCUPY_PVE = 8,
	BATTLEFIELD_ICON_MAX           = 9
};


// Enum EFGame.EFConst.ModIconType
enum class EModIconType : uint8_t
{
	MOD_ICON_CUBE                  = 0,
	MOD_ICON_CUBE_ELITE            = 1,
	MOD_ICON_TOWER_A               = 2,
	MOD_ICON_PLATINUM_A            = 3,
	MOD_ICON_PLATINUM_B            = 4,
	MOD_ICON_BOSS_RUSH             = 5,
	MOD_ICON_TOWER_B               = 6,
	MOD_ICON_CUBE_DIMENSION        = 7,
	MOD_ICON_TOWER_C               = 8,
	MOD_ICON_MAX                   = 9
};


// Enum EFGame.EFConst.MapSymbolContentType
enum class EMapSymbolContentType : uint8_t
{
	MAP_SYMBOL_CONTENT_TYPE_NONE   = 0,
	MAP_SYMBOL_CONTENT_TYPE_CHAOS_GATE_PC = 1,
	MAP_SYMBOL_CONTENT_TYPE_PARTY_MEMBER = 2,
	MAP_SYMBOL_CONTENT_TYPE_BECHASED_MONSTER = 3,
	MAP_SYMBOL_CONTENT_TYPE_QUEST_ZONE = 4,
	MAP_SYMBOL_CONTENT_TYPE_TRACE_QUEST_ZONE = 5,
	MAP_SYMBOL_CONTENT_TYPE_MAP_MARKER = 6,
	MAP_SYMBOL_CONTENT_TYPE_MAP_MARKER01 = 7,
	MAP_SYMBOL_CONTENT_TYPE_MAP_MARKER02 = 8,
	MAP_SYMBOL_CONTENT_TYPE_MAP_MARKER03 = 9,
	MAP_SYMBOL_CONTENT_TYPE_MAP_MARKER_LINKLOCATION = 10,
	MAP_SYMBOL_CONTENT_TYPE_FRIENDSHIP_NPC = 11,
	MAP_SYMBOL_CONTENT_TYPE_ITEM_DICTIONARY = 12,
	MAP_SYMBOL_CONTENT_TYPE_DYNAMIC_ISLAND = 13,
	MAP_SYMBOL_CONTENT_TYPE_DYNAMIC_ISLAND_PK = 14,
	MAP_SYMBOL_CONTENT_TYPE_DYNAMIC_ISLAND_CONDITIONAL_PK = 15,
	MAP_SYMBOL_CONTENT_TYPE_ENEMY_PC = 16,
	MAP_SYMBOL_CONTENT_TYPE_PC     = 17,
	MAP_SYMBOL_CONTENT_TYPE_PC_DEAD = 18,
	MAP_SYMBOL_CONTENT_TYPE_PC_GADGET_SUB = 19,
	MAP_SYMBOL_CONTENT_TYPE_PC_HIGH_SCORER_SUB = 20,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_ENEMY = 21,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_PARTY = 22,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_HIGH_SCORE_PARTY = 23,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_HIGH_SCORE = 24,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_HIGH_SCORE_ENEMY = 25,
	MAP_SYMBOL_CONTENT_TYPE_PC_BATTLEFIELD_ALLY = 26,
	MAP_SYMBOL_CONTENT_TYPE_SMARTPING_ASSEMBLE = 27,
	MAP_SYMBOL_CONTENT_TYPE_SMARTPING_MOVING = 28,
	MAP_SYMBOL_CONTENT_TYPE_SMARTPING_DANGER = 29,
	MAP_SYMBOL_CONTENT_TYPE_SMARTPING_HELP = 30,
	MAP_SYMBOL_CONTENT_TYPE_SMARTPING_TARGETING = 31,
	MAP_SYMBOL_CONTENT_TYPE_VOYAGE_DESTINATION = 32,
	MAP_SYMBOL_CONTENT_TYPE_VOYAGE_DESTINATION01 = 33,
	MAP_SYMBOL_CONTENT_TYPE_VOYAGE_DESTINATION02 = 34,
	MAP_SYMBOL_CONTENT_TYPE_VOYAGE_DESTINATION03 = 35,
	MAP_SYMBOL_CONTENT_TYPE_VOYAGE_DESTINATION04 = 36,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE = 37,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE01 = 38,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE02 = 39,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE03 = 40,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE04 = 41,
	MAP_SYMBOL_CONTENT_TYPE_TROOP_MEMBER_COLOR_TYPE05 = 42,
	MAP_SYMBOL_CONTENT_TYPE_ALARM  = 43,
	MAP_SYMBOL_CONTENT_TYPE_PC_RANK_SUB = 44,
	MAP_SYMBOL_CONTENT_TYPE_PC_RANK_SUB01 = 45,
	MAP_SYMBOL_CONTENT_TYPE_PC_RANK_SUB02 = 46,
	MAP_SYMBOL_CONTENT_TYPE_MAX    = 47
};


// Enum EFGame.EFConst.MapSymbolSearchType
enum class EMapSymbolSearchType : uint8_t
{
	MAP_SYMBOL_SEARCH_TYPE_ALL     = 0,
	MAP_SYMBOL_SEARCH_TYPE_TITLE_ONLY = 1,
	MAP_SYMBOL_SEARCH_TYPE_CONTENT_ONLY = 2,
	MAP_SYMBOL_SEARCH_TYPE_MAX     = 3
};


// Enum EFGame.EFConst.MapSymbolKeyType
enum class EMapSymbolKeyType : uint8_t
{
	MAP_SYMBOL_KEY_TYPE_PARTY      = 0,
	MAP_SYMBOL_KEY_TYPE_OBJECT     = 1,
	MAP_SYMBOL_KEY_TYPE_SPANWINDEX = 2,
	MAP_SYMBOL_KEY_TYPE_PC         = 3,
	MAP_SYMBOL_KEY_TYPE_QUEST      = 4,
	MAP_SYMBOL_KEY_TYPE_CHAOS_GATE_PORTAL = 5,
	MAP_SYMBOL_KEY_TYPE_BECHASED_MONSTER = 6,
	MAP_SYMBOL_KEY_TYPE_CHAOS_GATE_MONSTER = 7,
	MAP_SYMBOL_KEY_TYPE_SCANED_TREE = 8,
	MAP_SYMBOL_KEY_TYPE_MAP_MARKER_PARTY = 9,
	MAP_SYMBOL_KEY_TYPE_MAP_MARKER_LINK_LOCATION = 10,
	MAP_SYMBOL_KEY_TYPE_CLIENT_TRAP = 11,
	MAP_SYMBOL_KEY_TYPE_ITEMDICTIONARY = 12,
	MAP_SYMBOL_KEY_TYPE_DYNAMIC_ISLAND = 13,
	MAP_SYMBOL_KEY_TYPE_SPOT       = 14,
	MAP_SYMBOL_KEY_TYPE_TOWN       = 15,
	MAP_SYMBOL_KEY_TYPE_SMARTPING  = 16,
	MAP_SYMBOL_KEY_TYPE_VOYAGE_DESTINATION = 17,
	MAP_SYMBOL_KEY_TYPE_TROOP      = 18,
	MAP_SYMBOL_KEY_TYPE_ALARM      = 19,
	MAP_SYMBOL_KEY_TYPE_SAFETY_ZONE = 20,
	MAP_SYMBOL_KEY_TYPE_MAX        = 21
};


// Enum EFGame.EFConst.MapSymbolAlignType
enum class EMapSymbolAlignType : uint8_t
{
	MAP_SYMBOL_ALIGN_TYPE_CENTER   = 0,
	MAP_SYMBOL_ALIGN_TYPE_BOTTOM_CENTER = 1,
	MAP_SYMBOL_ALIGN_TYPE_MAX      = 2
};


// Enum EFGame.EFConst.MapSymbolSubCategory
enum class EMapSymbolSubCategory : uint8_t
{
	MAP_SYMBOL_SUB_CATEGORY_TOP_PRIORITY = 0,
	MAP_SYMBOL_SUB_CATEGORY_CHARACTER_PARTY = 1,
	MAP_SYMBOL_SUB_CATEGORY_CHARACTER_MONSTER = 2,
	MAP_SYMBOL_SUB_CATEGORY_CHARACTER_TROOP = 3,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_INSTANCE_FIELD = 4,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_INSTANCE_DUNGEON = 5,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_CINEMATIC_DUNGEON = 6,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_RAID_DUNGEON = 7,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_CHAOS_GATE = 8,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_PORTAL = 9,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_RETURN_PROP = 10,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_SQUAREHOLE = 11,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_PORT = 12,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_ISLAND = 13,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_EXPLORATION_MATTER = 14,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_FLOATING_MATTER = 15,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_DISCOVERY = 16,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_OCEAN_INSTANCE_DUNGEON = 17,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_OCEAN_CINEMATIC_DUNGEON = 18,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_GHOST_SHIP = 19,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_HELL_DUNGEON = 20,
	MAP_SYMBOL_SUB_CATEGORY_BACKGROUND_DISCOVERY_SUPPLY_POINT = 21,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_MAIN = 22,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_BASIC = 23,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_INSTANCE_DUNGEON = 24,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_RESERVED = 25,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_UNEXPECTED = 26,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_CONTINENT = 27,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_COOPERATION = 28,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_ADVENTURE = 29,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_PERIOD = 30,
	MAP_SYMBOL_SUB_CATEGORY_QUEST_TOWN = 31,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_MINING = 32,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_LUMBERING = 33,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_HERBALISM = 34,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_FISHING = 35,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_HUNTING = 36,
	MAP_SYMBOL_SUB_CATEGORY_LIFE_LEVEL_ARCHAEOLOGY = 37,
	MAP_SYMBOL_SUB_CATEGORY_NPC_EQUIPMENT = 38,
	MAP_SYMBOL_SUB_CATEGORY_NPC_GENERAL = 39,
	MAP_SYMBOL_SUB_CATEGORY_NPC_TOOL = 40,
	MAP_SYMBOL_SUB_CATEGORY_NPC_SPECIAL = 41,
	MAP_SYMBOL_SUB_CATEGORY_NPC_TRADE = 42,
	MAP_SYMBOL_SUB_CATEGORY_NPC_ETC = 43,
	MAP_SYMBOL_SUB_CATEGORY_NPC_MANUFACTURE = 44,
	MAP_SYMBOL_SUB_CATEGORY_NPC_CRAFT = 45,
	MAP_SYMBOL_SUB_CATEGORY_NPC_REPAIR = 46,
	MAP_SYMBOL_SUB_CATEGORY_NPC_STORAGE = 47,
	MAP_SYMBOL_SUB_CATEGORY_NPC_POST = 48,
	MAP_SYMBOL_SUB_CATEGORY_NPC_CRISTAL = 49,
	MAP_SYMBOL_SUB_CATEGORY_NPC_ABILITY = 50,
	MAP_SYMBOL_SUB_CATEGORY_NPC_MESSENGER = 51,
	MAP_SYMBOL_SUB_CATEGORY_NPC_COLOSSEUM = 52,
	MAP_SYMBOL_SUB_CATEGORY_NPC_MEDAL = 53,
	MAP_SYMBOL_SUB_CATEGORY_NPC_AUCTION = 54,
	MAP_SYMBOL_SUB_CATEGORY_NPC_GUILD = 55,
	MAP_SYMBOL_SUB_CATEGORY_NPC_SAILING = 56,
	MAP_SYMBOL_SUB_CATEGORY_NPC_PET = 57,
	MAP_SYMBOL_SUB_CATEGORY_NPC_MERCENARY = 58,
	MAP_SYMBOL_SUB_CATEGORY_NPC_INTIMATE = 59,
	MAP_SYMBOL_SUB_CATEGORY_NPC_RAID = 60,
	MAP_SYMBOL_SUB_CATEGORY_NPC_CARD = 61,
	MAP_SYMBOL_SUB_CATEGORY_NPC_STOCK = 62,
	MAP_SYMBOL_SUB_CATEGORY_NPC_ENHANCEMENT = 63,
	MAP_SYMBOL_SUB_CATEGORY_CONTENT = 64,
	MAP_SYMBOL_SUB_CATEGORY_OCEAN_AREA = 65,
	MAP_SYMBOL_SUB_CATEGORY_ETC_MOCOCO = 66,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_RESERCH = 67,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_DISPATCH = 68,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_ASSEMBLY = 69,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_SHEF = 70,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_TRADER = 71,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_MANSION = 72,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_TRAINING = 73,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_JUMPING = 74,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_FARM = 75,
	MAP_SYMBOL_SUB_CATEGORY_TOWN_PET = 76,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID = 77,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID_DIFFICULTY = 78,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID_ABYSS = 79,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID_COMMANDER = 80,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_DUNGEON_CHAOS = 81,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_DUNGEON_ABYSS = 82,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_MOD_CUBE = 83,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_MOD_TOWER = 84,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_MOD_BOSSRUSH = 85,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_MOD_PLATINUM = 86,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_PVP_COLOSSEUM = 87,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_PVP_BATTLEFIELD = 88,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_THRONE = 89,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID_COMMANDER_SPECIAL = 90,
	MAP_SYMBOL_SUB_CATEGORY_ENTRANCE_RAID_COMMANDER_SPECIAL_ALT = 91,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_ENHANCE = 92,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_UPGRADE = 93,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_ENGRAVE = 94,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_ABILITY = 95,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_GEM = 96,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_TRIPOD = 97,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_READJUST = 98,
	MAP_SYMBOL_SUB_CATEGORY_ITEM_BRACELET_ENCHANT = 99,
	MAP_SYMBOL_SUB_CATEGORY_MAX    = 100
};


// Enum EFGame.EFConst.MapSymbolCategory
enum class EMapSymbolCategory : uint8_t
{
	MAP_SYMBOL_CATEGORY_TOP_PRIORITY = 0,
	MAP_SYMBOL_CATEGORY_CHARACTER  = 1,
	MAP_SYMBOL_CATEGORY_QUEST      = 2,
	MAP_SYMBOL_CATEGORY_BACKGROUND = 3,
	MAP_SYMBOL_CATEGORY_ENTRANCE   = 4,
	MAP_SYMBOL_CATEGORY_NPC        = 5,
	MAP_SYMBOL_CATEGORY_ITEM       = 6,
	MAP_SYMBOL_CATEGORY_LIFE_LEVEL = 7,
	MAP_SYMBOL_CATEGORY_CONTENT    = 8,
	MAP_SYMBOL_CATEGORY_OCEAN_AREA = 9,
	MAP_SYMBOL_CATEGORY_TOWN       = 10,
	MAP_SYMBOL_CATEGORY_ETC        = 11,
	MAP_SYMBOL_CATEGORY_MAX        = 12
};


// Enum EFGame.EFConst.MaterialHittedSound
enum class EMaterialHittedSound : uint8_t
{
	MATERIAL_HITTEDSOUND_NONE      = 0,
	MATERIAL_HITTEDSOUND_WATER     = 1,
	MATERIAL_HITTEDSOUND_AIR       = 2,
	MATERIAL_HITTEDSOUND_STONE     = 3,
	MATERIAL_HITTEDSOUND_FLESH     = 4,
	MATERIAL_HITTEDSOUND_METAL     = 5,
	MATERIAL_HITTEDSOUND_PLATE     = 6,
	MATERIAL_HITTEDSOUND_WOOD      = 7,
	MATERIAL_HITTEDSOUND_LEATHER   = 8,
	MATERIAL_HITTEDSOUND_ICE       = 9,
	MATERIAL_HITTEDSOUND_LAVA      = 10,
	MATERIAL_HITTEDSOUND_MUCUS     = 11,
	MATERIAL_HITTEDSOUND_MAX       = 12
};


// Enum EFGame.EFConst.MaterialArmor
enum class EMaterialArmor : uint8_t
{
	MATERIAL_ARMOR_NONE            = 0,
	MATERIAL_ARMOR_WATER           = 1,
	MATERIAL_ARMOR_AIR             = 2,
	MATERIAL_ARMOR_STONE           = 3,
	MATERIAL_ARMOR_FLESH1          = 4,
	MATERIAL_ARMOR_FLESH2          = 5,
	MATERIAL_ARMOR_METAL           = 6,
	MATERIAL_ARMOR_WOOD            = 7,
	MATERIAL_ARMOR_LEATHER         = 8,
	MATERIAL_ARMOR_ICE             = 9,
	MATERIAL_ARMOR_LAVA            = 10,
	MATERIAL_ARMOR_MUCUS           = 11,
	MATERIAL_ARMOR_EXOSKELETAL     = 12,
	MATERIAL_ARMOR_MAX             = 13
};


// Enum EFGame.EFConst.MaterialWeaponAttribute
enum class EMaterialWeaponAttribute : uint8_t
{
	MATERIAL_WEAPON_ATTRIBUTE_NONE = 0,
	MATERIAL_WEAPON_ATTRIBUTE_FIRE = 1,
	MATERIAL_WEAPON_ATTRIBUTE_ICE  = 2,
	MATERIAL_WEAPON_ATTRIBUTE_ELECTRIC = 3,
	MATERIAL_WEAPON_ATTRIBUTE_WIND = 4,
	MATERIAL_WEAPON_ATTRIBUTE_EARTH = 5,
	MATERIAL_WEAPON_ATTRIBUTE_DARK = 6,
	MATERIAL_WEAPON_ATTRIBUTE_HOLY = 7,
	MATERIAL_WEAPON_ATTRIBUTE_WATER = 8,
	MATERIAL_WEAPON_ATTRIBUTE_LAVA = 9,
	MATERIAL_WEAPON_ATTRIBUTE_MAX  = 10
};


// Enum EFGame.EFConst.MaterialWeapon
enum class EMaterialWeapon : uint8_t
{
	MATERIAL_WEAPON_NONE           = 0,
	MATERIAL_WEAPON_SWORD          = 1,
	MATERIAL_WEAPON_BOW            = 2,
	MATERIAL_WEAPON_GUN            = 3,
	MATERIAL_WEAPON_SPEAR          = 4,
	MATERIAL_WEAPON_GAUNTLET       = 5,
	MATERIAL_WEAPON_INSTRUMENT     = 6,
	MATERIAL_WEAPON_HAMMER         = 7,
	MATERIAL_WEAPON_DAGGER         = 8,
	MATERIAL_WEAPON_WAND           = 9,
	MATERIAL_WEAPON_CARDDECK       = 10,
	MATERIAL_WEAPON_SYMBOL         = 11,
	MATERIAL_WEAPON_LONGLANCE      = 12,
	MATERIAL_WEAPON_SHORTLANCE     = 13,
	MATERIAL_WEAPON_DEMONIC_WEAPON = 14,
	MATERIAL_WEAPON_DEMONCLOW      = 15,
	MATERIAL_WEAPON_BLADE_DUELSWORD = 16,
	MATERIAL_WEAPON_BLADE_LONGSWORD = 17,
	MATERIAL_WEAPON_HOLYSWORD      = 18,
	MATERIAL_WEAPON_HOLYSWORD_ENHANCED = 19,
	MATERIAL_WEAPON_SCOUTER_LASER  = 20,
	MATERIAL_WEAPON_REAPER_DAGGER  = 21,
	MATERIAL_WEAPON_SHOTGUN        = 22,
	MATERIAL_WEAPON_RIFLE          = 23,
	MATERIAL_WEAPON_SORCERESS_GIANTSTAFF = 24,
	MATERIAL_WEAPON_PEN            = 25,
	MATERIAL_WEAPON_MAX            = 26
};


// Enum EFGame.EFConst.LifeVesselUIType
enum class ELifeVesselUIType : uint8_t
{
	LIFEVESSEL_UITYPE_NONE         = 0,
	LIFEVESSEL_UITYPE              = 1,
	LIFEVESSEL_UITYPE01            = 2,
	LIFEVESSEL_UITYPE02            = 3,
	LIFEVESSEL_UITYPE03            = 4,
	LIFEVESSEL_UITYPE04            = 5,
	LIFEVESSEL_UITYPE05            = 6,
	LIFEVESSEL_UITYPE06            = 7,
	LIFEVESSEL_UITYPE07            = 8,
	LIFEVESSEL_UITYPE08            = 9,
	LIFEVESSEL_UITYPE09            = 10,
	LIFEVESSEL_UITYPE10            = 11,
	LIFEVESSEL_UITYPE11            = 12,
	LIFEVESSEL_UITYPE12            = 13,
	LIFEVESSEL_UITYPE13            = 14,
	LIFEVESSEL_UITYPE14            = 15,
	LIFEVESSEL_UITYPE15            = 16,
	LIFEVESSEL_UITYPE16            = 17,
	LIFEVESSEL_UITYPE17            = 18,
	LIFEVESSEL_UITYPE18            = 19,
	LIFEVESSEL_UITYPE19            = 20,
	LIFEVESSEL_UITYPE_MAX          = 21
};


// Enum EFGame.EFConst.ItemDictionaryLinkType
enum class EItemDictionaryLinkType : uint8_t
{
	ITEM_DICTIONARY_LINK_NONE      = 0,
	ITEM_DICTIONARY_LINK_ITEM      = 1,
	ITEM_DICTIONARY_LINK_SUB_CATEGORY = 2,
	ITEM_DICTIONARY_LINK_MAIN_CATEGORY = 3,
	ITEM_DICTIONARY_LINK_MAX       = 4
};


// Enum EFGame.EFConst.ItemAccessoryCategory
enum class EItemAccessoryCategory : uint8_t
{
	ITEM_ACCESSORY_CATEGORY_NONE   = 0,
	ITEM_ACCESSORY_CATEGORY_NECKLACE = 1,
	ITEM_ACCESSORY_CATEGORY_EARRING = 2,
	ITEM_ACCESSORY_CATEGORY_RING   = 3,
	ITEM_ACCESSORY_CATEGORY_MAX    = 4
};


// Enum EFGame.EFConst.ItemStorageCategory
enum class EItemStorageCategory : uint8_t
{
	ITEM_STORAGE_CATEGORY_NA       = 0,
	ITEM_STORAGE_CATEGORY_EQUIP    = 1,
	ITEM_STORAGE_CATEGORY_INVEN    = 2,
	ITEM_STORAGE_CATEGORY_STASH    = 3,
	ITEM_STORAGE_CATEGORY_MAX      = 4
};


// Enum EFGame.EFConst.ItemDictionaryContentSubCategory
enum class EItemDictionaryContentSubCategory : uint8_t
{
	ITEM_DICTIONARY_CONTENT_SUB_NONE = 0,
	ITEM_DICTIONARY_CONTENT_SUB_ALL = 1,
	ITEM_DICTIONARY_CONTENT_SUB_MONSTER_NORMAL = 2,
	ITEM_DICTIONARY_CONTENT_SUB_MONSTER_BOSS = 3,
	ITEM_DICTIONARY_CONTENT_SUB_MONSTER_CHAOSGATE = 4,
	ITEM_DICTIONARY_CONTENT_SUB_AVATAR_REFORM = 5,
	ITEM_DICTIONARY_CONTENT_SUB_AVATAR_DISASSEMBLY = 6,
	ITEM_DICTIONARY_CONTENT_SUB_CHAOS_DUNGEON_NORMAL = 7,
	ITEM_DICTIONARY_CONTENT_SUB_CHAOS_DUNGEON_EVENT = 8,
	ITEM_DICTIONARY_CONTENT_SUB_SILIAN_ORDER_TOWER = 9,
	ITEM_DICTIONARY_CONTENT_SUB_SILIAN_ORDER_CUBE = 10,
	ITEM_DICTIONARY_CONTENT_SUB_SILIAN_ORDER_PLATINUM_AREA = 11,
	ITEM_DICTIONARY_CONTENT_SUB_SILIAN_ORDER_BOSSRUSH = 12,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_PLANT = 13,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_LUMBERING = 14,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_MINING = 15,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_HUNTING = 16,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_FISHING = 17,
	ITEM_DICTIONARY_CONTENT_SUB_LIFE_ARCHEOLOGY = 18,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_HUNTING = 19,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_FLOATING = 20,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_TREASURE = 21,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_FISHING_SCHOOL = 22,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_WHALE = 23,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_WRECK = 24,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_AQUANAUTICS = 25,
	ITEM_DICTIONARY_CONTENT_SUB_VOYAGE_DRAGNET = 26,
	ITEM_DICTIONARY_CONTENT_SUB_MERCHANT = 27,
	ITEM_DICTIONARY_CONTENT_SUB_MERCHANT_WANDERER = 28,
	ITEM_DICTIONARY_CONTENT_SUB_MERCHANT_EXCHANGE = 29,
	ITEM_DICTIONARY_CONTENT_SUB_QUEST_EPONA_DAILY = 30,
	ITEM_DICTIONARY_CONTENT_SUB_QUEST_EPONA_WEEKLY = 31,
	ITEM_DICTIONARY_CONTENT_SUB_QUEST_EPONA_POINT_REWARD = 32,
	ITEM_DICTIONARY_CONTENT_SUB_CUMULATIVE_POINT_MOCOCO = 33,
	ITEM_DICTIONARY_CONTENT_SUB_CUMULATIVE_POINT_ISLAND_HEARTS = 34,
	ITEM_DICTIONARY_CONTENT_SUB_CUMULATIVE_POINT_GIANT_HEARTS = 35,
	ITEM_DICTIONARY_CONTENT_SUB_CUMULATIVE_POINT_GIANT_PICTURES = 36,
	ITEM_DICTIONARY_CONTENT_SUB_MAX = 37
};


// Enum EFGame.EFConst.ItemDictionaryContentMainCategory
enum class EItemDictionaryContentMainCategory : uint8_t
{
	ITEM_DICTIONARY_CONTENT_MAIN_NONE = 0,
	ITEM_DICTIONARY_CONTENT_MAIN_ALL = 1,
	ITEM_DICTIONARY_CONTENT_MAIN_MONSTER = 2,
	ITEM_DICTIONARY_CONTENT_MAIN_AVATAR = 3,
	ITEM_DICTIONARY_CONTENT_MAIN_RAID = 4,
	ITEM_DICTIONARY_CONTENT_MAIN_CHAOS_DUNGEON = 5,
	ITEM_DICTIONARY_CONTENT_MAIN_CARD_BATTLE = 6,
	ITEM_DICTIONARY_CONTENT_MAIN_SILIANS_ORDER = 7,
	ITEM_DICTIONARY_CONTENT_MAIN_LIFE = 8,
	ITEM_DICTIONARY_CONTENT_MAIN_VOYAGE = 9,
	ITEM_DICTIONARY_CONTENT_MAIN_SHOP = 10,
	ITEM_DICTIONARY_CONTENT_MAIN_ASSEMBLY = 11,
	ITEM_DICTIONARY_CONTENT_MAIN_EVOLUTION = 12,
	ITEM_DICTIONARY_CONTENT_MAIN_INTIMATE = 13,
	ITEM_DICTIONARY_CONTENT_MAIN_QUEST = 14,
	ITEM_DICTIONARY_CONTENT_MAIN_QUEST_EPONA = 15,
	ITEM_DICTIONARY_CONTENT_MAIN_CUMULATIVE_POINT = 16,
	ITEM_DICTIONARY_CONTENT_MAIN_COLOSSEUM = 17,
	ITEM_DICTIONARY_CONTENT_MAIN_EXPEDITION_TERRITORY = 18,
	ITEM_DICTIONARY_CONTENT_MAIN_SECRET_DUNGEON = 19,
	ITEM_DICTIONARY_CONTENT_MAIN_ABYSS_RAID = 20,
	ITEM_DICTIONARY_CONTENT_MAIN_REVERSE_RUIN = 21,
	ITEM_DICTIONARY_CONTENT_MAIN_ETC = 22,
	ITEM_DICTIONARY_CONTENT_MAIN_MAX = 23
};


// Enum EFGame.EFConst.ItemAssemblyFlag
enum class EItemAssemblyFlag : uint8_t
{
	ITEM_ASSEMBLY_FLAG_NONE        = 0,
	ITEM_ASSEMBLY_FLAG_WARRIOR_WEAPON = 1,
	ITEM_ASSEMBLY_FLAG_FIGHTER_WEAPON = 2,
	ITEM_ASSEMBLY_FLAG_HUNTER_WEAPON = 3,
	ITEM_ASSEMBLY_FLAG_MAGICIAN_WEAPON = 4,
	ITEM_ASSEMBLY_FLAG_DELAIN_WEAPON = 5,
	ITEM_ASSEMBLY_FLAG_SPECIALIST_WEAPON = 6,
	ITEM_ASSEMBLY_FLAG_COOK        = 7,
	ITEM_ASSEMBLY_FLAG_ALCHEMY     = 8,
	ITEM_ASSEMBLY_FLAG_RESTORATION = 9,
	ITEM_ASSEMBLY_FLAG_CARD        = 10,
	ITEM_ASSEMBLY_FLAG_MAX         = 11
};


// Enum EFGame.EFConst.IngamePreviewCameraType
enum class EIngamePreviewCameraType : uint8_t
{
	PC                             = 0,
	Vehicle                        = 1,
	SHIP                           = 2,
	PET                            = 3,
	AVATAR_BARTER                  = 4,
	COMMON_PC                      = 5,
	COMMON_VEHICLE                 = 6,
	COMMON_SHIP                    = 7,
	COMMON_PET                     = 8,
	TOWN_NPC                       = 9,
	TOWN_NPC_DRESS                 = 10,
	TINT_TARGET                    = 11,
	IngamePreviewCameraType_MAX    = 12
};


// Enum EFGame.EFConst.GuideQuestType
enum class EGuideQuestType : uint8_t
{
	GUIDE_QUEST_TYPE_MAIN          = 0,
	GUIDE_QUEST_TYPE_CONTENTS      = 1,
	GUIDE_QUEST_TYPE_EVENT         = 2,
	GUIDE_QUEST_TYPE_MAX           = 3
};


// Enum EFGame.EFConst.GrabbedSocketType
enum class EGrabbedSocketType : uint8_t
{
	GRABBED_SOCKET_TYPE_HEAD       = 0,
	GRABBED_SOCKET_TYPE_BODY       = 1,
	GRABBED_SOCKET_TYPE_MAX        = 2
};


// Enum EFGame.EFConst.GrabSocketType
enum class EGrabSocketType : uint8_t
{
	GRAB_SOCKET_TYPE_HAND          = 0,
	GRAB_SOCKET_TYPE_HAND01        = 1,
	GRAB_SOCKET_TYPE_MOUTH         = 2,
	GRAB_SOCKET_TYPE_MOUTH01       = 3,
	GRAB_SOCKET_TYPE_TAIL          = 4,
	GRAB_SOCKET_TYPE_TAIL01        = 5,
	GRAB_SOCKET_TYPE_ETC           = 6,
	GRAB_SOCKET_TYPE_ETC01         = 7,
	GRAB_SOCKET_TYPE_MAX           = 8
};


// Enum EFGame.EFConst.GameNotePosition
enum class EGameNotePosition : uint8_t
{
	GAME_NOTE_POSITION_BOTTOM      = 0,
	GAME_NOTE_POSITION_TOP         = 1,
	GAME_NOTE_POSITION_MAX         = 2
};


// Enum EFGame.EFConst.GameNoteBackgroundType
enum class EGameNoteBackgroundType : uint8_t
{
	GAME_NOTE_BACKGROUND_TYPE_DEFAULT = 0,
	GAME_NOTE_BACKGROUND_TYPE_STORY = 1,
	GAME_NOTE_BACKGROUND_TYPE_MAX  = 2
};


// Enum EFGame.EFConst.GameNoteType
enum class EGameNoteType : uint8_t
{
	GAME_NOTE_TYPE_DEFAULT         = 0,
	GAME_NOTE_TYPE_SIMPLE          = 1,
	GAME_NOTE_TYPE_MAX             = 2
};


// Enum EFGame.EFConst.GuildMemberListSortType
enum class EGuildMemberListSortType : uint8_t
{
	GUILD_MEMBER_LIST_SORT_NONE    = 0,
	GUILD_MEMBER_LIST_SORT_PLAYERNAME_ASC = 1,
	GUILD_MEMBER_LIST_SORT_PLAYERNAME_DESC = 2,
	GUILD_MEMBER_LIST_SORT_GRADE_ASC = 3,
	GUILD_MEMBER_LIST_SORT_GRADE_DESC = 4,
	GUILD_MEMBER_LIST_SORT_PLAYERLEVEL_ASC = 5,
	GUILD_MEMBER_LIST_SORT_PLAYERLEVEL_DESC = 6,
	GUILD_MEMBER_LIST_SORT_PLAYERCLASS_ASC = 7,
	GUILD_MEMBER_LIST_SORT_PLAYERCLASS_DESC = 8,
	GUILD_MEMBER_LIST_SORT_CONNECT_ASC = 9,
	GUILD_MEMBER_LIST_SORT_CONNECT_DESC = 10,
	GUILD_MEMBER_LIST_SORT_MAX     = 11
};


// Enum EFGame.EFConst.EffectShowOption
enum class EffectShowOption : uint8_t
{
	EFFECT_SHOW_OPTION_ALL         = 0,
	EFFECT_SHOW_OPTION_TROOP       = 1,
	EFFECT_SHOW_OPTION_PARTY       = 2,
	EFFECT_SHOW_OPTION_PARTY_BENEFICIAL = 3,
	EFFECT_SHOW_OPTION_ENEMY       = 4,
	EFFECT_SHOW_OPTION_MAX         = 5
};


// Enum EFGame.EFConst.EFChatUIFilterType
enum class EFChatUIFilterType : uint8_t
{
	EFChatUIFilter_Yell            = 0,
	EFChatUIFilter_Normal          = 1,
	EFChatUIFilter_Local           = 2,
	EFChatUIFilter_Whisper         = 3,
	EFChatUIFilter_Party           = 4,
	EFChatUIFilter_Guild           = 5,
	EFChatUIFilter_GuildMaster     = 6,
	EFChatUIFilter_Social          = 7,
	EFChatUIFilter_System_Force    = 8,
	EFChatUIFilter_System_Infomation = 9,
	EFChatUIFilter_System_Error    = 10,
	EFChatUIFilter_System_Warning  = 11,
	EFChatUIFilter_Gain_Self       = 12,
	EFChatUIFilter_Gain_Party      = 13,
	EFChatUIFilter_NPC_Talk        = 14,
	EFChatUIFilter_Friend          = 15,
	EFChatUIFilter_Tab_Alarm       = 16,
	EFChatUIFilter_Experience      = 17,
	EFChatUIFilter_Money           = 18,
	EFChatUIFilter_Troop           = 19,
	EFChatUIFilter_ColosseumRoom   = 20,
	EFChatUIFilter_None            = 21,
	EFChatUIFilter_MAX             = 22
};


// Enum EFGame.EFConst.EventMissionUrlType
enum class EventMissionUrlType : uint8_t
{
	EVENT_MISSION_URL_EVENT        = 0,
	EVENT_MISSION_URL_GUIDE        = 1,
	EVENT_MISSION_URL_MAX          = 2
};


// Enum EFGame.EFConst.EnchantTypeIndex
enum class EnchantTypeIndex : uint8_t
{
	ENCHANT_TYPE_INDEX_NONE        = 0,
	ENCHANT_TYPE_INDEX_STAT        = 1,
	ENCHANT_TYPE_INDEX_ATTRIBUTE   = 2,
	ENCHANT_TYPE_INDEX_AFFILIATION = 3,
	ENCHANT_TYPE_INDEX_IMMUNITY    = 4,
	ENCHANT_TYPE_INDEX_ANY         = 5,
	ENCHANT_TYPE_INDEX_AMPLIFYING_STAT = 6,
	ENCHANT_TYPE_INDEX_AMPLIFYING_ATTRIBUTE = 7,
	ENCHANT_TYPE_INDEX_AMPLIFYING_AFFILIATION = 8,
	ENCHANT_TYPE_INDEX_AMPLIFYING_IMMUNITY = 9,
	ENCHANT_TYPE_INDEX_AMPLIFYING_ANY = 10,
	ENCHANT_TYPE_INDEX_LOCK        = 11,
	ENCHANT_TYPE_INDEX_MAX         = 12
};


// Enum EFGame.EFConst.ExpandedStatType
enum class ExpandedStatType : uint8_t
{
	EX_STAT_TYPE_NONE              = 0,
	EX_STAT_TYPE_MIN_ATTACK_POWER  = 1,
	EX_STAT_TYPE_MAX_ATTACK_POWER  = 2,
	EX_STAT_TYPE_COMBAT_POWER      = 3,
	EX_STAT_TYPE_STAT_ATTACK_POWER = 4,
	EX_STAT_TYPE_MAX               = 5
};


// Enum EFGame.EFConst.EmoticonPopupMotionType
enum class EmoticonPopupMotionType : uint8_t
{
	EMOTICON_POPUP_MOTION_NONE     = 0,
	EMOTICON_POPUP_MOTION_POP      = 1,
	EMOTICON_POPUP_MOTION_SHAKE_CENTER = 2,
	EMOTICON_POPUP_MOTION_SLOW     = 3,
	EMOTICON_POPUP_MOTION_SOFT     = 4,
	EMOTICON_POPUP_MOTION_DOWNUP   = 5,
	EMOTICON_POPUP_MOTION_LINE     = 6,
	EMOTICON_POPUP_MOTION_MAX      = 7
};


// Enum EFGame.EFConst.DateTimeMerdiem
enum class EDateTimeMerdiem : uint8_t
{
	ANTE_MERIDIEM                  = 0,
	POST_MERIDIEM                  = 1,
	DateTimeMerdiem_MAX            = 2
};


// Enum EFGame.EFConst.DateTimeLongWeekend
enum class EDateTimeLongWeekend : uint8_t
{
	LONG_WEEKEND                   = 0,
	LONG_WEEKEND01                 = 1,
	LONG_WEEKEND02                 = 2,
	LONG_WEEKEND03                 = 3,
	LONG_WEEKEND04                 = 4,
	LONG_WEEKEND05                 = 5,
	LONG_WEEKEND06                 = 6,
	LONG_WEEKEND_MAX               = 7
};


// Enum EFGame.EFConst.DateTimeShortWeekend
enum class EDateTimeShortWeekend : uint8_t
{
	SHORT_WEEKEND                  = 0,
	SHORT_WEEKEND01                = 1,
	SHORT_WEEKEND02                = 2,
	SHORT_WEEKEND03                = 3,
	SHORT_WEEKEND04                = 4,
	SHORT_WEEKEND05                = 5,
	SHORT_WEEKEND06                = 6,
	SHORT_WEEKEND_MAX              = 7
};


// Enum EFGame.EFConst.DateTimeLongMonth
enum class EDateTimeLongMonth : uint8_t
{
	LONG_MONTH                     = 0,
	LONG_MONTH01                   = 1,
	LONG_MONTH02                   = 2,
	LONG_MONTH03                   = 3,
	LONG_MONTH04                   = 4,
	LONG_MONTH05                   = 5,
	LONG_MONTH06                   = 6,
	LONG_MONTH07                   = 7,
	LONG_MONTH08                   = 8,
	LONG_MONTH09                   = 9,
	LONG_MONTH10                   = 10,
	LONG_MONTH11                   = 11,
	LONG_MONTH_MAX                 = 12
};


// Enum EFGame.EFConst.DateTimeShortMonth
enum class EDateTimeShortMonth : uint8_t
{
	SHORT_MONTH                    = 0,
	SHORT_MONTH01                  = 1,
	SHORT_MONTH02                  = 2,
	SHORT_MONTH03                  = 3,
	SHORT_MONTH04                  = 4,
	SHORT_MONTH05                  = 5,
	SHORT_MONTH06                  = 6,
	SHORT_MONTH07                  = 7,
	SHORT_MONTH08                  = 8,
	SHORT_MONTH09                  = 9,
	SHORT_MONTH10                  = 10,
	SHORT_MONTH11                  = 11,
	SHORT_MONTH_MAX                = 12
};


// Enum EFGame.EFConst.DialogCreateType
enum class EDialogCreateType : uint8_t
{
	CREATE_SINGULAR                = 0,
	CREATE_MULTIPLE                = 1,
	CREATE_STACKSINGULAR           = 2,
	CREATE_MAX                     = 3
};


// Enum EFGame.EFConst.DialogButtonType
enum class EDialogButtonType : uint8_t
{
	BUTTON_NONE                    = 0,
	BUTTON_YES                     = 1,
	BUTTON_NO                      = 2,
	BUTTON_IGNORE                  = 3,
	BUTTON_OK                      = 4,
	BUTTON_CANCEL                  = 5,
	BUTTON_GIVEUP                  = 6,
	BUTTON_ACCEPT                  = 7,
	BUTTON_DECLINE                 = 8,
	BUTTON_AGREE                   = 9,
	BUTTON_REVERSE                 = 10,
	BUTTON_EXIT                    = 11,
	BUTTON_SKIP                    = 12,
	BUTTON_PROLUGUE                = 13,
	BUTTON_LEAVE                   = 14,
	BUTTON_REWARD                  = 15,
	BUTTON_EMANCIPATION            = 16,
	BUTTON_GIFT                    = 17,
	BUTTON_JOIN                    = 18,
	BUTTON_NOTJOIN                 = 19,
	BUTTON_LOCK                    = 20,
	BUTTON_UNLOCK                  = 21,
	BUTTON_ESCAPE                  = 22,
	BUTTON_TOWNENTER               = 23,
	BUTTON_TOWNEXIT                = 24,
	BUTTON_PARTICIPATION           = 25,
	BUTTON_RECRUIT                 = 26,
	BUTTON_KICK                    = 27,
	BUTTON_CERTIFICATION           = 28,
	BUTTON_BUY                     = 29,
	BUTTON_USE                     = 30,
	BUTTON_COMPLETE                = 31,
	BUTTON_WAIT                    = 32,
	BUTTON_NEXT_RECEIVE            = 33,
	BUTTON_BACK_STEP               = 34,
	BUTTON_CLOSE                   = 35,
	BUTTON_JOIN_SECURITY_SERVICE   = 36,
	BUTTON_APPEAL                  = 37,
	BUTTON_MAX                     = 38
};


// Enum EFGame.EFConst.DialogButtonStyle
enum class EDialogButtonStyle : uint8_t
{
	STYLE_NONE                     = 0,
	STYLE_YES                      = 1,
	STYLE_YES_NO                   = 2,
	STYLE_YES_NO_IGNORE            = 3,
	STYLE_OK                       = 4,
	STYLE_OK_CANCEL                = 5,
	STYLE_OK_CANCEL_GIVEUP         = 6,
	STYLE_ACCEPT_DECLINE           = 7,
	STYLE_AGREE_REVERSE            = 8,
	STYLE_EXIT                     = 9,
	STYLE_PROLOGUE_SKIP            = 10,
	STYLE_MAX                      = 11
};


// Enum EFGame.EFConst.DataProviderType
enum class EDataProviderType : uint8_t
{
	DATAPROVIDER_NONE              = 0,
	DATAPROVIDER_GUILD_INFO        = 1,
	DATAPROVIDER_GUILD_MEMBERLIST  = 2,
	DATAPROVIDER_GUILD_MEMBERAUTHLIST = 3,
	DATAPROVIDER_COLOSSEUM_LOBBYCHARACTERDATA = 4,
	DATAPROVIDER_COLOSSEUM_RESULTLISTA = 5,
	DATAPROVIDER_COLOSSEUM_RESULTLISTB = 6,
	DATAPROVIDER_LIFEINFO          = 7,
	DATAPROVIDER_LIFEPROFESSIONLIST = 8,
	DATAPROVIDER_LIFESKILL_HERBALISM = 9,
	DATAPROVIDER_LIFESKILL_LUMBERING = 10,
	DATAPROVIDER_LIFESKILL_MINING  = 11,
	DATAPROVIDER_LIFESKILL_HUNTING = 12,
	DATAPROVIDER_LIFESKILL_FISHING = 13,
	DATAPROVIDER_LIFESKILL_ARCHEOLOGY = 14,
	DATAPROVIDER_LIFESKILL_ASTROLOGY = 15,
	DATAPROVIDER_LIFESKILL_SPEAKING = 16,
	DATAPROVIDER_CHARACTERINFO_SHIPLIST = 17,
	DATAPROVIDER_NPCINTERACTION_SHIPLIST = 18,
	DATAPROVIDER_NPCINTERACTION_SHIPSAILORLIST = 19,
	DATAPROVIDER_NPCINTERACTION_STASHINFO = 20,
	DATAPROVIDER_NPCINTERACTION_WAREHOUSE = 21,
	DATAPROVIDER_NPCINTERACTION_WAREHOUSE_ACCOUNT = 22,
	DATAPROVIDER_SOCIALSKILL       = 23,
	DATAPROVIDER_HOTKEY_MAINMENULIST = 24,
	DATAPROVIDER_HOTKEY_HOTKEYLIST = 25,
	DATAPROVIDER_ENCHANT_BASE      = 26,
	DATAPROVIDER_ENCHANT_ABILITY   = 27,
	DATAPROVIDER_ENCHANT_CRYSTAL   = 28,
	DATAPROVIDER_REFINE_TAB        = 29,
	DATAPROVIDER_REFINE_BASE       = 30,
	DATAPROVIDER_REFINE_ABILITY    = 31,
	DATAPROVIDER_SQUAREHOLE        = 32,
	DATAPROVIDER_CHATMESSAGE       = 33,
	DATAPROVIDER_CHATMESSAGEOPTION = 34,
	DATAPROVIDER_QUEST_TREE        = 35,
	DATAPROVIDER_QUEST_SUMMARY     = 36,
	DATAPROVIDER_QUEST_MINI_INFO   = 37,
	DATAPROVIDER_QUEST_JOURNAL_SUMMARY = 38,
	DATAPROVIDER_HOTKEY_IMAGEKEYBOARD = 39,
	DATAPROVIDER_CHARACTERINFO_DETAILSTAT = 40,
	DATAPROVIDER_CHARACTERINFO_ABILITYPAGE = 41,
	DATAPROVIDER_CHARACTERINFO_EQUIPITEM = 42,
	DATAPROVIDER_CHARACTERINFO_DETAILPAGE = 43,
	DATAPROVIDER_OTHERCHARACTERINFO_DETAILSTAT = 44,
	DATAPROVIDER_OTHERCHARACTERINFO_DETAILPAGE = 45,
	DATAPROVIDER_OTHERCHARACTERINFO_ABILITYPAGE = 46,
	DATAPROVIDER_OTHERCHARACTERINFO_EQUIPITEM = 47,
	DATAPROVIDER_DEADWINDOW_INFO   = 48,
	DATAPROVIDER_INVENTORY_MAIN    = 49,
	DATAPROVIDER_INVENTORY_QUEST   = 50,
	DATAPROVIDER_INVENTORY_INFO    = 51,
	DATAPROVIDER_SKILLBOOK_INFO    = 52,
	DATAPROVIDER_SKILLBOOK_LIST    = 53,
	DATAPROVIDER_SKILLBOOK_CUSTOMIZING_INFO = 54,
	DATAPROVIDER_SKILLBOOK_CUSTOMIZING_LIST = 55,
	DATAPROVIDER_MOD_TOWNDEFENCESHOP = 56,
	DATAPROVIDER_CHARACTER_CUSTOMIZE = 57,
	DATAPROVIDER_PCSELECT_LIST     = 58,
	DATAPROVIDER_PCCREATE_DETAILPAGE = 59,
	DATAPROVIDER_MAX               = 60
};


// Enum EFGame.EFConst.DecalEffectType
enum class EDecalEffectType : uint8_t
{
	DECALEFFECTTYPE_CIRCLEORSQUARE = 0,
	DECALEFFECTTYPE_RECTANGLE      = 1,
	DECALEFFECTTYPE_ARROW          = 2,
	DECALEFFECTTYPE_FANSHAPE       = 3,
	DECALEFFECTTYPE_DONUTSHAPE     = 4,
	DECALEFFECTTYPE_MAX            = 5
};


// Enum EFGame.EFConst.DamageFontGroupType
enum class EDamageFontGroupType : uint8_t
{
	DAMAGEFONTGROUPTYPE_NORMAL     = 0,
	DAMAGEFONTGROUPTYPE_NOHEAL     = 1,
	DAMAGEFONTGROUPTYPE_HEALTEXT   = 2,
	DAMAGEFONTGROUPTYPE_NOTEXT     = 3,
	DAMAGEFONTGROUPTYPE_HIDE_NOTEXT = 4,
	DAMAGEFONTGROUPTYPE_MAX        = 5
};


// Enum EFGame.EFConst.DamageAimOffsetType
enum class EDamageAimOffsetType : uint8_t
{
	DAMAGE_AIM_OFFSET_TYPE_Dmg_NonAimOffset = 0,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_Head_Type1_M = 1,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_Head_Type2_M = 2,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_2Leg_Type1_M = 3,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_2Leg_Type2_M = 4,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_4Leg_Type1_M = 5,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_4Leg_Type2_M = 6,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_LUCMT_00 = 7,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_GSTBM_00 = 8,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_MRHG_00 = 9,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_BOCO_00 = 10,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_BOBH_00 = 11,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_BONS_00 = 12,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_BORN_00 = 13,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RRCL_00 = 14,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPAT_00 = 15,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RRNF_00 = 16,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CDEHJ_00 = 17,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CMDUK_00 = 18,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPRR_00 = 19,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_LHGS_00 = 20,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ELAH_00 = 21,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPRT_00 = 22,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_PTWS_00 = 23,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_SCWP_00 = 24,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_MVDR_00 = 25,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_BUGSQ_00 = 26,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CURV_00 = 27,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ADAQ_00 = 28,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_REMM_00 = 29,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ADMT_00 = 30,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_NP_ASGW_00 = 31,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_YOWR_00 = 32,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_SCMS_00 = 33,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ADTP_00 = 34,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_0010_00 = 35,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_0004_00 = 36,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_TREI_00 = 37,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_0017_00 = 38,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_SQSP_00 = 39,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPDM_00 = 40,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_LVPC_00 = 41,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_TTPR_00 = 42,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_0005_00 = 43,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_AHMS_00 = 44,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_LVPM_00 = 45,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_PTMG_00 = 46,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CPTAT_00 = 47,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CULO_00 = 48,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CUWD_00 = 49,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ISAP_00 = 50,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPRA_00 = 51,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_PR_ISWB_00 = 52,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_0023_00 = 53,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_TRBW_00 = 54,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ELMS_00 = 55,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RPRR_0001 = 56,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_PC_FE_Type1 = 57,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_PC_MA_Type1 = 58,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_CUCR_00 = 59,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RECK_00 = 60,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_ADTF_00 = 61,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_RRLA_00 = 62,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_B_Body_Type1_M = 63,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_B_Body_Type1_L = 64,
	DAMAGE_AIM_OFFSET_TYPE_Dmg_MN_PPAB_00 = 65,
	DAMAGE_AIM_OFFSET_TYPE_MAX     = 66
};


// Enum EFGame.EFConst.DirectionalAttackTooltipType
enum class EDirectionalAttackTooltipType : uint8_t
{
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE = 0,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE01 = 1,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE02 = 2,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE03 = 3,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE04 = 4,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE05 = 5,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE06 = 6,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE07 = 7,
	DIRECTIONAL_ATTACK_TOOLTIP_TYPE_MAX = 8
};


// Enum EFGame.EFConst.CoopQuestTeamSymbolType
enum class ECoopQuestTeamSymbolType : uint8_t
{
	COOP_QUEST_TEAM_SYMBOL_TYPE_ALL = 0,
	COOP_QUEST_TEAM_SYMBOL_TYPE_MY_TEAM = 1,
	COOP_QUEST_TEAM_SYMBOL_TYPE_MAX = 2
};


// Enum EFGame.EFConst.CharacterInfoImmuneStatType
enum class ECharacterInfoImmuneStatType : uint8_t
{
	CHARACTERINFO_IMMUNESTAT_TYPE_MOVESLOW = 0,
	CHARACTERINFO_IMMUNESTAT_TYPE_ATTACKSLOW = 1,
	CHARACTERINFO_IMMUNESTAT_TYPE_FREEZE = 2,
	CHARACTERINFO_IMMUNESTAT_TYPE_STONE = 3,
	CHARACTERINFO_IMMUNESTAT_TYPE_FEAR = 4,
	CHARACTERINFO_IMMUNESTAT_TYPE_STUN = 5,
	CHARACTERINFO_IMMUNESTAT_TYPE_SILENCE = 6,
	CHARACTERINFO_IMMUNESTAT_TYPE_EARTHQUAKE = 7,
	CHARACTERINFO_IMMUNESTAT_TYPE_VERMIN = 8,
	CHARACTERINFO_IMMUNESTAT_TYPE_ELECTROCUTION = 9,
	CHARACTERINFO_IMMUNESTAT_TYPE_CONFINEMENT = 10,
	CHARACTERINFO_IMMUNESTAT_TYPE_SLEEP = 11,
	CHARACTERINFO_IMMUNESTAT_TYPE_CURSE = 12,
	CHARACTERINFO_IMMUNESTAT_TYPE_DISARMING = 13,
	CHARACTERINFO_IMMUNESTAT_TYPE_DARKNESS = 14,
	CHARACTERINFO_IMMUNESTAT_TYPE_BLEEDING = 15,
	CHARACTERINFO_IMMUNESTAT_TYPE_POISONING = 16,
	CHARACTERINFO_IMMUNESTAT_TYPE_BURN = 17,
	CHARACTERINFO_IMMUNESTAT_TYPE_MAX = 18
};


// Enum EFGame.EFConst.ClientAIBattleType
enum class EClientAIBattleType : uint8_t
{
	CLIENTAI_BATTLETYPE_CONTINUOUS = 0,
	CLIENTAI_BATTLETYPE_ONETARGET  = 1,
	CLIENTAI_BATTLETYPE_ONESHOT    = 2,
	CLIENTAI_BATTLETYPE_COMMAND    = 3,
	CLIENTAI_BATTLETYPE_MAX        = 4
};


// Enum EFGame.EFConst.ContentsRewardType
enum class EContentsRewardType : uint8_t
{
	CONTENTS_REWARD_TYPE_NONE      = 0,
	CONTENTS_REWARD_TYPE_EXP       = 1,
	CONTENTS_REWARD_TYPE_LIFE_EXP  = 2,
	CONTENTS_REWARD_TYPE_MONEY     = 3,
	CONTENTS_REWARD_TYPE_ITEM      = 4,
	CONTENTS_REWARD_TYPE_CLASS_ITEM = 5,
	CONTENTS_REWARD_TYPE_MAX       = 6
};


// Enum EFGame.EFConst.ConditionalEffectScaleType
enum class EConditionalEffectScaleType : uint8_t
{
	CONDITIONALEFFECT_SCALE_NONE   = 0,
	CONDITIONALEFFECT_SCALE_TABLEVALUE_SIZE = 1,
	CONDITIONALEFFECT_SCALE_TABLEVALUE_SCALE = 2,
	CONDITIONALEFFECT_SCALE_SIGHTRANGE_SIZE = 3,
	CONDITIONALEFFECT_SCALE_MAX    = 4
};


// Enum EFGame.EFConst.ConditionalEffectMaintainType
enum class EConditionalEffectMaintainType : uint8_t
{
	CONDITIONALEFFECT_MAINTAIN_NONE = 0,
	CONDITIONALEFFECT_MAINTAIN_NONBATTLE = 1,
	CONDITIONALEFFECT_MAINTAIN_BATTLE = 2,
	CONDITIONALEFFECT_MAINTAIN_MAX = 3
};


// Enum EFGame.EFConst.ConditionalEffectType
enum class EConditionalEffectType : uint8_t
{
	CONDITIONALEFFECT_NONE         = 0,
	CONDITIONALEFFECT_DECAL        = 1,
	CONDITIONALEFFECT_EFFECT       = 2,
	CONDITIONALEFFECT_MAX          = 3
};


// Enum EFGame.EFConst.CommonWidgetType
enum class ECommonWidgetType : uint8_t
{
	COMMONWIDGET_NONE              = 0,
	COMMONWIDGET_SKILLTIMINGBAR    = 1,
	COMMONWIDGET_SOUND_NOTE        = 2,
	COMMONWIDGET_LIFEACTIONTIMINGBAR = 3,
	COMMONWIDGET_COMMONACTIONTIMINGBAR = 4,
	COMMONWIDGET_MUSIC_ACTION_TIMINGBAR = 5,
	COMMONWIDGET_MININGTIMINGBAR   = 6,
	COMMONWIDGET_LUMBERINGTIMINGBAR = 7,
	COMMONWIDGET_HERBALISMTIMINGBAR = 8,
	COMMONWIDGET_HUNTINGTIMINGBAR  = 9,
	COMMONWIDGET_ARCHEOLOGYBAR     = 10,
	COMMONWIDGET_VOLUMETIMINGBAR   = 11,
	COMMONWIDGET_MAX               = 12
};


// Enum EFGame.EFConst.CinematicSubtitlePositionType
enum class ECinematicSubtitlePositionType : uint8_t
{
	CINEMATIC_SUBTITLE_POSITION_TYPE_NORMAL = 0,
	CINEMATIC_SUBTITLE_POSITION_TYPE_UPPER = 1,
	CINEMATIC_SUBTITLE_POSITION_TYPE_MAX = 2
};


// Enum EFGame.EFConst.CameraModeType
enum class ECameraModeType : uint8_t
{
	CAMERA_MODE_ISOMETRIC          = 0,
	CAMERA_MODE_TPS                = 1,
	CAMERA_MODE_TOPVIEW            = 2,
	CAMERA_MODE_MAX                = 3
};


// Enum EFGame.EFConst.BeamParticleConnectType
enum class EBeamParticleConnectType : uint8_t
{
	BEAM_PARTICLE_CONNECT_TYPE_NONE = 0,
	BEAM_PARTICLE_CONNECT_TYPE_TARGET = 1,
	BEAM_PARTICLE_CONNECT_TYPE_FLOOR_TO_TARGET = 2,
	BEAM_PARTICLE_CONNECT_TYPE_MAX = 3
};


// Enum EFGame.EFConst.BlockPCRootMotionSkillPenetrateType
enum class EBlockPCRootMotionSkillPenetrateType : uint8_t
{
	BLOCK_PC_ROOTMOTION_SKILL_PENETRATE_TYPE_NONE = 0,
	BLOCK_PC_ROOTMOTION_SKILL_PENETRATE_TYPE_NORMAL = 1,
	BLOCK_PC_ROOTMOTION_SKILL_PENETRATE_TYPE_FORCE = 2,
	BLOCK_PC_ROOTMOTION_SKILL_PENETRATE_TYPE_MAX = 3
};


// Enum EFGame.EFConst.BackAttackTooltipType
enum class EBackAttackTooltipType : uint8_t
{
	BACK_ATTACK_TOOLTIP_TYPE_NONE  = 0,
	BACK_ATTACK_TOOLTIP_TYPE_NORMAL = 1,
	BACK_ATTACK_TOOLTIP_TYPE_MAX   = 2
};


// Enum EFGame.EFConst.AcquisitionCategory
enum class EAcquisitionCategory : uint8_t
{
	ACQUISITION_CATEGORY_NPC_MONSTER = 0,
	ACQUISITION_CATEGORY_RAID      = 1,
	ACQUISITION_CATEGORY_LIFE_GATHER = 2,
	ACQUISITION_CATEGORY_VOYAGE    = 3,
	ACQUISITION_CATEGORY_SHOP      = 4,
	ACQUISITION_CATEGORY_ASSEMBLY  = 5,
	ACQUISITION_CATEGORY_EVOLUTION = 6,
	ACQUISITION_CATEGORY_DISASSEMBLY = 7,
	ACQUISITION_CATEGORY_RANDOM_BOX = 8,
	ACQUISITION_CATEGORY_TREASURE_MAP = 9,
	ACQUISITION_CATEGORY_EXPEDITION = 10,
	ACQUISITION_CATEGORY_ACHIEVEMENT = 11,
	ACQUISITION_CATEGORY_ADV_BOOK  = 12,
	ACQUISITION_CATEGORY_QUEST     = 13,
	ACQUISITION_CATEGORY_QUEST_EPONA = 14,
	ACQUISITION_CATEGORY_INTIMATE  = 15,
	ACQUISITION_CATEGORY_AVATAR    = 16,
	ACQUISITION_CATEGORY_CARDBATTLE = 17,
	ACQUISITION_CATEGORY_CHAOSDUNGEON = 18,
	ACQUISITION_CATEGORY_CUMULATIVE_POINT = 19,
	ACQUISITION_CATEGORY_SILIAN_ORDER = 20,
	ACQUISITION_CATEGORY_COLOSSEUM = 21,
	ACQUISITION_CATEGORY_EXPEDITION_TERRITORY = 22,
	ACQUISITION_CATEGORY_ABYSS_RAID = 23,
	ACQUISITION_CATEGORY_REVERSE_RUIN = 24,
	ACQUISITION_CATEGORY_ETC       = 25,
	ACQUISITION_CATEGORY_MAX       = 26
};


// Enum EFGame.EFConst.AnnounceCategory
enum class EAnnounceCategory : uint8_t
{
	ANNOUNCE_CATEGORY_TEXT         = 0,
	ANNOUNCE_CATEGORY_CHAOSGATE_CLOSE_TEXT = 1,
	ANNOUNCE_CATEGORY_FAVORITY_ACTIVE_TEXT = 2,
	ANNOUNCE_CATEGORY_NORMAL_QUEST = 3,
	ANNOUNCE_CATEGORY_MAIN_QUEST   = 4,
	ANNOUNCE_CATEGORY_INDUN_QUEST  = 5,
	ANNOUNCE_CATEGORY_GET_ITEM     = 6,
	ANNOUNCE_CATEGORY_GET_QUESTITEM = 7,
	ANNOUNCE_CATEGORY_GET_SKILL    = 8,
	ANNOUNCE_CATEGORY_AREA_NAME    = 9,
	ANNOUNCE_CATEGORY_NOTICE       = 10,
	ANNOUNCE_CATEGORY_CUBE         = 11,
	ANNOUNCE_CATEGORY_TITLE        = 12,
	ANNOUNCE_CATEGORY_MOD_OPEN     = 13,
	ANNOUNCE_CATEGORY_MUSIC        = 14,
	ANNOUNCE_CATEGORY_ACHIEVEMENT  = 15,
	ANNOUNCE_CATEGORY_ADVENTUREBOOK = 16,
	ANNOUNCE_CATEGORY_TOWER        = 17,
	ANNOUNCE_CATEGORY_ADVENTURE_MATTER = 18,
	ANNOUNCE_CATEGORY_MODPLATINUM  = 19,
	ANNOUNCE_CATEGORY_TROUBLE_AREA = 20,
	ANNOUNCE_CATEGORY_OPERATION    = 21,
	ANNOUNCE_CATEGORY_ATTAINMENT   = 22,
	ANNOUNCE_CATEGORY_SAILING_GETSHIP = 23,
	ANNOUNCE_CATEGORY_SAILING_GETCREW = 24,
	ANNOUNCE_CATEGORY_ISLAND_BOX   = 25,
	ANNOUNCE_CATEGORY_COLOSSEUM    = 26,
	ANNOUNCE_CATEGORY_CHAOSGATE_MAD_PORTAL = 27,
	ANNOUNCE_CATEGORY_CHAOSGATE_DISEASE_PORTAL = 28,
	ANNOUNCE_CATEGORY_CHAOSGATE_DARK_PORTAL = 29,
	ANNOUNCE_CATEGORY_CHAOSGATE_FANTASY_PORTAL = 30,
	ANNOUNCE_CATEGORY_EXPEDITION_LEVEL_UP = 31,
	ANNOUNCE_CATEGORY_BOSSRUSH     = 32,
	ANNOUNCE_CATEGORY_DYNAMIC_ISLAND = 33,
	ANNOUNCE_CATEGORY_WORLDOBJECT_DESTRUCTION = 34,
	ANNOUNCE_CATEGORY_GET_ARCANACARD = 35,
	ANNOUNCE_CATEGORY_ENGRAVEUNLOCK = 36,
	ANNOUNCE_CATEGORY_DISPATCH_GETCREW = 37,
	ANNOUNCE_CATEGORY_TOWN_GETWORKER = 38,
	ANNOUNCE_CATEGORY_TOWN_GETINSTITUTE = 39,
	ANNOUNCE_CATEGORY_WALLPAPER    = 40,
	ANNOUNCE_CATEGORY_QUEST_APPEAR = 41,
	ANNOUNCE_CATEGORY_CALENDAR     = 42,
	ANNOUNCE_CATEGORY_WORLDOBJECT  = 43,
	ANNOUNCE_CATEGORY_FIELDBOSS_BOSS = 44,
	ANNOUNCE_CATEGORY_SHOP_SECRET_TEXT = 45,
	ANNOUNCE_CATEGORY_BATTLEFIELD_DEATHMATCH = 46,
	ANNOUNCE_CATEGORY_FIELDBOSS_ZONE = 47,
	ANNOUNCE_CATEGORY_DEATHMATCH_ZONE = 48,
	ANNOUNCE_CATEGORY_LABYRINTH_START_TEXT = 49,
	ANNOUNCE_CATEGORY_LABYRINTH_WAVE_TEXT = 50,
	ANNOUNCE_CATEGORY_LABYRINTH_BOSS_TEXT = 51,
	ANNOUNCE_CATEGORY_DISPATCH_MISSION_START = 52,
	ANNOUNCE_CATEGORY_TOWN_BUILDINGCONSTRUCT = 53,
	ANNOUNCE_CATEGORY_ITEM_ENHANCE = 54,
	ANNOUNCE_CATEGORY_GHOST_SHIP   = 55,
	ANNOUNCE_CATEGORY_GUILDRESEARCH = 56,
	ANNOUNCE_CATEGORY_GUILDSKILL_TEXT = 57,
	ANNOUNCE_CATEGORY_GUILDSKILL   = 58,
	ANNOUNCE_CATEGORY_MERCENARY_TEXT = 59,
	ANNOUNCE_CATEGORY_REVERSERUIN  = 60,
	ANNOUNCE_CATEGORY_REVERSERUIN_UNLOCK_TEXT = 61,
	ANNOUNCE_CATEGORY_SCENE_EVENT  = 62,
	ANNOUNCE_CATEGORY_GUILD_HONOR_DONATION = 63,
	ANNOUNCE_CATEGORY_GUILD_SPECIAL_SUPPORT = 64,
	ANNOUNCE_CATEGORY_CLEAR_RAID_FIRST_KILL = 65,
	ANNOUNCE_CATEGORY_CLEAR_RAID_KILL_TIME_RECORD = 66,
	ANNOUNCE_CATEGORY_CLEAR_RAID_ANY = 67,
	ANNOUNCE_CATEGORY_GUILD_WEEK_OBJ_ACCEPT = 68,
	ANNOUNCE_CATEGORY_FRIENDSHIP_GRADE_UP = 69,
	ANNOUNCE_CATEGORY_TOWN_WORK_COMPLETE = 70,
	ANNOUNCE_CATEGORY_TOWN_RESEARCH_DONE = 71,
	ANNOUNCE_CATEGORY_TOWN_BUILDING_UPGRADE = 72,
	ANNOUNCE_CATEGORY_TOWN_GETVISITOR = 73,
	ANNOUNCE_CATEGORY_LIFESKILL    = 74,
	ANNOUNCE_CATEGORY_GET_ITEM_QUALITY = 75,
	ANNOUNCE_CATEGORY_GET_ITEM_PARTICULAR = 76,
	ANNOUNCE_CATEGORY_TOWN_TRADER_ARRIVAL = 77,
	ANNOUNCE_CATEGORY_REVERSERUIN_NORMAL = 78,
	ANNOUNCE_CATEGORY_CHAOSGATE_EVENT_PORTAL = 79,
	ANNOUNCE_CATEGORY_CHAOS_BONUS_TEXT = 80,
	ANNOUNCE_CATEGORY_YOZ_POT      = 81,
	ANNOUNCE_CATEGORY_INSTANCE_OCEAN = 82,
	ANNOUNCE_CATEGORY_TOWN_CHEF_FEAST_COMPLETE = 83,
	ANNOUNCE_CATEGORY_TOWN_LEVEL_UP = 84,
	ANNOUNCE_CATEGORY_ISLAND_OCCUPY_PvP = 85,
	ANNOUNCE_CATEGORY_ISLAND_OCCUPY_PvE = 86,
	ANNOUNCE_CATEGORY_DEATHMATCH_FORTRESS = 87,
	ANNOUNCE_CATEGORY_GUILD_OCCUPY_EVENT = 88,
	ANNOUNCE_CATEGORY_OCCUPIED_FIELD = 89,
	ANNOUNCE_CATEGORY_SECOND_ANNIVERSARY = 90,
	ANNOUNCE_CATEGORY_CLEAR_COMMANDER_HELL_FIRST = 91,
	ANNOUNCE_CATEGORY_CLEAR_COMMANDER_HELL_TIME_RECORD = 92,
	ANNOUNCE_CATEGORY_CLEAR_COMMANDER_HELL_ANY = 93,
	ANNOUNCE_CATEGORY_WAYOFTHRONE  = 94,
	ANNOUNCE_CATEGORY_TOWN_LIFE_TEXT = 95,
	ANNOUNCE_CATEGORY_ARKPASS_LEVELUP_TEXT = 96,
	ANNOUNCE_CATEGORY_ESTHER_WEAPON_EVOLUTION = 97,
	ANNOUNCE_CATEGORY_BATTLEFIELD_POINT = 98,
	ANNOUNCE_CATEGORY_MAX          = 99
};


// Enum EFGame.EFConst.AnnouncePositionType
enum class EAnnouncePositionType : uint8_t
{
	ANNOUNCE_POSITION_POSITION     = 0,
	ANNOUNCE_POSITION_POSITION01   = 1,
	ANNOUNCE_POSITION_POSITION02   = 2,
	ANNOUNCE_POSITION_POSITION03   = 3,
	ANNOUNCE_POSITION_POSITION04   = 4,
	ANNOUNCE_POSITION_POSITION05   = 5,
	ANNOUNCE_POSITION_POSITION06   = 6,
	ANNOUNCE_POSITION_POSITION07   = 7,
	ANNOUNCE_POSITION_MAX          = 8
};


// Enum EFGame.EFConst.ActionNotifyUIEventKey
enum class EActionNotifyUIEventKey : uint8_t
{
	ACTION_NOTIFY_UIEVENT_RESULT_FAIL = 0,
	ACTION_NOTIFY_UIEVENT_RESULT_SUCCESS = 1,
	ACTION_NOTIFY_UIEVENT_RESULT_BETTER_SUCCESS = 2,
	ACTION_NOTIFY_UIEVENT_RESULT_PERFECT_SUCCESS = 3,
	ACTION_NOTIFY_UIEVENT_RESULT_MAX = 4
};


// Enum EFGame.EFConst.ActionConditionStanceModeOutput
enum class EActionConditionStanceModeOutput : uint8_t
{
	ACTION_CONDITION_STANCE_MODE_OUTPUT_NONE = 0,
	ACTION_CONDITION_STANCE_MODE_OUTPUT_VEHICLE = 1,
	ACTION_CONDITION_STANCE_MODE_OUTPUT_PICKUP_PROP = 2,
	ACTION_CONDITION_STANCE_MODE_OUTPUT_MAX = 3
};


// Enum EFGame.EFConst.AffinityPlayTimeType
enum class EAffinityPlayTimeType : uint8_t
{
	AffinityPlayTimeType_Magnification = 0,
	AffinityPlayTimeType_Absolute  = 1,
	AffinityPlayTimeType_MAX       = 2
};


// Enum EFGame.EFConst.AffinityFXScaleType
enum class EAffinityFXScaleType : uint8_t
{
	AffinityFXScaleType            = 0,
	AffinityFXScaleType01          = 1,
	AffinityFXScaleType02          = 2,
	AffinityFXScaleType03          = 3,
	AffinityFXScaleType04          = 4,
	AffinityFXScaleType05          = 5,
	AffinityFXScaleType_MAX        = 6
};


// Enum EFGame.EFConst.ActionConditionRidingModeOutput
enum class EActionConditionRidingModeOutput : uint8_t
{
	ACTION_CONDITION_RIDINGMODE_OUTPUT_NONE = 0,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_HORSE = 1,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_TURTLE = 2,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_RAPTOR = 3,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_HEAVYWALKER = 4,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_HOVERBOARD = 5,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_CANNON = 6,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_LADYBUG = 7,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_WOLF = 8,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_CHAMKRI = 9,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_DEER = 10,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_STEIFEBRISE = 11,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_FLAMINGO = 12,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_HEAVYWALKER_BM9 = 13,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_AU_RUS = 14,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_CARRIAGE = 15,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_SNOWBIKE = 16,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_TUBE = 17,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_FOX = 18,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_PINATA = 19,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_NARUNI = 20,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_BUBBLE = 21,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_SNOWBALL = 22,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_SLEDGE = 23,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_TIGER = 24,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_BIKE = 25,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_DRAGON = 26,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_CRAB = 27,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_BIKE01 = 28,
	ACTION_CONDITION_RIDINGMODE_OUTPUT_MAX = 29
};


// Enum EFGame.EFConst.ActionConditionPropCarryingModeOutput
enum class EActionConditionPropCarryingModeOutput : uint8_t
{
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_RAISED = 0,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_AIMING = 1,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_ONEHAND_RAISED = 2,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_ONEHAND_RELAXED = 3,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_OVERHEAD = 4,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_MIDDLE = 5,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_CROSS = 6,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_FRYING_PAN = 7,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_TWOHAND_CROSS2 = 8,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_BATTLE_RIFLE = 9,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_HAMMER = 10,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_FIRE_BAG = 11,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_CROSSBOW = 12,
	ACTION_CONDITION_PROPCARRYINGMODE_OUTPUT_MAX = 13
};


// Enum EFGame.EFConst.AbilityFeatureValueIndex
enum class EAbilityFeatureValueIndex : uint8_t
{
	ABILITY_FEATURE_VALUE_INDEX    = 0,
	ABILITY_FEATURE_VALUE_INDEX01  = 1,
	ABILITY_FEATURE_VALUE_INDEX02  = 2,
	ABILITY_FEATURE_VALUE_INDEX03  = 3,
	ABILITY_FEATURE_VALUE_INDEX04  = 4,
	ABILITY_FEATURE_VALUE_INDEX_MAX = 5
};


// Enum EFGame.EFConst.YozHighlightType
enum class EYozHighlightType : uint8_t
{
	YOZ_HIGHLIGHT_TYPE_NONE        = 0,
	YOZ_HIGHLIGHT_TYPE_ITEM        = 1,
	YOZ_HIGHLIGHT_TYPE_RATE        = 2,
	YOZ_HIGHLIGHT_TYPE_BOTH        = 3,
	YOZ_HIGHLIGHT_TYPE_MAX         = 4
};


// Enum EFGame.EFConst.StatusEffectCooldownType
enum class EStatusEffectCooldownType : uint8_t
{
	STATUS_EFFECT_COOLDOWN_TYPE_NONE = 0,
	STATUS_EFFECT_COOLDOWN_TYPE_ONCE = 1,
	STATUS_EFFECT_COOLDOWN_TYPE_LOOP = 2,
	STATUS_EFFECT_COOLDOWN_TYPE_LOOP_BY_FINISHED = 3,
	STATUS_EFFECT_COOLDOWN_TYPE_MAX = 4
};


// Enum EFGame.EFConst.StatusEffectVisibleFilter
enum class EStatusEffectVisibleFilter : uint8_t
{
	STATUS_EFFECT_VISIBLE_FILTER_NONE = 0,
	STATUS_EFFECT_VISIBLE_FILTER_HP_GREATER = 1,
	STATUS_EFFECT_VISIBLE_FILTER_ABNORMAL_MOVE = 2,
	STATUS_EFFECT_VISIBLE_FILTER_EXPIRED_CHAIN = 3,
	STATUS_EFFECT_VISIBLE_FILTER_MAX = 4
};


// Enum EFGame.EFConst.StatusEffectTransition
enum class EStatusEffectTransition : uint8_t
{
	STATUS_EFFECT_TRANSITION_NONE  = 0,
	STATUS_EFFECT_TRANSITION_KILLER = 1,
	STATUS_EFFECT_TRANSITION_KILLER_WITH_BASE_STACK = 2,
	STATUS_EFFECT_TRANSITION_AGGRO_ORDER_FIRST = 3,
	STATUS_EFFECT_TRANSITION_AGGRO_ORDER_SECOND = 4,
	STATUS_EFFECT_TRANSITION_MAX   = 5
};


// Enum EFGame.EFConst.StatusEffectExpireCondition
enum class EStatusEffectExpireCondition : uint8_t
{
	STATUS_EFFECT_EXPIRE_CONDITION_NONE = 0,
	STATUS_EFFECT_EXPIRE_CONDITION_ATTACK_COUNT = 1,
	STATUS_EFFECT_EXPIRE_CONDITION_DAMAGED_COUNT = 2,
	STATUS_EFFECT_EXPIRE_CONDITION_STACK_COUNT = 3,
	STATUS_EFFECT_EXPIRE_CONDITION_UNSUMMON = 4,
	STATUS_EFFECT_EXPIRE_CONDITION_IMMUNE_COUNT = 5,
	STATUS_EFFECT_EXPIRE_CONDITION_SKILL_USED_COUNT = 6,
	STATUS_EFFECT_EXPIRE_CONDITION_PORT_LEAVE = 7,
	STATUS_EFFECT_EXPIRE_CONDITION_REVIVE = 8,
	STATUS_EFFECT_EXPIRE_CONDITION_SKILL_FINISHED_COUNT = 9,
	STATUS_EFFECT_EXPIRE_CONDITION_ITEM_EQUIP = 10,
	STATUS_EFFECT_EXPIRE_CONDITION_MAX = 11
};


// Enum EFGame.EFConst.SkillEffectTargetFace
enum class ESkillEffectTargetFace : uint8_t
{
	SKILL_EFFECT_TARGET_FACE_NONE  = 0,
	SKILL_EFFECT_TARGET_FACE_CASTER_POS = 1,
	SKILL_EFFECT_TARGET_FACE_CASTER_POS_OPPOSITE = 2,
	SKILL_EFFECT_TARGET_FACE_CASTER_DIR = 3,
	SKILL_EFFECT_TARGET_FACE_CASTER_DIR_OPPOSITE = 4,
	SKILL_EFFECT_TARGET_FACE_HIT_POS = 5,
	SKILL_EFFECT_TARGET_FACE_HIT_POS_OPPOSITE = 6,
	SKILL_EFFECT_TARGET_FACE_MAX   = 7
};


// Enum EFGame.EFConst.DropPlanType
enum class EDropPlanType : uint8_t
{
	DROP_PLAN_TYPE_NORMAL          = 0,
	DROP_PLAN_TYPE_INDIVIDUAL      = 1,
	DROP_PLAN_TYPE_MAX             = 2
};


// Enum EFGame.EFAction_Notify.CTE_MA_TARGET_TYPE
enum class ECTE_MA_TARGET_TYPE : uint8_t
{
	CTE_MATT_Armor                 = 0,
	CTE_MATT_Weapon                = 1,
	CTE_MATT_ArmorAndWeapon        = 2,
	CTE_MATT_DefaultMesh           = 3,
	CTE_MATT_All                   = 4,
	CTE_MATT_MAX                   = 5
};


// Enum EFGame.EFAction_Notify.CTE_MA_MERGE_METHOD
enum class ECTE_MA_MERGE_METHOD : uint8_t
{
	CTE_MAMM_Continuous            = 0,
	CTE_MAMM_Noncontinuous         = 1,
	CTE_MAMM_MAX                   = 2
};


// Enum EFGame.EFAction_Notify.CTE_NOTIFY_ACTIVATE_TYPE
enum class ECTE_NOTIFY_ACTIVATE_TYPE : uint8_t
{
	CTE_NAT_Ordered                = 0,
	CTE_NAT_OrderedOrEndTime       = 1,
	CTE_NAT_EndTime                = 2,
	CTE_NAT_MAX                    = 3
};


// Enum EFGame.EFAction_Notify.ACTION_PARTICLE_DATA_TYPE
enum class EACTION_PARTICLE_DATA_TYPE : uint8_t
{
	ACTION_PARTICLE_NONE           = 0,
	ACTION_PARTICLE_ACTION         = 1,
	ACTION_PARTICLE_NOTIFY         = 2,
	ACTION_PARTICLE_MAX            = 3
};


// Enum EFGame.EFAction_Notify.PARTICLE_SOUND_DOWN_DATA_TYPE
enum class EPARTICLE_SOUND_DOWN_DATA_TYPE : uint8_t
{
	PARTICLE_SOUND_DOWN_DATA_DEFAULT = 0,
	PARTICLE_SOUND_DOWN_DATA_SPING_BOUND = 1,
	PARTICLE_SOUND_DOWN_DATA_MAX   = 2
};


// Enum EFGame.EFActionConditionSelectNpcIdleType.EFNpcIdleType
enum class EFNpcIdleType : uint8_t
{
	TYPE_NPC_IDLE_NORMAL           = 0,
	TYPE_NPC_IDLE_SC_INTIMATE      = 1,
	TYPE_NPC_IDLE_SC_TALK          = 2,
	TYPE_NPC_IDLE_SC_GREET         = 3,
	TYPE_NPC_IDLE_SC_GREET01       = 4,
	TYPE_NPC_IDLE_SC_SURPRISE      = 5,
	TYPE_NPC_IDLE_SC_CHEER_LOOP    = 6,
	TYPE_NPC_IDLE_SC_CHEER_SITDOWN_M_LOOP = 7,
	TYPE_NPC_IDLE_SC_JEER_LOOP     = 8,
	TYPE_NPC_IDLE_SC_FEAR_LOOP     = 9,
	TYPE_NPC_IDLE_SC_ABSURD_LOOP   = 10,
	TYPE_NPC_IDLE_SC_DENY_LOOP     = 11,
	TYPE_NPC_IDLE_SC_AFFIRMATION_LOOP = 12,
	TYPE_NPC_IDLE_SC_BEG_LOOP      = 13,
	TYPE_NPC_IDLE_SC_LAUGHING_LOOP = 14,
	TYPE_NPC_IDLE_SC_CRYING_LOOP   = 15,
	TYPE_NPC_IDLE_SC_DISAPPOINT_LOOP = 16,
	TYPE_NPC_IDLE_SC_RAGE_LOOP     = 17,
	TYPE_NPC_IDLE_SC_APOLOGIZE_LOOP = 18,
	TYPE_NPC_IDLE_SC_SHYNESS_LOOP  = 19,
	TYPE_NPC_IDLE_SC_PRAY_LOOP     = 20,
	TYPE_NPC_IDLE_ACT_SITDOWN_M_LOOP = 21,
	TYPE_NPC_IDLE_ACT_SITDOWN_M_LOOP01 = 22,
	TYPE_NPC_IDLE_ACT_SITDOWN_M_LOOP02 = 23,
	TYPE_NPC_IDLE_ACT_SITDOWN_L_LOOP = 24,
	TYPE_NPC_IDLE_ACT_SITDOWN_L_LOOP01 = 25,
	TYPE_NPC_IDLE_ACT_SITDOWN_L_LOOP02 = 26,
	TYPE_NPC_IDLE_ACT_LIEDOWN_L_LOOP = 27,
	TYPE_NPC_IDLE_ACT_LIEDOWN_L_LOOP01 = 28,
	TYPE_NPC_IDLE_ACT_LIEDOWN_L_LOOP02 = 29,
	TYPE_NPC_IDLE_ACT_DEADPOSE_U   = 30,
	TYPE_NPC_IDLE_ACT_DEADPOSE_R   = 31,
	TYPE_NPC_IDLE_ACT_DEADPOSE_L   = 32,
	TYPE_NPC_IDLE_ACT_DEADPOSE_D   = 33,
	TYPE_NPC_IDLE_BATTLE           = 34,
	TYPE_NPC_IDLE_ATT_BATTLE_1_01  = 35,
	TYPE_NPC_IDLE_MATINEE_SYNC     = 36,
	TYPE_NPC_IDLE_ACT_CRAFTING_LOOP = 37,
	TYPE_NPC_IDLE_ACT_CRAFTING_SUCCESS = 38,
	TYPE_NPC_IDLE_EVT_RESPAWN_LOOP = 39,
	TYPE_NPC_IDLE_EVT_RESPAWN_END  = 40,
	TYPE_NPC_IDLE_ACT_SPECIAL      = 41,
	TYPE_NPC_IDLE_ACT_SPECIAL01    = 42,
	TYPE_NPC_IDLE_ACT_SPECIAL02    = 43,
	TYPE_NPC_IDLE_ACT_DMG_CRITICAL_LOOP = 44,
	TYPE_NPC_IDLE_ACT_GROUND       = 45,
	TYPE_NPC_IDLE_ACT_ABN_STUN     = 46,
	TYPE_NPC_IDLE_ACT_ABN_BUG      = 47,
	TYPE_NPC_IDLE_SC_FRIENDSHIP    = 48,
	TYPE_NPC_IDLE_SC_FRIENDSHIP01  = 49,
	TYPE_NPC_IDLE_SC_FRIENDSHIP02  = 50,
	TYPE_NPC_IDLE_TOWN_PROPATTACH  = 51,
	TYPE_NPC_IDLE_TOWN_TRAINING_LOOP = 52,
	TYPE_NPC_IDLE_MAX              = 53
};


// Enum EFGame.EFActionNotify_AKEvent.EFActionNotifyFixSoundPosType
enum class EFActionNotifyFixSoundPosType : uint8_t
{
	EFFSPT_None                    = 0,
	EFFSPT_TargetCastPos           = 1,
	EFFSPT_ActorPos                = 2,
	EFFSPT_MAX                     = 3
};


// Enum EFGame.EFActionNotify_Effect.EFTestBuffMode
enum class EFTestBuffMode : uint8_t
{
	EFTestBuff                     = 0,
	EFTestDeBuff                   = 1,
	EFTestBuffMode_MAX             = 2
};


// Enum EFGame.EFActionNotify_Effect.EFHitSegmentDirType
enum class EFHitSegmentDirType : uint8_t
{
	EFHSDT_None                    = 0,
	EFHSDT_Instant                 = 1,
	EFHSDT_RightToLeft             = 2,
	EFHSDT_LeftToRight             = 3,
	EFHSDT_ToFront                 = 4,
	EFHSDT_MAX                     = 5
};


// Enum EFGame.EFActionNotify_CommonActionVoiceSet.EFCommonActionVoiceSetType
enum class EFCommonActionVoiceSetType : uint8_t
{
	CommonActionVoiceSet_Normal    = 0,
	CommonActionVoiceSet_Life      = 1,
	CommonActionVoiceSet_Social    = 2,
	CommonActionVoiceSet_MAX       = 3
};


// Enum EFGame.EFActionNotify_CounterAttack.ECounterAttackType
enum class ECounterAttackType : uint8_t
{
	CounterAttackType_Paralyzation = 0,
	CounterAttackType_GroggySkill  = 1,
	CounterAttackType_Skill        = 2,
	CounterAttackType_MAX          = 3
};


// Enum EFGame.EFParticleSystemType.EPst_SpawnType
enum class EPst_SpawnType : uint8_t
{
	EPst_Must                      = 0,
	EPst_Random                    = 1,
	EPst_Random_Socket             = 2,
	EPst_Random_Bone               = 3,
	EPst_MAX                       = 4
};


// Enum EFGame.EFParticleSystemType.EFBP_SOURCETYPE
enum class EFBP_SOURCETYPE : uint8_t
{
	BPST_OWNER_BONE                = 0,
	BPST_OWNER_BONE_RANDOM         = 1,
	BPST_OWNER_SOCKET              = 2,
	BPST_OWNER_SOCKET_RANDOM       = 3,
	BPST_OWNER_MAX                 = 4
};


// Enum EFGame.EFParticleSystemType.EFEQUIP_PART
enum class EFEQUIP_PART : uint8_t
{
	EFEP_NONE                      = 0,
	EFEP_FACE                      = 1,
	EFEP_HAIR                      = 2,
	EFEP_HEAD                      = 3,
	EFEP_CHEST                     = 4,
	EFEP_PANTS                     = 5,
	EFEP_HAND                      = 6,
	EFEP_SHOULDER                  = 7,
	EFEP_FACEDECO                  = 8,
	EFEP_WEAPON                    = 9,
	EFEP_FACEACC                   = 10,
	EFEP_MAX                       = 11
};


// Enum EFGame.EFParticleSystemType.EFBP_TARGETTYPE
enum class EFBP_TARGETTYPE : uint8_t
{
	BPTT_OWNER_BONE                = 0,
	BPTT_OWNER_BONE_RANDOM         = 1,
	BPTT_OWNER_SOCKET              = 2,
	BPTT_OWNER_SOCKET_RANDOM       = 3,
	BPTT_OTHER_BONE                = 4,
	BPTT_OTHER_SOCKET              = 5,
	BPTT_POINT                     = 6,
	BPTT_MAX                       = 7
};


// Enum EFGame.EFParticleSystemType.EFPS_SORTDIRECTION
enum class EFPS_SORTDIRECTION : uint8_t
{
	PS_SORT_NONE                   = 0,
	PS_SORT_PLUS_X                 = 1,
	PS_SORT_PLUS_Y                 = 2,
	PS_SORT_PLUS_Z                 = 3,
	PS_SORT_MINUS_X                = 4,
	PS_SORT_MINUS_Y                = 5,
	PS_SORT_MINUS_Z                = 6,
	PS_SORT_MAX                    = 7
};


// Enum EFGame.EFParticleSystemType.EFPBS_SpawnType
enum class EFPBS_SpawnType : uint8_t
{
	EFPBS_Must                     = 0,
	EFPBS_Random                   = 1,
	EFPBS_MAX                      = 2
};


// Enum EFGame.EFActionNotify_EquipCommonActionTool.CommonActionAttachType
enum class ECommonActionAttachType : uint8_t
{
	CommonActionAttachType_LookInfo = 0,
	CommonActionAttachType_Mesh    = 1,
	CommonActionAttachType_MAX     = 2
};


// Enum EFGame.EFActionNotify_GamepadVibration.EActionNotifyGamepadVibrationCategory
enum class EActionNotifyGamepadVibrationCategory : uint8_t
{
	EActionNotifyGamepadVibrationCategory_NormalAction = 0,
	EActionNotifyGamepadVibrationCategory_LifeSkillAction = 1,
	EActionNotifyGamepadVibrationCategory_MAX = 2
};


// Enum EFGame.EFActionNotify_GamepadVibration.EActionNotifyGamepadVibrationType
enum class EActionNotifyGamepadVibrationType : uint8_t
{
	EActionNotifyGamepadVibrationType_Soft = 0,
	EActionNotifyGamepadVibrationType_Normal = 1,
	EActionNotifyGamepadVibrationType_Strong = 2,
	EActionNotifyGamepadVibrationType_MAX = 3
};


// Enum EFGame.EFActionNotify_InputTiming.EInputEventType
enum class EInputEventType : uint8_t
{
	IET_ALWAYS                     = 0,
	IET_DOWNED                     = 1,
	IET_UP                         = 2,
	IET_DOWN                       = 3,
	IET_NOTDOWN                    = 4,
	IET_MOVEINPUT                  = 5,
	IET_MOVEINPUT_END              = 6,
	IET_INTERACTIONKEY             = 7,
	IET_MOUSE_DOWNED               = 8,
	IET_MAX                        = 9
};


// Enum EFGame.EFActionNotify_InputTiming.EInputTimingType
enum class EInputTimingType : uint8_t
{
	ITT_NONE                       = 0,
	ITT_MOVECANCEL                 = 1,
	ITT_INPUTCANCEL                = 2,
	ITT_STAGECHANGE                = 3,
	ITT_TIMINGCANCEL               = 4,
	ITT_OVERLAPSKILL               = 5,
	ITT_PERFECTZONE                = 6,
	ITT_MOVEINPUT                  = 7,
	ITT_AUTOMOVEINPUT              = 8,
	ITT_MOVESPEED                  = 9,
	ITT_GETUP_SKILL                = 10,
	ITT_AUTO_SKILL_DIR_INPUT       = 11,
	ITT_MAX                        = 12
};


// Enum EFGame.EFActionNotify_LookTarget.EFActionNotify_LookTarget_Type
enum class EFActionNotify_LookTarget_Type : uint8_t
{
	EFANLT_TIMELOOK                = 0,
	EFANLT_FORCELOOK               = 1,
	EFANLT_MAX                     = 2
};


// Enum EFGame.EFActionNotify_NPCSkillMove.EFActionNotify_NPCSkillMoveType
enum class EFActionNotify_NPCSkillMoveType : uint8_t
{
	EANNMT_SKILL_MOVE_TYPE_DIRECTION = 0,
	EANNMT_SKILL_MOVE_TYPE_TARGET  = 1,
	EANNMT_SKILL_MOVE_TYPE_DESTINATION = 2,
	EANNMT_SKILL_MOVE_TYPE_MAX     = 3
};


// Enum EFGame.EFActionNotify_PlayAffinityEffect.PLAY_AFFINITY_EFFECT_FX_SCALE_TYPE
enum class EPLAY_AFFINITY_EFFECT_FX_SCALE_TYPE : uint8_t
{
	PLAY_AFFINITY_EFFECT_FX_SCALE  = 0,
	PLAY_AFFINITY_EFFECT_FX_SCALE01 = 1,
	PLAY_AFFINITY_EFFECT_FX_SCALE02 = 2,
	PLAY_AFFINITY_EFFECT_FX_SCALE03 = 3,
	PLAY_AFFINITY_EFFECT_FX_SCALE04 = 4,
	PLAY_AFFINITY_EFFECT_FX_SCALE_MAX = 5
};


// Enum EFGame.EFCommonDataDefine.EFMATERIAL_MITVACTION
enum class EFMATERIAL_MITVACTION : uint8_t
{
	EFMATMV_None                   = 0,
	EFMATMV_Spawn                  = 1,
	EFMATMV_Dead                   = 2,
	EFMATMV_MAX                    = 3
};


// Enum EFGame.EFCommonDataDefine.EFMATERIAL_FOOTSTEP
enum class EFMATERIAL_FOOTSTEP : uint8_t
{
	EFMATFS_Default                = 0,
	EFMATFS_Dirt                   = 1,
	EFMATFS_Grass                  = 2,
	EFMATFS_WaterDeep              = 3,
	EFMATFS_WaterSwamp             = 4,
	EFMATFS_WoodFloor              = 5,
	EFMATFS_WoodTree               = 6,
	EFMATFS_MetalHeavy             = 7,
	EFMATFS_MetalLight             = 8,
	EFMATFS_Stone                  = 9,
	EFMATFS_Mud                    = 10,
	EFMATFS_Carpet                 = 11,
	EFMATFS_Snow                   = 12,
	EFMATFS_Magic01                = 13,
	EFMATFS_UnderwaterSand         = 14,
	EFMATFS_UnderwaterStone        = 15,
	EFMATFS_WaterBeach             = 16,
	EFMATFS_FallenLeaves           = 17,
	EFMATFS_MAX                    = 18
};


// Enum EFGame.EFCommonDataDefine.EnvirObjectMoveType
enum class EnvirObjectMoveType : uint8_t
{
	ENVIR_OBJECT_MOVE_TYPE_RANDOM  = 0,
	ENVIR_OBJECT_MOVE_TYPE_TARGET_POS = 1,
	ENVIR_OBJECT_MOVE_TYPE_CHARACTER = 2,
	ENVIR_OBJECT_MOVE_TYPE_ESCAPE  = 3,
	ENVIR_OBJECT_MOVE_TYPE_ARROUND_SPAWN = 4,
	ENVIR_OBJECT_MOVE_TYPE_MAX     = 5
};


// Enum EFGame.EFCommonDataDefine.EnvirObjectState
enum class EnvirObjectState : uint8_t
{
	ENVIR_OBJECT_STATE_IDLE        = 0,
	ENVIR_OBJECT_STATE_MOVE_RANDOM = 1,
	ENVIR_OBJECT_STATE_MOVE_TARGET_POS = 2,
	ENVIR_OBJECT_STATE_MOVE_CHARACTER = 3,
	ENVIR_OBJECT_STATE_MOVE_ESCAPE = 4,
	ENVIR_OBJECT_STATE_MOVE_ARROUND_SPAWN = 5,
	ENVIR_OBJECT_STATE_DEAD        = 6,
	ENVIR_OBJECT_STATE_ANY         = 7,
	ENVIR_OBJECT_STATE_MAX         = 8
};


// Enum EFGame.EFCommonDataDefine.EnvirObjectStateTransition
enum class EnvirObjectStateTransition : uint8_t
{
	ENVIR_OBJECT_STATE_TRANSITION_APPROACH = 0,
	ENVIR_OBJECT_STATE_TRANSITION_PROBABILITY = 1,
	ENVIR_OBJECT_STATE_TRANSITION_HIT = 2,
	ENVIR_OBJECT_STATE_TRANSITION_MAX = 3
};


// Enum EFGame.EFCommonDataDefine.EFSOCKET_STATE
enum class EFSOCKET_STATE : uint8_t
{
	EFST_NonBattle                 = 0,
	EFST_Battle                    = 1,
	EFST_MAX                       = 2
};


// Enum EFGame.EFCommonDataDefine.EF_PARTICLE_SOUND_TYPE
enum class EF_PARTICLE_SOUND_TYPE : uint8_t
{
	EF_PARTICLE_SOUND_FOOTSTEP     = 0,
	EF_PARTICLE_SOUND_KNOCKBACK    = 1,
	EF_PARTICLE_SOUND_DOWN         = 2,
	EF_PARTICLE_SOUND_SKILL_HIT    = 3,
	EF_PARTICLE_SOUND_WEAPON_HIT   = 4,
	EF_PARTICLE_SOUND_ARMOR_HIT    = 5,
	EF_PARTICLE_SOUND_WEAPON_FX    = 6,
	EF_PARTICLE_SOUND_BE_HITTED    = 7,
	EF_PARTICLE_SOUND_WEAPON_ATTRIBUTE = 8,
	EF_PARTICLE_SOUND_BUFF         = 9,
	EF_PARTICLE_SOUND_GROUND_EFFECT = 10,
	EF_PARTICLE_SOUND_BEAM_EFFECT  = 11,
	EF_PARTICLE_SOUND_RANGE_EFFECT = 12,
	EF_PARTICLE_SOUND_COMMON       = 13,
	EF_PARTICLE_SOUND_POSTPROCESSEFFECT_CAMERA = 14,
	EF_PARTICLE_SOUND_ENHANCE      = 15,
	EF_PARTICLE_SOUND_MAX          = 16
};


// Enum EFGame.EFCommonDataDefine.EF_SOUND_CONTAINER_TYPE
enum class EF_SOUND_CONTAINER_TYPE : uint8_t
{
	EF_SOUND_CONTAINER_SKILL_HIT_SET = 0,
	EF_SOUND_CONTAINER_MAX         = 1
};


// Enum EFGame.EFCommonDataDefine.EF_PARTICLE_DATA_TYPE
enum class EF_PARTICLE_DATA_TYPE : uint8_t
{
	EF_PARTICLE_DATA               = 0,
	EF_PARTICLE_DATA_SIMPLE        = 1,
	EF_PARTICLE_DATA_IDENTY        = 2,
	EF_PARTICLE_DATA_MAX           = 3,
	EF_PARTICLE_MAX                = 4
};


// Enum EFGame.EFCommonDataDefine.EF_POSTPROCESS_MATERIALEFFECT_TYPE
enum class EF_POSTPROCESS_MATERIALEFFECT_TYPE : uint8_t
{
	EF_POSTPROCESS_MATERIALEFFECT_CHAOSGATE = 0,
	EF_POSTPROCESS_MATERIALEFFECT_DEAD = 1,
	EF_POSTPROCESS_MATERIALEFFECT_HIT = 2,
	EF_POSTPROCESS_MATERIALEFFECT_SKILL = 3,
	EF_POSTPROCESS_MATERIALEFFECT_STATUS = 4,
	EF_POSTPROCESS_MATERIALEFFECT_HP = 5,
	EF_POSTPROCESS_MATERIALEFFECT_SHIPWRECKED = 6,
	EF_POSTPROCESS_MATERIALEFFECT_CAMERA = 7,
	EF_POSTPROCESS_MATERIALEFFECT_IDENTITY = 8,
	EF_POSTPROCESS_MATERIALEFFECT_EPICSKILL = 9,
	EF_POSTPROCESS_MATERIALEFFECT_MAX = 10
};


// Enum EFGame.EFCommonDataDefine.EF_POSTPROCESS_MATERIALEFFECT_SLOT_TYPE
enum class EF_POSTPROCESS_MATERIALEFFECT_SLOT_TYPE : uint8_t
{
	EF_POSTPROCESS_MATERIALEFFECT_SLOT_STATUS = 0,
	EF_POSTPROCESS_MATERIALEFFECT_SLOT_IDENTITY = 1,
	EF_POSTPROCESS_MATERIALEFFECT_SLOT_MAX = 2
};


// Enum EFGame.EFCommonDataDefine.EF_PARTICLE_BUFF_INFO_TYPE
enum class EF_PARTICLE_BUFF_INFO_TYPE : uint8_t
{
	EF_PARTICLE_BUFF_INFO_TYPE_BASE = 0,
	EF_PARTICLE_BUFF_INFO_TYPE_STACK = 1,
	EF_PARTICLE_BUFF_INFO_TYPE_MAX = 2
};


// Enum EFGame.EFCommonDataDefine.EF_PARTICLE_DATAMODULE_TYPE
enum class EF_PARTICLE_DATAMODULE_TYPE : uint8_t
{
	EF_PARTICLE_DATAMODULE_TYPE_BASE = 0,
	EF_PARTICLE_DATAMODULE_TYPE_AK_EVENT = 1,
	EF_PARTICLE_DATAMODULE_TYPE_MAX = 2
};


// Enum EFGame.EFCommonDataDefine.EFTownCameraOccludingType
enum class EFTownCameraOccludingType : uint8_t
{
	EFTownCameraOccludingType_None = 0,
	EFTownCameraOccludingType_PartlyTransparent = 1,
	EFTownCameraOccludingType_FullyTransparent = 2,
	EFTownCameraOccludingType_MAX  = 3
};


// Enum EFGame.EFCommonDataDefine.EFLinkTrackMoveInputKeyType
enum class EFLinkTrackMoveInputKeyType : uint8_t
{
	EFLinkTrackMoveInputKeyType_Default = 0,
	EFLinkTrackMoveInputKeyType_Random = 1,
	EFLinkTrackMoveInputKeyType_MAX = 2
};


// Enum EFGame.EFCommonDataDefine.EFGAMEMSG_TYPE
enum class EFGAMEMSG_TYPE : uint8_t
{
	eGameMsg_System                = 0,
	eGameMsg_TipsName              = 1,
	eGameMsg_TipsDesc              = 2,
	eGameMsg_Mod                   = 3,
	eGameMsg_Quest                 = 4,
	eGameMsg_TalkAndEvent          = 5,
	eGameMsg_GUI                   = 6,
	eGameMsg_Function              = 7,
	eGameMsg_Combat                = 8,
	eGameMsg_Empty9                = 9,
	eGameMsg_Empty10               = 10,
	eGameMsg_Empty11               = 11,
	eGameMsg_Cinematic             = 12,
	eGameMsg_MAX                   = 13
};


// Enum EFGame.EFCommonDataDefine.EFMatineeSyncTargetType
enum class EFMatineeSyncTargetType : uint8_t
{
	SyncTarget_PC                  = 0,
	SyncTarget_NPC                 = 1,
	SyncTarget_PartyMain           = 2,
	SyncTarget_PartyMember         = 3,
	SyncTarget_DrivenVehicle       = 4,
	SyncTarget_Vehicle             = 5,
	SyncTarget_MAX                 = 6
};


// Enum EFGame.EFCommonDataDefine.DummyActorSpotType
enum class EDummyActorSpotType : uint8_t
{
	SECRET_DUNGEON_MONSTER         = 0,
	SECRET_DUNGEON_BOSS            = 1,
	SECRET_DUNGEON_NPC             = 2,
	SECRET_DUNGEON_REWARD          = 3,
	SECRET_DUNGEON_CHEST           = 4,
	SECRET_DUNGEON_MINING          = 5,
	SECRET_DUNGEON_HERBALISM       = 6,
	SECRET_DUNGEON_LUCKY           = 7,
	SECRET_DUNGEON_ETC             = 8,
	SECRET_DUNGEON_MAX             = 9
};


// Enum EFGame.EFCommonDataDefine.PathUsingType
enum class EPathUsingType : uint8_t
{
	PATH_USING_TYPE_NPC            = 0,
	PATH_USING_TYPE_TRANSPORT      = 1,
	PATH_USING_TYPE_MAX            = 2
};


// Enum EFGame.EFCommonDataDefine.DeployDifficultyLevel
enum class EDeployDifficultyLevel : uint8_t
{
	DEPLOY_DIFFICULTY_LEVEL_NORMAL = 0,
	DEPLOY_DIFFICULTY_LEVEL_HARD   = 1,
	DEPLOY_DIFFICULTY_LEVEL_HELLCHAOS = 2,
	DEPLOY_DIFFICULTY_LEVEL_CHALLENGE = 3,
	DEPLOY_DIFFICULTY_LEVEL_SPECIAL = 4,
	DEPLOY_DIFFICULTY_LEVEL_COMMON = 5,
	DEPLOY_DIFFICULTY_LEVEL_MAX    = 6
};


// Enum EFGame.EFCommonDataDefine.EFDeployType
enum class EFDeployType : uint8_t
{
	DEPLOY_TYPE_NPC                = 0,
	DEPLOY_TYPE_PROP               = 1,
	DEPLOY_TYPE_VEHICLE            = 2,
	DEPLOY_TYPE_TRANSPORT          = 3,
	DEPLOY_TYPE_PATH               = 4,
	DEPLOY_TYPE_TRAP               = 5,
	DEPLOY_TYPE_TOWER              = 6,
	DEPLOY_TYPE_SPOT               = 7,
	DEPLOY_TYPE_QUEST_ZONE         = 8,
	DEPLOY_TYPE_GROUP              = 9,
	DEPLOY_TYPE_NOTE_BALLOON       = 10,
	DEPLOY_TYPE_PORTALPOINT        = 11,
	DEPLOY_TYPE_TELEPORTPOINT      = 12,
	DEPLOY_TYPE_TRACKMOVE          = 13,
	DEPLOY_TYPE_CUSTOMAREA         = 14,
	DEPLOY_TYPE_MAX                = 15
};


// Enum EFGame.EFCommonDataDefine.EFFallDownTextType
enum class EFFallDownTextType : uint8_t
{
	FallDown_Basic                 = 0,
	FallDown_Phantasm              = 1,
	FallDown_MAX                   = 2
};


// Enum EFGame.EFCommonDataDefine.EUPKDataExportType
enum class EUPKDataExportType : uint8_t
{
	UPKDataExport_All              = 0,
	UPKDataExport_Server           = 1,
	UPKDataExport_Client           = 2,
	UPKDataExport_Editor           = 3,
	UPKDataExport_MAX              = 4
};


// Enum EFGame.EFCommonDataDefine.EUPKDataType
enum class EUPKDataType : uint8_t
{
	UPKData_ActionPC               = 0,
	UPKData_ActionNPC              = 1,
	UPKData_ActionTrap             = 2,
	UPKData_ActionVehicle          = 3,
	UPKData_DefaultAnimTree        = 4,
	UPKData_DropModelAnimTree      = 5,
	UPKData_LookInfos              = 6,
	UPKData_CharacterCustomizing   = 7,
	UPKData_ColorPalette           = 8,
	UPKData_TexturePalette         = 9,
	UPKData_ActionShip             = 10,
	UPKData_LookInfoPC             = 11,
	UPKData_LookInfoGibs           = 12,
	UPKData_ActionPolymorph        = 13,
	UPKData_CommonAction           = 14,
	UPKData_ActionGadget           = 15,
	UPKData_CustomizeBoneScale     = 16,
	UPKData_MAX                    = 17
};


// Enum EFGame.EFActionNotify_Rotate.EFActionNotify_Rotate_Type
enum class EFActionNotify_Rotate_Type : uint8_t
{
	EFANRT_ROTATE_TYPE_NONE        = 0,
	EFANRT_ROTATE_TYPE_DEGREE      = 1,
	EFANRT_ROTATE_TYPE_DEGREE_ABSOLUTE = 2,
	EFANRT_ROTATE_TYPE_MAX         = 3
};


// Enum EFGame.EFActionNotify_SoundSetStuff.EFSoundSetStuffType
enum class EFSoundSetStuffType : uint8_t
{
	EFSoundSetStuff_Idle           = 0,
	EFSoundSetStuff_Move           = 1,
	EFSoundSetStuff_Special        = 2,
	EFSoundSetStuff_MAX            = 3
};


// Enum EFGame.EFActionNotify_VoiceSetAdditional.EFVoiceSetAdditionalType
enum class EFVoiceSetAdditionalType : uint8_t
{
	EFVoiceSetAdditional           = 0,
	EFVoiceSetAdditional01         = 1,
	EFVoiceSetAdditional02         = 2,
	EFVoiceSetAdditional03         = 3,
	EFVoiceSetAdditional04         = 4,
	EFVoiceSetAdditional05         = 5,
	EFVoiceSetAdditional06         = 6,
	EFVoiceSetAdditional07         = 7,
	EFVoiceSetAdditional08         = 8,
	EFVoiceSetAdditional09         = 9,
	EFVoiceSetAdditional_MAX       = 10
};


// Enum EFGame.EFActionNotify_VoiceSetAttackCast.EFVoiceSetAttackCastType
enum class EFVoiceSetAttackCastType : uint8_t
{
	EFVoiceSetAttackCast           = 0,
	EFVoiceSetAttackCast01         = 1,
	EFVoiceSetAttackCast02         = 2,
	EFVoiceSetAttackCast03         = 3,
	EFVoiceSetAttackCast04         = 4,
	EFVoiceSetAttackCast05         = 5,
	EFVoiceSetAttackCast06         = 6,
	EFVoiceSetAttackCast07         = 7,
	EFVoiceSetAttackCast08         = 8,
	EFVoiceSetAttackCast09         = 9,
	EFVoiceSetAttackCast10         = 10,
	EFVoiceSetAttackCast11         = 11,
	EFVoiceSetAttackCast12         = 12,
	EFVoiceSetAttackCast13         = 13,
	EFVoiceSetAttackCast14         = 14,
	EFVoiceSetAttackCast15         = 15,
	EFVoiceSetAttackCast16         = 16,
	EFVoiceSetAttackCast17         = 17,
	EFVoiceSetAttackCast18         = 18,
	EFVoiceSetAttackCast19         = 19,
	EFVoiceSetAttackCast_MAX       = 20
};


// Enum EFGame.EFActionNotify_VoiceSetAttackCastLong.EFVoiceSetAttackCastLongType
enum class EFVoiceSetAttackCastLongType : uint8_t
{
	EFVoiceSetAttackCastLong       = 0,
	EFVoiceSetAttackCastLong01     = 1,
	EFVoiceSetAttackCastLong02     = 2,
	EFVoiceSetAttackCastLong03     = 3,
	EFVoiceSetAttackCastLong04     = 4,
	EFVoiceSetAttackCastLong05     = 5,
	EFVoiceSetAttackCastLong06     = 6,
	EFVoiceSetAttackCastLong07     = 7,
	EFVoiceSetAttackCastLong08     = 8,
	EFVoiceSetAttackCastLong09     = 9,
	EFVoiceSetAttackCastLong10     = 10,
	EFVoiceSetAttackCastLong11     = 11,
	EFVoiceSetAttackCastLong12     = 12,
	EFVoiceSetAttackCastLong13     = 13,
	EFVoiceSetAttackCastLong14     = 14,
	EFVoiceSetAttackCastLong15     = 15,
	EFVoiceSetAttackCastLong16     = 16,
	EFVoiceSetAttackCastLong17     = 17,
	EFVoiceSetAttackCastLong18     = 18,
	EFVoiceSetAttackCastLong19     = 19,
	EFVoiceSetAttackCastLong_MAX   = 20
};


// Enum EFGame.EFActionNotify_VoiceSetAttackExec.EFVoiceSetAttackExecType
enum class EFVoiceSetAttackExecType : uint8_t
{
	EFVoiceSetAttackExec           = 0,
	EFVoiceSetAttackExec01         = 1,
	EFVoiceSetAttackExec02         = 2,
	EFVoiceSetAttackExec03         = 3,
	EFVoiceSetAttackExec04         = 4,
	EFVoiceSetAttackExec05         = 5,
	EFVoiceSetAttackExec06         = 6,
	EFVoiceSetAttackExec07         = 7,
	EFVoiceSetAttackExec08         = 8,
	EFVoiceSetAttackExec09         = 9,
	EFVoiceSetAttackExec10         = 10,
	EFVoiceSetAttackExec11         = 11,
	EFVoiceSetAttackExec12         = 12,
	EFVoiceSetAttackExec13         = 13,
	EFVoiceSetAttackExec14         = 14,
	EFVoiceSetAttackExec15         = 15,
	EFVoiceSetAttackExec16         = 16,
	EFVoiceSetAttackExec17         = 17,
	EFVoiceSetAttackExec18         = 18,
	EFVoiceSetAttackExec19         = 19,
	EFVoiceSetAttackExec_MAX       = 20
};


// Enum EFGame.EFActionNotify_VoiceSetAttackShot.EFVoiceSetAttackShotType
enum class EFVoiceSetAttackShotType : uint8_t
{
	EFVoiceSetAttackShot           = 0,
	EFVoiceSetAttackShot01         = 1,
	EFVoiceSetAttackShot02         = 2,
	EFVoiceSetAttackShot03         = 3,
	EFVoiceSetAttackShot04         = 4,
	EFVoiceSetAttackShot05         = 5,
	EFVoiceSetAttackShot06         = 6,
	EFVoiceSetAttackShot07         = 7,
	EFVoiceSetAttackShot08         = 8,
	EFVoiceSetAttackShot09         = 9,
	EFVoiceSetAttackShot10         = 10,
	EFVoiceSetAttackShot11         = 11,
	EFVoiceSetAttackShot12         = 12,
	EFVoiceSetAttackShot13         = 13,
	EFVoiceSetAttackShot14         = 14,
	EFVoiceSetAttackShot15         = 15,
	EFVoiceSetAttackShot16         = 16,
	EFVoiceSetAttackShot17         = 17,
	EFVoiceSetAttackShot18         = 18,
	EFVoiceSetAttackShot19         = 19,
	EFVoiceSetAttackShot_MAX       = 20
};


// Enum EFGame.EFActionNotify_VoiceSetDamage.EFVoiceSetDamageType
enum class EFVoiceSetDamageType : uint8_t
{
	EFVoiceSetDamage               = 0,
	EFVoiceSetDamage01             = 1,
	EFVoiceSetDamage_MAX           = 2
};


// Enum EFGame.EFActionNotify_VoiceSetDeath.EFVoiceSetDeathType
enum class EFVoiceSetDeathType : uint8_t
{
	EFVoiceSetDeath                = 0,
	EFVoiceSetDeath01              = 1,
	EFVoiceSetDeath_Ragdoll        = 2,
	EFVoiceSetDeath_Vox1           = 3,
	EFVoiceSetDeath_Vox2           = 4,
	EFVoiceSetDeath_Vox3           = 5,
	EFVoiceSetDeath_MAX            = 6
};


// Enum EFGame.EFActionNotify_VoiceSetDeathDown.EFVoiceSetDeathDownType
enum class EFVoiceSetDeathDownType : uint8_t
{
	EFVoiceSetDeathDown            = 0,
	EFVoiceSetDeathDown01          = 1,
	EFVoiceSetDeathDown02          = 2,
	EFVoiceSetDeathDown_MAX        = 3
};


// Enum EFGame.EFActionNotify_VoiceSetDown.EFVoiceSetDownType
enum class EFVoiceSetDownType : uint8_t
{
	EFVoiceSetDown                 = 0,
	EFVoiceSetDown01               = 1,
	EFVoiceSetDown02               = 2,
	EFVoiceSetDown_MAX             = 3
};


// Enum EFGame.EFActionNotify_VoiceSetFreezeEnd.EFVoiceSetFreezeEndType
enum class EFVoiceSetFreezeEndType : uint8_t
{
	EFVoiceSetFreezeEnd            = 0,
	EFVoiceSetFreezeEnd01          = 1,
	EFVoiceSetFreezeEnd02          = 2,
	EFVoiceSetFreezeEnd_MAX        = 3
};


// Enum EFGame.EFActionNotify_VoiceSetFreezeLoop.EFVoiceSetFreezeLoopType
enum class EFVoiceSetFreezeLoopType : uint8_t
{
	EFVoiceSetFreezeLoop           = 0,
	EFVoiceSetFreezeLoop01         = 1,
	EFVoiceSetFreezeLoop02         = 2,
	EFVoiceSetFreezeLoop_MAX       = 3
};


// Enum EFGame.EFActionNotify_VoiceSetFreezeStart.EFVoiceSetFreezeStartType
enum class EFVoiceSetFreezeStartType : uint8_t
{
	EFVoiceSetFreezeStart          = 0,
	EFVoiceSetFreezeStart01        = 1,
	EFVoiceSetFreezeStart02        = 2,
	EFVoiceSetFreezeStart_MAX      = 3
};


// Enum EFGame.EFActionNotify_VoiceSetIdle.EFVoiceSetIdleType
enum class EFVoiceSetIdleType : uint8_t
{
	EFVoiceSetIdle_Bat1            = 0,
	EFVoiceSetIdle_Nor1            = 1,
	EFVoiceSetIdle_Nor2            = 2,
	EFVoiceSetIdle_Nor3            = 3,
	EFVoiceSetIdle_MAX             = 4
};


// Enum EFGame.EFActionNotify_VoiceSetRun.EFVoiceSetRunType
enum class EFVoiceSetRunType : uint8_t
{
	EFVoiceSetRun                  = 0,
	EFVoiceSetRun01                = 1,
	EFVoiceSetRun02                = 2,
	EFVoiceSetRun03                = 3,
	EFVoiceSetRun04                = 4,
	EFVoiceSetRun_MAX              = 5
};


// Enum EFGame.EFActionNotify_VoiceSetSpawn.EFVoiceSetSpawnType
enum class EFVoiceSetSpawnType : uint8_t
{
	EFVoiceSetSpawn                = 0,
	EFVoiceSetSpawn01              = 1,
	EFVoiceSetSpawn02              = 2,
	EFVoiceSetSpawn03              = 3,
	EFVoiceSetSpawn04              = 4,
	EFVoiceSetSpawn_MAX            = 5
};


// Enum EFGame.EFActionNotify_VoiceSetStandUp.EFVoiceSetStandUpType
enum class EFVoiceSetStandUpType : uint8_t
{
	EFVoiceSetStandUp              = 0,
	EFVoiceSetStandUp01            = 1,
	EFVoiceSetStandUp02            = 2,
	EFVoiceSetStandUp03            = 3,
	EFVoiceSetStandUp04            = 4,
	EFVoiceSetStandUp_MAX          = 5
};


// Enum EFGame.EFActionNotify_VoiceSetWalk.EFVoiceSetWalkType
enum class EFVoiceSetWalkType : uint8_t
{
	EFVoiceSetWalk                 = 0,
	EFVoiceSetWalk01               = 1,
	EFVoiceSetWalk02               = 2,
	EFVoiceSetWalk03               = 3,
	EFVoiceSetWalk04               = 4,
	EFVoiceSetWalk_MAX             = 5
};


// Enum EFGame.EFActionStage.EFSTAGE_CHANGEDIRTYPE
enum class EFSTAGE_CHANGEDIRTYPE : uint8_t
{
	EFSTGCHANGEDIR_NONE            = 0,
	EFSTGCHANGEDIR_STAGECHANGE     = 1,
	EFSTGCHANGEDIR_ALWAYS          = 2,
	EFSTGCHANGEDIR_MOVEDIR         = 3,
	EFSTGCHANGEDIR_MAX             = 4
};


// Enum EFGame.EFActionStage.EFSTAGE_MOVEPOSTYPE
enum class EFSTAGE_MOVEPOSTYPE : uint8_t
{
	EFSTGMOVEPOSTYPE_ROOTMOTION    = 0,
	EFSTGMOVEPOSTYPE_CONSTNUMBER   = 1,
	EFSTGMOVEPOSTYPE_MOUSEPOS      = 2,
	EFSTGMOVEPOSTYPE_FRONTOFTARGET = 3,
	EFSTGMOVEPOSTYPE_TARGET        = 4,
	EFSTGMOVEPOSTYPE_MAX           = 5
};


// Enum EFGame.EFActionStage.EFSTAGE_TIMINGBARCATEGORY
enum class EFSTAGE_TIMINGBARCATEGORY : uint8_t
{
	EFSTGTIMINGBARCATEGORY_SKILL   = 0,
	EFSTGTIMINGBARCATEGORY_COMMONACTION = 1,
	EFSTGTIMINGBARCATEGORY_LIFEACTION = 2,
	EFSTGTIMINGBARCATEGORY_MUSIC_ACTION = 3,
	EFSTGTIMINGBARCATEGORY_MINING  = 4,
	EFSTGTIMINGBARCATEGORY_LUMBERING = 5,
	EFSTGTIMINGBARCATEGORY_HERBARISM = 6,
	EFSTGTIMINGBARCATEGORY_HUNTING = 7,
	EFSTGTIMINGBARCATEGORY_ARCHEOLOGY = 8,
	EFSTGTIMINGBARCATEGORY_MAX     = 9
};


// Enum EFGame.EFActionStage.EFSTAGE_TIMINGBARTYPE
enum class EFSTAGE_TIMINGBARTYPE : uint8_t
{
	EFSTGTIMINGBAR_NONE            = 0,
	EFSTGTIMINGBAR_READY           = 1,
	EFSTGTIMINGBAR_CASTING         = 2,
	EFSTGTIMINGBAR_CHARGE          = 3,
	EFSTGTIMINGBAR_OVERCHARGE      = 4,
	EFSTGTIMINGBAR_OVERCHARGE_NEXT = 5,
	EFSTGTIMINGBAR_MAX             = 6
};


// Enum EFGame.EFActionStage.EFSTAGE_TIMINGBARTEXTTYPE
enum class EFSTAGE_TIMINGBARTEXTTYPE : uint8_t
{
	EFSTGTIMINGBAR_TEXT_NONE       = 0,
	EFSTGTIMINGBAR_TEXT_PERCENT    = 1,
	EFSTGTIMINGBAR_TEXT_SINGLETIME = 2,
	EFSTGTIMINGBAR_TEXT_TIME_MIN_MAX = 3,
	EFSTGTIMINGBAR_TEXT_VALUE_MIN_MAX = 4,
	EFSTGTIMINGBAR_TEXT_MAX        = 5
};


// Enum EFGame.EFActionStage.SkipCollidePawnType
enum class ESkipCollidePawnType : uint8_t
{
	SKIP_COLLIDE_PAWN_NONE         = 0,
	SKIP_COLLIDE_PAWN_NORMAL       = 1,
	SKIP_COLLIDE_PAWN_FORCE        = 2,
	SKIP_COLLIDE_PAWN_UNCONDITIONAL = 3,
	SKIP_COLLIDE_PAWN_MAX          = 4
};


// Enum EFGame.EFAnimNodeAim.EFAnimNodeAimMode
enum class EFAnimNodeAimMode : uint8_t
{
	EFAIMMODE_NORMAL               = 0,
	EFAIMMODE_CHARCUSTOMIZING      = 1,
	EFAIMMODE_MAX                  = 2
};


// Enum EFGame.EFAnimNotify_DropItemEvent.EFDropItemEventType
enum class EFDropItemEventType : uint8_t
{
	EFDropItemEvent_EffectOnDrop   = 0,
	EFDropItemEvent_EffectOnAir    = 1,
	EFDropItemEvent_EffectOnModel  = 2,
	EFDropItemEvent_DominantLight  = 3,
	EFDropItemEvent_MaterialColor  = 4,
	EFDropItemEvent_MaterialFloat  = 5,
	EFDropItemEvent_AKEvent        = 6,
	EFDropItemEvent_MAX            = 7
};


// Enum EFGame.EFVolume.EFBoundingVolumeType
enum class EFBoundingVolumeType : uint8_t
{
	BV_SPHERE                      = 0,
	BV_CAPSULE                     = 1,
	BV_AABB                        = 2,
	BV_OBB                         = 3,
	BV_POINT                       = 4,
	BV_MAX                         = 5
};


// Enum EFGame.EFCameraShakePlayGroup.EFShakePlayGroupState
enum class EFShakePlayGroupState : uint8_t
{
	EFShakePlayGroupState_None     = 0,
	EFShakePlayGroupState_ContainNoAttenuate = 1,
	EFShakePlayGroupState_Playing  = 2,
	EFShakePlayGroupState_MAX      = 3
};


// Enum EFGame.EFData.EFXLS_HEADER_TYPE
enum class EFXLS_HEADER_TYPE : uint8_t
{
	EFXSLHT_Group                  = 0,
	EFXSLHT_Titles                 = 1,
	EFXSLHT_DisplayName            = 2,
	EFXSLHT_Comments               = 3,
	EFXSLHT_DataType               = 4,
	EFXSLHT_Enum                   = 5,
	EFXSLHT_Range                  = 6,
	EFXSLHT_Content                = 7,
	EFXSLHT_MAX                    = 8
};


// Enum EFGame.EFData_MaskInfo.EFMASK_LEVEL
enum class EFMASK_LEVEL : uint8_t
{
	eMASK_LEVEL_LOW                = 0,
	eMASK_LEVEL_HIGH               = 1,
	eMASK_LEVEL_MAX                = 2
};


// Enum EFGame.EFData_MaskInfo.EFMASK_STAGE
enum class EFMASK_STAGE : uint8_t
{
	eMASK_STAGE_ZERO               = 0,
	eMASK_STAGE_ONE                = 1,
	eMASK_STAGE_TWO                = 2,
	eMASK_STAGE_THREE              = 3,
	eMASK_STAGE_FOUR               = 4,
	eMASK_STAGE_FIVE               = 5,
	eMASK_STAGE_MAX                = 6
};


// Enum EFGame.EFDataContainer_Quest.EQuestStatusType
enum class EQuestStatusType : uint8_t
{
	QST_None                       = 0,
	QST_UnableStart                = 1,
	QST_Start                      = 2,
	QST_Success                    = 3,
	QST_Progress                   = 4,
	QST_Complete                   = 5,
	QST_FAIL                       = 6,
	QST_Ready                      = 7,
	QST_MAX                        = 8
};


// Enum EFGame.EFDropItemEffectInfo.EFDropItemEffectEventType
enum class EFDropItemEffectEventType : uint8_t
{
	EFDropItemEffectEvent_None     = 0,
	EFDropItemEffectEvent_ParticleOnDrop = 1,
	EFDropItemEffectEvent_ParticleOnAir = 2,
	EFDropItemEffectEvent_ParticleOnGround = 3,
	EFDropItemEffectEvent_ParticleOnModel = 4,
	EFDropItemEffectEvent_ParticleOnPickup = 5,
	EFDropItemEffectEvent_ParticleOnTimeout = 6,
	EFDropItemEffectEvent_DominantLight = 7,
	EFDropItemEffectEvent_MaterialColor = 8,
	EFDropItemEffectEvent_MaterialFloat = 9,
	EFDropItemEffectEvent_AKEventOnDrop = 10,
	EFDropItemEffectEvent_AKEventOnAir = 11,
	EFDropItemEffectEvent_AKEventOnGround = 12,
	EFDropItemEffectEvent_MAX      = 13
};


// Enum EFGame.EFEnvironmentInfoVolume.EnvVolumeState
enum class EnvVolumeState : uint8_t
{
	EnvVolumeState_None            = 0,
	EnvVolumeState_BlendIn         = 1,
	EnvVolumeState_BlendInDone     = 2,
	EnvVolumeState_BlendOut        = 3,
	EnvVolumeState_BlendOutDone    = 4,
	EnvVolumeState_ForceBlendOut   = 5,
	EnvVolumeState_MAX             = 6
};


// Enum EFGame.EFExcelShell.ECELL_LOOK
enum class ECELL_LOOK : uint8_t
{
	ECLOOK_CHOCO                   = 0,
	ECLOOK_DEFAULT                 = 1,
	ECLOOK_BLACK                   = 2,
	ECLOOK_RED                     = 3,
	ECLOOK_MAX                     = 4
};


// Enum EFGame.EFExcelShell.EEDIT_MODE
enum class EEDIT_MODE : uint8_t
{
	EEMODE_COMMENT                 = 0,
	EEMODE_TYPE                    = 1,
	EEMODE_TITLE                   = 2,
	EEMODE_DATA                    = 3,
	EEMODE_MAX                     = 4
};


// Enum EFGame.EFGameViewportClient.EFCursor
enum class EFCursor : uint8_t
{
	eCURSOR_DEFAULT                = 0,
	eCURSOR_NONE                   = 1,
	eCURSOR_NORMAL                 = 2,
	eCURSOR_FRIEND                 = 3,
	eCURSOR_ENEMY                  = 4,
	eCURSOR_PORTAL                 = 5,
	eCURSOR_TALK                   = 6,
	eCURSOR_CONTROL                = 7,
	eCURSOR_PICKUP                 = 8,
	eCURSOR_TARGET                 = 9,
	eCURSOR_PROPOBJ_UNUSE          = 10,
	eCURSOR_PROPOBJ_USE            = 11,
	eCURSOR_ITEMUSE_OVERTARGET     = 12,
	eCURSOR_ITEMUSE_NONEOVERTARGET = 13,
	eCURSOR_REPAIR                 = 14,
	eCURSOR_CONTEXT                = 15,
	eCURSOR_REFINE_ENABLE          = 16,
	eCURSOR_REFINE_DISABLE         = 17,
	eCURSOR_FISHING                = 18,
	eCURSOR_LOGGING                = 19,
	eCURSOR_MAPMARKER              = 20,
	eCURSOR_HERBALISM              = 21,
	eCURSOR_MINING                 = 22,
	eCURSOR_HUNTING                = 23,
	eCURSOR_ARCHAEOLOGY            = 24,
	eCURSOR_CREW_DISPOSAL          = 25,
	eCURSOR_VOYAGE_DESTINATION     = 26,
	eCURSOR_HANGUP                 = 27,
	eCURSOR_TOWNCAMERA_MOUSE_DRAG  = 28,
	eCURSOR_CONTEXT_LBRS           = 29,
	eCURSOR_CONTEXT_LBLS           = 30,
	eCURSOR_UI_SIZE                = 31,
	eCURSOR_MAX                    = 32
};


// Enum EFGame.EFGFxWidgetBuddy.EBUDDY_TAB
enum class EBUDDY_TAB : uint8_t
{
	EBUDDY_TAB_BUDDY               = 0,
	EBUDDY_TAB_REQUEST             = 1,
	EBUDDY_TAB_BLOCK               = 2,
	EBUDDY_TAB_RECENT              = 3,
	EBUDDY_TAB_MAX                 = 4
};


// Enum EFGame.EFGFxWidgetBuddy.EBUDDY_GROUP
enum class EBUDDY_GROUP : uint8_t
{
	EBUDDY_GROUP_DEFAULT           = 0,
	EBUDDY_GROUP_REQUEST           = 1,
	EBUDDY_GROUP_RECEIVE           = 2,
	EBUDDY_GROUP_CUSTOM            = 3,
	EBUDDY_GROUP_MAX               = 4
};


// Enum EFGame.EFGFxWidgetInteractionMail.EFMailOpenType
enum class EFMailOpenType : uint8_t
{
	EFMOT_NPC                      = 0,
	EFMOT_ICON                     = 1,
	EFMOT_MAX                      = 2
};


// Enum EFGame.EFGFxWidgetInteractionMail.EFMailReceiverType
enum class EFMailReceiverType : uint8_t
{
	EFMRT_RECENTLY                 = 0,
	EFMRT_FRIEND                   = 1,
	EFMRT_GUILD                    = 2,
	EFMRT_MAX                      = 3
};


// Enum EFGame.EFGFxWidgetMarket.MARKET_CHILDWINDOW_TYPE
enum class EMARKET_CHILDWINDOW_TYPE : uint8_t
{
	MARKET_CHILDWINDOW_TYPE_ADVANCESEARCHPAGE = 0,
	MARKET_CHILDWINDOW_TYPE_REGISTRATORPAGE = 1,
	MARKET_CHILDWINDOW_TYPE_PURCHARGEPAGE = 2,
	MARKET_CHILDWINDOW_TYPE_CANCELATIONPAGE = 3,
	MARKET_CHILDWINDOW_TYPE_ITEMRETURNPAGE = 4,
	MARKET_CHILDWINDOW_TYPE_SEARCHING = 5,
	MARKET_CHILDWINDOW_TYPE_AUCTION_REGISTRATORPAGE = 6,
	MARKET_CHILDWINDOW_TYPE_AUCTION_PURCHARGEPAGE = 7,
	MARKET_CHILDWINDOW_TYPE_AUCTION_CANCELATIONPAGE = 8,
	MARKET_CHILDWINDOW_TYPE_AUCTION_ADVANCESEARCHPAGE = 9,
	MARKET_CHILDWINDOW_TYPE_MAX    = 10
};


// Enum EFGame.EFGFxWidgetMODEntrance.ModEntranceState
enum class EModEntranceState : uint8_t
{
	MOD_ENTRANCE_STATE_ACTIVE      = 0,
	MOD_ENTRANCE_STATE_LOCK        = 1,
	MOD_ENTRANCE_STATE_REQUEST     = 2,
	MOD_ENTRANCE_STATE_MAX         = 3
};


// Enum EFGame.EFGFxWidgetNotice.ENoticeIconType
enum class ENoticeIconType : uint8_t
{
	ENOTICE_ICON_TYPE_MAIL         = 0,
	ENOTICE_ICON_TYPE_EMERGENCY_MAIL = 1,
	ENOTICE_ICON_TYPE_MOD          = 2,
	ENOTICE_ICON_TYPE_COLOSSEUM    = 3,
	ENOTICE_ICON_TYPE_CINEMATIC_DUNGEON = 4,
	ENOTICE_ICON_TYPE_ITEM_ASSEMBLY = 5,
	ENOTICE_ICON_TYPE_COOPQUEST    = 6,
	ENOTICE_ICON_TYPE_MAX          = 7
};


// Enum EFGame.EFGFxWidgetSkillBook.ESKILLBOOKTAB
enum class ESKILLBOOKTAB : uint8_t
{
	ESKILLBOOKTAB_ACTIVE           = 0,
	ESKILLBOOKTAB_PASSIVE          = 1,
	ESKILLBOOKTAB_SPECIAL          = 2,
	ESKILLBOOKTAB_IDENTITY_CARDDECK = 3,
	ESKILLBOOKTAB_MAX              = 4
};


// Enum EFGame.EFGFxWidgetUserTrade.EFUserTradeState
enum class EFUserTradeState : uint8_t
{
	EFUTS_WAITING                  = 0,
	EFUTS_TRADING                  = 1,
	EFUTS_PROGRESSING              = 2,
	EFUTS_MAX                      = 3
};


// Enum EFGame.EFInterpTrackSoundSet.EInterpTrackSoundSetType
enum class EInterpTrackSoundSetType : uint8_t
{
	InterpTrackSoundSet_DownMid    = 0,
	InterpTrackSoundSet_DownSmall  = 1,
	InterpTrackSoundSet_FootStep   = 2,
	InterpTrackSoundSet_KnockBack  = 3,
	InterpTrackSoundSet_Landing    = 4,
	InterpTrackSoundSet_Stuff      = 5,
	InterpTrackSoundSet_MAX        = 6
};


// Enum EFGame.EFInterpTrackSubtitle.ESubtitleDisplayMethod
enum class ESubtitleDisplayMethod : uint8_t
{
	SubtitleDisplay_Normal         = 0,
	SubtitleDisplay_Typing         = 1,
	SubtitleDisplay_Fade           = 2,
	SubtitleDisplay_MAX            = 3
};


// Enum EFGame.EFInterpTrackSubtitleBalloon.ESubtitleBalloonType
enum class ESubtitleBalloonType : uint8_t
{
	SubtitleBalloon_Circle         = 0,
	SubtitleBalloon_Cloud          = 1,
	SubtitleBalloon_Sharp          = 2,
	SubtitleBalloon_MAX            = 3
};


// Enum EFGame.EFInterpTrackVoiceSet.EInterpTrackVoiceSetType
enum class EInterpTrackVoiceSetType : uint8_t
{
	InterpTrackVoiceSet_CommonAction = 0,
	InterpTrackVoiceSet_Additional = 1,
	InterpTrackVoiceSet_AttackCast = 2,
	InterpTrackVoiceSet_AttackCastLong = 3,
	InterpTrackVoiceSet_AttackExec = 4,
	InterpTrackVoiceSet_AttackShot = 5,
	InterpTrackVoiceSet_Damage     = 6,
	InterpTrackVoiceSet_Death      = 7,
	InterpTrackVoiceSet_Down       = 8,
	InterpTrackVoiceSet_Idle       = 9,
	InterpTrackVoiceSet_Run        = 10,
	InterpTrackVoiceSet_Spawn      = 11,
	InterpTrackVoiceSet_StandUp    = 12,
	InterpTrackVoiceSet_Walk       = 13,
	InterpTrackVoiceSet_DeathDown  = 14,
	InterpTrackVoiceSet_FreezeStart = 15,
	InterpTrackVoiceSet_FreezeLoop = 16,
	InterpTrackVoiceSet_FreezeEnd  = 17,
	InterpTrackVoiceSet_MAX        = 18
};


// Enum EFGame.EFIsometricCamera.ISOCamPPMethod
enum class EISOCamPPMethod : uint8_t
{
	ISOCamPP_None                  = 0,
	ISOCamPP_Start                 = 1,
	ISOCamPP_Blend                 = 2,
	ISOCamPP_End                   = 3,
	ISOCamPP_MAX                   = 4
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoExcuteType
enum class ELOAGoExcuteType : uint8_t
{
	LOAGO_EXCUTE_TYPE_EVENT        = 0,
	LOAGO_EXCUTE_TYPE_CHECK        = 1,
	LOAGO_EXCUTE_TYPE_ACTION       = 2,
	LOAGO_EXCUTE_TYPE_MAX          = 3
};


// Enum EFGame.EFLOAGoDataDefine.EFLOAGoEventType
enum class EFLOAGoEventType : uint8_t
{
	LOAGO_EVENT_OBJECT             = 0,
	LOAGO_EVENT_ZONE               = 1,
	LOAGO_EVENT_MAX                = 2
};


// Enum EFGame.EFLOAGoDataDefine.EFLOAGoCheckType
enum class EFLOAGoCheckType : uint8_t
{
	LOAGO_CHECK_MYPLAYER           = 0,
	LOAGO_CHECK_ZONE_TYPE          = 1,
	LOAGO_CHECK_ZONE_ID            = 2,
	LOAGO_CHECK_MAX                = 3
};


// Enum EFGame.EFLOAGoDataDefine.EFLOAGoActionType
enum class EFLOAGoActionType : uint8_t
{
	LOAGO_ACTION_COMMAND           = 0,
	LOAGO_ACTION_PLAY_SKILL        = 1,
	LOAGO_ACTION_PLAY_SOCIALACTION = 2,
	LOAGO_ACTION_MOVE              = 3,
	LOAGO_ACTION_WAIT              = 4,
	LOAGO_ACTION_RANDOM_WARP       = 5,
	LOAGO_ACTION_RANDOM_TELEPORT   = 6,
	LOAGO_ACTION_TOGGLE_ALL_UI     = 7,
	LOAGO_ACTION_MOVE_SEARCH_TARGET = 8,
	LOAGO_ACTION_BATTLE            = 9,
	LOAGO_ACTION_QUEST             = 10,
	LOAGO_ACTION_PARTY             = 11,
	LOAGO_ACTION_RAIDENTERANCE     = 12,
	LOAGO_ACTION_SKILL_PERF_REPORT = 13,
	LOAGO_ACTION_PCITEM_PERF_REPORT = 14,
	LOAGO_ACTION_NPC_PERF_REPORT   = 15,
	LOAGO_ACTION_NPC_SKILL_TEST    = 16,
	LOAGO_ACTION_BATTLEFIELD_ENTERANCE = 17,
	LOAGO_ACTION_INTERACT_PROP     = 18,
	LOAGO_ACTION_PLAY_MUSIC        = 19,
	LOAGO_ACTION_RANDOM_DUMMYPC    = 20,
	LOAGO_ACTION_NPC_SKILL_PERF_REPORT = 21,
	LOAGO_ACTION_PROP_PERF_REPORT  = 22,
	LOAGO_ACTION_MAX               = 23
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoMyPlayerCheckType
enum class ELOAGoMyPlayerCheckType : uint8_t
{
	LOAGO_MYPLATER_CHECK_TYPE_NORMAL = 0,
	LOAGO_MYPLATER_CHECK_TYPE_ABNORMAL = 1,
	LOAGO_MYPLAYER_CHECK_TYPE_DEATH = 2,
	LOAGO_MAX                      = 3
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoZoneTypeCheckType
enum class ELOAGoZoneTypeCheckType : uint8_t
{
	LOAGO_ZONETYPE_CHECK_TYPE_DUNGEON = 0,
	LOAGO_ZONETYPE_CHECK_TYPE_FIELD = 1,
	LOAGO_ZONETYPE_CHECK_TYPE_MOD  = 2,
	LOAGO_ZONETYPE_CHECK_TYPE_RAID = 3,
	LOAGO_ZONETYPE_CHECK_TYPE_MAX  = 4
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoZoneIdCheckType
enum class ELOAGoZoneIdCheckType : uint8_t
{
	LOAGO_ZONEID_CHECK_ID_MATCH    = 0,
	LOAGO_ZONEID_CHECK_ID_DEFERENCE = 1,
	LOAGO_ZONEID_CHECK_ID_MAX      = 2
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoObjectEventType
enum class ELOAGoObjectEventType : uint8_t
{
	LOAGO_OBJECT_EVENT_TYPE_SPAWN  = 0,
	LOAGO_OBJECT_EVENT_TYPE_DESPAWN = 1,
	LOAGO_OBJECT_EVENT_TYPE_MAX    = 2
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoZoneEventType
enum class ELOAGoZoneEventType : uint8_t
{
	LOAGO_ZONE_EVENT_TYPE_ENTER    = 0,
	LOAGO_ZONE_EVENT_TYPE_LEAVE    = 1,
	LOAGO_ZONE_EVENT_TYPE_MAX      = 2
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoMoveSearchTargetOutputType
enum class ELOAGoMoveSearchTargetOutputType : uint8_t
{
	LOAGO_MOVE_SEARCH_TARGET_OUTPUT_SUCCESS = 0,
	LOAGO_MOVE_SEARCH_TARGET_OUTPUT_NEEDTARGET = 1,
	LOAGO_MOVE_SEARCH_TARGET_OUTPUT_FAILED = 2,
	LOAGO_MOVE_SEARCH_TARGET_OUTPUT_MAX = 3
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoMoveTargetType
enum class ELOAGoMoveTargetType : uint8_t
{
	LOAGO_MOVE_TARGET_POSITION     = 0,
	LOAGO_MOVE_TARGET_OBJECT       = 1,
	LOAGO_MOVE_TARGET_MAX          = 2
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGoMoveOutputType
enum class ELOAGoMoveOutputType : uint8_t
{
	LOAGO_MOVE_OUTPUT_SUCCESS      = 0,
	LOAGO_MOVE_OUTPUT_FAILED       = 1,
	LOAGO_MOVE_OUTPUT_MAX          = 2
};


// Enum EFGame.EFLOAGoDataDefine.ELOAGOObjectTargetType
enum class ELOAGOObjectTargetType : uint8_t
{
	LOAGO_OBJECT_TARGET_TYPE_NONE  = 0,
	LOAGO_OBJECT_TARGET_TYPE_NPC   = 1,
	LOAGO_OBJECT_TARGET_TYPE_MONSTER = 2,
	LOAGO_OBJECT_TARGET_TYPE_PROP  = 3,
	LOAGO_OBJECT_TARGET_TYPE_MAX   = 4
};


// Enum EFGame.EFLookInfoDataDefine.ESectionAxis
enum class ESectionAxis : uint8_t
{
	ESA_XAxis                      = 0,
	ESA_XAxis_Negative             = 1,
	ESA_YAxis                      = 2,
	ESA_YAxis_Negative             = 3,
	ESA_ZAxis                      = 4,
	ESA_ZAxis_Negative             = 5,
	ESA_MAX                        = 6
};


// Enum EFGame.EFLookInfoDataDefine.ETowerAnimationType
enum class ETowerAnimationType : uint8_t
{
	TAIT_None                      = 0,
	TAIT_Hit1                      = 1,
	TAIT_Off                       = 2,
	TAIT_MAX                       = 3
};


// Enum EFGame.EFLookInfoDataDefine.EPropAnimationType
enum class EPropAnimationType : uint8_t
{
	PAIT_None                      = 0,
	PAIT_Hit                       = 1,
	PAIT_Hit1                      = 2,
	PAIT_Hit101                    = 3,
	PAIT_Hit2                      = 4,
	PAIT_Hit201                    = 5,
	PAIT_Hit3                      = 6,
	PAIT_On                        = 7,
	PAIT_On2                       = 8,
	PAIT_On3                       = 9,
	PAIT_Off                       = 10,
	PAIT_GoOn                      = 11,
	PAIT_GoOff                     = 12,
	PAIT_Spawn                     = 13,
	PAIT_Despawn                   = 14,
	PAIT_MAX                       = 15
};


// Enum EFGame.EFLookInfoDataDefine.EPropSocketType
enum class EPropSocketType : uint8_t
{
	PropSocket_EnterPos            = 0,
	PropSocket_EnterPos_On         = 1,
	PropSocket_EnterPos_Off        = 2,
	PropSocket_EnterPos_Joint1     = 3,
	PropSocket_EnterPos_Joint2     = 4,
	PropSocket_EnterPos_Joint3     = 5,
	PropSocket_EnterPos_Joint4     = 6,
	PropSocket_LookAt              = 7,
	PropSocket_Hit                 = 8,
	PropSocket_Town_NPC            = 9,
	PropSocket_Town_NPC01          = 10,
	PropSocket_Town_NPC02          = 11,
	PropSocket_Town_NPC03          = 12,
	PropSocket_MAX                 = 13
};


// Enum EFGame.EFLookInfoDataDefine.EFLAYER_LEVEL
enum class EFLAYER_LEVEL : uint8_t
{
	EFLLV_INNER                    = 0,
	EFLLV_OUTER                    = 1,
	EFLLV_MAX                      = 2
};


// Enum EFGame.EFLookInfoDataDefine.EPropMaterialActionParamType
enum class EPropMaterialActionParamType : uint8_t
{
	PROP_MATERIAL_ACTION_PARAM_SCALAR = 0,
	PROP_MATERIAL_ACTION_PARAM_COLOR = 1,
	PROP_MATERIAL_ACTION_PARAM_MAX = 2
};


// Enum EFGame.EFLookInfoDataDefine.EPropSubCollisionUseType
enum class EPropSubCollisionUseType : uint8_t
{
	PSC_USE_PATH_AGENT             = 0,
	PSC_USE_FLOOR                  = 1,
	PSC_USE_MAX                    = 2
};


// Enum EFGame.EFLookInfoDataDefine.EPropSubCollisionPrimitiveType
enum class EPropSubCollisionPrimitiveType : uint8_t
{
	PSC_PRIM_BOX                   = 0,
	PSC_PRIM_CYLINDER              = 1,
	PSC_PRIM_MAX                   = 2
};


// Enum EFGame.EFLookInfoDataDefine.eDirectAttachType
enum class EeDirectAttachType : uint8_t
{
	eDAT_None                      = 0,
	eDAT_Socket1                   = 1,
	eDAT_Socket2                   = 2,
	eDAT_Socket3                   = 3,
	eDAT_MAX                       = 4
};


// Enum EFGame.EFLookInfoDataDefine.eDirectMaskType
enum class EeDirectMaskType : uint8_t
{
	eDMT_None                      = 0,
	eDMT_MASK1                     = 1,
	eDMT_MASK2                     = 2,
	eDMT_MASK3                     = 3,
	eDMT_MASK4                     = 4,
	eDMT_HIDE                      = 5,
	eDMT_MAX                       = 6
};


// Enum EFGame.EFLookInfoDataDefine.EFDROPMODEL_SIZE
enum class EFDROPMODEL_SIZE : uint8_t
{
	EFDMS_Small                    = 0,
	EFDMS_Medium                   = 1,
	EFDMS_Big                      = 2,
	EFDMS_MAX                      = 3
};


// Enum EFGame.EFLookInfoDataDefine.ItemLookInfoCategory
enum class EItemLookInfoCategory : uint8_t
{
	ITEM_LOOK_INFO_CATEGORY_NONE   = 0,
	ITEM_LOOK_INFO_CATEGORY_FACE   = 1,
	ITEM_LOOK_INFO_CATEGORY_HAIR   = 2,
	ITEM_LOOK_INFO_CATEGORY_HEAD   = 3,
	ITEM_LOOK_INFO_CATEGORY_CHEST  = 4,
	ITEM_LOOK_INFO_CATEGORY_SUIT   = 5,
	ITEM_LOOK_INFO_CATEGORY_PANTS  = 6,
	ITEM_LOOK_INFO_CATEGORY_HAND   = 7,
	ITEM_LOOK_INFO_CATEGORY_SHOULDER = 8,
	ITEM_LOOK_INFO_CATEGORY_FACEDECO = 9,
	ITEM_LOOK_INFO_CATEGORY_WEAPON = 10,
	ITEM_LOOK_INFO_CATEGORY_TOOL   = 11,
	ITEM_LOOK_INFO_CATEGORY_FACEACC = 12,
	ITEM_LOOK_INFO_CATEGORY_MAX    = 13
};


// Enum EFGame.EFNPCFunctionDataDefine.ESwitchInteractionInputCaseType
enum class ESwitchInteractionInputCaseType : uint8_t
{
	SwitchInteractionInputCase_G   = 0,
	SwitchInteractionInputCase_H   = 1,
	SwitchInteractionInputCase_MAX = 2
};


// Enum EFGame.EFNPCFunctionDataDefine.ENpcClickProcessType
enum class ENpcClickProcessType : uint8_t
{
	Click_NPCAISendDlg             = 0,
	Click_MODEntrance              = 1,
	Click_ChangeClass              = 2,
	Click_ColosseumEnlist          = 3,
	Click_FGTCube                  = 4,
	Click_LiberateSlave            = 5,
	Click_Market                   = 6,
	Click_VoyageTransport          = 7,
	Click_VoyageTransport_Exit     = 8,
	Click_TownMap                  = 9,
	Click_Stock                    = 10,
	Click_TownResearch             = 11,
	Click_TownItemAssembly         = 12,
	Click_TownMansion              = 13,
	Click_TownDispatch             = 14,
	Click_TownTraining             = 15,
	Click_TownJumping              = 16,
	Click_TownPetFarm              = 17,
	Click_MAX                      = 18
};


// Enum EFGame.EFNPCFunctionDataDefine.ENpcFunctionTalk_FunctionType
enum class ENpcFunctionTalk_FunctionType : uint8_t
{
	FunctionTalk_QuestObjective    = 0,
	FunctionTalk_NPCClickEvent     = 1,
	FunctionTalk_AIEscortStart     = 2,
	FunctionTalk_AIFollowStart     = 3,
	FunctionTalk_AISignal          = 4,
	FunctionTalk_CoopQuestStart    = 5,
	FunctionTalk_FriendshipReward  = 6,
	FunctionTalk_ReturnIslandHearts = 7,
	FunctionTalk_TownInvite        = 8,
	FunctionTalk_MAX               = 9
};


// Enum EFGame.EFNPCFunctionDataDefine.ETalkPopupWindowType
enum class ETalkPopupWindowType : uint8_t
{
	TPW_None                       = 0,
	TPW_QuestStart                 = 1,
	TPW_QuestComplete              = 2,
	TPW_Shop                       = 3,
	TPW_PopupMsgBox                = 4,
	TPW_Max                        = 5
};


// Enum EFGame.EFNPCFunctionDataDefine.ETalkConditionOutputLink
enum class ETalkConditionOutputLink : uint8_t
{
	TCOL_Yes                       = 0,
	TCOL_No                        = 1,
	TCOL_MAX                       = 2
};


// Enum EFGame.EFNPCFunctionDataDefine.ETalkItemOption
enum class ETalkItemOption : uint8_t
{
	TIO_None                       = 0,
	TIO_Equipment                  = 1,
	TIO_Inventory                  = 2,
	TIO_Max                        = 3
};


// Enum EFGame.EFNPCFunctionDataDefine.EFunctionTalkOption
enum class EFunctionTalkOption : uint8_t
{
	FTO_None                       = 0,
	FTO_UpdataQuestByNextLinkSeq   = 1,
	FTO_ImmadiatelyInteractionEnd  = 2,
	FTO_RequestAndInteractionEnd   = 3,
	FTO_MAX                        = 4
};


// Enum EFGame.EFNPCFunctionDataDefine.ETalkPlayerType
enum class ETalkPlayerType : uint8_t
{
	Talk_NPC                       = 0,
	Talk_PC                        = 1,
	Talk_MAX                       = 2
};


// Enum EFGame.EFNPCFunctionDataDefine.EBalloonSizeType
enum class EBalloonSizeType : uint8_t
{
	BalloonSize_Small              = 0,
	BalloonSize_Large              = 1,
	BalloonSize_MAX                = 2
};


// Enum EFGame.EFNPCFunctionDataDefine.EBalloonType
enum class EBalloonType : uint8_t
{
	Balloon_Default                = 0,
	Balloon_Shout                  = 1,
	Balloon_Thinking               = 2,
	Balloon_Invisible              = 3,
	Balloon_MAX                    = 4
};


// Enum EFGame.EFParticleDataModulePawnMaterialParam.EMICParamLoopType
enum class EMICParamLoopType : uint8_t
{
	MIC_PARAM_LOOP_ONCE            = 0,
	MIC_PARAM_LOOP_REWIND          = 1,
	MIC_PARAM_LOOP_PINGPONG        = 2,
	MIC_PARAM_LOOP_MAX             = 3
};


// Enum EFGame.EFParticleModuleLocationCircleSurface.CircleSurfaceAxis
enum class ECircleSurfaceAxis : uint8_t
{
	PMLCS_CIRCLE_AXIS_XY           = 0,
	PMLCS_CIRCLE_AXIS_YZ           = 1,
	PMLCS_CIRCLE_AXIS_ZX           = 2,
	PMLCS_CIRCLE_AXIS_MAX          = 3
};


// Enum EFGame.EFParticleModuleLocationPrimitiveCylinderSpin.CylinderSpinAxis
enum class ECylinderSpinAxis : uint8_t
{
	PMLPCS_AXIS_X                  = 0,
	PMLPCS_AXIS_Y                  = 1,
	PMLPCS_AXIS_Z                  = 2,
	PMLPCS_AXIS_MAX                = 3
};


// Enum EFGame.EFParticleSoundDataBeHittedPawnMaterial.ParticleSoundDataBeHittedPawnMaterial_HitParticleType
enum class EParticleSoundDataBeHittedPawnMaterial_HitParticleType : uint8_t
{
	ePSDBHPM_CHANGE                = 0,
	ePSDBHPM_ADDON                 = 1,
	ePSDBHPM_MAX                   = 2
};


// Enum EFGame.EFParticleSoundDataBuffFX.ParticleSoundDataBuffFX_ScaleOption
enum class EParticleSoundDataBuffFX_ScaleOption : uint8_t
{
	ParticleSoundDataBuffFX_ScaleOption_ORIGIN = 0,
	ParticleSoundDataBuffFX_ScaleOption_ONLY_LOOKINFOSCALE = 1,
	ParticleSoundDataBuffFX_ScaleOption_LOOKINFOSCALE_AND_PAWNSCALE = 2,
	ParticleSoundDataBuffFX_ScaleOption_LOOKINFOSCALE_AND_PAWNSCALE_MINMAX = 3,
	ParticleSoundDataBuffFX_ScaleOption_ORIGIN_AND_IGNORE_SOCKET_SCALE = 4,
	ParticleSoundDataBuffFX_ScaleOption_MAX = 5
};


// Enum EFGame.EFParticleSoundDataBuffFX.ParticleSoundDataBuffFXSet_HitParticleType
enum class EParticleSoundDataBuffFXSet_HitParticleType : uint8_t
{
	ePSDBFS_CHANGE                 = 0,
	ePSDBFS_ADDON                  = 1,
	ePSDBFS_MAX                    = 2
};


// Enum EFGame.EFParticleStackBuffInfo.eParticleStackBuffInfoAddType
enum class EeParticleStackBuffInfoAddType : uint8_t
{
	ePSBAT_Change                  = 0,
	ePSBAT_Add                     = 1,
	ePSBAT_MAX                     = 2
};


// Enum EFGame.EFPCSelectStart.PCSelectStartActionType
enum class EPCSelectStartActionType : uint8_t
{
	PCSelectStartAction_Stand      = 0,
	PCSelectStartAction_Sit        = 1,
	PCSelectStartAction_LieDown    = 2,
	PCSelectStartAction_MAX        = 3
};


// Enum EFGame.EFPlayerCamera.ECameraStyle
enum class ECameraStyle : uint8_t
{
	CameraStyle_Isometric          = 0,
	CameraStyle_ThirdPerson        = 1,
	CameraStyle_Macro              = 2,
	CameraStyle_Customizing        = 3,
	CameraStyle_Interaction        = 4,
	CameraStyle_Free               = 5,
	CameraStyle_Watch              = 6,
	CameraStyle_BackView           = 7,
	CameraStyle_Panning            = 8,
	CameraStyle_TPS                = 9,
	CameraStyle_EditorView         = 10,
	CameraStyle_TopView            = 11,
	CameraStyle_SelfCamera         = 12,
	CameraStyle_VolumeCamera       = 13,
	CameraStyle_TownCamera         = 14,
	CameraStyle_SideViewCamera     = 15,
	CameraStyle_MAX                = 16
};


// Enum EFGame.EFPlayerController.EFPlayerControlInputCommandType
enum class EFPlayerControlInputCommandType : uint8_t
{
	PCICT_NONE                     = 0,
	PCICT_STAND                    = 1,
	PCICT_SKILL                    = 2,
	PCICT_COMMONACTION             = 3,
	PCICT_MOVE_TO_DIR              = 4,
	PCICT_MOVE_TO_FRONT            = 5,
	PCICT_MOVE_TO_POS              = 6,
	PCICT_MOVE_TO_ACTOR            = 7,
	PCICT_CHASE_TO_ACTOR           = 8,
	PCICT_PICK_ITEM                = 9,
	PCICT_BOARD_VEHICLE            = 10,
	PCICT_INTERACT_NPC             = 11,
	PCICT_TOUCH_PROP               = 12,
	PCICT_MAX                      = 13
};


// Enum EFGame.EFPlayerController.EFPlayerControlInputCondition
enum class EFPlayerControlInputCondition : uint8_t
{
	PCIC_NONE                      = 0,
	PCIC_PICK_GROUND               = 1,
	PCIC_PICK_ACTOR                = 2,
	PCIC_PICK_ITEM                 = 3,
	PCIC_PICK_VEHICLE              = 4,
	PCIC_PICK_NPC                  = 5,
	PCIC_PICK_PROP                 = 6,
	PCIC_DIR_INPUT                 = 7,
	PCIC_DIR_INPUTEND              = 8,
	PCIC_SKILLINPUT                = 9,
	PCIC_COMMONACTION_INPUT        = 10,
	PCIC_CHASE_ACTOR               = 11,
	PCIC_MAX                       = 12
};


// Enum EFGame.EFPlayerController.ETargetCastMode
enum class ETargetCastMode : uint8_t
{
	ETCM_NONE                      = 0,
	ETCM_TARGET_AREA               = 1,
	ETCM_TARGET_POS                = 2,
	ETCM_TARGET_OBJECT             = 3,
	ETCM_TARGET_EXPAND_MINIMAP_POS = 4,
	ETCM_MAX                       = 5
};


// Enum EFGame.EFPlayerController.ELineCheckPosType
enum class ELineCheckPosType : uint8_t
{
	LINE_CHECK_POS_TYPE_MOUSE      = 0,
	LINE_CHECK_POS_TYPE_CHARACTER_DIR = 1,
	LINE_CHECK_POS_TYPE_INPUT_DIR  = 2,
	LINE_CHECK_POS_TYPE_MAINTAIN   = 3,
	LINE_CHECK_POS_TYPE_MAX        = 4
};


// Enum EFGame.EFPlayerController.ELineCheckTargetType
enum class ELineCheckTargetType : uint8_t
{
	LINE_CHECK_TARGET_TYPE_WORLD   = 0,
	LINE_CHECK_TARGET_TYPE_ACTORONLY_BY_CURSOR = 1,
	LINE_CHECK_TARGET_TYPE_ACTORONLY_BY_INPUTDIR = 2,
	LINE_CHECK_TARGET_TYPE_MAX     = 3
};


// Enum EFGame.EFPostProcessMaterialContainer.EGameGlobalPostProcessType
enum class EGameGlobalPostProcessType : uint8_t
{
	EGGPPType_HPEffect             = 0,
	EGGPPType_DeadEffect           = 1,
	EGGPPType_ChaosGate            = 2,
	EGGPPType_ShipWreck            = 3,
	EGGPPType_MAX                  = 4
};


// Enum EFGame.EFProjectile.EFSummonsProjHitTargetType
enum class EFSummonsProjHitTargetType : uint8_t
{
	EFSPHTT_None                   = 0,
	EFSPHTT_Pawn                   = 1,
	EFSPHTT_BGround                = 2,
	EFSPHTT_Door                   = 3,
	EFSPHTT_Prop                   = 4,
	EFSPHTT_Tower                  = 5,
	EFSPHTT_MAX                    = 6
};


// Enum EFGame.EFProjectileMissile.MissileProjectileState
enum class EMissileProjectileState : uint8_t
{
	MissileProjectileState_NONE    = 0,
	MissileProjectileState_WAIT    = 1,
	MissileProjectileState_IS_WAITING_NOCOLLISION = 2,
	MissileProjectileState_ACCEL   = 3,
	MissileProjectileState_END     = 4,
	MissileProjectileState_MAX     = 5
};


// Enum EFGame.EFProjectileTrace.TraceProjectileState
enum class ETraceProjectileState : uint8_t
{
	TraceProjectileState_NONE      = 0,
	TraceProjectileState_WAIT      = 1,
	TraceProjectileState_TRACE     = 2,
	TraceProjectileState_END       = 3,
	TraceProjectileState_MAX       = 4
};


// Enum EFGame.EFSequenceSummonsProjectile.EFSummonsATSelect
enum class EFSummonsATSelect : uint8_t
{
	EFSATS_NONE                    = 0,
	EFSATS_Direction               = 1,
	EFSATS_AimPos                  = 2,
	EFSATS_ControlTargetPos        = 3,
	EFSATS_CasterPos               = 4,
	EFSATS_AutoTargetPos           = 5,
	EFSATS_MAX                     = 6
};


// Enum EFGame.EFSequenceSummonsProjectile.EFSummonsHitCheckType
enum class EFSummonsHitCheckType : uint8_t
{
	EFSHCT_Impact                  = 0,
	EFSHCT_SkillEffect             = 1,
	EFSHCT_MAX                     = 2
};


// Enum EFGame.EFSequenceSummonsProjectile.EFSummonsJudgmentRotationDir
enum class EFSummonsJudgmentRotationDir : uint8_t
{
	EFSummonsJudgmentRotationDir_Right = 0,
	EFSummonsJudgmentRotationDir_Left = 1,
	EFSummonsJudgmentRotationDir_MAX = 2
};


// Enum EFGame.EFSequenceSummonsProjectile.EFSummonsHitSetType
enum class EFSummonsHitSetType : uint8_t
{
	EFSHST_None                    = 0,
	EFSHST_AimPos                  = 1,
	EFSHST_MAX                     = 2
};


// Enum EFGame.EFSequenceSummonsProjectileTrace.TraceProjectileTargetSelectType
enum class ETraceProjectileTargetSelectType : uint8_t
{
	TraceProjectileTargetSelectType_Range = 0,
	TraceProjectileTargetSelectType_Target = 1,
	TraceProjectileTargetSelectType_MAX = 2
};


// Enum EFGame.EFSequenceSummonsProjectileTrace.TraceProjectileStartMoveType
enum class ETraceProjectileStartMoveType : uint8_t
{
	TraceProjectileStartMoveType_Move = 0,
	TraceProjectileStartMoveType_Stop = 1,
	TraceProjectileStartMoveType_MAX = 2
};


// Enum EFGame.EFSequenceSummonsProjectileTrace.TraceProjectileEndMoveType
enum class ETraceProjectileEndMoveType : uint8_t
{
	TraceProjectileEndMoveType_Move = 0,
	TraceProjectileEndMoveType_Stop = 1,
	TraceProjectileEndMoveType_Explode = 2,
	TraceProjectileEndMoveType_Destroy = 3,
	TraceProjectileEndMoveType_MAX = 4
};


// Enum EFGame.EFSequenceSummonsProjectileTrace.TraceProjectileTargetOptionType
enum class ETraceProjectileTargetOptionType : uint8_t
{
	TraceProjectileTargetOptionType_None = 0,
	TraceProjectileTargetOptionType_SelfOnly = 1,
	TraceProjectileTargetOptionType_MAX = 2
};


// Enum EFGame.EFQuestDataDefine.EQuestOfferFailOption_GiveObjectType
enum class EQuestOfferFailOption_GiveObjectType : uint8_t
{
	QOFOGOT_None                   = 0,
	QOFOGOT_Item                   = 1,
	QOFOGOT_Buff                   = 2,
	QOFOGOT_MAX                    = 3
};


// Enum EFGame.EFQuestDataDefine.EQuestStart
enum class EQuestStart : uint8_t
{
	QuestStart_Npc                 = 0,
	QuestStart_QuestItem           = 1,
	QuestStart_Auto                = 2,
	QuestStart_MAX                 = 3
};


// Enum EFGame.EFQuestDataDefine.EPeriodQuestContentType
enum class EPeriodQuestContentType : uint8_t
{
	PERIOD_QUEST_CONTENT_TYPE_NONE = 0,
	PERIOD_QUEST_CONTENT_TYPE_MOD  = 1,
	PERIOD_QUEST_CONTENT_TYPE_PvP  = 2,
	PERIOD_QUEST_CONTENT_TYPE_VOYAGE = 3,
	PERIOD_QUEST_CONTENT_TYPE_PROFESSION = 4,
	PERIOD_QUEST_CONTENT_TYPE_INTIMATE = 5,
	PERIOD_QUEST_CONTENT_TYPE_ITEM = 6,
	PERIOD_QUEST_CONTENT_TYPE_CHAOS_GATE = 7,
	PERIOD_QUEST_CONTENT_TYPE_RAID = 8,
	PERIOD_QUEST_CONTENT_TYPE_LABYRINTH = 9,
	PERIOD_QUEST_CONTENT_TYPE_REVERSERUIN = 10,
	PERIOD_QUEST_CONTENT_TYPE_COMBAT = 11,
	PERIOD_QUEST_CONTENT_TYPE_MAX  = 12
};


// Enum EFGame.EFQuestDataDefine.ECoopQuestTeamCompetitionResult
enum class ECoopQuestTeamCompetitionResult : uint8_t
{
	COOP_QUEST_TEAM_COMPETITION_RESULT_NONE = 0,
	COOP_QUEST_TEAM_COMPETITION_RESULT_WIN = 1,
	COOP_QUEST_TEAM_COMPETITION_RESULT_LOSE = 2,
	COOP_QUEST_TEAM_COMPETITION_RESULT_MAX = 3
};


// Enum EFGame.EFQuestDataDefine.EQuestEndConditionSuffix
enum class EQuestEndConditionSuffix : uint8_t
{
	END_COUNT_SUFFIX_NONE          = 0,
	END_COUNT_SUFFIX_PERSON        = 1,
	END_COUNT_SUFFIX_UNIT          = 2,
	END_COUNT_SUFFIX_MONSTER       = 3,
	END_COUNT_SUFFIX_POINT         = 4,
	END_COUNT_SUFFIX_MAX           = 5
};


// Enum EFGame.EFQuestDataDefine.EQuestEndConditionNoun
enum class EQuestEndConditionNoun : uint8_t
{
	END_COUNT_NOUN_NONE            = 0,
	END_COUNT_NOUN_ACQUISITION     = 1,
	END_COUNT_NOUN_RESCUE          = 2,
	END_COUNT_NOUN_HARVEST         = 3,
	END_COUNT_NOUN_COLLECTING      = 4,
	END_COUNT_NOUN_CAPTURE         = 5,
	END_COUNT_NOUN_EXTRACTION      = 6,
	END_COUNT_NOUN_REMOVAL         = 7,
	END_COUNT_NOUN_PICKUP          = 8,
	END_COUNT_NOUN_MAX             = 9
};


// Enum EFGame.EFQuestDataDefine.ETownQuestType
enum class ETownQuestType : uint8_t
{
	TonwnQuest_Guide               = 0,
	TonwnQuest_Mission             = 1,
	TonwnQuest_MAX                 = 2
};


// Enum EFGame.EFQuestDataDefine.EGiveUpOfferReturnType
enum class EGiveUpOfferReturnType : uint8_t
{
	GORT_None                      = 0,
	GORT_GiveUp                    = 1,
	GORT_MAX                       = 2
};


// Enum EFGame.EFQuestDataDefine.EOfferReturnType
enum class EOfferReturnType : uint8_t
{
	ORT_None                       = 0,
	ORT_QuestComplete              = 1,
	ORT_QuestStepComplete          = 2,
	ORT_MAX                        = 3
};


// Enum EFGame.EFSceneCapture2DActor.EBindCaptureType
enum class EBindCaptureType : uint8_t
{
	BindCapture_None               = 0,
	BindCapture_LocalPlayer        = 1,
	BindCapture_OtherPlayer        = 2,
	BindCapture_Snapshot           = 3,
	BindCapture_CashShop           = 4,
	BindCapture_Town               = 5,
	BindCapture_Pet                = 6,
	BindCapture_MVP_Main           = 7,
	BindCapture_MVP_Sub            = 8,
	BindCapture_MAX                = 9
};


// Enum EFGame.EFSeqAct_ChangeTranslucentVolumeAction.ChangeTranslucentVolumeAction
enum class EChangeTranslucentVolumeAction : uint8_t
{
	ChangeTranslucentVolumeAction_Restore = 0,
	ChangeTranslucentVolumeAction_ForceLeave = 1,
	ChangeTranslucentVolumeAction_ForceEnter = 2,
	ChangeTranslucentVolumeAction_MAX = 3
};


// Enum EFGame.EFSeqAct_Matinee.EFAutoBlendState
enum class EFAutoBlendState : uint8_t
{
	AutoBlendState_NeedInit        = 0,
	AutoBlendState_Applyed         = 1,
	AutoBlendState_NA              = 2,
	AutoBlendState_MAX             = 3
};


// Enum EFGame.EFSeqAct_NPCController.EUNM_SNPC_workCompletedState
enum class EUNM_SNPC_workCompletedState : uint8_t
{
	eSANCWCS_goto_Move             = 0,
	eSANCWCS_goto_EventMove        = 1,
	eSANCWCS_goto_EventWait        = 2,
	eSANCWCS_goto_Exit             = 3,
	eSANCWCS_goto_MAX              = 4
};


// Enum EFGame.EFSeqAct_NPCController.ENUM_SNPC_NPCState
enum class ENUM_SNPC_NPCState : uint8_t
{
	eSANCNS_SetMove                = 0,
	eSANCNS_mMove                  = 1,
	eSANCNS_mNext                  = 2,
	eSANCNS_mWait                  = 3,
	eSANCNS_mLoop                  = 4,
	eSANCNS_mExit                  = 5,
	eSANCNS_SetetMove              = 6,
	eSANCNS_etMove                 = 7,
	eSANCNS_etNext                 = 8,
	eSANCNS_etLoop                 = 9,
	eSANCNS_etExit                 = 10,
	eSANCNS_SetDelay               = 11,
	eSANCNS_Delay                  = 12,
	eSANCNS_MAX                    = 13
};


// Enum EFGame.EFSeqAct_NPCController.ENUM_SNPC_PlayAnimationName
enum class ENUM_SNPC_PlayAnimationName : uint8_t
{
	eSANCAN_Empty                  = 0,
	eSANCAN_Stand                  = 1,
	eSANCAN_Walk                   = 2,
	eSANCAN_Run                    = 3,
	eSANCAN_Idle1                  = 4,
	eSANCAN_Idle2                  = 5,
	eSANCAN_MAX                    = 6
};


// Enum EFGame.EFSeqAct_NPCController.ENUM_SNPC_PlayAnimState
enum class ENUM_SNPC_PlayAnimState : uint8_t
{
	eSANCAS_Not_Play               = 0,
	eSANCAS_Start                  = 1,
	eSANCAS_Arrived                = 2,
	eSANCAS_MAX                    = 3
};


// Enum EFGame.EFSeqCond_SwitchCountry.ESwitchCountryType
enum class ESwitchCountryType : uint8_t
{
	SCT_DEFAULT                    = 0,
	SCT_KOR                        = 1,
	SCT_RUS                        = 2,
	SCT_JPN                        = 3,
	SCT_USA                        = 4,
	SCT_CHN                        = 5,
	SCT_MAX                        = 6
};


// Enum EFGame.EFSequenceSummonsAction.EFSummonsSummonProjectileUsePlatformType
enum class EFSummonsSummonProjectileUsePlatformType : uint8_t
{
	EFSSPUP_Both                   = 0,
	EFSSPUP_Client                 = 1,
	EFSSPUP_Server                 = 2,
	EFSSPUP_MAX                    = 3
};


// Enum EFGame.EFSequenceSummonsAction.EFSummonsSkeletalMeshActorOutlineType
enum class EFSummonsSkeletalMeshActorOutlineType : uint8_t
{
	EFSSMAO_NONE                   = 0,
	EFSSMAO_ALWAYS                 = 1,
	EFSSMAO_MAX                    = 2
};


// Enum EFGame.EFSequenceSummonsActionAccel.EFSummonsAAType
enum class EFSummonsAAType : uint8_t
{
	EFSAAT_None                    = 0,
	EFSAAT_Ratio                   = 1,
	EFSAAT_Time                    = 2,
	EFSAAT_DecreaseTime            = 3,
	EFSAAT_MAX                     = 4
};


// Enum EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataMultiUseValueEnum
enum class EFSequenceSummonsActionBankDataMultiUseValueEnum : uint8_t
{
	EFSSABDMUV_None                = 0,
	EFSSABDMUV_DistDamageRatio     = 1,
	EFSSABDMUV_HitDamageCountRatio = 2,
	EFSSABDMUV_SkillEffectActiveCountRatio = 3,
	EFSSABDMUV_SkillEffectHitCountRatio = 4,
	EFSSABDMUV_MAX                 = 5
};


// Enum EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataBOOLValueEnum
enum class EFSequenceSummonsActionBankDataBOOLValueEnum : uint8_t
{
	EFSABBVE_NONE                  = 0,
	EFSABBVE_FixArea_DecalOverPrevent = 1,
	EFSABBVE_MAX                   = 2
};


// Enum EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataFloatValueEnum
enum class EFSequenceSummonsActionBankDataFloatValueEnum : uint8_t
{
	EFSABFVE_NONE                  = 0,
	EFSABFVE_Projectile_ResScale   = 1,
	EFSABFVE_FixArea_LoopFXStartTime = 2,
	EFSABFVE_FixArea_DecalFadeOutTime = 3,
	EFSABFVE_MAX                   = 4
};


// Enum EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataParticleEnum
enum class EFSequenceSummonsActionBankDataParticleEnum : uint8_t
{
	EFSABPE_NONE                   = 0,
	EFSABPE_Trail                  = 1,
	EFSABPE_Explode                = 2,
	EFSABPE_NaturalDie             = 3,
	EFSABPE_StartFX                = 4,
	EFSABPE_StartDecal             = 5,
	EFSABPE_LoopFX                 = 6,
	EFSABPE_LoopDecal              = 7,
	EFSABPE_MAX                    = 8
};


// Enum EFGame.EFSequenceSummonsActionSetSkeletalMesh.EFProjectileActionSkeletalMeshMaterialParameterDelayType
enum class EFProjectileActionSkeletalMeshMaterialParameterDelayType : uint8_t
{
	EFPASMD_Time                   = 0,
	EFPASMD_Dist                   = 1,
	EFPASMD_MAX                    = 2
};


// Enum EFGame.EFSequenceSummonsActionSetSkeletalMesh.EFProjectileActionSkeletalMeshMaterialParameterValueType
enum class EFProjectileActionSkeletalMeshMaterialParameterValueType : uint8_t
{
	EFPASMMP_None                  = 0,
	EFPASMMP_Speed                 = 1,
	EFPASMMP_Time                  = 2,
	EFPASMMP_Dist                  = 3,
	EFPASMMP_MAX                   = 4
};


// Enum EFGame.EFSkeletalMeshActorPCLookInfoMAT.EPCLookInfoActorNameTagType
enum class EPCLookInfoActorNameTagType : uint8_t
{
	PCLookInfoActorNameTagType_Local = 0,
	PCLookInfoActorNameTagType_Neutral = 1,
	PCLookInfoActorNameTagType_Enemy = 2,
	PCLookInfoActorNameTagType_Party = 3,
	PCLookInfoActorNameTagType_MAX = 4
};


// Enum EFGame.EFSpawnEnvirNpc.EN_AI_Type
enum class EN_AI_Type : uint8_t
{
	eEN_AI_MOVE                    = 0,
	eEN_AI_MOVE_WITH_ESCAPE        = 1,
	eEN_AI_MOVE_WITH_DIE           = 2,
	eEN_AI_MAX                     = 3
};


// Enum EFGame.EFTable.EFTableDataType
enum class EFTableDataType : uint8_t
{
	EFTDT_Empty                    = 0,
	EFTDT_Int32                    = 1,
	EFTDT_Int64                    = 2,
	EFTDT_Double                   = 3,
	EFTDT_String                   = 4,
	EFTDT_Float                    = 5,
	EFTDT_Bool                     = 6,
	EFTDT_MAX                      = 7
};


// Enum EFGame.EFTownCamera.ETownCameraMode
enum class ETownCameraMode : uint8_t
{
	TownCamera_Management          = 0,
	TownCamera_Deploy              = 1,
	TownCamera_MAX                 = 2
};


// Enum EFGame.EFTownCamera.ETownCameraMoveState
enum class ETownCameraMoveState : uint8_t
{
	TownCameraMove_None            = 0,
	TownCameraMove_MouseDrag       = 1,
	TownCameraMove_Keyboard        = 2,
	TownCameraMove_MAX             = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerKismetFadingType
enum class ETriggerKismetFadingType : uint8_t
{
	TKFT_FadeIn                    = 0,
	TKFT_FadeOutIn                 = 1,
	TKFT_FadeOut                   = 2,
	TKFT_MAX                       = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerKismetCombatStateType
enum class ETriggerKismetCombatStateType : uint8_t
{
	TKCST_None                     = 0,
	TKCST_Combat                   = 1,
	TKCST_Idle                     = 2,
	TKCST_MAX                      = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerSceneEventFlagType
enum class ETriggerSceneEventFlagType : uint8_t
{
	TCEFT_None                     = 0,
	TCEFT_Off                      = 1,
	TCEFT_On                       = 2,
	TCEFT_MAX                      = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerCheckState_Random
enum class ETriggerCheckState_Random : uint8_t
{
	TCE_Random_Case1               = 0,
	TCE_Random_Case2               = 1,
	TCE_Random_Case3               = 2,
	TCE_Random_Case4               = 3,
	TCE_Random_Case5               = 4,
	TCE_Random_MAX                 = 5
};


// Enum EFGame.EFTriggerDataDefine.ETriggerInputLockType
enum class ETriggerInputLockType : uint8_t
{
	TILT_Key                       = 0,
	TILT_Move                      = 1,
	TILT_MAX                       = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerSkipType
enum class ETriggerSkipType : uint8_t
{
	TST_Available                  = 0,
	TST_Disable_Newbie             = 1,
	TST_Disable                    = 2,
	TST_MAX                        = 3
};


// Enum EFGame.EFTriggerDataDefine.EHitPropRestoreState
enum class EHitPropRestoreState : uint8_t
{
	HPRS_NONE                      = 0,
	HPRS_RESTORE_ENABLE            = 1,
	HPRS_RESTORE_DISABLE           = 2,
	HPRS_MAX                       = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerUnitConnectionType
enum class ETriggerUnitConnectionType : uint8_t
{
	TriggerUnitConnectionType_None = 0,
	TriggerUnitConnectionType_Default = 1,
	TriggerUnitConnectionType_Condition = 2,
	TriggerUnitConnectionType_MAX  = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerActionState
enum class ETriggerActionState : uint8_t
{
	TAS_Out                        = 0,
	TAS_MAX                        = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerItemEventType
enum class ETriggerItemEventType : uint8_t
{
	TIET_Equip                     = 0,
	TIET_Unequip                   = 1,
	TIET_Give                      = 2,
	TIET_Delete                    = 3,
	TIET_MAX                       = 4
};


// Enum EFGame.EFTriggerDataDefine.ETriggerCheckState_ZoneLevel
enum class ETriggerCheckState_ZoneLevel : uint8_t
{
	TCS_ZoneLevel_Normal           = 0,
	TCS_ZoneLevel_Hard             = 1,
	TCS_ZoneLevel_Hellchaos        = 2,
	TCS_ZoneLevel_Challenge        = 3,
	TCS_ZoneLevel_Special          = 4,
	TCS_ZoneLevel_MAX              = 5
};


// Enum EFGame.EFTriggerDataDefine.ETriggerCheckState
enum class ETriggerCheckState : uint8_t
{
	TCS_Yes                        = 0,
	TCS_No                         = 1,
	TCS_MAX                        = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_CooperationQuest
enum class ETriggerConditionState_CooperationQuest : uint8_t
{
	TCS_CooperationQuest_Start     = 0,
	TCS_CooperationQuest_Complete  = 1,
	TCS_CooperationQuest_Fail      = 2,
	TCS_CooperationQuest_Cancel    = 3,
	TCS_CooperationQuest_Condition = 4,
	TCS_CooperationQuest_Condition01 = 5,
	TCS_CooperationQuest_Condition02 = 6,
	TCS_CooperationQuest_Condition03 = 7,
	TCS_CooperationQuest_Condition04 = 8,
	TCS_CooperationQuest_MAX       = 9
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_Vehicle
enum class ETriggerConditionState_Vehicle : uint8_t
{
	TCS_Vehicle_Enter              = 0,
	TCS_Vehicle_Leave              = 1,
	TCS_Vehicle_MAX                = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_Tower
enum class ETriggerConditionState_Tower : uint8_t
{
	TCS_Tower_Hit                  = 0,
	TCS_Tower_Destruct             = 1,
	TCS_Tower_MAX                  = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_TrackMoveVolumeProp
enum class ETriggerConditionState_TrackMoveVolumeProp : uint8_t
{
	TCS_TrackMoveVolumeProp_TrackMoveStart1 = 0,
	TCS_TrackMoveVolumeProp_TrackMoveStart2 = 1,
	TCS_TrackMoveVolumeProp_TrackMoveStart3 = 2,
	TCS_TrackMoveVolumeProp_TrackMoveFailure = 3,
	TCS_TrackMoveVolumeProp_MAX    = 4
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_InputKeyVolumeProp
enum class ETriggerConditionState_InputKeyVolumeProp : uint8_t
{
	TCS_InputKeyVolumeProp_InputKey = 0,
	TCS_InputKeyVolumeProp_MAX     = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_StationVolumeProp
enum class ETriggerConditionState_StationVolumeProp : uint8_t
{
	TCS_StationVolumeProp_Disable  = 0,
	TCS_StationVolumeProp_MAX      = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_BossRoomVolumeProp
enum class ETriggerConditionState_BossRoomVolumeProp : uint8_t
{
	TCS_BossRoomVolumeProp_AllDead = 0,
	TCS_BossRoomVolumeProp_AllExit = 1,
	TCS_BossRoomVolumeProp_MAX     = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_AssembleVolumeProp
enum class ETriggerConditionState_AssembleVolumeProp : uint8_t
{
	TCS_AssembleVolumeProp_Assemble = 0,
	TCS_AssembleVolumeProp_MAX     = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_VolumeProp
enum class ETriggerConditionState_VolumeProp : uint8_t
{
	TCS_VolumeProp_Enter           = 0,
	TCS_VolumeProp_Leave           = 1,
	TCS_VolumeProp_On              = 2,
	TCS_VolumeProp_Off             = 3,
	TCS_VolumeProp_MAX             = 4
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_JointProp
enum class ETriggerConditionState_JointProp : uint8_t
{
	TCS_JointProp_Attach           = 0,
	TCS_JointProp_Detach           = 1,
	TCS_JointProp_MAX              = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_SwitchProp
enum class ETriggerConditionState_SwitchProp : uint8_t
{
	TCS_SwitchProp_On              = 0,
	TCS_SwitchProp_Off             = 1,
	TCS_SwitchProp_MAX             = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_SharedProp
enum class ETriggerConditionState_SharedProp : uint8_t
{
	TCS_SharedProp_Click           = 0,
	TCS_SharedProp_Despawn         = 1,
	TCS_SharedProp_MAX             = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_RotatorProp
enum class ETriggerConditionState_RotatorProp : uint8_t
{
	TCS_RotatorProp_RotateStart    = 0,
	TCS_RotatorProp_RotateCancel   = 1,
	TCS_RotatorProp_RotateEnd      = 2,
	TCS_RotatorProp_MAX            = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_GripProp
enum class ETriggerConditionState_GripProp : uint8_t
{
	TCS_GripProp_Grip              = 0,
	TCS_GripProp_MAX               = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_DoorProp
enum class ETriggerConditionState_DoorProp : uint8_t
{
	TCS_DoorProp_Open              = 0,
	TCS_DoorProp_Close             = 1,
	TCS_DoorProp_MAX               = 2
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_ClickProp
enum class ETriggerConditionState_ClickProp : uint8_t
{
	TCS_ClickProp_Click            = 0,
	TCS_ClickProp_MAX              = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_PickupProp
enum class ETriggerConditionState_PickupProp : uint8_t
{
	TCS_PickupProp_Pickup          = 0,
	TCS_PickupProp_MAX             = 1
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_HitProp
enum class ETriggerConditionState_HitProp : uint8_t
{
	TCS_HitProp_Hit                = 0,
	TCS_HitProp_Destruct           = 1,
	TCS_HitProp_On2                = 2,
	TCS_HitProp_On3                = 3,
	TCS_HitProp_RestoreStart       = 4,
	TCS_HitProp_RestoreFinish      = 5,
	TCS_HitProp_MAX                = 6
};


// Enum EFGame.EFTriggerDataDefine.ETriggerConditionState_NPC
enum class ETriggerConditionState_NPC : uint8_t
{
	TCS_NPC_Dead                   = 0,
	TCS_NPC_Spawn                  = 1,
	TCS_NPC_Event1                 = 2,
	TCS_NPC_Event2                 = 3,
	TCS_NPC_Event3                 = 4,
	TCS_NPC_Event4                 = 5,
	TCS_NPC_Event5                 = 6,
	TCS_NPC_PathEvent              = 7,
	TCS_NPC_RecvSignal             = 8,
	TCS_NPC_PathNodeEvent          = 9,
	TCS_NPC_MAX                    = 10
};


// Enum EFGame.EFTriggerDataDefine.ETriggerCheckNodeType
enum class ETriggerCheckNodeType : uint8_t
{
	TriggerCheck_DeadNPC           = 0,
	TriggerCheck_QuestState        = 1,
	TriggerCheck_IsDespawnProp     = 2,
	TriggerCheck_PropState         = 3,
	TriggerCheck_InVolumeProp      = 4,
	TriggerCheck_Random            = 5,
	TriggerCheck_HaveItem          = 6,
	TriggerCheck_DespawnTower      = 7,
	TriggerCheck_PlayerClass       = 8,
	TriggerCheck_LifeVessel        = 9,
	TriggerCheck_ZoneLevel         = 10,
	TriggerCheck_RandomCase        = 11,
	TriggerCheck_JumpingPlayer     = 12,
	TriggerCheck_RaidContentsType  = 13,
	TriggerCheck_Polymorph         = 14,
	TriggerCheck_ZoneLevelCase     = 15,
	TriggerCheck_BossBattle        = 16,
	TriggerCheck_MAX               = 17
};


// Enum EFGame.EFTriggerDataDefine.ETriggerSceneEventType
enum class ETriggerSceneEventType : uint8_t
{
	TCET_Sound                     = 0,
	TCET_Effect                    = 1,
	TCET_UI                        = 2,
	TCET_Input                     = 3,
	TCET_Kismet                    = 4,
	TCET_Delay                     = 5,
	TCET_MAX                       = 6
};


// Enum EFGame.EFTriggerDataDefine.ETriggerKismetForceFinishType
enum class ETriggerKismetForceFinishType : uint8_t
{
	TKFFT_None                     = 0,
	TKFFT_Skip                     = 1,
	TKFFT_TriggerUnitCompletion    = 2,
	TKFFT_MAX                      = 3
};


// Enum EFGame.EFTriggerDataDefine.ETriggerActionNodeType
enum class ETriggerActionNodeType : uint8_t
{
	TriggerAction_ChangePropProperty = 0,
	TriggerAction_ChangeTouchPropState = 1,
	TriggerAction_SpawnNPC         = 2,
	TriggerAction_SpawnTrap        = 3,
	TriggerAction_RespawnNPC       = 4,
	TriggerAction_DespawnNPC       = 5,
	TriggerAction_TeleportPlayer   = 6,
	TriggerAction_WarpPlayer       = 7,
	TriggerAction_ItemEvent        = 8,
	TriggerAction_SendAISignal     = 9,
	TriggerAction_SetPublicTransitDirection = 10,
	TriggerAction_SceneEvent       = 11,
	TriggerAction_StopPublicTransit = 12,
	TriggerAction_RotatePublicTransit = 13,
	TriggerAction_CancelPropInteraction = 14,
	TriggerAction_StartTrackMove   = 15,
	TriggerAction_Delay            = 16,
	TriggerAction_ChangeDefaultWarpPosition = 17,
	TriggerAction_ChangeDefaultWarpZone = 18,
	TriggerAction_AddAggroAround   = 19,
	TriggerAction_DespawnTrap      = 20,
	TriggerAction_ChangeTowerProperty = 21,
	TriggerAction_ChangeNPCFaction = 22,
	TriggerAction_SetIdentityGauge = 23,
	TriggerAction_ChangeLifeVessel = 24,
	TriggerAction_RevivePartyMembers = 25,
	TriggerAction_ActiveAI         = 26,
	TriggerAction_ControlWave      = 27,
	TriggerAction_ChangeVehicleProperty = 28,
	TriggerAction_SpawnProp        = 29,
	TriggerAction_DespawnProp      = 30,
	TriggerAction_DespawnVehicle   = 31,
	TriggerAction_TeleportNPC      = 32,
	TriggerAction_ImmediateJumping = 33,
	TriggerAction_ChangeStoredRevivePosition = 34,
	TriggerAction_SetTriggerUnitEnableState = 35,
	TriggerAction_RestoreTriggerUnitActiveCount = 36,
	TriggerAction_StartTrophyAuction = 37,
	TriggerAction_ReviveAllPlayer  = 38,
	TriggerAction_ChangeInPlaceRevivePosition = 39,
	TriggerAction_AddContentsBuff  = 40,
	TriggerAction_RemoveContentsBuff = 41,
	TriggerAction_RemoveBuff       = 42,
	TriggerAction_StartBossBattle  = 43,
	TriggerAction_EndBossBattle    = 44,
	TriggerAction_RestoreBraveHeartCount = 45,
	TriggerAction_ClearAllNpc      = 46,
	TriggerAction_SpawnVehicle     = 47,
	TriggerAction_SpreadPlayers    = 48,
	TriggerAction_StopAI           = 49,
	TriggerAction_RestartAI        = 50,
	TriggerAction_ChangePropState  = 51,
	TriggerAction_DestroyHitProp   = 52,
	TriggerAction_AddContentsGauge = 53,
	TriggerAction_RemoveContentsGauge = 54,
	TriggerAction_AddNpcBuff       = 55,
	TriggerAction_RemoveNpcBuff    = 56,
	TriggerAction_StartInstanceTimer = 57,
	TriggerAction_EndInstanceTimer = 58,
	TriggerAction_CancelInstanceTimer = 59,
	TriggerAction_SetBossBattlePhaseAndStep = 60,
	TriggerAction_RestoreNpcCondition = 61,
	TriggerAction_ChangeHitPropProperty = 62,
	TriggerAction_MAX              = 63
};


// Enum EFGame.EFUIDataDefine.EUISequenceVariableType
enum class EUISequenceVariableType : uint8_t
{
	UISequenceVariableType_Load    = 0,
	UISequenceVariableType_Max     = 1
};


// Enum EFGame.EFUIDataDefine.EUISequenceOutputType
enum class EUISequenceOutputType : uint8_t
{
	UISequenceOutputType_Child     = 0,
	UISequenceOutputType_Condition = 1,
	UISequenceOutputType_Max       = 2
};


// Enum EFGame.EFUIDataDefine.ConditionOperator
enum class EConditionOperator : uint8_t
{
	OR                             = 0,
	AND                            = 1,
	ConditionOperator_MAX          = 2
};


// Enum EFGame.EFUIDataDefine.CompareOperator
enum class ECompareOperator : uint8_t
{
	Greater                        = 0,
	Less                           = 1,
	CompareOperator_MAX            = 2
};


// Enum EFGame.EFUIDataDefine.EUISequenceConditionType
enum class EUISequenceConditionType : uint8_t
{
	UISequenceConditionType_True_Load = 0,
	UISequenceConditionType_False_Load = 1,
	UISequenceConditionType_Max    = 2
};


// Enum EFGame.EFUIDataDefine.EUISequenceState
enum class EUISequenceState : uint8_t
{
	UISequenceState_True_Playing   = 0,
	UISequenceState_False_Playing  = 1,
	UISequenceState_Stop           = 2,
	UISequenceState_Max            = 3
};


// Enum EFGame.EFUIDataDefine.MapType
enum class EMapType : uint8_t
{
	MapType_Each                   = 0,
	MapType_Sailing                = 1,
	MapType_ChangeJob              = 2,
	MapType_Colosseum              = 3,
	MapType_Fam                    = 4,
	MapType_MAX                    = 5
};


// Enum EFGame.EFUIDataDefine.TargetUIMode
enum class ETargetUIMode : uint8_t
{
	UIMode_None                    = 0,
	UIMode_Anchor                  = 1,
	UIMode_Colosseum               = 2,
	UIMode_MAX                     = 3
};


// Enum EFGame.EFUIDataDefine.LoadingType
enum class ELoadingType : uint8_t
{
	LoadingType_PreLoad            = 0,
	LoadingType_RealTime           = 1,
	LoadingType_MAX                = 2
};


// Enum EFGame.EFWatchCamera.EFWatchCameraMode
enum class EFWatchCameraMode : uint8_t
{
	EFWatch_Default                = 0,
	EFWatch_Fixed                  = 1,
	EFWatch_Colosseum              = 2,
	EFWatch_MAX                    = 3
};



//---------------------------------------------------------------------------
//Script Structs
//---------------------------------------------------------------------------

// ScriptStruct EFGame.EFParticleSystemType.EFBeamParticleInfo
// 0x002C
struct FEFBeamParticleInfo
{
	TEnumAsByte<EFBP_SOURCETYPE>                       SourceType;                                               // 0x0000(0x0001) (Edit)
	TEnumAsByte<EFBP_TARGETTYPE>                       TargetType;                                               // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FName                                       BeamSource;                                               // 0x0004(0x0008) (Edit)
	struct FName                                       BeamTarget;                                               // 0x000C(0x0008) (Edit)
	float                                              BeamDuration;                                             // 0x0014(0x0004) (Edit)
	float                                              BeamMoveSpeed;                                            // 0x0018(0x0004) (Edit)
	unsigned long                                      ApplyUserColor : 1;                                       // 0x001C(0x0004) (Edit)
	struct FVector                                     UserColor;                                                // 0x0020(0x000C) (Edit)
};

// ScriptStruct EFGame.EFParticleSystemType.EFParticleSystemInfo
// 0x0158
struct FEFParticleSystemInfo
{
	class UParticleSystem*                             ParticleSystem;                                           // 0x0000(0x0008) (Edit)
	float                                              ParticlePlayRate;                                         // 0x0008(0x0004) (Edit)
	unsigned long                                      bUseTargetCastLocation : 1;                               // 0x000C(0x0004) (Edit)
	class UPostProcessChain*                           PPChain;                                                  // 0x0010(0x0008) (Edit)
	struct FName                                       MaterialParamName;                                        // 0x0018(0x0008) (Edit)
	unsigned long                                      bUseLinearColorValue : 1;                                 // 0x0020(0x0004) (Edit)
	float                                              MaterialFloatValue;                                       // 0x0024(0x0004) (Edit)
	struct FLinearColor                                MaterialLinearColorValue;                                 // 0x0028(0x0010) (Edit)
	unsigned long                                      bAttach : 1;                                              // 0x0038(0x0004) (Edit)
	unsigned long                                      bIgnoreAttachLocation : 1;                                // 0x0038(0x0004) (Edit)
	unsigned long                                      bIgnoreAttachRotation : 1;                                // 0x0038(0x0004) (Edit)
	unsigned long                                      bIgnoreAttachWorldRotation : 1;                           // 0x0038(0x0004) (Edit)
	struct FVector                                     RelativeWorldLocation;                                    // 0x003C(0x000C) (Edit)
	struct FVector                                     RelativeLocation;                                         // 0x0048(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0054(0x000C) (Edit)
	struct FVector                                     RelativeScale;                                            // 0x0060(0x000C) (Edit)
	unsigned long                                      bApplyLocalRotation : 1;                                  // 0x006C(0x0004) (Edit)
	TEnumAsByte<EFEQUIP_PART>                          ePartsType;                                               // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	int                                                iPartsMeshIndex;                                          // 0x0074(0x0004) (Edit)
	int                                                AttachPriority;                                           // 0x0078(0x0004) (Edit)
	TArray<struct FString>                             ParticleAttachBoneName;                                   // 0x007C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FString>                             ParticleAttachSoketName;                                  // 0x008C(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EPst_SpawnType>>                ParticleSpawnType;                                        // 0x009C(0x0010) (Edit, NeedCtorLink)
	int                                                ParticleAttachRandomMaxCount;                             // 0x00AC(0x0004) (Edit)
	unsigned long                                      AutoPlayRateBySpeed : 1;                                  // 0x00B0(0x0004) (Edit)
	float                                              AutoPlayRateTime;                                         // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSpawnedEmitter : 1;                                      // 0x00B8(0x0004) (Edit)
	unsigned long                                      bLocFromActorMesh : 1;                                    // 0x00B8(0x0004) (Edit)
	float                                              ModifyParentVelocity;                                     // 0x00BC(0x0004) (Edit)
	float                                              ModifyParentAcceleration;                                 // 0x00C0(0x0004) (Edit)
	class UAkEvent*                                    AkEvent;                                                  // 0x00C4(0x0008) (Edit)
	unsigned long                                      StopSound : 1;                                            // 0x00CC(0x0004) (Edit)
	unsigned long                                      bSwitchCharacterAKEvent : 1;                              // 0x00CC(0x0004) (Edit)
	TArray<struct FParticleSysParam>                   ParticleSystemParamList;                                  // 0x00D0(0x0010) (Edit, Component, NeedCtorLink)
	struct FString                                     SpawnParticleName;                                        // 0x00E0(0x0010) (Native, Transient)
	class USkeletalMeshComponent*                      pSkeletalMeshComponent;                                   // 0x00F0(0x0008) (ExportObject, Native, Transient, Component, EditInline)
	struct FVector                                     TargetCastLocation;                                       // 0x00F8(0x000C) (Transient)
	unsigned long                                      bEditing : 1;                                             // 0x0104(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x0108(0x0004) (Transient)
	float                                              GlobalScale;                                              // 0x010C(0x0004) (Transient)
	class AActor*                                      SoundActor;                                               // 0x0110(0x0008) (Transient)
	struct FVector                                     vOffsetValue;                                             // 0x0118(0x000C) (Transient)
	unsigned long                                      bHitParticle : 1;                                         // 0x0124(0x0004) (Transient)
	unsigned long                                      bBeamParticle : 1;                                        // 0x0124(0x0004) (Edit)
	struct FEFBeamParticleInfo                         BeamInformation;                                          // 0x0128(0x002C)
	unsigned long                                      bUseCastShadow : 1;                                       // 0x0154(0x0004) (Edit)
};

// ScriptStruct EFGame.EFConsole.EFAutoCompleteCommand
// 0x0054
struct FEFAutoCompleteCommand
{
	struct FString                                     Command;                                                  // 0x0000(0x0010) (NeedCtorLink)
	struct FString                                     ParamDesc;                                                // 0x0010(0x0010) (NeedCtorLink)
	struct FString                                     Desc;                                                     // 0x0020(0x0010) (NeedCtorLink)
	struct FString                                     ParamSpecificDesc;                                        // 0x0030(0x0010) (NeedCtorLink)
	struct FString                                     CommandWriter;                                            // 0x0040(0x0010) (NeedCtorLink)
	int                                                Level;                                                    // 0x0050(0x0004)
};

// ScriptStruct EFGame.EFParticleSkeletalMeshActor.EFAnimDataItem
// 0x0064
struct FEFAnimDataItem
{
	float                                              CurrentTime;                                              // 0x0000(0x0004) (Transient)
	unsigned long                                      bIsPlaying : 1;                                           // 0x0004(0x0004) (Transient)
	float                                              AnimPlayRate;                                             // 0x0008(0x0004) (Transient)
	unsigned long                                      PlayingAnimSeq : 1;                                       // 0x000C(0x0004) (Transient)
	struct FName                                       AnimSequenceName;                                         // 0x0010(0x0008) (Transient)
	int                                                LoopCount;                                                // 0x0018(0x0004) (Transient)
	float                                              StartAnimTime;                                            // 0x001C(0x0004) (Transient)
	unsigned long                                      StartAnimTimeUseOnlyFirst : 1;                            // 0x0020(0x0004) (Transient)
	unsigned long                                      bStarted : 1;                                             // 0x0020(0x0004) (Transient)
	TArray<struct FPointer>                            RefParticleList;                                          // 0x0024(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            RefActionList;                                            // 0x0034(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            PlayParticleList;                                         // 0x0044(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            PlayActionList;                                           // 0x0054(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFParticleSkeletalMeshActor.EFExtraSkelMeshInfo
// 0x0024
struct FEFExtraSkelMeshInfo
{
	class USkeletalMeshComponent*                      SkeletalMesh;                                             // 0x0000(0x0008) (ExportObject, Transient, Component, EditInline)
	unsigned long                                      SourceIsSocket : 1;                                       // 0x0008(0x0004) (Transient)
	struct FString                                     SourceName;                                               // 0x000C(0x0010) (Transient, NeedCtorLink)
	TEnumAsByte<EFEQUIP_PART>                          PartType;                                                 // 0x001C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	int                                                PartIndex;                                                // 0x0020(0x0004) (Transient)
};

// ScriptStruct EFGame.EFPawn.EFCharacterAfterImageEffectInfo
// 0x0030
struct FEFCharacterAfterImageEffectInfo
{
	float                                              Duration;                                                 // 0x0000(0x0004) (Edit)
	float                                              DeltaSecondsBetweenChildren;                              // 0x0004(0x0004) (Edit)
	float                                              PerChildLifetime;                                         // 0x0008(0x0004) (Edit)
	float                                              InitialAlpha;                                             // 0x000C(0x0004) (Edit)
	float                                              InitialAlphaDuration;                                     // 0x0010(0x0004) (Edit)
	float                                              SourceColorIntensity;                                     // 0x0014(0x0004) (Edit)
	struct FColor                                      AmbientGlowS;                                             // 0x0018(0x0004) (Edit)
	struct FColor                                      AmbientGlowE;                                             // 0x001C(0x0004) (Edit)
	struct FColor                                      RimLightColorS;                                           // 0x0020(0x0004) (Edit)
	struct FColor                                      RimLightColorE;                                           // 0x0024(0x0004) (Edit)
	float                                              TimeUntilNextChild;                                       // 0x0028(0x0004) (Const)
	unsigned long                                      bForceRemoveChildrenOnFinish : 1;                         // 0x002C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFAction_Notify.EFBasedLocation
// 0x0010
struct FEFBasedLocation
{
	struct Fuint                                       TransitIndex;                                             // 0x0000(0x0004)
	struct FVector                                     Local;                                                    // 0x0004(0x000C)
};

// ScriptStruct EFGame.EFPawn.EFAfterImageChildInfo
// 0x0030
struct FEFAfterImageChildInfo
{
	TArray<class USkeletalMeshComponent*>              ChildComps;                                               // 0x0000(0x0010) (ExportObject, Component, AlwaysInit, NeedCtorLink, EditInline)
	float                                              GivenLifetime;                                            // 0x0010(0x0004)
	float                                              RemainingLifetime;                                        // 0x0014(0x0004)
	float                                              InitialAlpha;                                             // 0x0018(0x0004)
	float                                              InitialAlphaDuration;                                     // 0x001C(0x0004)
	struct FColor                                      AmbientGlowS;                                             // 0x0020(0x0004)
	struct FColor                                      AmbientGlowE;                                             // 0x0024(0x0004)
	struct FColor                                      RimLightColorS;                                           // 0x0028(0x0004)
	struct FColor                                      RimLightColorE;                                           // 0x002C(0x0004)
};

// ScriptStruct EFGame.EFPlayerController.EFInputStateFlow
// 0x0008
struct FEFInputStateFlow
{
	int                                                Condition;                                                // 0x0000(0x0004)
	int                                                NextState;                                                // 0x0004(0x0004)
};

// ScriptStruct EFGame.EFPlayerController.EFInputState
// 0x0010
struct FEFInputState
{
	TArray<struct FEFInputStateFlow>                   FlowList;                                                 // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFPlayerController.EFInputCommand
// 0x0040
struct FEFInputCommand
{
	TEnumAsByte<EFPlayerControlInputCommandType>       InputCommandType;                                         // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FEFBasedLocation                            MoveDir;                                                  // 0x0004(0x0010)
	struct FEFBasedLocation                            MovePos;                                                  // 0x0014(0x0010)
	float                                              ArriveDistance;                                           // 0x0024(0x0004)
	class AActor*                                      MoveTargetActor;                                          // 0x0028(0x0008)
	int                                                HotKeyId;                                                 // 0x0030(0x0004)
	int                                                InputEvent;                                               // 0x0034(0x0004)
	int                                                SkillId;                                                  // 0x0038(0x0004)
	int                                                CommonActionId;                                           // 0x003C(0x0004)
};

// ScriptStruct EFGame.EFProjectile.EFAffinityInfo
// 0x0020
struct FEFAffinityInfo
{
	int                                                AffinityPSGroupIndex;                                     // 0x0000(0x0004)
	float                                              BeginAffinityTime;                                        // 0x0004(0x0004)
	float                                              EndAffinityTime;                                          // 0x0008(0x0004)
	unsigned long                                      ShowAffinity : 1;                                         // 0x000C(0x0004)
	float                                              AffinityAlpha;                                            // 0x0010(0x0004)
	unsigned long                                      OnAffinityFadeIn : 1;                                     // 0x0014(0x0004)
	int                                                AffinityAmITarget;                                        // 0x0018(0x0004)
	int                                                AffinityTargetType;                                       // 0x001C(0x0004)
};

// ScriptStruct EFGame.EFProjectile.EFProjectileTimerData
// 0x0014
struct FEFProjectileTimerData
{
	float                                              TimerActiveTime;                                          // 0x0000(0x0004) (Transient)
	int                                                TimerActiveCount;                                         // 0x0004(0x0004) (Transient)
	float                                              TimerActiveTerm;                                          // 0x0008(0x0004) (Transient)
	struct FPointer                                    TimerData;                                                // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFProjectile.EFProjectileAkEventData
// 0x0008
struct FEFProjectileAkEventData
{
	int                                                AkEventPlayingID;                                         // 0x0000(0x0004) (Transient)
	float                                              StopWhenBaseDestroyFadeTime;                              // 0x0004(0x0004) (Transient)
};

// ScriptStruct EFGame.EFProjectile.EFProjectileMultiUseData
// 0x0030
struct FEFProjectileMultiUseData
{
	TArray<int>                                        INTArray;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<float>                                      floatArray;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FName>                               NameArray;                                                // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFProjectile.EFProjectileCustomData
// 0x0018
struct FEFProjectileCustomData
{
	float                                              fAddSpeed;                                                // 0x0000(0x0004)
	float                                              fAddSpeedRate;                                            // 0x0004(0x0004)
	float                                              fAddDist;                                                 // 0x0008(0x0004)
	float                                              fAddDistRate;                                             // 0x000C(0x0004)
	float                                              fAddProjectileScale;                                      // 0x0010(0x0004)
	float                                              fAddProjectileScaleRate;                                  // 0x0014(0x0004)
};

// ScriptStruct EFGame.EFSequenceSummonsProjectile.EFSummonsObjectMask
// 0x0008
struct FEFSummonsObjectMask
{
	unsigned long                                      PC : 1;                                                   // 0x0000(0x0004) (Edit)
	unsigned long                                      Npc : 1;                                                  // 0x0000(0x0004) (Edit)
	unsigned long                                      Prop : 1;                                                 // 0x0000(0x0004) (Edit)
	unsigned long                                      Vehicle : 1;                                              // 0x0000(0x0004) (Edit)
	unsigned long                                      Tower : 1;                                                // 0x0000(0x0004) (Edit)
	int                                                CollideNpcIndex;                                          // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsProjectile.EFSummonsJudgmentRotation
// 0x0008
struct FEFSummonsJudgmentRotation
{
	TEnumAsByte<EFSummonsJudgmentRotationDir>          JudgmentRotationDir;                                      // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              JudgmentRotationSeconds;                                  // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsProjectileFixArea.EFSummonsFixAreaStartIndexDecal
// 0x0028
struct FEFSummonsFixAreaStartIndexDecal
{
	int                                                DecalTableIndex;                                          // 0x0000(0x0004) (Edit)
	int                                                SkillEffectId;                                            // 0x0004(0x0004) (Edit)
	float                                              AdjustSize;                                               // 0x0008(0x0004) (Edit)
	float                                              DecalBlendInTime;                                         // 0x000C(0x0004) (Edit)
	float                                              DecalScaleTime;                                           // 0x0010(0x0004) (Edit)
	float                                              DecalFillTime;                                            // 0x0014(0x0004) (Edit)
	float                                              DecalBlendOutTime;                                        // 0x0018(0x0004) (Edit)
	float                                              Time;                                                     // 0x001C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0020(0x0004) (Edit)
	unsigned long                                      ForcedOutput : 1;                                         // 0x0024(0x0004) (Edit)
};

// ScriptStruct EFGame.EFProjectileGrenade.EFBounceParam
// 0x0020
struct FEFBounceParam
{
	float                                              LifetimeThisBounce;                                       // 0x0000(0x0004)
	struct FVector                                     TargetWorldPosThisBounce;                                 // 0x0004(0x000C)
	unsigned long                                      HasCollisionThisBounce : 1;                               // 0x0010(0x0004)
	struct FVector                                     CollisionWorldPosThisBounce;                              // 0x0014(0x000C)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFMaterialVariation
// 0x0048
struct FEFMaterialVariation
{
	int                                                iTargetIndex;                                             // 0x0000(0x0004) (Edit)
	struct FLinearColor                                DiffuseColor;                                             // 0x0004(0x0010) (Edit)
	struct FLinearColor                                DiffuseColor_A;                                           // 0x0014(0x0010) (Edit)
	struct FLinearColor                                DiffuseColor_B;                                           // 0x0024(0x0010) (Edit)
	struct FLinearColor                                DiffuseColor_C;                                           // 0x0034(0x0010) (Edit)
	unsigned long                                      MaskVariation_2 : 1;                                      // 0x0044(0x0004) (Edit)
	unsigned long                                      MaskVariation_3 : 1;                                      // 0x0044(0x0004) (Edit)
	unsigned long                                      MaskVariation_4 : 1;                                      // 0x0044(0x0004) (Edit)
	unsigned long                                      MaskVariation_5 : 1;                                      // 0x0044(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSkeletalMeshActorLookInfoMAT.EFLookInfoSMActorPartMaterialInfo
// 0x0030
struct FEFLookInfoSMActorPartMaterialInfo
{
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEFMaterialVariation>                MaterialVariations;                                       // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<unsigned long>                              bSkipFlags;                                               // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFSkeletalMeshActorLookInfoMAT.EFLookInfoSMActorAdditionalPartInfo
// 0x0038
struct FEFLookInfoSMActorAdditionalPartInfo
{
	class USkeletalMeshComponent*                      PartComp;                                                 // 0x0000(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FEFLookInfoSMActorPartMaterialInfo          MaterialInfo;                                             // 0x0008(0x0030) (NeedCtorLink)
};

// ScriptStruct EFGame.EFSkeletalMeshActorLookInfoMAT.EFLookInfoSMActorSocketAttachedPartInfo
// 0x007C
struct FEFLookInfoSMActorSocketAttachedPartInfo
{
	struct FAttachment                                 AttachInfo;                                               // 0x0000(0x004C) (Edit, Component)
	struct FEFLookInfoSMActorPartMaterialInfo          MaterialInfo;                                             // 0x004C(0x0030) (NeedCtorLink)
};

// ScriptStruct EFGame.EFPawn.EFDynamicPhysicsParam
// 0x0018
struct FEFDynamicPhysicsParam
{
	unsigned long                                      bAllBodiesNoFixed : 1;                                    // 0x0000(0x0004) (Transient)
	unsigned long                                      bToPhysicsMode : 1;                                       // 0x0000(0x0004) (Transient)
	unsigned long                                      bUpdateBodiesFromAnimationWhenEnd : 1;                    // 0x0000(0x0004) (Transient)
	float                                              PhysicsParamWeight;                                       // 0x0004(0x0004) (Transient)
	float                                              PhysicsParamDuration;                                     // 0x0008(0x0004) (Transient)
	float                                              PhysicsParamBlendInTime;                                  // 0x000C(0x0004) (Transient)
	float                                              PhysicsParamBlendOutTime;                                 // 0x0010(0x0004) (Transient)
	float                                              PhysicsParamTime;                                         // 0x0014(0x0004) (Transient)
};

// ScriptStruct EFGame.EFSkeletalMeshComponent.EFItemTintDiffuseColorData
// 0x005C
struct FEFItemTintDiffuseColorData
{
	unsigned long                                      bTintDiffuseColorA : 1;                                   // 0x0000(0x0004) (Transient)
	unsigned long                                      bTintDiffuseColorB : 1;                                   // 0x0000(0x0004) (Transient)
	unsigned long                                      bTintDiffuseColorC : 1;                                   // 0x0000(0x0004) (Transient)
	int                                                iSlotNum;                                                 // 0x0004(0x0004) (Transient)
	int                                                iStartMatindex;                                           // 0x0008(0x0004) (Transient)
	struct FBitArray_Mirror                            SectionTintEnables;                                       // 0x000C(0x0020) (Native, Transient)
	struct FLinearColor                                TintDiffuseColorB;                                        // 0x002C(0x0010) (Transient)
	struct FLinearColor                                TintDiffuseColorA;                                        // 0x003C(0x0010) (Transient)
	struct FLinearColor                                TintDiffuseColorC;                                        // 0x004C(0x0010) (Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFSocketUnit
// 0x0014
struct FEFSocketUnit
{
	TEnumAsByte<EFSOCKET_STATE>                        eUnitState;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     SocketName;                                               // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFSocketGroup
// 0x0030
struct FEFSocketGroup
{
	struct FString                                     strSocketGroupKey;                                        // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     DefaultSocketName;                                        // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FEFSocketUnit>                       SocketUnitArr;                                            // 0x0020(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFGameEngine.AsyncMeshMergerInfo
// 0x0030
struct FAsyncMeshMergerInfo
{
	TArray<class USkeletalMesh*>                       SourceMeshList;                                           // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	class USkeletalMesh*                               MergedMesh;                                               // 0x0010(0x0008)
	TArray<class AActor*>                              TargetActors;                                             // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              DistanceFromBaseLocation;                                 // 0x0028(0x0004)
	unsigned long                                      bShareMergedMesh : 1;                                     // 0x002C(0x0004)
};

// ScriptStruct EFGame.EFGameEngine.MergedSkelMeshInfo
// 0x001C
struct FMergedSkelMeshInfo
{
	TArray<struct FName>                               SourceMeshNames;                                          // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	class USkeletalMesh*                               MergedMesh;                                               // 0x0010(0x0008)
	float                                              LastAccessedTime;                                         // 0x0018(0x0004)
};

// ScriptStruct EFGame.EFMapInfo.MAPINFO_CAMERAVALUE
// 0x002C
struct FMAPINFO_CAMERAVALUE
{
	float                                              DefaultFOV;                                               // 0x0000(0x0004) (Edit)
	unsigned long                                      bZoomInterpolation : 1;                                   // 0x0004(0x0004) (Edit)
	float                                              MaxZoomDist;                                              // 0x0008(0x0004) (Edit)
	float                                              MinZoomDist;                                              // 0x000C(0x0004) (Edit)
	float                                              IncrementZoom;                                            // 0x0010(0x0004) (Edit)
	float                                              CurrentZoomDist;                                          // 0x0014(0x0004) (Edit)
	float                                              CurrentYaw;                                               // 0x0018(0x0004) (Edit)
	float                                              CurrentPitch;                                             // 0x001C(0x0004) (Edit)
	struct FVector                                     RelativeCenterPos;                                        // 0x0020(0x000C) (Edit)
};

// ScriptStruct EFGame.EFMapInfo.EFDMap_PathEngineData
// 0x0024
struct FEFDMap_PathEngineData
{
	int                                                max_step_height;                                          // 0x0000(0x0004) (Edit)
	int                                                max_slope;                                                // 0x0004(0x0004) (Edit)
	int                                                extrude_height;                                           // 0x0008(0x0004) (Edit)
	int                                                optimiseWithThreshold;                                    // 0x000C(0x0004) (Edit)
	unsigned long                                      stripTerrainHeightDetail : 1;                             // 0x0010(0x0004) (Edit)
	unsigned long                                      excludeDownwardFacingFromGroundResult : 1;                // 0x0010(0x0004) (Edit)
	int                                                voxel_size;                                               // 0x0014(0x0004) (Edit)
	int                                                subdivision_size;                                         // 0x0018(0x0004) (Edit)
	int                                                minimumFragmentSize;                                      // 0x001C(0x0004) (Edit)
	int                                                tileSize;                                                 // 0x0020(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSelfCameraEnvironmentInfo.CameraExponentialHeightFogInfo
// 0x0024
struct FCameraExponentialHeightFogInfo
{
	float                                              FogDensity;                                               // 0x0000(0x0004) (Edit)
	float                                              FogHeightFalloff;                                         // 0x0004(0x0004) (Edit)
	float                                              FogMaxOpacity;                                            // 0x0008(0x0004) (Edit)
	float                                              StartDistance;                                            // 0x000C(0x0004) (Edit)
	float                                              LightTerminatorAngle;                                     // 0x0010(0x0004) (Edit)
	float                                              OppositeLightBrightness;                                  // 0x0014(0x0004) (Edit)
	struct FColor                                      OppositeLightColor;                                       // 0x0018(0x0004) (Edit)
	float                                              LightInscatteringBrightness;                              // 0x001C(0x0004) (Edit)
	struct FColor                                      LightInscatteringColor;                                   // 0x0020(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSelfCameraEnvironmentInfo.CameraLightShaftInfo
// 0x0038
struct FCameraLightShaftInfo
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C) (Edit)
	float                                              TraceDistance;                                            // 0x0018(0x0004) (Edit)
	float                                              OcclusionDepthRange;                                      // 0x001C(0x0004) (Edit)
	float                                              BloomScale;                                               // 0x0020(0x0004) (Edit)
	float                                              BloomThreshold;                                           // 0x0024(0x0004) (Edit)
	float                                              BloomScreenBlendThreshold;                                // 0x0028(0x0004) (Edit)
	struct FColor                                      BloomTint;                                                // 0x002C(0x0004) (Edit)
	float                                              RadialBlurPercent;                                        // 0x0030(0x0004) (Edit)
	float                                              OcclusionMaskDarkness;                                    // 0x0034(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTable.EFTable_Define
// 0x0014
struct FEFTable_Define
{
	TEnumAsByte<EFTableDataType>                       eDataType;                                                // 0x0000(0x0001) (Const)
	unsigned char                                      bySubGroups;                                              // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FString                                     strIdentityName;                                          // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTable.EFTable_DataRow
// 0x0010
struct FEFTable_DataRow
{
	TArray<struct FSettingsData>                       aSettingDatas;                                            // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCustomizingCamera.CutomizingZoomStepInfo
// 0x0018
struct FCutomizingZoomStepInfo
{
	float                                              FOV;                                                      // 0x0000(0x0004)
	float                                              ZoomDist;                                                 // 0x0004(0x0004)
	float                                              Pitch;                                                    // 0x0008(0x0004)
	struct FVector                                     RelativeCenterPos;                                        // 0x000C(0x000C)
};

// ScriptStruct EFGame.EFIsometricCamera.EFCameraOverrideFogSettings
// 0x0008
struct FEFCameraOverrideFogSettings
{
	unsigned long                                      bOverride_FogDensity : 1;                                 // 0x0000(0x0004)
	float                                              FogDensity;                                               // 0x0004(0x0004)
};

// ScriptStruct EFGame.EFIsometricCamera.ZoomStepInfo
// 0x01AC
struct FZoomStepInfo
{
	int                                                ClassID;                                                  // 0x0000(0x0004) (Config)
	float                                              FOV;                                                      // 0x0004(0x0004) (Config)
	float                                              ZoomDist;                                                 // 0x0008(0x0004) (Config)
	float                                              Pitch;                                                    // 0x000C(0x0004) (Config)
	float                                              Yaw;                                                      // 0x0010(0x0004) (Config)
	struct FVector                                     RelativeCenterPos;                                        // 0x0014(0x000C) (Config)
	float                                              InterpolationRatio;                                       // 0x0020(0x0004) (Config)
	int                                                CamPostProcessID;                                         // 0x0024(0x0004)
	struct FPostProcessSettings                        CamPostProcessSettings;                                   // 0x0028(0x0174) (NeedCtorLink)
	struct FEFCameraOverrideFogSettings                CamFogSettings;                                           // 0x019C(0x0008)
	float                                              AddZoomDist;                                              // 0x01A4(0x0004)
	unsigned long                                      SkipChangeContentsZoomDist : 1;                           // 0x01A8(0x0004)
};

// ScriptStruct EFGame.EFIsometricCamera.OverrideZoomStepInfo
// 0x019C
struct FOverrideZoomStepInfo
{
	float                                              AddYaw;                                                   // 0x0000(0x0004)
	float                                              AddPitch;                                                 // 0x0004(0x0004)
	float                                              AddZoomDist;                                              // 0x0008(0x0004)
	float                                              FOVSet;                                                   // 0x000C(0x0004)
	int                                                LimitZoomStep;                                            // 0x0010(0x0004)
	unsigned long                                      UseBlend : 1;                                             // 0x0014(0x0004)
	float                                              CurrentYaw;                                               // 0x0018(0x0004)
	float                                              CurrentPitch;                                             // 0x001C(0x0004)
	unsigned long                                      UsePostProcess : 1;                                       // 0x0020(0x0004)
	struct FPostProcessSettings                        OverrideCamPostProcessSettings;                           // 0x0024(0x0174) (NeedCtorLink)
	float                                              OverrideCamPostProcessSettingsAlpha;                      // 0x0198(0x0004)
};

// ScriptStruct EFGame.EFIsometricCamera.FixedCameraInterpSpeed
// 0x000C
struct FFixedCameraInterpSpeed
{
	float                                              CameraInterpSpeedXY;                                      // 0x0000(0x0004)
	float                                              CameraInterpSpeedZ;                                       // 0x0004(0x0004)
	unsigned long                                      SetFixed : 1;                                             // 0x0008(0x0004)
};

// ScriptStruct EFGame.EFSelfCamera.EFSelfCameraValueRange
// 0x0008
struct FEFSelfCameraValueRange
{
	float                                              MinValue;                                                 // 0x0000(0x0004)
	float                                              MaxValue;                                                 // 0x0004(0x0004)
};

// ScriptStruct EFGame.EFSelfCamera.EFSelfCameraLimitOption
// 0x0028
struct FEFSelfCameraLimitOption
{
	struct FEFSelfCameraValueRange                     LimitYawRotation;                                         // 0x0000(0x0008)
	struct FEFSelfCameraValueRange                     LimitPitchRotation;                                       // 0x0008(0x0008)
	struct FEFSelfCameraValueRange                     LimitLeftRightMovement;                                   // 0x0010(0x0008)
	struct FEFSelfCameraValueRange                     LimitUpDownMovement;                                      // 0x0018(0x0008)
	struct FEFSelfCameraValueRange                     LimitZoomDist;                                            // 0x0020(0x0008)
};

// ScriptStruct EFGame.EFSelfCamera.EFSelfCameraDOFOption
// 0x0014
struct FEFSelfCameraDOFOption
{
	unsigned long                                      bChangeDOF : 1;                                           // 0x0000(0x0004) (Transient)
	float                                              FalloffExponent;                                          // 0x0004(0x0004) (Transient)
	float                                              BlurKernelSize;                                           // 0x0008(0x0004) (Transient)
	float                                              FocusDistance;                                            // 0x000C(0x0004) (Transient)
	float                                              FocusInnerRadius;                                         // 0x0010(0x0004) (Transient)
};

// ScriptStruct EFGame.EFTopViewCamera.ViewPointInfo
// 0x01BC
struct FViewPointInfo
{
	float                                              FOV;                                                      // 0x0000(0x0004)
	float                                              ZoomDist;                                                 // 0x0004(0x0004)
	float                                              Pitch;                                                    // 0x0008(0x0004)
	float                                              Yaw;                                                      // 0x000C(0x0004)
	struct FVector                                     RelativeCenterPos;                                        // 0x0010(0x000C)
	float                                              InterpolationRatio;                                       // 0x001C(0x0004)
	unsigned long                                      bUseCamPostProcessSetting : 1;                            // 0x0020(0x0004)
	struct FPostProcessSettings                        CamPostProcessSettings;                                   // 0x0024(0x0174) (NeedCtorLink)
	struct FEFCameraOverrideFogSettings                CamFogSettings;                                           // 0x0198(0x0008)
	struct FString                                     CameraPostProcessKey;                                     // 0x01A0(0x0010) (NeedCtorLink)
	unsigned long                                      bUseFadeInOut : 1;                                        // 0x01B0(0x0004)
	float                                              FadeInTime;                                               // 0x01B4(0x0004)
	float                                              FadeOutTime;                                              // 0x01B8(0x0004)
};

// ScriptStruct EFGame.EFTPSCamera.TPSCameraInfo
// 0x0040
struct FTPSCameraInfo
{
	int                                                CameraID;                                                 // 0x0000(0x0004)
	float                                              FOV;                                                      // 0x0004(0x0004)
	float                                              ZoomDist;                                                 // 0x0008(0x0004)
	float                                              Pitch;                                                    // 0x000C(0x0004)
	float                                              Yaw;                                                      // 0x0010(0x0004)
	struct FVector                                     RelativeCenterPos;                                        // 0x0014(0x000C)
	float                                              InterpolationRatio;                                       // 0x0020(0x0004)
	struct FVector                                     OriginOffset;                                             // 0x0024(0x000C)
	float                                              LimitAngleLeft;                                           // 0x0030(0x0004)
	float                                              LimitAngleRight;                                          // 0x0034(0x0004)
	float                                              LimitAngleUp;                                             // 0x0038(0x0004)
	float                                              LimitAngleDown;                                           // 0x003C(0x0004)
};

// ScriptStruct EFGame.EFVolumeCamera.EFVolumeCameraViewData
// 0x0010
struct FEFVolumeCameraViewData
{
	float                                              RotationYaw;                                              // 0x0000(0x0004) (Transient)
	float                                              RotationPitch;                                            // 0x0004(0x0004) (Transient)
	float                                              Distance;                                                 // 0x0008(0x0004) (Transient)
	float                                              FOV;                                                      // 0x000C(0x0004) (Transient)
};

// ScriptStruct EFGame.EFVolumeCamera.EFVolumeCameraViewInputData
// 0x000C
struct FEFVolumeCameraViewInputData
{
	float                                              Addition_RotationYaw;                                     // 0x0000(0x0004) (Transient)
	float                                              Addition_RotationPitch;                                   // 0x0004(0x0004) (Transient)
	float                                              Addition_Distance;                                        // 0x0008(0x0004) (Transient)
};

// ScriptStruct EFGame.EFWatchCamera.EFWatchCameraModeInfo
// 0x0010
struct FEFWatchCameraModeInfo
{
	float                                              FOV;                                                      // 0x0000(0x0004) (Config)
	float                                              Patch;                                                    // 0x0004(0x0004) (Config)
	float                                              Yaw;                                                      // 0x0008(0x0004) (Config)
	float                                              ZoomDist;                                                 // 0x000C(0x0004) (Config)
};

// ScriptStruct EFGame.EFCameraModifier_CameraShake.EFCameraViewShakePlayID
// 0x0004
struct FEFCameraViewShakePlayID
{
	int                                                ShakeID;                                                  // 0x0000(0x0004)
};

// ScriptStruct EFGame.EFCameraShakePlayGroup.EFShakeInstance
// 0x0128
struct FEFShakeInstance
{
	int                                                ShakeID;                                                  // 0x0000(0x0004)
	int                                                SourceAmplitudeSize;                                      // 0x0004(0x0004)
	int                                                SourceGroupPriority;                                      // 0x0008(0x0004)
	float                                              SourceDuration;                                           // 0x000C(0x0004)
	float                                              SourcePlayRate;                                           // 0x0010(0x0004)
	float                                              SourceBlendInTime;                                        // 0x0014(0x0004)
	float                                              SourceBlendOutTime;                                       // 0x0018(0x0004)
	struct FVOscillator                                SourceLocOscillation;                                     // 0x001C(0x0024)
	struct FFOscillator                                SourceFOVOscillation;                                     // 0x0040(0x000C)
	struct FROscillator                                SourceRotOscillation;                                     // 0x004C(0x0024)
	float                                              MaxDistance;                                              // 0x0070(0x0004)
	float                                              AttenuateStartDistance;                                   // 0x0074(0x0004)
	float                                              CurrentDistance;                                          // 0x0078(0x0004)
	struct FVector                                     StartLocation;                                            // 0x007C(0x000C)
	int                                                ProvidedActorIndex;                                       // 0x0088(0x0004)
	class AActor*                                      ProvidedActor;                                            // 0x008C(0x0008)
	int                                                ActivatePriority;                                         // 0x0094(0x0004)
	unsigned long                                      bOcillatorInfinite : 1;                                   // 0x0098(0x0004)
	float                                              RemainOcillatorTime;                                      // 0x009C(0x0004)
	unsigned long                                      bBlendingIn : 1;                                          // 0x00A0(0x0004)
	float                                              CurrentOcillatorBlendingInTime;                           // 0x00A4(0x0004)
	unsigned long                                      bBlendingOut : 1;                                         // 0x00A8(0x0004)
	float                                              CurrentOcillatorBlendingOutTime;                          // 0x00AC(0x0004)
	struct FVector                                     LocSinOffset;                                             // 0x00B0(0x000C)
	struct FVector                                     RotSinOffset;                                             // 0x00BC(0x000C)
	float                                              FOVSinOffset;                                             // 0x00C8(0x0004)
	unsigned long                                      bOcillatorFinished : 1;                                   // 0x00CC(0x0004)
	unsigned long                                      bAllFinished : 1;                                         // 0x00CC(0x0004)
	class UCameraAnimInst*                             AnimInst;                                                 // 0x00D0(0x0008)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x00D8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FMatrix                                     UserPlaySpaceMatrix;                                      // 0x00E0(0x0040)
	float                                              AttenuateScale;                                           // 0x0120(0x0004)
	int                                                DesiredAmplitudeSize;                                     // 0x0124(0x0004)
};

// ScriptStruct EFGame.EFMacroCameraSplineActor.MacroCameraConnection
// 0x0010
struct FMacroCameraConnection
{
	class USplineComponent*                            SplineComponent;                                          // 0x0000(0x0008) (ExportObject, Component, EditInline)
	class AEFMacroCameraSplineActor*                   ConnectTo;                                                // 0x0008(0x0008)
};

// ScriptStruct EFGame.EFPlayerCamera.OccludedActorInfo
// 0x0010
struct FOccludedActorInfo
{
	class AActor*                                      Actor;                                                    // 0x0000(0x0008)
	float                                              Time;                                                     // 0x0008(0x0004)
	unsigned long                                      bBlendIn : 1;                                             // 0x000C(0x0004)
	unsigned long                                      bIsHit : 1;                                               // 0x000C(0x0004)
	unsigned long                                      bIsVolume : 1;                                            // 0x000C(0x0004)
};

// ScriptStruct EFGame.EFBeamActionBase.EFBeamSocketMoveInfo
// 0x001C
struct FEFBeamSocketMoveInfo
{
	TArray<struct FName>                               SocketNameArr;                                            // 0x0000(0x0010) (Edit, NeedCtorLink)
	float                                              fElapsedTime;                                             // 0x0010(0x0004) (Edit)
	float                                              fStartTime;                                               // 0x0014(0x0004) (Edit)
	unsigned long                                      bRandomActivity : 1;                                      // 0x0018(0x0004) (Edit)
};

// ScriptStruct EFGame.EFEmitterPool.LimitedPSCUnit
// 0x0010
struct FLimitedPSCUnit
{
	TArray<class UParticleSystemComponent*>            ActivePSC;                                                // 0x0000(0x0010) (ExportObject, Component, AlwaysInit, NeedCtorLink, EditInline)
};

// ScriptStruct EFGame.EFEmitterPool.DelayedSpawnBakeDataReference
// 0x001C
struct FDelayedSpawnBakeDataReference
{
	int                                                ReferenceId;                                              // 0x0000(0x0004)
	class AActor*                                      OwnerActor;                                               // 0x0004(0x0008)
	class USkeletalMeshComponent*                      AttachSkelMeshComp;                                       // 0x000C(0x0008) (ExportObject, Component, EditInline)
	class AActor*                                      SoundActor;                                               // 0x0014(0x0008)
};

// ScriptStruct EFGame.EFParticleSystemType.EFGroundParticleSystemInfo
// 0x0054
struct FEFGroundParticleSystemInfo
{
	struct FString                                     Key;                                                      // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     Desc;                                                     // 0x0010(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bIgnoreRotator : 1;                                       // 0x0020(0x0004) (Edit)
	class UParticleSystem*                             ParticleSystem;                                           // 0x0024(0x0008) (Edit)
	struct FLinearColor                                ActiveColorValue;                                         // 0x002C(0x0010) (Edit)
	struct FLinearColor                                DeactiveColorValue;                                       // 0x003C(0x0010) (Edit)
	float                                              DefaultWidth;                                             // 0x004C(0x0004) (Edit)
	float                                              DefaultHeight;                                            // 0x0050(0x0004) (Edit)
};

// ScriptStruct EFGame.EFParticleSystemType.EFGroundDecalSystemInfo
// 0x0070
struct FEFGroundDecalSystemInfo
{
	struct FString                                     Key;                                                      // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     Desc;                                                     // 0x0010(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bIgnoreRotator : 1;                                       // 0x0020(0x0004) (Edit)
	class UMaterialInterface*                          DecalMI;                                                  // 0x0024(0x0008) (Edit)
	float                                              Width;                                                    // 0x002C(0x0004) (Edit)
	float                                              Height;                                                   // 0x0030(0x0004) (Edit)
	float                                              NearPlane;                                                // 0x0034(0x0004) (Edit)
	float                                              FarPlane;                                                 // 0x0038(0x0004) (Edit)
	float                                              Thickness;                                                // 0x003C(0x0004) (Edit)
	struct FLinearColor                                ActiveColorValue;                                         // 0x0040(0x0010) (Edit)
	struct FLinearColor                                DeactiveColorValue;                                       // 0x0050(0x0010) (Edit)
	struct FString                                     DecalMIPath;                                              // 0x0060(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFParticleSystemType.EFMarkParticleSystemInfo
// 0x0038
struct FEFMarkParticleSystemInfo
{
	struct FString                                     strKey;                                                   // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     Desc;                                                     // 0x0010(0x0010) (Edit, NeedCtorLink)
	class UParticleSystem*                             ParticleSystem;                                           // 0x0020(0x0008) (Edit)
	struct FLinearColor                                MaterialColorValue;                                       // 0x0028(0x0010) (Edit)
};

// ScriptStruct EFGame.EFParticleSystemType.EFPSRandomRotator
// 0x0018
struct FEFPSRandomRotator
{
	struct FRotator                                    Min;                                                      // 0x0000(0x000C) (Edit)
	struct FRotator                                    Max;                                                      // 0x000C(0x000C) (Edit)
};

// ScriptStruct EFGame.EFParticleDataModulePawnMaterialParam.EFParticlePawnMaterialParamData
// 0x0049
struct FEFParticlePawnMaterialParamData
{
	struct FName                                       MaterialParamName;                                        // 0x0000(0x0008) (Edit)
	unsigned long                                      bUseLinearColorValue : 1;                                 // 0x0008(0x0004) (Edit)
	float                                              MaterialFloatValue;                                       // 0x000C(0x0004) (Edit)
	float                                              MaterialFloatFadeOutValue;                                // 0x0010(0x0004) (Edit)
	struct FLinearColor                                MaterialLinearColorValue;                                 // 0x0014(0x0010) (Edit)
	struct FLinearColor                                MaterialLinearColorFadeOutValue;                          // 0x0024(0x0010) (Edit)
	float                                              fFadeIn;                                                  // 0x0034(0x0004) (Edit)
	float                                              fFadeOut;                                                 // 0x0038(0x0004) (Edit)
	float                                              fDuration;                                                // 0x003C(0x0004) (Edit)
	unsigned long                                      ApplyOnlyWeaponParts : 1;                                 // 0x0040(0x0004) (Edit)
	int                                                PartsIndex;                                               // 0x0044(0x0004)
	TEnumAsByte<EMICParamLoopType>                     LoopType;                                                 // 0x0048(0x0001)
};

// ScriptStruct EFGame.EFParticleModuleLocationSkelVertSurface.SkelLocationData
// 0x0020
struct FSkelLocationData
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FQuat                                       RotationQuat;                                             // 0x0010(0x0010)
};

// ScriptStruct EFGame.EFParticleModuleLocationStaticVertSurface.StaticLocationData
// 0x0020
struct FStaticLocationData
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FQuat                                       RotationQuat;                                             // 0x0010(0x0010)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffect.EFPPMaterialScalarParam
// 0x000C
struct FEFPPMaterialScalarParam
{
	struct FName                                       ParamName;                                                // 0x0000(0x0008) (Edit, EditConst)
	float                                              Value;                                                    // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffect.EFPPMaterialVectorParam
// 0x0018
struct FEFPPMaterialVectorParam
{
	struct FName                                       ParamName;                                                // 0x0000(0x0008) (Edit, EditConst)
	struct FLinearColor                                Value;                                                    // 0x0008(0x0010) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffect.EFPPMaterialTextureParam
// 0x0020
struct FEFPPMaterialTextureParam
{
	struct FName                                       ParamName;                                                // 0x0000(0x0008) (Edit, EditConst)
	class UTexture*                                    Value;                                                    // 0x0008(0x0008) (Edit)
	struct FString                                     ValuePath;                                                // 0x0010(0x0010) (Native, Transient)
};

// ScriptStruct EFGame.EFPostProcessMaterialChaosGateEffect.EFPPMEChaosGateValue
// 0x0014
struct FEFPPMEChaosGateValue
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x000C(0x0004) (Edit)
	float                                              InterruptTime;                                            // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialDeadEffect.EFPPMEDeadValue
// 0x000C
struct FEFPPMEDeadValue
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffectEpicSkill.EFPPMEEpicSkillValue
// 0x0010
struct FEFPPMEEpicSkillValue
{
	float                                              FadeInTime;                                               // 0x0000(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
	float                                              maxopacity;                                               // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffectHit.EFPPMEHitValue
// 0x0010
struct FEFPPMEHitValue
{
	float                                              FadeInTime;                                               // 0x0000(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
	float                                              maxopacity;                                               // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffectIdentity.EFPPMEIdentityValue
// 0x000C
struct FEFPPMEIdentityValue
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffectSkill.EFPPMESkillValue
// 0x0010
struct FEFPPMESkillValue
{
	float                                              FadeInTime;                                               // 0x0000(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
	float                                              maxopacity;                                               // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialEffectStatus.EFPPMEStatusValue
// 0x000C
struct FEFPPMEStatusValue
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialHPEffect.EFPPMEHPPersentValue
// 0x0018
struct FEFPPMEHPPersentValue
{
	float                                              EnablePersent;                                            // 0x0000(0x0004) (Edit)
	float                                              maxopacity;                                               // 0x0004(0x0004) (Edit)
	float                                              minopacity;                                               // 0x0008(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x000C(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0010(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x0014(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialHPEffect.EFPPMEHPPersentValueCriticalHit
// 0x0014
struct FEFPPMEHPPersentValueCriticalHit
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
	float                                              PlayTime;                                                 // 0x000C(0x0004) (Edit)
	float                                              InterruptTime;                                            // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFPostProcessMaterialShipWreckEffect.EFPPMEShipWreckValue
// 0x000C
struct FEFPPMEShipWreckValue
{
	float                                              maxopacity;                                               // 0x0000(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0004(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFParticleSystemType.EFSimpleParticleSystemInfo
// 0x0028
struct FEFSimpleParticleSystemInfo
{
	struct FString                                     Desc;                                                     // 0x0000(0x0010) (Edit, NeedCtorLink)
	class UParticleSystem*                             ParticleSystem;                                           // 0x0010(0x0008) (Edit)
	struct FLinearColor                                MaterialColorValue;                                       // 0x0018(0x0010) (Edit)
};

// ScriptStruct EFGame.EFSeqAct_NPCController.SNPC_MovingState
// 0x0034
struct FSNPC_MovingState
{
	class AActor*                                      ArriveObject;                                             // 0x0000(0x0008)
	float                                              SpeedRate;                                                // 0x0008(0x0004) (Edit)
	float                                              TrunSpeedRate;                                            // 0x000C(0x0004)
	TEnumAsByte<ENUM_SNPC_PlayAnimState>               WhenPlayAnimation;                                        // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	unsigned long                                      RandStartFrame : 1;                                       // 0x0014(0x0004) (Edit)
	TEnumAsByte<ENUM_SNPC_PlayAnimationName>           AnimName;                                                 // 0x0018(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	struct FString                                     ForcedAnimation;                                          // 0x001C(0x0010) (Edit, NeedCtorLink)
	float                                              BlendTime;                                                // 0x002C(0x0004) (Edit)
	unsigned long                                      isLoop : 1;                                               // 0x0030(0x0004)
};

// ScriptStruct EFGame.EFEnvironmentInfoVolume.MICParamInfo
// 0x0030
struct FMICParamInfo
{
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.stGameMsgID
// 0x0024
struct FstGameMsgID
{
	struct FString                                     strMsg;                                                   // 0x0000(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EFGAMEMSG_TYPE>                        eMsgType;                                                 // 0x0010(0x0001) (Edit, AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	struct FString                                     strMsgID;                                                 // 0x0014(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFGFxMoviePlayer.EFUIIniStruct
// 0x0020
struct FEFUIIniStruct
{
	struct FString                                     Type;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Value;                                                    // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFSwfMovie.ExternalBind
// 0x0018
struct FExternalBind
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, NeedCtorLink)
	class UTextureRenderTarget2D*                      External;                                                 // 0x0010(0x0008) (Edit)
};

// ScriptStruct EFGame.EFUIListItem.SVariableInfo
// 0x0014
struct FSVariableInfo
{
	TEnumAsByte<EASType>                               VariableType;                                             // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     VariableName;                                             // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFGFxWidgetBuddy.GroupExtendedInfo
// 0x0014
struct FGroupExtendedInfo
{
	int                                                OwnerPcNumber;                                            // 0x0000(0x0004)
	TArray<int>                                        ExtendedList;                                             // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFGFxWidgetInteractionMail.UIMailInfo
// 0x0078
struct FUIMailInfo
{
	struct FString                                     MailIndex;                                                // 0x0000(0x0010) (NeedCtorLink)
	int                                                Index;                                                    // 0x0010(0x0004)
	unsigned long                                      MailType : 1;                                             // 0x0014(0x0004)
	unsigned long                                      showMailType : 1;                                         // 0x0014(0x0004)
	int                                                MailTag;                                                  // 0x0018(0x0004)
	struct FString                                     ItemIndex;                                                // 0x001C(0x0010) (NeedCtorLink)
	struct FString                                     Money;                                                    // 0x002C(0x0010) (NeedCtorLink)
	struct FString                                     From;                                                     // 0x003C(0x0010) (NeedCtorLink)
	struct FString                                     Date;                                                     // 0x004C(0x0010) (NeedCtorLink)
	struct FString                                     Title;                                                    // 0x005C(0x0010) (NeedCtorLink)
	unsigned long                                      Read : 1;                                                 // 0x006C(0x0004)
	unsigned long                                      LessThanOneDays : 1;                                      // 0x006C(0x0004)
	unsigned long                                      isNew : 1;                                                // 0x006C(0x0004)
	int                                                Count;                                                    // 0x0070(0x0004)
	unsigned long                                      isReclaimDisabled : 1;                                    // 0x0074(0x0004)
};

// ScriptStruct EFGame.EFGFxWidgetInteractionMail.MailReceiverCategory
// 0x0010
struct FMailReceiverCategory
{
	TArray<struct FString>                             ReceiverArr;                                              // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFGFxWidgetCommon.CommonWidgetBinding
// 0x0014
struct FCommonWidgetBinding
{
	TEnumAsByte<ECommonWidgetType>                     WidgetType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FName                                       WidgetName;                                               // 0x0004(0x0008)
	class UGFxObject*                                  Widget;                                                   // 0x000C(0x0008)
};

// ScriptStruct EFGame.EFGameViewportClient.EFRelativeTimeFadeInfo
// 0x002C
struct FEFRelativeTimeFadeInfo
{
	unsigned long                                      ActivateFadeProcess : 1;                                  // 0x0000(0x0004)
	unsigned long                                      ApplyFadeTime : 1;                                        // 0x0000(0x0004)
	struct FColor                                      FadeColor;                                                // 0x0004(0x0004)
	float                                              FadeStartTime;                                            // 0x0008(0x0004)
	float                                              FadeEndTime;                                              // 0x000C(0x0004)
	float                                              FadeDuration;                                             // 0x0010(0x0004)
	float                                              FadeCurAlpha;                                             // 0x0014(0x0004)
	struct FInterpCurveFloat                           FadeAlphaCurve;                                           // 0x0018(0x0014) (NeedCtorLink)
};

// ScriptStruct EFGame.EFGameViewportClient.EFCursorPresetInfo
// 0x0090
struct FEFCursorPresetInfo
{
	struct FPointer                                    OriginalCursor;                                           // 0x0000(0x0008) (Const, Native)
	struct FPointer                                    OriginalLargeCursor;                                      // 0x0008(0x0008) (Const, Native)
	struct FPointer                                    OriginalFullCursor;                                       // 0x0010(0x0008) (Const, Native)
	struct FPointer                                    Preset1Cursor;                                            // 0x0018(0x0008) (Const, Native)
	struct FPointer                                    Preset1LargeCursor;                                       // 0x0020(0x0008) (Const, Native)
	struct FPointer                                    Preset1FullCursor;                                        // 0x0028(0x0008) (Const, Native)
	struct FPointer                                    Preset2Cursor;                                            // 0x0030(0x0008) (Const, Native)
	struct FPointer                                    Preset2LargeCursor;                                       // 0x0038(0x0008) (Const, Native)
	struct FPointer                                    Preset2FullCursor;                                        // 0x0040(0x0008) (Const, Native)
	struct FPointer                                    Preset3Cursor;                                            // 0x0048(0x0008) (Const, Native)
	struct FPointer                                    Preset3LargeCursor;                                       // 0x0050(0x0008) (Const, Native)
	struct FPointer                                    Preset3FullCursor;                                        // 0x0058(0x0008) (Const, Native)
	struct FPointer                                    Preset4Cursor;                                            // 0x0060(0x0008) (Const, Native)
	struct FPointer                                    Preset4LargeCursor;                                       // 0x0068(0x0008) (Const, Native)
	struct FPointer                                    Preset4FullCursor;                                        // 0x0070(0x0008) (Const, Native)
	struct FPointer                                    Preset5Cursor;                                            // 0x0078(0x0008) (Const, Native)
	struct FPointer                                    Preset5LargeCursor;                                       // 0x0080(0x0008) (Const, Native)
	struct FPointer                                    Preset5FullCursor;                                        // 0x0088(0x0008) (Const, Native)
};

// ScriptStruct EFGame.EFAbilityEffectInfo.EFAbilityParticleEvent
// 0x0014
struct FEFAbilityParticleEvent
{
	int                                                AbilityType;                                              // 0x0000(0x0004) (Edit)
	class UEFParticleData*                             EventParticleInfo;                                        // 0x0004(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    EventParticleInfoPointer;                                 // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFData_Action.EFParamRootMotion
// 0x000C
struct FEFParamRootMotion
{
	float                                              cAccPosX;                                                 // 0x0000(0x0004)
	float                                              cAccPosY;                                                 // 0x0004(0x0004)
	float                                              cAccPosZ;                                                 // 0x0008(0x0004)
};

// ScriptStruct EFGame.EFData_Action.EFParamRootMotionBeHit
// 0x0030
struct FEFParamRootMotionBeHit
{
	int                                                cBehitType;                                               // 0x0000(0x0004)
	float                                              cTime;                                                    // 0x0004(0x0004)
	float                                              cDistance;                                                // 0x0008(0x0004)
	float                                              GetupSkillEnableTime;                                     // 0x000C(0x0004)
	TArray<int>                                        RootMotionSeparation;                                     // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEFParamRootMotion>                  RootMotionArr;                                            // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_Action.EFParamSpawnInfo
// 0x000C
struct FEFParamSpawnInfo
{
	TEnumAsByte<ENPCSpawnAction>                       cSpawnAction;                                             // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                cInvincible;                                              // 0x0004(0x0004)
	float                                              cTime;                                                    // 0x0008(0x0004)
};

// ScriptStruct EFGame.EFData_Action.EFParamActionInfo
// 0x0020
struct FEFParamActionInfo
{
	TArray<struct FEFParamRootMotionBeHit>             RootMotionBeHitArray;                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEFParamSpawnInfo>                   SpawnInfoArray;                                           // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.CustomPartItemValue
// 0x0024
struct FCustomPartItemValue
{
	struct FString                                     strCustomPartItemType;                                    // 0x0000(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	int                                                nPartItemType;                                            // 0x0010(0x0004)
	struct FString                                     strCustomPartItemLook;                                    // 0x0014(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stBoneMorphGroupWeight
// 0x0014
struct FstBoneMorphGroupWeight
{
	struct FString                                     strBoneMorphGroup;                                        // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	float                                              fMorphGroupWeightFactor;                                  // 0x0010(0x0004) (Edit, AlwaysInit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stBoneMorphWeight
// 0x000C
struct FstBoneMorphWeight
{
	struct FName                                       SequenceName;                                             // 0x0000(0x0008) (Edit, EditConst)
	float                                              fMorphWeightFactor;                                       // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFIconInfo
// 0x0024
struct FEFIconInfo
{
	struct FString                                     IconPackage;                                              // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     IconName;                                                 // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0020(0x0004) (Edit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMeshMorphWeight
// 0x0030
struct FstMeshMorphWeight
{
	struct FName                                       MorphName;                                                // 0x0000(0x0008) (Edit, EditConst)
	float                                              fMorphWeightFactor;                                       // 0x0008(0x0004) (Edit)
	struct FEFIconInfo                                 GameIcon;                                                 // 0x000C(0x0024) (Edit, EditConst, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionParameterFactor
// 0x0008
struct FstMaterialExpressionParameterFactor
{
	struct FName                                       ExpressionParameterName;                                  // 0x0000(0x0008) (Edit, EditConst, AlwaysInit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionScalarParameterFactor
// 0x000C (0x0014 - 0x0008)
struct FstMaterialExpressionScalarParameterFactor : public FstMaterialExpressionParameterFactor
{
	float                                              fFactor;                                                  // 0x0008(0x0004) (Edit)
	float                                              fInterpolationMin;                                        // 0x000C(0x0004) (Edit, EditConst)
	float                                              fInterpolationMax;                                        // 0x0010(0x0004) (Edit, EditConst)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionVectorParameterFactor
// 0x0064 (0x006C - 0x0008)
struct FstMaterialExpressionVectorParameterFactor : public FstMaterialExpressionParameterFactor
{
	struct FString                                     PaletteName;                                              // 0x0008(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	struct FString                                     SwatchName;                                               // 0x0018(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strColorPicker;                                           // 0x0028(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FVector2D                                   ColorPickerPosition;                                      // 0x0038(0x0008)
	float                                              fBrightness;                                              // 0x0040(0x0004)
	struct FLinearColor                                SwatchColor;                                              // 0x0044(0x0010) (Edit, EditConst)
	unsigned long                                      bUseAlpha : 1;                                            // 0x0054(0x0004) (Edit, EditConst)
	float                                              SwatchAlpha;                                              // 0x0058(0x0004) (Edit)
	struct FLinearColor                                DefaultColor;                                             // 0x005C(0x0010) (Edit, EditConst)
};

// ScriptStruct EFGame.EFCommonDataDefine.ObjectPath
// 0x0020
struct FObjectPath
{
	struct FString                                     PathName;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ClassName;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionTextureSampleParameterFactor
// 0x0064 (0x006C - 0x0008)
struct FstMaterialExpressionTextureSampleParameterFactor : public FstMaterialExpressionParameterFactor
{
	struct FString                                     PaletteName;                                              // 0x0008(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	struct FString                                     SwatchName;                                               // 0x0018(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	class UTexture*                                    TextureFactor;                                            // 0x0028(0x0008) (Edit, Transient, EditConst, AlwaysInit)
	struct FObjectPath                                 TexturePath;                                              // 0x0030(0x0020) (AlwaysInit, NeedCtorLink)
	unsigned long                                      EnableColorOverlay : 1;                                   // 0x0050(0x0004) (Edit, EditConst)
	unsigned long                                      EnableTextureTransform : 1;                               // 0x0050(0x0004) (Edit, EditConst)
	class UTexture*                                    DefaultTexture;                                           // 0x0054(0x0008) (Edit, EditConst)
	struct FString                                     DefaultTexturePath;                                       // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionBoolParameterFactor
// 0x0004 (0x000C - 0x0008)
struct FstMaterialExpressionBoolParameterFactor : public FstMaterialExpressionParameterFactor
{
	unsigned long                                      bFactor : 1;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizing.stMaterialExpressionParameterGroupFactor
// 0x0058
struct FstMaterialExpressionParameterGroupFactor
{
	struct FName                                       GroupName;                                                // 0x0000(0x0008) (Edit, EditConst, AlwaysInit)
	TArray<struct FstMaterialExpressionScalarParameterFactor> arrScalarParameterFactor;                                 // 0x0008(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionVectorParameterFactor> arrVectorParameterFactor;                                 // 0x0018(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionTextureSampleParameterFactor> arrTextureParameterFactor;                                // 0x0028(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionBoolParameterFactor> arrBoolParameterFactor;                                   // 0x0038(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionBoolParameterFactor> arrPrivateBoolParameterFactor;                            // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.CustomizingMotionActionItem
// 0x0028
struct FCustomizingMotionActionItem
{
	int                                                ActionIndex;                                              // 0x0000(0x0004) (Edit)
	struct FEFIconInfo                                 ActionIcon;                                               // 0x0004(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.CustomizingFaceActionItem
// 0x0034
struct FCustomizingFaceActionItem
{
	struct FString                                     AnimName;                                                 // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FEFIconInfo                                 ActionIcon;                                               // 0x0010(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.PartItemLookData
// 0x0034
struct FPartItemLookData
{
	struct FString                                     strPartItemLook;                                          // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FEFIconInfo                                 GameIcon;                                                 // 0x0010(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.CustomPartItemLook
// 0x0024
struct FCustomPartItemLook
{
	struct FString                                     strPartItemType;                                          // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FPartItemLookData>                   arrPartItemLook;                                          // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                nPartItemType;                                            // 0x0020(0x0004) (EditConst)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.CostumeDataSet
// 0x011C
struct FCostumeDataSet
{
	struct FString                                     strFaceItemLook;                                          // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strHairItemLook;                                          // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strHeadItemLook;                                          // 0x0020(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strChestItemLook;                                         // 0x0030(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strPantsItemLook;                                         // 0x0040(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strHandtemLook;                                           // 0x0050(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strShoulderItemLook;                                      // 0x0060(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strFaceDecoLook;                                          // 0x0070(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strWeaponItemLook;                                        // 0x0080(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strFaceAccLook;                                           // 0x0090(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FEFIconInfo                                 GameIcon;                                                 // 0x00A0(0x0024) (Edit, NeedCtorLink)
	struct FPointer                                    strArrayItemLooks[0xB];                                   // 0x00C4(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stSequenceName
// 0x0010
struct FstSequenceName
{
	struct FString                                     SequenceName;                                             // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stBoneMorphGroup
// 0x0020
struct FstBoneMorphGroup
{
	struct FString                                     strBoneMorphGroup;                                        // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FstSequenceName>                     arrBoneMorphTargets;                                      // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stBoneMorph
// 0x0054
struct FstBoneMorph
{
	struct FstGameMsgID                                MorphNameMsgID;                                           // 0x0000(0x0024) (Edit, AlwaysInit, NeedCtorLink)
	struct FName                                       SequenceName;                                             // 0x0024(0x0008) (Edit, EditConst)
	class UAnimSequence*                               AnimSeq;                                                  // 0x002C(0x0008) (Edit, Transient, EditConst)
	struct FObjectPath                                 PATH_AnimSeq;                                             // 0x0034(0x0020) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.BoneMorphAnimData
// 0x0018
struct FBoneMorphAnimData
{
	struct FName                                       SeqName;                                                  // 0x0000(0x0008)
	TArray<struct FRawAnimSequenceTrack>               RawAnimData;                                              // 0x0008(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMeshMorphRule
// 0x002C
struct FstMeshMorphRule
{
	struct FName                                       MorphName;                                                // 0x0000(0x0008) (Edit, EditConst)
	struct FEFIconInfo                                 GameIcon;                                                 // 0x0008(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionParameter
// 0x002C
struct FstMaterialExpressionParameter
{
	struct FstGameMsgID                                MaterialExpressionParameterMsgID;                         // 0x0000(0x0024) (Edit, AlwaysInit, NeedCtorLink)
	struct FName                                       ExpressionParameterName;                                  // 0x0024(0x0008) (Edit, EditConst, AlwaysInit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMeterialScalarInterpolationRange
// 0x0008
struct FstMeterialScalarInterpolationRange
{
	float                                              fInterpolationMin;                                        // 0x0000(0x0004) (Edit)
	float                                              fInterpolationMax;                                        // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionScalarParameter
// 0x000C (0x0038 - 0x002C)
struct FstMaterialExpressionScalarParameter : public FstMaterialExpressionParameter
{
	float                                              fDefault;                                                 // 0x002C(0x0004) (Edit, EditConst)
	struct FstMeterialScalarInterpolationRange         InterpolationRange;                                       // 0x0030(0x0008) (Edit, AlwaysInit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionVectorParameter
// 0x0024 (0x0050 - 0x002C)
struct FstMaterialExpressionVectorParameter : public FstMaterialExpressionParameter
{
	struct FString                                     PaletteName;                                              // 0x002C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bUseAlpha : 1;                                            // 0x003C(0x0004) (Edit)
	struct FLinearColor                                DefaultColor;                                             // 0x0040(0x0010) (Edit, EditConst, AlwaysInit)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionTextureSampleParameter
// 0x0038 (0x0064 - 0x002C)
struct FstMaterialExpressionTextureSampleParameter : public FstMaterialExpressionParameter
{
	struct FString                                     PaletteName;                                              // 0x002C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	class UTexture*                                    DefaultTexture;                                           // 0x003C(0x0008) (Edit, Transient, EditConst, AlwaysInit)
	struct FObjectPath                                 DefaultTexturePath;                                       // 0x0044(0x0020) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionBoolParameter
// 0x0004 (0x0030 - 0x002C)
struct FstMaterialExpressionBoolParameter : public FstMaterialExpressionParameter
{
	unsigned long                                      bDefault : 1;                                             // 0x002C(0x0004) (Edit, EditConst)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.stMaterialExpressionParameterGroup
// 0x007C
struct FstMaterialExpressionParameterGroup
{
	struct FstGameMsgID                                MaterialExpressionParameterGroupMsgID;                    // 0x0000(0x0024) (Edit, AlwaysInit, NeedCtorLink)
	struct FName                                       GroupName;                                                // 0x0024(0x0008) (Edit, EditConst, AlwaysInit)
	TArray<struct FstMaterialExpressionScalarParameter> arrScalarParameter;                                       // 0x002C(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionVectorParameter> arrVectorParameter;                                       // 0x003C(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionTextureSampleParameter> arrTextureParameter;                                      // 0x004C(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionBoolParameter>  arrBoolParameter;                                         // 0x005C(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	TArray<struct FstMaterialExpressionBoolParameter>  arrPrivateBoolParameter;                                  // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CharacterCustomizingRule.CharCustomizingMapData
// 0x0034
struct FCharCustomizingMapData
{
	struct FString                                     MapFile;                                                  // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FEFIconInfo                                 MapIcon;                                                  // 0x0010(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_CustomizeBoneScaleItem.EFCustomizeSkelControlValue
// 0x0014
struct FEFCustomizeSkelControlValue
{
	struct FString                                     ControlName;                                              // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	float                                              ControlValue;                                             // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.NpcPartExtentInfo
// 0x0010
struct FNpcPartExtentInfo
{
	unsigned char                                      NpcPartTypeValue;                                         // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     Extent;                                                   // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.ActionNpcPartExtentInfo
// 0x0010
struct FActionNpcPartExtentInfo
{
	TArray<struct FNpcPartExtentInfo>                  NpcPartExtentInfoArray;                                   // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.NpcPartTransformInfo
// 0x001C
struct FNpcPartTransformInfo
{
	unsigned char                                      NpcPartTypeValue;                                         // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     Position;                                                 // 0x0004(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C) (Edit)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.ActionNpcPartTransformInfo
// 0x0014
struct FActionNpcPartTransformInfo
{
	int                                                ActionId;                                                 // 0x0000(0x0004)
	TArray<struct FNpcPartTransformInfo>               NpcPartTransformInfoArray;                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.ActionNpcPartTransformInfoSet
// 0x0010
struct FActionNpcPartTransformInfoSet
{
	TArray<struct FActionNpcPartTransformInfo>         ActionNpcPartTransformInfoArray;                          // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.ActionNpcMoveInfo
// 0x0008
struct FActionNpcMoveInfo
{
	int                                                StageId;                                                  // 0x0000(0x0004)
	float                                              DefaultAnimMoveSpeed;                                     // 0x0004(0x0004)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.NpcPartTransformSampleData
// 0x0018
struct FNpcPartTransformSampleData
{
	struct FVector                                     Position;                                                 // 0x0000(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.NpcPartTransformSampleDatas
// 0x0014
struct FNpcPartTransformSampleDatas
{
	int                                                NpcPartType;                                              // 0x0000(0x0004)
	TArray<struct FNpcPartTransformSampleData>         transforms;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_NpcPartInfo.NpcPartSampleExportDataByAction
// 0x0024
struct FNpcPartSampleExportDataByAction
{
	int                                                ActionId;                                                 // 0x0000(0x0004)
	int                                                stageLayerIdx;                                            // 0x0004(0x0004)
	int                                                stageIdx;                                                 // 0x0008(0x0004)
	int                                                MoveMood;                                                 // 0x000C(0x0004)
	int                                                behitType;                                                // 0x0010(0x0004)
	TArray<struct FNpcPartTransformSampleDatas>        sampleDataByPartType;                                     // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFData_ColorPaletteItem.ColorSwatchItem
// 0x0020
struct FColorSwatchItem
{
	struct FString                                     SwatchName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FLinearColor                                SwatchColor;                                              // 0x0010(0x0010)
};

// ScriptStruct EFGame.EFData_TexturePaletteItem.TextureSwatchItem
// 0x0050
struct FTextureSwatchItem
{
	struct FString                                     SwatchName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	class UTexture*                                    SwatchTexture;                                            // 0x0010(0x0008)
	struct FEFIconInfo                                 GameIcon;                                                 // 0x0018(0x0024) (NeedCtorLink)
	unsigned long                                      EnableColorOverlay : 1;                                   // 0x003C(0x0004)
	unsigned long                                      EnableTextureTransform : 1;                               // 0x003C(0x0004)
	float                                              DefaultUpdownTransformValue;                              // 0x0040(0x0004)
	float                                              DefaultSideTransformValue;                                // 0x0044(0x0004)
	float                                              DefaultScaleTransformValue;                               // 0x0048(0x0004)
	float                                              DefaultRotateTransformValue;                              // 0x004C(0x0004)
};

// ScriptStruct EFGame.EFData_MaskInfo.EFMaskData
// 0x0004
struct FEFMaskData
{
	TEnumAsByte<EFEQUIP_PART>                          eMainParts;                                               // 0x0000(0x0001) (Edit)
	TEnumAsByte<EFEQUIP_PART>                          eSubParts;                                                // 0x0001(0x0001) (Edit)
	TEnumAsByte<EFMASK_STAGE>                          eMaskTotalStage;                                          // 0x0002(0x0001) (Edit)
	unsigned char                                      Temp;                                                     // 0x0003(0x0001)
};

// ScriptStruct EFGame.EFExcelShell.EFLookPreset
// 0x0024
struct FEFLookPreset
{
	struct FString                                     FontName;                                                 // 0x0000(0x0010) (NeedCtorLink)
	int                                                FontSize;                                                 // 0x0010(0x0004)
	int                                                FontColor;                                                // 0x0014(0x0004)
	unsigned long                                      bFontBold : 1;                                            // 0x0018(0x0004)
	unsigned long                                      bFontItalic : 1;                                          // 0x0018(0x0004)
	int                                                BackgroundColor;                                          // 0x001C(0x0004)
	unsigned long                                      bBorder : 1;                                              // 0x0020(0x0004)
};

// ScriptStruct EFGame.EFParticleSoundDataBeHittedPawnMaterial.EFInterpCurvePointLinearColor
// 0x0035
struct FEFInterpCurvePointLinearColor
{
	float                                              InVal;                                                    // 0x0000(0x0004) (Edit)
	struct FLinearColor                                OutVal;                                                   // 0x0004(0x0010) (Edit)
	struct FLinearColor                                ArriveTangent;                                            // 0x0014(0x0010) (Edit)
	struct FLinearColor                                LeaveTangent;                                             // 0x0024(0x0010) (Edit)
	TEnumAsByte<EInterpCurveMode>                      InterpMode;                                               // 0x0034(0x0001) (Edit)
};

// ScriptStruct EFGame.EFParticleSoundDataBeHittedPawnMaterial.EFInterpCurveLinearColor
// 0x0011
struct FEFInterpCurveLinearColor
{
	TArray<struct FEFInterpCurvePointLinearColor>      Points;                                                   // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EInterpMethodType>                     InterpMethod;                                             // 0x0010(0x0001)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFInterpCurvePointFloat
// 0x0011
struct FEFInterpCurvePointFloat
{
	float                                              InVal;                                                    // 0x0000(0x0004) (Edit)
	float                                              OutVal;                                                   // 0x0004(0x0004) (Edit)
	float                                              ArriveTangent;                                            // 0x0008(0x0004) (Edit)
	float                                              LeaveTangent;                                             // 0x000C(0x0004) (Edit)
	TEnumAsByte<EInterpCurveMode>                      InterpMode;                                               // 0x0010(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFInterpCurveFloat
// 0x0011
struct FEFInterpCurveFloat
{
	TArray<struct FEFInterpCurvePointFloat>            Points;                                                   // 0x0000(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<EInterpMethodType>                     InterpMethod;                                             // 0x0010(0x0001)
};

// ScriptStruct EFGame.EFParticleSoundDataBeHittedPawnMaterial.EFPawnMaterialBeHittedCurveInfo
// 0x0060
struct FEFPawnMaterialBeHittedCurveInfo
{
	struct FString                                     ParamKey;                                                 // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FInterpCurveLinearColor                     ColorParam;                                               // 0x0010(0x0014) (Edit, AlwaysInit, NeedCtorLink)
	struct FInterpCurveFloat                           FloatParam;                                               // 0x0024(0x0014) (Edit, AlwaysInit, NeedCtorLink)
	struct FEFInterpCurveLinearColor                   ColorParamData;                                           // 0x0038(0x0014) (NeedCtorLink)
	struct FEFInterpCurveFloat                         FloatParamData;                                           // 0x004C(0x0014) (NeedCtorLink)
};

// ScriptStruct EFGame.EFParticleSoundDataBuffBeam.EFBeamUpdateInfo
// 0x001C
struct FEFBeamUpdateInfo
{
	int                                                EmitterIndex;                                             // 0x0000(0x0004)
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0008(0x0008)
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0010(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0014(0x0008)
};

// ScriptStruct EFGame.EFParticleSoundDataBuffFX.ScalarTimeVarying
// 0x0014
struct FScalarTimeVarying
{
	struct FName                                       MaterialName;                                             // 0x0000(0x0008) (Edit, EditConst)
	struct FName                                       ParamName;                                                // 0x0008(0x0008) (Edit, EditConst)
	float                                              ValueBase;                                                // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFParticleSoundDataEnhance.EFEnhanceParticleElement
// 0x001C
struct FEFEnhanceParticleElement
{
	unsigned long                                      bUseAbsoluteScale : 1;                                    // 0x0000(0x0004) (Edit)
	unsigned long                                      bCheckStanceType : 1;                                     // 0x0000(0x0004) (Edit)
	unsigned char                                      RequireStance;                                            // 0x0004(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	class UEFParticleData*                             EnhanceParticleData;                                      // 0x0008(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                TranslucencySortPriority;                                 // 0x0010(0x0004) (Edit)
	struct FPointer                                    EnhanceParticleDataPointer;                               // 0x0014(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFParticleSoundDataEnhance.EFEnhanceItemEffect
// 0x0010
struct FEFEnhanceItemEffect
{
	TArray<struct FEFEnhanceParticleElement>           ParticleDataSet;                                          // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFParticleSoundDataWeaponFXDir.EFParticleSoundWeaponFXAttacker
// 0x001C
struct FEFParticleSoundWeaponFXAttacker
{
	float                                              DelayTime;                                                // 0x0000(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0004(0x0004) (Edit)
	unsigned long                                      bSpawnAll : 1;                                            // 0x0008(0x0004) (Edit)
	class UEFParticleData*                             ParticleData;                                             // 0x000C(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    ParticleDataPointer;                                      // 0x0014(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFParticleSoundDataWeaponFXDir.EFParticleSoundWeaponFXDelay
// 0x0014
struct FEFParticleSoundWeaponFXDelay
{
	float                                              DelayTime;                                                // 0x0000(0x0004) (Edit)
	class UEFParticleData*                             ParticleData;                                             // 0x0004(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    ParticleDataPointer;                                      // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFParticleSoundDataWeaponFXDir.EFParticleSoundWeaponFXBlood
// 0x0014
struct FEFParticleSoundWeaponFXBlood
{
	float                                              DelayTime;                                                // 0x0000(0x0004) (Edit)
	class UEFParticleData*                             BloodData;                                                // 0x0004(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    BloodDataPointer;                                         // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFParticleSoundDataWeaponFXDir.EFParticleSoundWeaponFXRandomBlood
// 0x0010
struct FEFParticleSoundWeaponFXRandomBlood
{
	TArray<struct FEFParticleSoundWeaponFXBlood>       Bloods;                                                   // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLightBeam.EFLightBeamIntersectInfo
// 0x000C
struct FEFLightBeamIntersectInfo
{
	unsigned long                                      bIntersect : 1;                                           // 0x0000(0x0004)
	class AEFPawn*                                     Actor;                                                    // 0x0004(0x0008)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectEventTimeInfo
// 0x0008
struct FEFDropItemEffectEventTimeInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              fTime;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectParticleInfo
// 0x0024
struct FEFDropItemEffectParticleInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UParticleSystem*                             Particle;                                                 // 0x0004(0x0008) (Edit)
	unsigned long                                      bAttach : 1;                                              // 0x000C(0x0004) (Edit)
	unsigned long                                      bContinue : 1;                                            // 0x000C(0x0004) (Edit)
	float                                              fSpawnPositionTime;                                       // 0x0010(0x0004) (Edit)
	struct FString                                     ParticlePath;                                             // 0x0014(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectDominentLightInfo
// 0x0014
struct FEFDropItemEffectDominentLightInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              fBrightness;                                              // 0x0004(0x0004) (Edit)
	float                                              fLifeTime;                                                // 0x0008(0x0004) (Edit)
	float                                              fGuaranteeTime;                                           // 0x000C(0x0004) (Edit)
	float                                              fReleaseTime;                                             // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectMaterialColorInfo
// 0x0014
struct FEFDropItemEffectMaterialColorInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FLinearColor                                sValue;                                                   // 0x0004(0x0010) (Edit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectMaterialFloatInfo
// 0x0008
struct FEFDropItemEffectMaterialFloatInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              fValue;                                                   // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectSoundInfo
// 0x001C
struct FEFDropItemEffectSoundInfo
{
	TEnumAsByte<EFDropItemEffectEventType>             eEventType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UAkEvent*                                    cEvent;                                                   // 0x0004(0x0008) (Edit)
	struct FString                                     cEventPath;                                               // 0x000C(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFDropItemEffectInfo.EFDropItemEffectGroup
// 0x0140
struct FEFDropItemEffectGroup
{
	struct FEFDropItemEffectParticleInfo               DropParticle;                                             // 0x0000(0x0024) (Edit)
	struct FEFDropItemEffectParticleInfo               AirParticle;                                              // 0x0024(0x0024) (Edit)
	struct FEFDropItemEffectParticleInfo               GroundParticle;                                           // 0x0048(0x0024) (Edit)
	struct FEFDropItemEffectParticleInfo               ModelParticle;                                            // 0x006C(0x0024) (Edit)
	struct FEFDropItemEffectParticleInfo               PickupParticle;                                           // 0x0090(0x0024) (Edit)
	struct FEFDropItemEffectParticleInfo               TimeoutParticle;                                          // 0x00B4(0x0024) (Edit)
	struct FEFDropItemEffectDominentLightInfo          LightEffect;                                              // 0x00D8(0x0014) (Edit)
	struct FEFDropItemEffectMaterialColorInfo          MaterialColor;                                            // 0x00EC(0x0014) (Edit)
	struct FEFDropItemEffectMaterialFloatInfo          MaterialFloat;                                            // 0x0100(0x0008) (Edit)
	struct FEFDropItemEffectSoundInfo                  AirSound;                                                 // 0x0108(0x001C) (Edit)
	struct FEFDropItemEffectSoundInfo                  GroundSound;                                              // 0x0124(0x001C) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_AddClientStatusEffect.EFAddStatusEffectByAbilityInfo
// 0x000C
struct FEFAddStatusEffectByAbilityInfo
{
	int                                                StatusEffectIndex;                                        // 0x0000(0x0004) (Edit)
	int                                                AbilityType;                                              // 0x0004(0x0004) (Edit)
	int                                                AbilityLevel;                                             // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_AKEvent.EFAkEventStance
// 0x001C
struct FEFAkEventStance
{
	int                                                Stance;                                                   // 0x0000(0x0004) (Edit)
	class UAkEvent*                                    AkEvent;                                                  // 0x0004(0x0008) (Edit)
	struct FString                                     AkEventPath;                                              // 0x000C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_AKEvent.ChangeAkEventData
// 0x002C
struct FChangeAkEventData
{
	int                                                SkillFXChangePrimaryKey;                                  // 0x0000(0x0004) (Edit)
	class UAkEvent*                                    AkEvent;                                                  // 0x0004(0x0008) (Edit)
	struct FString                                     AkEventPath;                                              // 0x000C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x001C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_Anim.EFAnimInfo
// 0x002C
struct FEFAnimInfo
{
	float                                              Rate;                                                     // 0x0000(0x0004)
	float                                              BlendInTime;                                              // 0x0004(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0008(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x000C(0x0004) (Edit)
	unsigned long                                      IgnoreLoopingAnimBlending : 1;                            // 0x000C(0x0004)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0010(0x0001) (Edit)
	TEnumAsByte<ERootBoneAxis>                         RootMotionAxisX;                                          // 0x0011(0x0001) (Edit)
	TEnumAsByte<ERootBoneAxis>                         RootMotionAxisY;                                          // 0x0012(0x0001) (Edit)
	TEnumAsByte<ERootBoneAxis>                         RootMotionAxisZ;                                          // 0x0013(0x0001) (Edit)
	TEnumAsByte<ERootMotionRotationMode>               RootMotionRotate;                                         // 0x0014(0x0001) (Edit)
	TEnumAsByte<ERootRotationOption>                   RootMotionRotX;                                           // 0x0015(0x0001)
	TEnumAsByte<ERootRotationOption>                   RootMotionRotY;                                           // 0x0016(0x0001)
	TEnumAsByte<ERootRotationOption>                   RootMotionRotZ;                                           // 0x0017(0x0001) (Edit)
	TEnumAsByte<EPhysics>                              Physics;                                                  // 0x0018(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	struct FVector                                     RootMotionMaxDelta;                                       // 0x001C(0x000C) (Edit)
	float                                              RootMotionMaxDist;                                        // 0x0028(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_Effect.EFSkillEffectInfo
// 0x0035
struct FEFSkillEffectInfo
{
	unsigned long                                      bActive : 1;                                              // 0x0000(0x0004) (Edit)
	int                                                SkillEffectId;                                            // 0x0004(0x0004) (Edit)
	int                                                EffectAngle;                                              // 0x0008(0x0004) (Edit)
	TEnumAsByte<EFHitSegmentDirType>                   HitDirType;                                               // 0x000C(0x0001) (Edit)
	unsigned char                                      SequentialSkillEffectExecuteCount;                        // 0x000D(0x0001) (Edit)
	unsigned char                                      SequentialSkillEffectAreaRate;                            // 0x000E(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x000F(0x0001) MISSED OFFSET
	float                                              AccumulationDamageRate;                                   // 0x0010(0x0004) (Edit)
	float                                              AccumulationDamageRateMax;                                // 0x0014(0x0004) (Edit)
	struct FString                                     MemoryNotifyName;                                         // 0x0018(0x0010) (Edit, NeedCtorLink)
	struct FVector                                     ProjectileOffset;                                         // 0x0028(0x000C) (Edit)
	unsigned char                                      UniqueId;                                                 // 0x0034(0x0001) (Edit, EditConst)
};

// ScriptStruct EFGame.EFActionNotify_PlaySkeletalMesh.EFMetarialDataModifier
// 0x0030
struct FEFMetarialDataModifier
{
	struct FString                                     LookInfoKey;                                              // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0010(0x0010) (Edit, NeedCtorLink)
	TArray<struct FString>                             MaterialsPathArray;                                       // 0x0020(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlaySkeletalMesh.EFSkelMeshActorAnimSeq
// 0x0060
struct FEFSkelMeshActorAnimSeq
{
	struct FString                                     AnimSequenceName;                                         // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	float                                              AnimPlayRate;                                             // 0x0010(0x0004) (Edit)
	TArray<class UEFAN_Params*>                        ParticleEffects;                                          // 0x0014(0x0010) (Edit, ExportObject, AlwaysInit, NeedCtorLink, EditInline)
	TArray<class UEFActionNotify_AnimEvent*>           AnimEvents;                                               // 0x0024(0x0010) (Edit, ExportObject, AlwaysInit, NeedCtorLink, EditInline)
	int                                                LoopCount;                                                // 0x0034(0x0004) (Edit)
	float                                              StartAnimTime;                                            // 0x0038(0x0004) (Edit)
	unsigned long                                      StartAnimTimeUseOnlyFirst : 1;                            // 0x003C(0x0004) (Edit)
	TArray<struct FPointer>                            ParticleEffectsPointerArray;                              // 0x0040(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            AnimEventsPointerArray;                                   // 0x0050(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFActionNotify_PlaySkeletalMesh.SubPartData
// 0x0034
struct FSubPartData
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit)
	unsigned long                                      SourceIsSocket : 1;                                       // 0x0008(0x0004) (Edit)
	struct FString                                     SourceName;                                               // 0x000C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EFEQUIP_PART>                          PartType;                                                 // 0x001C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	int                                                PartIndex;                                                // 0x0020(0x0004) (Edit)
	struct FString                                     SkeletalMeshPath;                                         // 0x0024(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlaySkeletalMesh.PlaySkeletalMeshActor
// 0x00B0
struct FPlaySkeletalMeshActor
{
	struct FName                                       Tag;                                                      // 0x0000(0x0008) (Edit)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0008(0x0008) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0010(0x0008) (Edit)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0018(0x0010) (Edit, NeedCtorLink)
	TArray<struct FEFMetarialDataModifier>             MaterialLookSet;                                          // 0x0028(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FEFSkelMeshActorAnimSeq>             AnimSeqInfos;                                             // 0x0038(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bApplyLocalRotation : 1;                                  // 0x0048(0x0004) (Edit)
	struct FVector                                     RelativeLocation;                                         // 0x004C(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0058(0x000C) (Edit)
	struct FVector                                     RelativeScale;                                            // 0x0064(0x000C) (Edit)
	TArray<struct FSubPartData>                        SubParts;                                                 // 0x0070(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     SkeletalMeshPath;                                         // 0x0080(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     AnimSetPath;                                              // 0x0090(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             MaterialsPathArray;                                       // 0x00A0(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_EquipCommonActionTool.EFChangeMeshInfo
// 0x0014
struct FEFChangeMeshInfo
{
	int                                                EquipShipSkin;                                            // 0x0000(0x0004) (Edit)
	TArray<struct FPlaySkeletalMeshActor>              AttachMeshs;                                              // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_EquipCommonActionTool.EFChageToolByAbilityInfo
// 0x0018
struct FEFChageToolByAbilityInfo
{
	int                                                AbilityType;                                              // 0x0000(0x0004) (Edit)
	int                                                EquipItemId;                                              // 0x0004(0x0004) (Edit)
	struct FString                                     AttachToolLookInfo;                                       // 0x0008(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_HidePawn.HideInfoUnit
// 0x0008
struct FHideInfoUnit
{
	TEnumAsByte<EFEQUIP_PART>                          ePartsType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                iSubType;                                                 // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_InputTiming.InputTimingInfo
// 0x0028
struct FInputTimingInfo
{
	TEnumAsByte<EInputEventType>                       InputEvent;                                               // 0x0000(0x0001) (Edit)
	TEnumAsByte<EInputTimingType>                      InputType;                                                // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	unsigned long                                      bInstant : 1;                                             // 0x0004(0x0004) (Edit)
	unsigned long                                      bOnlyReserveInput : 1;                                    // 0x0004(0x0004) (Edit)
	unsigned long                                      bSyncAnimEnd : 1;                                         // 0x0004(0x0004)
	unsigned long                                      bAttackProhibit : 1;                                      // 0x0004(0x0004) (Edit)
	unsigned long                                      bAttackProhibitByRepeatInput : 1;                         // 0x0004(0x0004) (Edit)
	int                                                NextStageIndex;                                           // 0x0008(0x0004) (Edit)
	unsigned long                                      bChangeStageServer : 1;                                   // 0x000C(0x0004) (Edit)
	unsigned long                                      bSkillCancelBySameSkill : 1;                              // 0x000C(0x0004) (Edit)
	TArray<int>                                        SkillCancelSkillIdArray;                                  // 0x0010(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bEnable : 1;                                              // 0x0020(0x0004)
	unsigned long                                      bActivating : 1;                                          // 0x0020(0x0004)
	unsigned long                                      bStartActivating : 1;                                     // 0x0020(0x0004)
	unsigned long                                      bDelayActivating : 1;                                     // 0x0020(0x0004)
	int                                                PerfectZoneNextStageIndex;                                // 0x0024(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_MonsterMoveNextStageConditionCheckArea.EFCheckAreaInfo
// 0x0024
struct FEFCheckAreaInfo
{
	TEnumAsByte<ENpcSkillConditionTarget>              TargetType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                MinAngle;                                                 // 0x0004(0x0004) (Edit)
	int                                                MaxAngle;                                                 // 0x0008(0x0004) (Edit)
	int                                                MinDistance;                                              // 0x000C(0x0004) (Edit)
	int                                                MaxDistance;                                              // 0x0010(0x0004) (Edit)
	TEnumAsByte<ECheckMoveType>                        MoveType;                                                 // 0x0014(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FVector                                     OrginOffset;                                              // 0x0018(0x000C) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_NpcLimbState.EFPartsHighlightInfo
// 0x0030
struct FEFPartsHighlightInfo
{
	unsigned long                                      bPartsHighlight : 1;                                      // 0x0000(0x0004) (Edit)
	struct FLinearColor                                MaterialLinearColorValue;                                 // 0x0004(0x0010) (Edit)
	struct FLinearColor                                MaterialLinearColorFadeOutValue;                          // 0x0014(0x0010) (Edit)
	float                                              FadeInTime;                                               // 0x0024(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0028(0x0004) (Edit)
	float                                              DurationTime;                                             // 0x002C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_PawnMaterialChange.MaterialChangeUnit
// 0x0018
struct FMaterialChangeUnit
{
	TEnumAsByte<ECTE_MA_TARGET_TYPE>                   eTargetType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     strMAUKey;                                                // 0x0004(0x0010) (Edit, NeedCtorLink)
	float                                              fLifeTime;                                                // 0x0014(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_PawnMaterialChange.MaterialLookChangeUnit
// 0x0028
struct FMaterialLookChangeUnit
{
	struct FString                                     LookInfoStrKey;                                           // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FMaterialChangeUnit                         sUnit;                                                    // 0x0010(0x0018) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PawnMaterialParam.MaterialParamUnit
// 0x007C
struct FMaterialParamUnit
{
	TEnumAsByte<ECTE_MA_MERGE_METHOD>                  eMergeType;                                               // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECTE_MA_TARGET_TYPE>                   eTargetType;                                              // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	TArray<int>                                        DetailIndexArr;                                           // 0x0004(0x0010) (Edit, NeedCtorLink)
	struct FString                                     strMAUKey;                                                // 0x0014(0x0010) (Edit, NeedCtorLink)
	float                                              fLifeTime;                                                // 0x0024(0x0004) (Edit)
	float                                              fRandomStartTime;                                         // 0x0028(0x0004) (Edit)
	struct FInterpCurveLinearColor                     sStartParameterValueCurveLInearColor;                     // 0x002C(0x0014) (Edit, AlwaysInit, NeedCtorLink)
	struct FInterpCurveLinearColor                     sEndParameterValueCurveLInearColor;                       // 0x0040(0x0014) (Edit, AlwaysInit, NeedCtorLink)
	struct FInterpCurveFloat                           sStartParameterValueCurveFloat;                           // 0x0054(0x0014) (Edit, AlwaysInit, NeedCtorLink)
	struct FInterpCurveFloat                           sEndParameterValueCurveFloat;                             // 0x0068(0x0014) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PawnMaterialParam.MaterialLookParamUnit
// 0x008C
struct FMaterialLookParamUnit
{
	struct FString                                     LookInfoStrKey;                                           // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FMaterialParamUnit                          sUnit;                                                    // 0x0010(0x007C) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PhysicsParam.PhysicsParam
// 0x0028
struct FPhysicsParam
{
	float                                              Duration;                                                 // 0x0000(0x0004)
	float                                              PhysicsWeight;                                            // 0x0004(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0008(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x000C(0x0004) (Edit)
	TEnumAsByte<EFEQUIP_PART>                          ePartsType;                                               // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	unsigned long                                      bToPhysicsMode : 1;                                       // 0x0014(0x0004) (Edit)
	unsigned long                                      bAllBodiesNoFixed : 1;                                    // 0x0014(0x0004) (Edit)
	unsigned long                                      bTarget : 1;                                              // 0x0014(0x0004) (Edit)
	unsigned long                                      bUpdateBodiesFromAnimationWhenEnd : 1;                    // 0x0014(0x0004) (Edit)
	TArray<struct FName>                               IgnoreBoneNames;                                          // 0x0018(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlayAffinityEffect.EFPlayAffinityEffectData
// 0x0004
struct FEFPlayAffinityEffectData
{
	int                                                SkillEffectId;                                            // 0x0000(0x0004) (Edit)
};

// ScriptStruct EFGame.EFBeamActionBase.EFBeamActionParam
// 0x0018
struct FEFBeamActionParam
{
	struct FName                                       ParamName;                                                // 0x0000(0x0008) (Edit)
	unsigned long                                      bUseBone : 1;                                             // 0x0008(0x0004) (Edit)
	struct FName                                       SocketName;                                               // 0x000C(0x0008) (Edit)
	int                                                BeamParamType;                                            // 0x0014(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_PlayParticleEffect.EFActionPSFloorInfo
// 0x0034
struct FEFActionPSFloorInfo
{
	TEnumAsByte<EFMATERIAL_FOOTSTEP>                   FloorType;                                                // 0x0000(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UParticleSystem*                             ParticleSystemAdd;                                        // 0x0004(0x0008) (Edit)
	class UParticleSystem*                             ParticleSystem;                                           // 0x000C(0x0008) (Edit)
	struct FString                                     ParticleSystemAddPath;                                    // 0x0014(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     ParticleSystemPath;                                       // 0x0024(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlayParticleEffect.EFPSRandomVector
// 0x0018
struct FEFPSRandomVector
{
	struct FVector                                     Min;                                                      // 0x0000(0x000C) (Edit)
	struct FVector                                     Max;                                                      // 0x000C(0x000C) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_PlaySkeletalMeshMaterialParam.ActionNotify_SM_AnimEventData
// 0x0038
struct FActionNotify_SM_AnimEventData
{
	struct FName                                       ObjectTag;                                                // 0x0000(0x0008) (Edit)
	struct FString                                     AnimSequenceName;                                         // 0x0008(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<class UEFActionNotify_AnimEvent*>           AnimEvents;                                               // 0x0018(0x0010) (Edit, AlwaysInit, NeedCtorLink, EditInline)
	TArray<struct FPointer>                            AnimEventsPointerArray;                                   // 0x0028(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFActionNotify_PostProcessCrossHair.ZoomSizeChangeParameterStruct
// 0x0018
struct FZoomSizeChangeParameterStruct
{
	float                                              Duration;                                                 // 0x0000(0x0004) (Edit)
	float                                              DelayTime;                                                // 0x0004(0x0004) (Edit)
	float                                              Amplitude;                                                // 0x0008(0x0004) (Edit)
	float                                              Frequency;                                                // 0x000C(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0010(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0014(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionNotify_Trails.ChangeTrailData
// 0x003C
struct FChangeTrailData
{
	int                                                SkillFXChangePrimaryKey;                                  // 0x0000(0x0004) (Edit)
	class UParticleSystem*                             TrailParticleSystem;                                      // 0x0004(0x0008) (Edit)
	TArray<struct FParticleSysParam>                   TrailParticleParamList;                                   // 0x000C(0x0010) (Edit, Component, NeedCtorLink)
	struct FString                                     Description;                                              // 0x001C(0x0010) (Edit, NeedCtorLink)
	struct FString                                     TrailParticleSystemPath;                                  // 0x002C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionConditionSelectNpcIdleType.ExceptionalNpcIdleData
// 0x0008
struct FExceptionalNpcIdleData
{
	TEnumAsByte<EFNpcIdleType>                         IdleType;                                                 // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                OutputStageIndex;                                         // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFClassifyInfo
// 0x0008
struct FEFClassifyInfo
{
	TEnumAsByte<EContentsMaskType>                     ClassifyType;                                             // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ClassifyIndex;                                            // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFActionObject.NpcPartInfo
// 0x0034
struct FNpcPartInfo
{
	unsigned char                                      NpcPartTypeValue;                                         // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0004(0x0008) (Edit)
	struct FVector                                     Position;                                                 // 0x000C(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x0018(0x000C) (Edit)
	struct FVector                                     Extent;                                                   // 0x0024(0x000C) (Edit)
	float                                              Radius;                                                   // 0x0030(0x0004)
};

// ScriptStruct EFGame.EFActionObject.EFStageLayer
// 0x0044
struct FEFStageLayer
{
	int                                                UniqueIndex;                                              // 0x0000(0x0004)
	TArray<class UEFActionStage*>                      StageList;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LayerIndex;                                               // 0x0014(0x0004) (Edit, Const, Transient, EditConst)
	struct FString                                     Comment;                                                  // 0x0018(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                SkillSubCostConsumeStageIndex;                            // 0x0028(0x0004) (Edit)
	float                                              SkillSubCostConsumeTime;                                  // 0x002C(0x0004) (Edit)
	unsigned long                                      MergeActionStage : 1;                                     // 0x0030(0x0004)
	unsigned long                                      bZeroExtentLineCheck : 1;                                 // 0x0030(0x0004) (Edit)
	TArray<struct FPointer>                            StageListPointerArray;                                    // 0x0034(0x0010) (Native, Transient, AlwaysInit)
};

// ScriptStruct EFGame.EFActionObject.EFGrabbedSocketUnit
// 0x001C
struct FEFGrabbedSocketUnit
{
	struct FString                                     GrabbedSocketName;                                        // 0x0000(0x0010) (Edit, EditConst, NeedCtorLink)
	struct FVector                                     GrabbedSocketLocalPosition;                               // 0x0010(0x000C) (Edit, EditConst)
};

// ScriptStruct EFGame.EFActionObjectGroup.EFNPCIdleSequenceInfo
// 0x0014
struct FEFNPCIdleSequenceInfo
{
	struct FString                                     SequenceName;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              SequenceLength;                                           // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct EFGame.EFActionObjectGroup.EFNPCIdleReferenceData
// 0x0024
struct FEFNPCIdleReferenceData
{
	unsigned long                                      NPCIdleReferenceDataComplete : 1;                         // 0x0000(0x0004)
	TArray<class UAnimSet*>                            UseAnimSetArray;                                          // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEFNPCIdleSequenceInfo>              IdleSequenceInfoArray;                                    // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionObjectGroup.EFSharedNotifyGroupData
// 0x001C
struct FEFSharedNotifyGroupData
{
	struct FName                                       AnimationName;                                            // 0x0000(0x0008)
	float                                              StageLength;                                              // 0x0008(0x0004)
	struct FString                                     SharedNotifyGroupId;                                      // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionObjectGroup.EFActionGroupReference
// 0x0060
struct FEFActionGroupReference
{
	struct FString                                     CheckResult;                                              // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PrimaryKey;                                               // 0x0010(0x0004)
	int                                                SecondaryKey;                                             // 0x0014(0x0004)
	int                                                DataType;                                                 // 0x0018(0x0004)
	struct FString                                     Name;                                                     // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Grade;                                                    // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Model;                                                    // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              Scale;                                                    // 0x004C(0x0004)
	struct FString                                     Comment;                                                  // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionStage.EFSkill_NotifyGroup
// 0x0018
struct FEFSkill_NotifyGroup
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      expand : 1;                                               // 0x0010(0x0004)
	struct FColor                                      RGB;                                                      // 0x0014(0x0004)
};

// ScriptStruct EFGame.EFActionStage.EFShortestTimeStageChange
// 0x0008
struct FEFShortestTimeStageChange
{
	int                                                NextStageIndex;                                           // 0x0000(0x0004) (AlwaysInit)
	float                                              ShortestTime;                                             // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct EFGame.EFActionStage.EFStageTransitionInfo
// 0x000C
struct FEFStageTransitionInfo
{
	int                                                PrevStageIndex;                                           // 0x0000(0x0004)
	int                                                ConditionalNextStageIndex01;                              // 0x0004(0x0004)
	int                                                ConditionalNextStageIndex02;                              // 0x0008(0x0004)
};

// ScriptStruct EFGame.EFActionStage.EFSharedNotifyGroupStageData
// 0x0020
struct FEFSharedNotifyGroupStageData
{
	struct FString                                     SharedNotifyGroupId;                                      // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GroupName;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFMatineePathNode.MatineePathNodeConnection
// 0x0010
struct FMatineePathNodeConnection
{
	class ULineBatchComponent*                         LineComponent;                                            // 0x0000(0x0008) (ExportObject, Component, EditInline)
	class AEFMatineePathNode*                          ConnectTo;                                                // 0x0008(0x0008)
};

// ScriptStruct EFGame.EFSequenceSummonsActionAkEvent.ChangeActionAkEventData
// 0x001C
struct FChangeActionAkEventData
{
	int                                                SkillFXChangePrimaryKey;                                  // 0x0000(0x0004) (Edit)
	class UAkEvent*                                    AkEvent;                                                  // 0x0004(0x0008) (Edit)
	struct FString                                     AkEventPath;                                              // 0x000C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataParticle
// 0x0014
struct FEFSequenceSummonsActionBankDataParticle
{
	TEnumAsByte<EFSequenceSummonsActionBankDataParticleEnum> ParticleType;                                             // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UEFProjectileParticleData*                   ParticleDataFX;                                           // 0x0004(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    ParticleDataFXPointer;                                    // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataFloatValue
// 0x0008
struct FEFSequenceSummonsActionBankDataFloatValue
{
	TEnumAsByte<EFSequenceSummonsActionBankDataFloatValueEnum> ValueType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataBOOLValue
// 0x0008
struct FEFSequenceSummonsActionBankDataBOOLValue
{
	TEnumAsByte<EFSequenceSummonsActionBankDataBOOLValueEnum> ValueType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      Value : 1;                                                // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataMultiUseValueData
// 0x0008
struct FEFSequenceSummonsActionBankDataMultiUseValueData
{
	int                                                IntData;                                                  // 0x0000(0x0004) (Edit)
	float                                              floatData;                                                // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsActionBankData.EFSequenceSummonsActionBankDataMultiUseValueDataArray
// 0x0018
struct FEFSequenceSummonsActionBankDataMultiUseValueDataArray
{
	int                                                ApplySkillEffectID;                                       // 0x0000(0x0004) (Edit)
	TEnumAsByte<EFSequenceSummonsActionBankDataMultiUseValueEnum> Type;                                                     // 0x0004(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	TArray<struct FEFSequenceSummonsActionBankDataMultiUseValueData> SkillEffectMultiUseDataArray;                             // 0x0008(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFSequenceSummonsActionSetSkeletalMesh.EFProjectileActionSkeletalMeshMaterialParameter
// 0x0024
struct FEFProjectileActionSkeletalMeshMaterialParameter
{
	TEnumAsByte<EFProjectileActionSkeletalMeshMaterialParameterDelayType> DelayType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              DelayTypeValue;                                           // 0x0004(0x0004) (Edit)
	TEnumAsByte<EFProjectileActionSkeletalMeshMaterialParameterValueType> ValueType;                                                // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	float                                              TypeValue;                                                // 0x000C(0x0004) (Edit)
	struct FString                                     ParameterName;                                            // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	float                                              ParameterValue;                                           // 0x0020(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsActionTierChecker.EFSequenceSummonsActionTierCheckerData
// 0x0010
struct FEFSequenceSummonsActionTierCheckerData
{
	unsigned long                                      Activate : 1;                                             // 0x0000(0x0004) (Edit)
	int                                                Tier1;                                                    // 0x0004(0x0004) (Edit)
	int                                                Tier2;                                                    // 0x0008(0x0004) (Edit)
	int                                                Tier3;                                                    // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsProjectileGrenade.EFGrenadeExtraBounceData
// 0x0020
struct FEFGrenadeExtraBounceData
{
	int                                                Speed;                                                    // 0x0000(0x0004) (Edit)
	int                                                MaxSpeed;                                                 // 0x0004(0x0004) (Edit)
	float                                              DistanceRatio;                                            // 0x0008(0x0004) (Edit)
	int                                                GrenadeMinHeight;                                         // 0x000C(0x0004) (Edit)
	int                                                GrenadeMaxHeight;                                         // 0x0010(0x0004) (Edit)
	float                                              GrenadeMaxheightRatio;                                    // 0x0014(0x0004) (Edit)
	float                                              GrenadeMaxheightStartDist;                                // 0x0018(0x0004) (Edit)
	float                                              StandardDistance;                                         // 0x001C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequenceSummonsEditorFilter.SummonsEditorFilterData
// 0x0038
struct FSummonsEditorFilterData
{
	struct FString                                     FilterName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SummonsIDs;                                               // 0x0010(0x0010) (ExportObject, AlwaysInit, NeedCtorLink, EditInline)
	TArray<struct FSummonsEditorFilterData>            SubFilters;                                               // 0x0020(0x0010) (ExportObject, AlwaysInit, NeedCtorLink, EditInline)
	int                                                PosX;                                                     // 0x0030(0x0004)
	int                                                PosY;                                                     // 0x0034(0x0004)
};

// ScriptStruct EFGame.EFInterpTrackExplodeFracturedMesh.EFExplodeFracturedMeshTrackKey
// 0x0014
struct FEFExplodeFracturedMeshTrackKey
{
	float                                              Time;                                                     // 0x0000(0x0004)
	float                                              power;                                                    // 0x0004(0x0004) (Edit)
	struct FVector                                     Direction;                                                // 0x0008(0x000C) (Edit)
};

// ScriptStruct EFGame.EFInterpTrackPlayerClassAkEvent.EFPlayerClassAkEventTrackKey
// 0x003C
struct FEFPlayerClassAkEventTrackKey
{
	float                                              Time;                                                     // 0x0000(0x0004)
	class UAkEvent*                                    WarriorEvent;                                             // 0x0004(0x0008) (Edit)
	class UAkEvent*                                    MagicianEvent;                                            // 0x000C(0x0008) (Edit)
	class UAkEvent*                                    FighterEvent;                                             // 0x0014(0x0008) (Edit)
	class UAkEvent*                                    DelainEvent;                                              // 0x001C(0x0008) (Edit)
	class UAkEvent*                                    HunterEvent;                                              // 0x0024(0x0008) (Edit)
	class UAkEvent*                                    SpecialistEvent;                                          // 0x002C(0x0008) (Edit)
	class UAkEvent*                                    ScounterHyperSyncEvent;                                   // 0x0034(0x0008) (Edit)
};

// ScriptStruct EFGame.EFInterpTrackSoundSet.EFInterpTrackSoundSetInfo
// 0x0018
struct FEFInterpTrackSoundSetInfo
{
	float                                              Time;                                                     // 0x0000(0x0004)
	TEnumAsByte<EInterpTrackSoundSetType>              SoundSetType;                                             // 0x0004(0x0001) (Edit)
	TEnumAsByte<EFSoundSetStuffType>                   StuffSoundSetType;                                        // 0x0005(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	struct FString                                     AttachBoneName;                                           // 0x0008(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFInterpTrackSubtitle.EFSubtitleInfo
// 0x0020
struct FEFSubtitleInfo
{
	TEnumAsByte<EFGAMEMSG_TYPE>                        MsgType;                                                  // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                MsgID;                                                    // 0x0004(0x0004) (Edit)
	struct FString                                     strMsgID;                                                 // 0x0008(0x0010) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x0018(0x0004) (Edit)
	float                                              Time;                                                     // 0x001C(0x0004) (EditConst)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFFacialAnimInfo
// 0x0010
struct FEFFacialAnimInfo
{
	unsigned long                                      bUseFacialAnim : 1;                                       // 0x0000(0x0004) (Edit)
	float                                              AnimWeightMax;                                            // 0x0004(0x0004) (Edit)
	float                                              PlayRate;                                                 // 0x0008(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFInterpTrackSubtitleBalloon.EFSubtitleBalloonInfo
// 0x0020
struct FEFSubtitleBalloonInfo
{
	TEnumAsByte<ESubtitleBalloonType>                  BalloonType;                                              // 0x0000(0x0001) (Edit)
	TEnumAsByte<EFGAMEMSG_TYPE>                        MsgType;                                                  // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                MsgID;                                                    // 0x0004(0x0004) (Edit)
	struct FString                                     strMsgID;                                                 // 0x0008(0x0010) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x0018(0x0004) (Edit)
	float                                              Time;                                                     // 0x001C(0x0004) (EditConst)
};

// ScriptStruct EFGame.EFInterpTrackVoiceSet.EFInterpTrackVoiceSetInfo
// 0x0028
struct FEFInterpTrackVoiceSetInfo
{
	float                                              Time;                                                     // 0x0000(0x0004)
	TEnumAsByte<EInterpTrackVoiceSetType>              VoiceSetType;                                             // 0x0004(0x0001) (Edit)
	TEnumAsByte<EFCommonActionVoiceSetType>            CommonActionVoiceSetType;                                 // 0x0005(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetAdditionalType>              AdditionalVoiceSetType;                                   // 0x0006(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetAttackCastType>              AttackCastVoiceSetType;                                   // 0x0007(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetAttackCastLongType>          AttackCastLongVoiceSetType;                               // 0x0008(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetAttackExecType>              AttackExecVoiceSetType;                                   // 0x0009(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetAttackShotType>              AttackShotVoiceSetType;                                   // 0x000A(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetDamageType>                  DamageVoiceSetType;                                       // 0x000B(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetDeathType>                   DeathVoiceSetType;                                        // 0x000C(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetDownType>                    DownVoiceSetType;                                         // 0x000D(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetIdleType>                    IdleVoiceSetType;                                         // 0x000E(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetRunType>                     RunVoiceSetType;                                          // 0x000F(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetSpawnType>                   SpawnVoiceSetType;                                        // 0x0010(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetStandUpType>                 StandUpVoiceSetType;                                      // 0x0011(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetWalkType>                    WalkVoiceSetType;                                         // 0x0012(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetDeathDownType>               DeathDownVoiceSetType;                                    // 0x0013(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetFreezeStartType>             FreezeStartVoiceSetType;                                  // 0x0014(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetFreezeLoopType>              FreezeLoopVoiceSetType;                                   // 0x0015(0x0001) (Edit)
	TEnumAsByte<EFVoiceSetFreezeEndType>               FreezeEndVoiceSetType;                                    // 0x0016(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0017(0x0001) MISSED OFFSET
	struct FString                                     Keyword;                                                  // 0x0018(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTexture2D.EFTexture2DHitPixel
// 0x0010
struct FEFTexture2DHitPixel
{
	TArray<unsigned char>                              HitTestPixels;                                            // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFMinimapVolume.MinimapPeiceInfo
// 0x0038
struct FMinimapPeiceInfo
{
	struct FIntPoint                                   Index;                                                    // 0x0000(0x0008) (Edit, EditConst)
	int                                                PieceIndex;                                               // 0x0008(0x0004) (Edit, EditConst)
	struct FString                                     TextureName;                                              // 0x000C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FBox                                        BoudingBox;                                               // 0x001C(0x001C) (Edit, EditConst)
};

// ScriptStruct EFGame.EFAction_Notify.ActionNotifyData
// 0x000C
struct FActionNotifyData
{
	float                                              LastCheckTime;                                            // 0x0000(0x0004)
	int                                                LastRepeatIndex;                                          // 0x0004(0x0004)
	int                                                ActiveByMemoryPos;                                        // 0x0008(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_Anim.ActionNotifyAnimData
// 0x0008 (0x0014 - 0x000C)
struct FActionNotifyAnimData : public FActionNotifyData
{
	class UAnimNodeSequence*                           PlayedAnimNodeSeq;                                        // 0x000C(0x0008)
};

// ScriptStruct EFGame.EFActionNotify_AnimBlendDirectional.ActionNotify_AnimBlendDirectionalData
// 0x0004 (0x0010 - 0x000C)
struct FActionNotify_AnimBlendDirectionalData : public FActionNotifyData
{
	float                                              IgnoreStayTime;                                           // 0x000C(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_MemoryPos.ActionNotifyMemoryPos
// 0x0020 (0x002C - 0x000C)
struct FActionNotifyMemoryPos : public FActionNotifyData
{
	struct FEFBasedLocation                            CharPos;                                                  // 0x000C(0x0010)
	struct FEFBasedLocation                            TargetCastPos;                                            // 0x001C(0x0010)
};

// ScriptStruct EFGame.EFActionNotify_ParticleControl.ActionNotifyParticleControlData
// 0x0030 (0x003C - 0x000C)
struct FActionNotifyParticleControlData : public FActionNotifyData
{
	struct FEFBasedLocation                            ParticleStartPos;                                         // 0x000C(0x0010)
	struct FEFBasedLocation                            ParticleTargetPos;                                        // 0x001C(0x0010)
	class UEFActionNotify_PlayParticleEffect*          ControlNotify;                                            // 0x002C(0x0008)
	struct FPointer                                    ControlNotifyPointer;                                     // 0x0034(0x0008) (Native)
};

// ScriptStruct EFGame.EFActionNotify_Physics.ActionNotifyPhysicsData
// 0x0001 (0x000D - 0x000C)
struct FActionNotifyPhysicsData : public FActionNotifyData
{
	TEnumAsByte<EPhysics>                              PrevPhysics;                                              // 0x000C(0x0001)
};

// ScriptStruct EFGame.EFActionNotify_PlayBeamEffect.ActionNotifyPlayBeamData
// 0x0020 (0x002C - 0x000C)
struct FActionNotifyPlayBeamData : public FActionNotifyData
{
	TArray<int>                                        PlayedBeamArr;                                            // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        EditingPlayedBeamArr;                                     // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlayCameraParticleEffect.ActionNotifyCameraParticleData
// 0x0004 (0x0010 - 0x000C)
struct FActionNotifyCameraParticleData : public FActionNotifyData
{
	int                                                PlayPSIndex;                                              // 0x000C(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_PlayDecalEffect.ActionNotifyPlayDecalEffectData
// 0x0020 (0x002C - 0x000C)
struct FActionNotifyPlayDecalEffectData : public FActionNotifyData
{
	int                                                EffectId;                                                 // 0x000C(0x0004)
	struct FVector                                     StartDir;                                                 // 0x0010(0x000C)
	int                                                ActionEnum;                                               // 0x001C(0x0004)
	struct FVector                                     MouseTargetPos;                                           // 0x0020(0x000C)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFActorLocationCycleMotion
// 0x0019
struct FEFActorLocationCycleMotion
{
	float                                              fTime;                                                    // 0x0000(0x0004)
	struct FVector                                     vPreValue;                                                // 0x0004(0x000C)
	float                                              fMotionRange;                                             // 0x0010(0x0004) (Edit)
	float                                              fMotionCycle;                                             // 0x0014(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 eMotionAxis;                                              // 0x0018(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFActorRotationAcyclicMotion
// 0x0005
struct FEFActorRotationAcyclicMotion
{
	float                                              fMotionVel;                                               // 0x0000(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 eMotionAxis;                                              // 0x0004(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFActorRotationCyclicMotion
// 0x0019
struct FEFActorRotationCyclicMotion
{
	float                                              fTime;                                                    // 0x0000(0x0004)
	struct FRotator                                    vPreValue;                                                // 0x0004(0x000C)
	float                                              fMotionRange;                                             // 0x0010(0x0004) (Edit)
	float                                              fMotionCycle;                                             // 0x0014(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 eMotionAxis;                                              // 0x0018(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFMoney
// 0x0008
struct FEFMoney
{
	TEnumAsByte<EMoneyType>                            Type;                                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Amount;                                                   // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFFaction
// 0x0008
struct FEFFaction
{
	TEnumAsByte<EFactionType>                          Type;                                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SubFactionID;                                             // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFIntRange
// 0x0008
struct FEFIntRange
{
	int                                                Min;                                                      // 0x0000(0x0004) (Edit)
	int                                                Max;                                                      // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.HittedSoundWeaponSetInfo
// 0x0014
struct FHittedSoundWeaponSetInfo
{
	int                                                Index;                                                    // 0x0000(0x0004) (Edit)
	struct FString                                     hittedSoundWeaponSetName;                                 // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFMatineeSyncMotionInfo
// 0x0020
struct FEFMatineeSyncMotionInfo
{
	struct FString                                     RemoteEventName;                                          // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MatineeSyncMotionName;                                    // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFTrackMoveTransform
// 0x001C
struct FEFTrackMoveTransform
{
	float                                              Time;                                                     // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFTrackMoveInfo
// 0x002C
struct FEFTrackMoveInfo
{
	int                                                TrackIndex;                                               // 0x0000(0x0004)
	struct FVector                                     InitLocation;                                             // 0x0004(0x000C)
	struct FRotator                                    InitRotation;                                             // 0x0010(0x000C)
	TArray<struct FEFTrackMoveTransform>               MovementInfo;                                             // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFDeployTrackMoveInfo
// 0x000C
struct FEFDeployTrackMoveInfo
{
	int                                                Index;                                                    // 0x0000(0x0004)
	int                                                TrackMoveIndex;                                           // 0x0004(0x0004) (Edit)
	int                                                NextTrackMoveVolumeSpawnIndex;                            // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFDataUnitInputInfo
// 0x0020
struct FEFDataUnitInputInfo
{
	struct FString                                     InputDesc;                                                // 0x0000(0x0010) (NeedCtorLink)
	TArray<int>                                        PrevNodeIndexArray;                                       // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFDataUnitOutputInfo
// 0x0020
struct FEFDataUnitOutputInfo
{
	struct FString                                     OutputDesc;                                               // 0x0000(0x0010) (NeedCtorLink)
	TArray<int>                                        NextNodeIndexArray;                                       // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFQuestEndConditionVisibility
// 0x000C
struct FEFQuestEndConditionVisibility
{
	TEnumAsByte<EQuestVisibility>                      eQuestVisibility;                                         // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                QuestID;                                                  // 0x0004(0x0004) (Edit)
	int                                                StageStepID;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFLocationSyncInfo
// 0x0048
struct FEFLocationSyncInfo
{
	TEnumAsByte<EFMatineeSyncTargetType>               TargetType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SpawnIndex;                                               // 0x0004(0x0004)
	struct FVector                                     StartLocation;                                            // 0x0008(0x000C)
	struct FVector                                     EndLocation;                                              // 0x0014(0x000C)
	struct FVector                                     StartRotation;                                            // 0x0020(0x000C)
	struct FVector                                     EndRotation;                                              // 0x002C(0x000C)
	class AActor*                                      GroupActor;                                               // 0x0038(0x0008)
	class UInterpGroup*                                Group;                                                    // 0x0040(0x0008)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFMatineeSyncInfo
// 0x0020
struct FEFMatineeSyncInfo
{
	struct FString                                     RemoteEventName;                                          // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEFLocationSyncInfo>                 LocationSyncInfoList;                                     // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.SeqFrameInfo
// 0x0020
struct FSeqFrameInfo
{
	int                                                PosX;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                PosY;                                                     // 0x0004(0x0004) (AlwaysInit)
	int                                                SizeX;                                                    // 0x0008(0x0004) (AlwaysInit)
	int                                                SizeY;                                                    // 0x000C(0x0004) (AlwaysInit)
	struct FString                                     Comment;                                                  // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFTargetPortalPoint
// 0x0008
struct FEFTargetPortalPoint
{
	int                                                PointIndex;                                               // 0x0000(0x0004) (Edit)
	int                                                Weight;                                                   // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.DummySpotProperty
// 0x0028
struct FDummySpotProperty
{
	int                                                DummyActorIndex;                                          // 0x0000(0x0004) (Edit, EditConst)
	struct FVector                                     RelativeLocation;                                         // 0x0004(0x000C) (Edit, EditConst)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C) (Edit, EditConst)
	TEnumAsByte<EDummyActorSpotType>                   eSpotType;                                                // 0x001C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	int                                                SpawnRange;                                               // 0x0020(0x0004) (Edit)
	int                                                GroupID;                                                  // 0x0024(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.TowerSpawnPoint
// 0x002C
struct FTowerSpawnPoint
{
	struct FVector                                     RelativeLocation;                                         // 0x0000(0x000C) (Edit, EditConst)
	struct FRotator                                    RelativeRotation;                                         // 0x000C(0x000C) (Edit, EditConst)
	int                                                NPCTableID;                                               // 0x0018(0x0004) (Edit)
	struct FName                                       SocketName;                                               // 0x001C(0x0008) (Edit, EditConst)
	struct FName                                       BoneName;                                                 // 0x0024(0x0008) (Edit, EditConst)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFTownHaveVisibility
// 0x0006
struct FEFTownHaveVisibility
{
	unsigned long                                      bTemp : 1;                                                // 0x0000(0x0004)
	TEnumAsByte<ETownHaveCheckType>                    Condition;                                                // 0x0004(0x0001) (Edit)
	TEnumAsByte<EQuestVisibility>                      Action;                                                   // 0x0005(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFIslandHeartVibility
// 0x0006
struct FEFIslandHeartVibility
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	TEnumAsByte<EIslandHeartCheckType>                 Condition;                                                // 0x0004(0x0001) (Edit)
	TEnumAsByte<EQuestVisibility>                      Action;                                                   // 0x0005(0x0001) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFQuestVisiblityInfo
// 0x0010
struct FEFQuestVisiblityInfo
{
	TEnumAsByte<EQuestVisibilityType>                  eVisibilityType;                                          // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                QuestIndex;                                               // 0x0004(0x0004) (Edit)
	int                                                QuestStepIndex;                                           // 0x0008(0x0004) (Edit)
	int                                                EndConditionIndex;                                        // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFQuestUseSkillInfo
// 0x0008
struct FEFQuestUseSkillInfo
{
	int                                                UseSkillID;                                               // 0x0000(0x0004) (Edit)
	int                                                UseSkillStage;                                            // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFCommonDataDefine.EFDeployUserDesc
// 0x0020
struct FEFDeployUserDesc
{
	struct FLinearColor                                TextColor;                                                // 0x0000(0x0010) (Edit)
	struct FString                                     Text;                                                     // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFCommonDataDefine.TransportSpawnPoint
// 0x0068
struct FTransportSpawnPoint
{
	struct FString                                     Desc;                                                     // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     Name;                                                     // 0x0010(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	struct FVector                                     RelativeLocation;                                         // 0x0020(0x000C) (Edit, EditConst)
	struct FRotator                                    RelativeRotation;                                         // 0x002C(0x000C) (Edit, EditConst)
	struct FName                                       SocketName;                                               // 0x0038(0x0008) (Edit, EditConst)
	struct FName                                       BoneName;                                                 // 0x0040(0x0008) (Edit, EditConst)
	TArray<class AActor*>                              NPCArray;                                                 // 0x0048(0x0010) (Edit, Transient, EditConst, AlwaysInit, NeedCtorLink)
	TArray<class AActor*>                              PropArray;                                                // 0x0058(0x0010) (Edit, Transient, EditConst, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlayParticleEffect.ActionNotifyParticleData
// 0x0020 (0x002C - 0x000C)
struct FActionNotifyParticleData : public FActionNotifyData
{
	TArray<int>                                        PlayPSList;                                               // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        EditingPSList;                                            // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFActionNotify_PlayProjectileDecalEffect.ActionNotifyPlayProjectileDecalEffectData
// 0x0004 (0x0010 - 0x000C)
struct FActionNotifyPlayProjectileDecalEffectData : public FActionNotifyData
{
	int                                                EffectId;                                                 // 0x000C(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_PostProcessCrossHair.ActionNotifyPostProcessCrossHairData
// 0x0030 (0x003C - 0x000C)
struct FActionNotifyPostProcessCrossHairData : public FActionNotifyData
{
	unsigned long                                      RangeOfMousePos : 1;                                      // 0x000C(0x0004)
	float                                              ZoomSizeX;                                                // 0x0010(0x0004)
	float                                              ZoomSizeY;                                                // 0x0014(0x0004)
	float                                              SecondPerMainRadian;                                      // 0x0018(0x0004)
	float                                              SecondPerBlendInRadian;                                   // 0x001C(0x0004)
	float                                              SecondPerBlendOutRadian;                                  // 0x0020(0x0004)
	float                                              Duration;                                                 // 0x0024(0x0004)
	float                                              DelayTime;                                                // 0x0028(0x0004)
	float                                              Amplitude;                                                // 0x002C(0x0004)
	float                                              Frequency;                                                // 0x0030(0x0004)
	float                                              BlendInTime;                                              // 0x0034(0x0004)
	float                                              BlendOutTime;                                             // 0x0038(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_TargetPosControl.ActionNotifyTargetPosControl
// 0x0020 (0x002C - 0x000C)
struct FActionNotifyTargetPosControl : public FActionNotifyData
{
	struct FEFBasedLocation                            StartPos;                                                 // 0x000C(0x0010)
	struct FEFBasedLocation                            TargetPos;                                                // 0x001C(0x0010)
};

// ScriptStruct EFGame.EFActionNotify_Trails.ActionNotifyTrailData
// 0x0008 (0x0014 - 0x000C)
struct FActionNotifyTrailData : public FActionNotifyData
{
	class UAnimNotify_Trails*                          Trails;                                                   // 0x000C(0x0008) (Native)
};

// ScriptStruct EFGame.EFActionNotify_ViewShake.ActionNotifyViewShake
// 0x0008 (0x0014 - 0x000C)
struct FActionNotifyViewShake : public FActionNotifyData
{
	unsigned char                                      PlayGroup;                                                // 0x000C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	int                                                ShakeID;                                                  // 0x0010(0x0004)
};

// ScriptStruct EFGame.EFActionNotify_WeaponMode.ActionNotifyWeaponMode
// 0x0004 (0x0010 - 0x000C)
struct FActionNotifyWeaponMode : public FActionNotifyData
{
	int                                                EquipStateWhenStart;                                      // 0x000C(0x0004)
};

// ScriptStruct EFGame.EFActionObjectGroup.EFActionCustomGroup
// 0x0014
struct FEFActionCustomGroup
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      expand : 1;                                               // 0x0010(0x0004)
};

// ScriptStruct EFGame.EFBeamActionBase.EFBeamActionInstance
// 0x00B4
struct FEFBeamActionInstance
{
	int                                                PSCIndex;                                                 // 0x0000(0x0004)
	int                                                HitPSCIndex;                                              // 0x0004(0x0004)
	int                                                HitEffectPSCIndex;                                        // 0x0008(0x0004)
	TArray<int>                                        BeamInstIndexArr;                                         // 0x000C(0x0010) (NeedCtorLink)
	struct FName                                       CurSourceSocket;                                          // 0x001C(0x0008)
	struct FName                                       CurTargetSocket;                                          // 0x0024(0x0008)
	float                                              MaxDistance;                                              // 0x002C(0x0004)
	unsigned long                                      bTickable : 1;                                            // 0x0030(0x0004)
	struct FQWord                                      SourceOID;                                                // 0x0034(0x0008)
	struct FVector                                     SourceLocation;                                           // 0x003C(0x000C)
	struct FVector                                     SourceOffset;                                             // 0x0048(0x000C)
	TArray<struct FName>                               SourceMoveNameArr;                                        // 0x0054(0x0010) (NeedCtorLink)
	float                                              SourceMoveNameNextTime;                                   // 0x0064(0x0004)
	float                                              SourceMoveNamePerTime;                                    // 0x0068(0x0004)
	struct FQWord                                      TargetOID;                                                // 0x006C(0x0008)
	struct FVector                                     TargetLocation;                                           // 0x0074(0x000C)
	struct FVector                                     TargetNormal;                                             // 0x0080(0x000C)
	TArray<struct FName>                               TargetMoveNameArr;                                        // 0x008C(0x0010) (NeedCtorLink)
	float                                              TargetMoveNameNextTime;                                   // 0x009C(0x0004)
	float                                              TargetMoveNamePerTime;                                    // 0x00A0(0x0004)
	int                                                SkillEffectGroupID;                                       // 0x00A4(0x0004)
	struct FVector                                     MouseTargetPos;                                           // 0x00A8(0x000C)
};

// ScriptStruct EFGame.EFData.EFQword
// 0x0008
struct FEFQword
{
	int                                                A;                                                        // 0x0000(0x0004) (Edit)
	int                                                B;                                                        // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFDataContainer_CharacterCustomizing.CharCustomizingCacheData
// 0x0020
struct FCharCustomizingCacheData
{
	TArray<class UEFData_CharacterCustomizing*>        ArtistPresets;                                            // 0x0000(0x0010) (NeedCtorLink)
	TArray<class UEFData_CharacterCustomizing*>        FacePresets;                                              // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTownOjectSoundInfo
// 0x0018
struct FEFTownOjectSoundInfo
{
	class UAkEvent*                                    cAkEvent;                                                 // 0x0000(0x0008) (Edit)
	struct FString                                     cAkEventPath;                                             // 0x0008(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTownOjectEffectInfo
// 0x0010
struct FEFTownOjectEffectInfo
{
	class UEFParticleData*                             EffectData;                                               // 0x0000(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FPointer                                    EffectDataPointer;                                        // 0x0008(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTownOjectInfo
// 0x0038
struct FEFTownOjectInfo
{
	class UAnimSet*                                    TownObjectAnimSet;                                        // 0x0000(0x0008) (Edit)
	struct FString                                     TownObjectAnimSetPath;                                    // 0x0008(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FEFTownOjectSoundInfo>               SoundDataArr;                                             // 0x0018(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FEFTownOjectEffectInfo>              EffectDataArr;                                            // 0x0028(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.OptimizeSection
// 0x0018
struct FOptimizeSection
{
	struct FName                                       StandardBoneName;                                         // 0x0000(0x0008) (Edit, AlwaysInit)
	unsigned long                                      bUseExcludeByAngle : 1;                                   // 0x0008(0x0004) (Edit)
	TEnumAsByte<ESectionAxis>                          StandardAxis;                                             // 0x000C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	unsigned long                                      bUseExcludeByDistance : 1;                                // 0x0010(0x0004) (Edit)
	float                                              ViewDistance;                                             // 0x0014(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFSeatSlotInfo
// 0x000C
struct FEFSeatSlotInfo
{
	struct FName                                       SlotName;                                                 // 0x0000(0x0008) (Edit)
	unsigned long                                      bUseSocket : 1;                                           // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTowerSoundInfo
// 0x0024
struct FEFTowerSoundInfo
{
	TEnumAsByte<ETowerAnimationType>                   InvokeAnimType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<class UAkEvent*>                            AkEventArray;                                             // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             AkEventArrayPathArray;                                    // 0x0014(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTowerCameraShakeInfo
// 0x0014
struct FEFTowerCameraShakeInfo
{
	TEnumAsByte<ETowerAnimationType>                   InvokeAnimType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UEFCameraViewShake*                          NewCameraShakeParam;                                      // 0x0004(0x0008) (Edit, EditInline)
	struct FPointer                                    NewCameraShakeParamPointer;                               // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTowerEffectInfo
// 0x0020
struct FEFTowerEffectInfo
{
	TEnumAsByte<ETowerAnimationType>                   TowerEffectInvokeType;                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UEFParticleData*                             TowerEffectData;                                          // 0x0004(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              EffectOffset;                                             // 0x000C(0x0004) (Edit)
	float                                              DeplayTime;                                               // 0x0010(0x0004) (Edit)
	int                                                TranslucencySortPriority;                                 // 0x0014(0x0004) (Edit)
	struct FPointer                                    TowerEffectDataPointer;                                   // 0x0018(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.sShipSoundInfo
// 0x0020
struct FsShipSoundInfo
{
	class UAkEvent*                                    AkEvent;                                                  // 0x0000(0x0008) (Edit)
	unsigned long                                      bSwitchCharacterAKEvent : 1;                              // 0x0008(0x0004) (Edit)
	unsigned long                                      StopWhenBaseDestroy : 1;                                  // 0x0008(0x0004) (Edit)
	float                                              StopWhenBaseDestroyFadeTime;                              // 0x000C(0x0004) (Edit)
	struct FString                                     AkEventPath;                                              // 0x0010(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.sListInfo
// 0x0014
struct FsListInfo
{
	float                                              fRollWeightByRotate;                                      // 0x0000(0x0004) (Edit)
	float                                              fCycleOfRollByRotate;                                     // 0x0004(0x0004) (Edit)
	float                                              fRollRangeByRotate;                                       // 0x0008(0x0004) (Edit)
	float                                              fCycleOfBounceWeightByRotate;                             // 0x000C(0x0004) (Edit)
	float                                              fCycleOfBounceByRotate;                                   // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.sMotionInfo
// 0x0008
struct FsMotionInfo
{
	float                                              fDurationTime;                                            // 0x0000(0x0004) (Edit)
	float                                              fBoundsValue;                                             // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropStaticMeshSocket
// 0x001C
struct FEFPropStaticMeshSocket
{
	TEnumAsByte<EPropSocketType>                       SocketType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x0004(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0010(0x000C) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropMaterialActionParamValue
// 0x0014
struct FEFPropMaterialActionParamValue
{
	float                                              Scalar;                                                   // 0x0000(0x0004) (Edit)
	struct FLinearColor                                Color;                                                    // 0x0004(0x0010) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropMaterialActionParam
// 0x0038
struct FEFPropMaterialActionParam
{
	int                                                MaterialIndex;                                            // 0x0000(0x0004) (Edit)
	struct FName                                       Name;                                                     // 0x0004(0x0008) (Edit)
	TEnumAsByte<EPropMaterialActionParamType>          ParamType;                                                // 0x000C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	struct FEFPropMaterialActionParamValue             StartValue;                                               // 0x0010(0x0014) (Edit)
	struct FEFPropMaterialActionParamValue             EndValue;                                                 // 0x0024(0x0014) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropMaterialAction
// 0x001C
struct FEFPropMaterialAction
{
	TEnumAsByte<EPropAnimationType>                    eInvokeType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FEFPropMaterialActionParam>          Params;                                                   // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	float                                              Time;                                                     // 0x0014(0x0004) (Edit)
	float                                              StartDelay;                                               // 0x0018(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropSoundInfo
// 0x0024
struct FEFPropSoundInfo
{
	TEnumAsByte<EPropAnimationType>                    InvokeAnimType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<class UAkEvent*>                            AkEventArray;                                             // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             AkEventArrayPathArray;                                    // 0x0014(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropCameraShakeInfo
// 0x0014
struct FEFPropCameraShakeInfo
{
	TEnumAsByte<EPropAnimationType>                    InvokeAnimType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UEFCameraViewShake*                          NewCameraShakeParam;                                      // 0x0004(0x0008) (Edit, EditInline)
	struct FPointer                                    NewCameraShakeParamPointer;                               // 0x000C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFRemoveHitSocketInfo
// 0x0014
struct FEFRemoveHitSocketInfo
{
	TEnumAsByte<EPropAnimationType>                    RemoveAnimType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FString>                             HitSocketNameArray;                                       // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropSubCollisionElem
// 0x0068
struct FEFPropSubCollisionElem
{
	TEnumAsByte<EPropSubCollisionPrimitiveType>        PrimType;                                                 // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0001(0x000F) MISSED OFFSET
	struct FMatrix                                     TM;                                                       // 0x0010(0x0040)
	struct FVector                                     RelativeLocation;                                         // 0x0050(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x005C(0x000C) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropSubCollisionBoxElem
// 0x000C (0x0074 - 0x0068)
struct FEFPropSubCollisionBoxElem : public FEFPropSubCollisionElem
{
	struct FVector                                     Extent;                                                   // 0x0068(0x000C) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropSubCollisionCylinderElem
// 0x0008 (0x0070 - 0x0068)
struct FEFPropSubCollisionCylinderElem : public FEFPropSubCollisionElem
{
	float                                              Radius;                                                   // 0x0068(0x0004) (Edit)
	float                                              Height;                                                   // 0x006C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropSubCollision
// 0x0020
struct FEFPropSubCollision
{
	TArray<struct FEFPropSubCollisionBoxElem>          BoxElems;                                                 // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FEFPropSubCollisionCylinderElem>     CylElems;                                                 // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPropEffectInfo
// 0x0034
struct FEFPropEffectInfo
{
	TEnumAsByte<EPropAnimationType>                    PropEffectInvokeType;                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EPropAnimationType>>            PropEffectRemoveTypeArray;                                // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bInteractorEffect : 1;                                    // 0x0014(0x0004) (Edit)
	class UEFParticleData*                             PropEffectData;                                           // 0x0018(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              EffectOffset;                                             // 0x0020(0x0004) (Edit)
	float                                              DeplayTime;                                               // 0x0024(0x0004) (Edit)
	int                                                TranslucencySortPriority;                                 // 0x0028(0x0004) (Edit)
	struct FPointer                                    PropEffectDataPointer;                                    // 0x002C(0x0008) (Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFDestructionPartsMatActionUnit
// 0x0024
struct FEFDestructionPartsMatActionUnit
{
	struct FString                                     strMatParamName;                                          // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           sStartParameterValueCurveFloat;                           // 0x0010(0x0014) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFDestructionPartsMatActionInfo
// 0x0048
struct FEFDestructionPartsMatActionInfo
{
	struct FEFDestructionPartsMatActionUnit            DespawnMaterialAction;                                    // 0x0000(0x0024) (Edit, NeedCtorLink)
	struct FEFDestructionPartsMatActionUnit            SpawnMaterialAction;                                      // 0x0024(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFPartsDestruction
// 0x00C0
struct FEFPartsDestruction
{
	class UEFData_MeshLookInfo*                        cParts;                                                   // 0x0000(0x0008) (Edit, EditInline)
	unsigned long                                      bDefaultHide : 1;                                         // 0x0008(0x0004) (Edit)
	unsigned long                                      bDestroyedPartsHide : 1;                                  // 0x0008(0x0004) (Edit)
	float                                              PartsActorDestroyDelay;                                   // 0x000C(0x0004) (Edit)
	struct FEFDestructionPartsMatActionInfo            MatActionInfo;                                            // 0x0010(0x0048) (Edit, NeedCtorLink)
	class UEFCameraViewShake*                          CameraShakeData;                                          // 0x0058(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UAkEvent*                                    cAkEvent;                                                 // 0x0060(0x0008) (Edit)
	class UEFParticleData*                             ParticleDataParent;                                       // 0x0068(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UEFParticleData*                             ParticleDataChild;                                        // 0x0070(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              fImpulseSize;                                             // 0x0078(0x0004) (Edit)
	struct FString                                     strCommonFXSocket;                                        // 0x007C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bCommonFXNoSound : 1;                                     // 0x008C(0x0004) (Edit)
	struct FString                                     cAkEventPath;                                             // 0x0090(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FPointer                                    cPartsPointer;                                            // 0x00A0(0x0008) (Edit, Native, Transient)
	struct FPointer                                    CameraShakeDataPointer;                                   // 0x00A8(0x0008) (Edit, Native, Transient)
	struct FPointer                                    ParticleDataParentPointer;                                // 0x00B0(0x0008) (Edit, Native, Transient)
	struct FPointer                                    ParticleDataChildPointer;                                 // 0x00B8(0x0008) (Edit, Native, Transient)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFOneShotBattleSoundInfo
// 0x001C
struct FEFOneShotBattleSoundInfo
{
	int                                                iCharID;                                                  // 0x0000(0x0004) (Edit)
	class UAkEvent*                                    OneShotBattleSound;                                       // 0x0004(0x0008) (Edit)
	struct FString                                     OneShotBattleSoundPath;                                   // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFVoiceSetInfo
// 0x0014
struct FEFVoiceSetInfo
{
	int                                                iCharID;                                                  // 0x0000(0x0004) (Edit)
	struct FString                                     VoiceSetKey;                                              // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFGibsGroup
// 0x0120
struct FEFGibsGroup
{
	struct FString                                     strNormal;                                                // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strFire;                                                  // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strElectric;                                              // 0x0020(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strPoison;                                                // 0x0030(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strFreeze;                                                // 0x0040(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strStone;                                                 // 0x0050(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strWind;                                                  // 0x0060(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strDark;                                                  // 0x0070(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strHoly;                                                  // 0x0080(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleNormal;                                        // 0x0090(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleFire;                                          // 0x00A0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleElectric;                                      // 0x00B0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticlePoison;                                        // 0x00C0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleFreeze;                                        // 0x00D0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleStone;                                         // 0x00E0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleWind;                                          // 0x00F0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleDark;                                          // 0x0100(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     strParticleHoly;                                          // 0x0110(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFMainEffectOption
// 0x000C
struct FEFMainEffectOption
{
	float                                              fElapsedTime;                                             // 0x0000(0x0004) (Edit)
	float                                              fStartTime;                                               // 0x0004(0x0004) (Edit)
	unsigned long                                      bRandomActivity : 1;                                      // 0x0008(0x0004) (Edit)
	unsigned long                                      bIgnoreSocketWorldRotation : 1;                           // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFMaskDataUnit
// 0x0020
struct FEFMaskDataUnit
{
	TEnumAsByte<EFEQUIP_PART>                          ePartnerPartsNew;                                         // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                iMaxStage;                                                // 0x0004(0x0004) (Edit)
	TEnumAsByte<EFMASK_STAGE>                          eMaskStage;                                               // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                iMaskOwnLevel;                                            // 0x000C(0x0004) (Edit)
	struct FString                                     strParamName;                                             // 0x0010(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTagetAttachInfo
// 0x0004
struct FEFTagetAttachInfo
{
	TEnumAsByte<EFEQUIP_PART>                          eTargetParts;                                             // 0x0000(0x0001) (Edit)
	TEnumAsByte<EeDirectAttachType>                    eTargetSocket;                                            // 0x0001(0x0001) (Edit)
	unsigned char                                      dummy1;                                                   // 0x0002(0x0001)
	unsigned char                                      dummy2;                                                   // 0x0003(0x0001)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFTargetMaskDataInfo
// 0x0004
struct FEFTargetMaskDataInfo
{
	TEnumAsByte<EFEQUIP_PART>                          eTargetParts;                                             // 0x0000(0x0001) (Edit)
	TEnumAsByte<EeDirectMaskType>                      eTargetMaskType;                                          // 0x0001(0x0001) (Edit)
	unsigned char                                      dummy1;                                                   // 0x0002(0x0001)
	unsigned char                                      dummy2;                                                   // 0x0003(0x0001)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFGibsUnit
// 0x0034
struct FEFGibsUnit
{
	class USkeletalMesh*                               GibsMesh;                                                 // 0x0000(0x0008) (Edit)
	class UPhysicsAsset*                               GibsPhysics;                                              // 0x0008(0x0008) (Edit)
	TEnumAsByte<EPst_SpawnType>                        ePSSpawnType;                                             // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	struct FString                                     GibsMeshPath;                                             // 0x0014(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     GibsPhysicsPath;                                          // 0x0024(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFGibsSet
// 0x0010
struct FEFGibsSet
{
	TArray<struct FEFGibsUnit>                         GibsUnitList;                                             // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFLookInfoDataDefine.EFDropModelInfo
// 0x01A8
struct FEFDropModelInfo
{
	TEnumAsByte<EFDROPMODEL_SIZE>                      eModelSize;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                iDropCount;                                               // 0x0004(0x0004) (Edit)
	unsigned long                                      bCheckMoveOnDrop : 1;                                     // 0x0008(0x0004) (Edit)
	float                                              fMoveTime;                                                // 0x000C(0x0004) (Edit)
	class USkeletalMesh*                               cMesh;                                                    // 0x0010(0x0008) (Edit)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0018(0x0010) (Edit, EditFixedSize, AlwaysInit, NeedCtorLink)
	class UAnimSet*                                    cAnimSet;                                                 // 0x0028(0x0008) (Edit)
	class UAkEvent*                                    cAkEvent;                                                 // 0x0030(0x0008) (Edit)
	class UAkEvent*                                    cAkEventLanding;                                          // 0x0038(0x0008) (Edit)
	class UAkEvent*                                    AkEventPickup;                                            // 0x0040(0x0008) (Edit)
	int                                                iHideElapseTime;                                          // 0x0048(0x0004) (Edit)
	struct FVector                                     vNameTagOffset;                                           // 0x004C(0x000C) (Edit)
	class UEFParticleData*                             ParticleDataOnDrop;                                       // 0x0058(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UEFParticleData*                             ParticleDataOnModel;                                      // 0x0060(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UEFParticleData*                             ParticleDataOnPickup;                                     // 0x0068(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UEFParticleData*                             ParticleDataOnTimeOut;                                    // 0x0070(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FString                                     cMeshPath;                                                // 0x0078(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             MaterialsPathArray;                                       // 0x0088(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     cAnimSetPath;                                             // 0x0098(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     cAkEventPath;                                             // 0x00A8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     cAkEventLandingPath;                                      // 0x00B8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     AkEventPickupPath;                                        // 0x00C8(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FPointer                                    ParticleDataOnDropPointer;                                // 0x00D8(0x0008) (Native, Transient)
	struct FPointer                                    ParticleDataOnModelPointer;                               // 0x00E0(0x0008) (Native, Transient)
	struct FPointer                                    ParticleDataOnPickupPointer;                              // 0x00E8(0x0008) (Native, Transient)
	struct FPointer                                    ParticleDataOnTimeOutPointer;                             // 0x00F0(0x0008) (Native, Transient)
	struct FObjectPath                                 PATH_Mesh;                                                // 0x00F8(0x0020) (NeedCtorLink)
	TArray<struct FObjectPath>                         PATH_Material;                                            // 0x0118(0x0010) (NeedCtorLink)
	struct FObjectPath                                 PATH_AnimSetTemplate;                                     // 0x0128(0x0020) (NeedCtorLink)
	struct FObjectPath                                 PATH_AkEvent;                                             // 0x0148(0x0020) (NeedCtorLink)
	struct FObjectPath                                 PATH_AkEventLanding;                                      // 0x0168(0x0020) (NeedCtorLink)
	struct FObjectPath                                 PATH_AkEventPickup;                                       // 0x0188(0x0020) (NeedCtorLink)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFNpcFunctionTalkInfo
// 0x002C
struct FEFNpcFunctionTalkInfo
{
	TEnumAsByte<ENpcFunctionTalk_FunctionType>         FunctionType;                                             // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                CoopQuestIndex;                                           // 0x0004(0x0004) (Edit)
	int                                                AISignalIndex;                                            // 0x0008(0x0004) (Edit)
	struct FString                                     AISignalString;                                           // 0x000C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                FriendshipTalkRewardIndex;                                // 0x001C(0x0004) (Edit)
	TEnumAsByte<ETriggerContentType>                   ContentTriggerType;                                       // 0x0020(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	int                                                ContentTriggerZoneIndex;                                  // 0x0024(0x0004) (Edit)
	int                                                ContentTriggerSignalIndex;                                // 0x0028(0x0004) (Edit)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFTalkSelect
// 0x0034
struct FEFTalkSelect
{
	int                                                NeedIntellect;                                            // 0x0000(0x0004) (Edit)
	int                                                NeedCourage;                                              // 0x0004(0x0004) (Edit)
	int                                                NeedCharm;                                                // 0x0008(0x0004) (Edit)
	int                                                NeedKindness;                                             // 0x000C(0x0004) (Edit)
	struct FstGameMsgID                                GameMsgIndex;                                             // 0x0010(0x0024) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFNpcClickServerEvent
// 0x002D
struct FEFNpcClickServerEvent
{
	TEnumAsByte<ENpcInteractionEventType>              EventType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SignalIndex;                                              // 0x0004(0x0004) (Edit)
	struct FString                                     AISignalString;                                           // 0x0008(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EFactionType>                          FactionType;                                              // 0x0018(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	int                                                SubFactionID;                                             // 0x001C(0x0004) (Edit)
	int                                                NpcId;                                                    // 0x0020(0x0004) (Edit)
	int                                                DespawnDelayTime;                                         // 0x0024(0x0004) (Edit)
	int                                                SpawnDelayTime;                                           // 0x0028(0x0004) (Edit)
	TEnumAsByte<ENPCSpawnAction>                       SpawnAction;                                              // 0x002C(0x0001) (Edit)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFQuestConditionInfo
// 0x000C
struct FEFQuestConditionInfo
{
	int                                                QuestIndex;                                               // 0x0000(0x0004) (Edit)
	int                                                StageIndex;                                               // 0x0004(0x0004) (Edit)
	int                                                SuccessCount;                                             // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFSwitchInteractionInputCaseInfo
// 0x0040
struct FEFSwitchInteractionInputCaseInfo
{
	TEnumAsByte<ESwitchInteractionInputCaseType>       InputCaseType;                                            // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ZoneIndex;                                                // 0x0004(0x0004) (Edit)
	int                                                TriggerUnitIndex;                                         // 0x0008(0x0004) (Edit)
	struct FString                                     IconName;                                                 // 0x000C(0x0010) (Edit, NeedCtorLink)
	struct FstGameMsgID                                IconText;                                                 // 0x001C(0x0024) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFNPCFunctionDataDefine.EFNpcTalkInfo
// 0x0024
struct FEFNpcTalkInfo
{
	struct FstGameMsgID                                TalkMsg;                                                  // 0x0000(0x0024) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFParticleModuleVortex.VortexModuleInstancePayload
// 0x0020
struct FVortexModuleInstancePayload
{
	struct FVector                                     OriginalLocation;                                         // 0x0000(0x000C)
	unsigned long                                      isFirstUpdate : 1;                                        // 0x000C(0x0004)
	struct FVector                                     OwnerLocation;                                            // 0x0010(0x000C)
	float                                              PowerAcclerationValue;                                    // 0x001C(0x0004)
};

// ScriptStruct EFGame.EFParticleSkeletalMeshActor.ParticleSkeletalMeshParticleInstanceInfo
// 0x0034
struct FParticleSkeletalMeshParticleInstanceInfo
{
	class UEFAN_Params*                                pUParticleSkeletalMeshParticle;                           // 0x0000(0x0008) (Transient)
	struct FPointer                                    pParticleSkeletalMeshParticle;                            // 0x0008(0x0008) (Native, Transient)
	unsigned long                                      IsPlaying : 1;                                            // 0x0010(0x0004) (Transient)
	float                                              CurrentTime;                                              // 0x0014(0x0004) (Transient)
	float                                              PlayStartTime;                                            // 0x0018(0x0004) (Transient)
	unsigned long                                      bStarted : 1;                                             // 0x001C(0x0004) (Transient)
	TArray<int>                                        SpawnedParticles;                                         // 0x0020(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	unsigned long                                      bForceFiniteLoop : 1;                                     // 0x0030(0x0004) (Transient)
};

// ScriptStruct EFGame.EFParticleSkeletalMeshActor.ParticleSkeletalMeshActionInstanceInfo
// 0x0034
struct FParticleSkeletalMeshActionInstanceInfo
{
	class UEFActionNotify_AnimEvent*                   pUParticleSkeletalMeshAction;                             // 0x0000(0x0008) (Transient)
	struct FPointer                                    pParticleSkeletalMeshAction;                              // 0x0008(0x0008) (Native, Transient)
	unsigned long                                      IsPlaying : 1;                                            // 0x0010(0x0004) (Transient)
	float                                              CurrentTime;                                              // 0x0014(0x0004) (Transient)
	float                                              PlayStartTime;                                            // 0x0018(0x0004) (Transient)
	unsigned long                                      bStarted : 1;                                             // 0x001C(0x0004) (Transient)
	struct FLinearColor                                CurrentLinearColor;                                       // 0x0020(0x0010) (Transient)
	float                                              CurrentScalar;                                            // 0x0030(0x0004) (Transient)
};

// ScriptStruct EFGame.EFPlayerController.EFInputEvent
// 0x0044
struct FEFInputEvent
{
	struct FVector                                     MouseDir;                                                 // 0x0000(0x000C)
	struct FVector                                     InputDir;                                                 // 0x000C(0x000C)
	struct FEFBasedLocation                            MouseTargetPos;                                           // 0x0018(0x0010)
	unsigned long                                      bMoveStart : 1;                                           // 0x0028(0x0004)
	unsigned long                                      bMoving : 1;                                              // 0x0028(0x0004)
	unsigned long                                      bMoveEnd : 1;                                             // 0x0028(0x0004)
	unsigned long                                      bMoveStop : 1;                                            // 0x0028(0x0004)
	class AActor*                                      TargetActor;                                              // 0x002C(0x0008)
	int                                                HotKeyId;                                                 // 0x0034(0x0004)
	int                                                InputEvent;                                               // 0x0038(0x0004)
	int                                                SkillId;                                                  // 0x003C(0x0004)
	int                                                CommonActionId;                                           // 0x0040(0x0004)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestAdditionalEndOption_GatherItem
// 0x0010
struct FEFQuestAdditionalEndOption_GatherItem
{
	unsigned long                                      IsQuestItem : 1;                                          // 0x0000(0x0004) (Edit)
	int                                                ItemIndex;                                                // 0x0004(0x0004) (Edit)
	int                                                ItemAmount;                                               // 0x0008(0x0004) (Edit)
	unsigned long                                      NeedItemWithdraw : 1;                                     // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFTokenItemAmount
// 0x0008
struct FEFTokenItemAmount
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	int                                                Amount;                                                   // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestAdditionalEndOption_TokenItem
// 0x000C
struct FEFQuestAdditionalEndOption_TokenItem
{
	struct FEFTokenItemAmount                          TokenAmount;                                              // 0x0000(0x0008) (Edit)
	unsigned long                                      NeedItemWithdraw : 1;                                     // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestAdditionalEndOption_HonorTitle
// 0x0008
struct FEFQuestAdditionalEndOption_HonorTitle
{
	int                                                FirstTitle;                                               // 0x0000(0x0004) (Edit)
	int                                                SecondTitle;                                              // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestAdditionalOfferOption_Item
// 0x000C
struct FEFQuestAdditionalOfferOption_Item
{
	int                                                ItemIndex;                                                // 0x0000(0x0004) (Edit)
	int                                                ItemAmount;                                               // 0x0004(0x0004) (Edit)
	unsigned long                                      CheckUnique : 1;                                          // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestTriggerInfo
// 0x0008
struct FEFQuestTriggerInfo
{
	int                                                ZoneIndex;                                                // 0x0000(0x0004) (Edit)
	int                                                TriggerUnitIndex;                                         // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestOfferRootClassOptionData
// 0x000C
struct FEFQuestOfferRootClassOptionData
{
	TEnumAsByte<EPlayerClassDivision>                  eClassDivision;                                           // 0x0000(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Index;                                                    // 0x0004(0x0004) (Edit)
	int                                                Amount;                                                   // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EQuestOfferFailOption
// 0x0014
struct FEQuestOfferFailOption
{
	TEnumAsByte<EQuestOfferFailOption_GiveObjectType>  GiveObjectType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                GiveObjectIndex;                                          // 0x0004(0x0004) (Edit)
	int                                                GatherPercentage;                                         // 0x0008(0x0004) (Edit)
	int                                                GatherMinAmount;                                          // 0x000C(0x0004) (Edit)
	int                                                GatherMaxAmount;                                          // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFPointPerTarget
// 0x0008
struct FEFPointPerTarget
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	int                                                Point;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFProfessionPropCondition
// 0x0008
struct FEFProfessionPropCondition
{
	TEnumAsByte<EProfessionType>                       eType;                                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ReserveValue;                                             // 0x0004(0x0004) (Transient)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFPrecedeQuestInfo
// 0x000C
struct FEFPrecedeQuestInfo
{
	int                                                QuestIndex;                                               // 0x0000(0x0004) (Edit)
	int                                                StepIndex;                                                // 0x0004(0x0004) (Edit)
	int                                                RepeatCount;                                              // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFNpcFriendShipCondition
// 0x000C
struct FEFNpcFriendShipCondition
{
	int                                                NpcId;                                                    // 0x0000(0x0004) (Edit)
	TEnumAsByte<EFriendshipSubGrade>                   eSubGrade;                                                // 0x0004(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	unsigned long                                      PointMax : 1;                                             // 0x0008(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestUIOption
// 0x0005
struct FEFQuestUIOption
{
	unsigned long                                      m_bShow : 1;                                              // 0x0000(0x0004) (Edit)
	unsigned long                                      m_bAnnounce : 1;                                          // 0x0000(0x0004) (Edit)
	unsigned long                                      m_bHideQuestSymbolWhenSuccess : 1;                        // 0x0000(0x0004) (Edit)
	unsigned long                                      m_bHideMapSymbolWhenSuccess : 1;                          // 0x0000(0x0004) (Edit)
	unsigned long                                      m_bDisableTraceWhenSuccess : 1;                           // 0x0000(0x0004) (Edit)
	TEnumAsByte<ETroopUnit>                            m_eTroopNumber;                                           // 0x0004(0x0001) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFAchievementCondition
// 0x0008
struct FEFAchievementCondition
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	int                                                Level;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFTendencyCondition
// 0x0008
struct FEFTendencyCondition
{
	TEnumAsByte<ECharacterTendencyType>                eType;                                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Point;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFVoyageSkillCondition
// 0x0008
struct FEFVoyageSkillCondition
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	int                                                Level;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFShipCondition
// 0x0008
struct FEFShipCondition
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit)
	int                                                Level;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFTalkNpcInfo
// 0x0008
struct FEFTalkNpcInfo
{
	int                                                NpcId;                                                    // 0x0000(0x0004) (Edit)
	int                                                TalkNodeIndex;                                            // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestFailUIInfo
// 0x004C
struct FEFQuestFailUIInfo
{
	unsigned long                                      bShow : 1;                                                // 0x0000(0x0004) (Edit)
	struct FEFIconInfo                                 Icon;                                                     // 0x0004(0x0024) (Edit, NeedCtorLink)
	struct FstGameMsgID                                Message;                                                  // 0x0028(0x0024) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestEnd
// 0x0008
struct FEFQuestEnd
{
	TEnumAsByte<EQuestEndType>                         End_Type;                                                 // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                End_NextQuestIndex;                                       // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFQuestItemWithdrawInfo
// 0x0008
struct FEFQuestItemWithdrawInfo
{
	TEnumAsByte<EQuestStatus>                          QuestStatus;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                QuestItemIndex;                                           // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFQuestDataDefine.EFBuffInfo
// 0x0008
struct FEFBuffInfo
{
	int                                                BuffIndex;                                                // 0x0000(0x0004) (Edit)
	int                                                Probability;                                              // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFSequence.Matrix2D
// 0x0024
struct FMatrix2D
{
	struct FVector                                     M[0x3];                                                   // 0x0000(0x000C) (Edit)
};

// ScriptStruct EFGame.EFSequence.SRTMatrix2D
// 0x0000 (0x0024 - 0x0024)
struct FSRTMatrix2D : public FMatrix2D
{

};

// ScriptStruct EFGame.EFTriggerDataDefine.EFActiveAIInfo
// 0x0005
struct FEFActiveAIInfo
{
	int                                                SpawnIndex;                                               // 0x0000(0x0004) (Edit, EditInline)
	TEnumAsByte<ENPCSpawnAction>                       SpawnAction;                                              // 0x0004(0x0001) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFRaidContentsTypeInfo
// 0x0006
struct FEFRaidContentsTypeInfo
{
	unsigned long                                      bTemp : 1;                                                // 0x0000(0x0004)
	TEnumAsByte<ERaidType>                             RaidType;                                                 // 0x0004(0x0001) (Edit)
	TEnumAsByte<ERaidDifficultyType>                   RaidDifficulty;                                           // 0x0005(0x0001) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Input
// 0x0014
struct FEFTriggerSceneEventInfo_Input
{
	unsigned long                                      bDisableInput : 1;                                        // 0x0000(0x0004) (Edit)
	unsigned long                                      bStandAction : 1;                                         // 0x0000(0x0004) (Edit)
	unsigned long                                      bDisableEpicSkill : 1;                                    // 0x0000(0x0004) (Edit)
	unsigned long                                      bBlockApporach : 1;                                       // 0x0000(0x0004) (Edit)
	TArray<TEnumAsByte<ETriggerInputLockType>>         InputLockArray;                                           // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerOutputInfo
// 0x0024
struct FEFTriggerOutputInfo
{
	struct FString                                     OutputString;                                             // 0x0000(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<ETriggerSignalType>                    SignalType;                                               // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	TArray<class USequenceObject*>                     TriggerNodeArray;                                         // 0x0014(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerUnitOutputInfo
// 0x0020
struct FEFTriggerUnitOutputInfo
{
	struct FString                                     OutputString;                                             // 0x0000(0x0010) (Edit, NeedCtorLink)
	TArray<class USequenceObject*>                     TriggerUnitArray;                                         // 0x0010(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFClientEventTriggerAction_Warp
// 0x0010
struct FEFClientEventTriggerAction_Warp
{
	int                                                ZoneIndex;                                                // 0x0000(0x0004) (Edit)
	TEnumAsByte<EZoneLevel>                            eZoneLevel;                                               // 0x0004(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                PortalIndex;                                              // 0x0008(0x0004) (Edit)
	unsigned long                                      bSourceZoneWarp : 1;                                      // 0x000C(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFClientEventTriggerAction_Teleport
// 0x0034
struct FEFClientEventTriggerAction_Teleport
{
	TArray<int>                                        TeleportIndexList;                                        // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<EOceanAreaType>>                OceanAreaTypeList;                                        // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bForcedMoveDeadPlayer : 1;                                // 0x0020(0x0004) (Edit)
	TArray<struct FVector>                             PositionList;                                             // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerNodeOutputInfo
// 0x0024
struct FEFTriggerNodeOutputInfo
{
	struct FString                                     OutputString;                                             // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<ETriggerSignalType>                    SignalType;                                               // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	TArray<int>                                        NextTriggerNodeStepIndexArray;                            // 0x0014(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerUnitExportInfo
// 0x0020
struct FEFTriggerUnitExportInfo
{
	struct FString                                     OutputString;                                             // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<int>                                        TriggerUnitIndexArray;                                    // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_UI
// 0x0014
struct FEFTriggerSceneEventInfo_UI
{
	TArray<int>                                        UIWindowTypeArray;                                        // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bHideUI : 1;                                              // 0x0010(0x0004) (Edit)
	unsigned long                                      bHideBalloon : 1;                                         // 0x0010(0x0004) (Edit)
	unsigned long                                      bHideQuestMark : 1;                                       // 0x0010(0x0004) (Edit)
	unsigned long                                      bHideNameTag : 1;                                         // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Target
// 0x0004
struct FEFTriggerSceneEventInfo_Target
{
	int                                                TargetSpawnIndex;                                         // 0x0000(0x0004) (Edit, EditInline)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Kismet
// 0x0060
struct FEFTriggerSceneEventInfo_Kismet
{
	unsigned long                                      bHideLocalPlayer : 1;                                     // 0x0000(0x0004) (Edit)
	unsigned long                                      bHidePlayer : 1;                                          // 0x0000(0x0004) (Edit)
	unsigned long                                      bHideWeapon : 1;                                          // 0x0000(0x0004) (Edit)
	unsigned long                                      bHideDropItem : 1;                                        // 0x0000(0x0004) (Edit)
	unsigned long                                      bHideNPC : 1;                                             // 0x0000(0x0004) (Edit)
	unsigned long                                      bHideMonster : 1;                                         // 0x0000(0x0004) (Edit)
	struct FString                                     KismetEvent;                                              // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             PartyRemoteEventList;                                     // 0x0014(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             TroopUnitRemoteEventList;                                 // 0x0024(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bUseSyncLocation : 1;                                     // 0x0034(0x0004) (Edit)
	unsigned long                                      bVehicleSync : 1;                                         // 0x0034(0x0004) (Edit)
	TEnumAsByte<ETriggerKismetCombatStateType>         eStartCombatState;                                        // 0x0038(0x0001) (Edit)
	TEnumAsByte<ETriggerKismetCombatStateType>         eEndCombatState;                                          // 0x0039(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	TArray<int>                                        HiddenObjectSpawnIndexList;                               // 0x003C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bPlayWinnerPose : 1;                                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bSetPlayerCamera : 1;                                     // 0x004C(0x0004) (Edit)
	TArray<TEnumAsByte<ECinematicSyncType>>            CinematicSyncTypeList;                                    // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Delay
// 0x0004
struct FEFTriggerSceneEventInfo_Delay
{
	float                                              DelayTime;                                                // 0x0000(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFSceneEventStringInfo
// 0x0014
struct FEFSceneEventStringInfo
{
	TEnumAsByte<EFGAMEMSG_TYPE>                        MsgType;                                                  // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     MsgID;                                                    // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_StringDispatcher
// 0x0010
struct FEFTriggerSceneEventInfo_StringDispatcher
{
	TArray<struct FEFSceneEventStringInfo>             StringDispatcherList;                                     // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Announce
// 0x0050
struct FEFTriggerSceneEventInfo_Announce
{
	TEnumAsByte<EFGAMEMSG_TYPE>                        MsgType;                                                  // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     MsgID;                                                    // 0x0004(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<EAnnounceCategory>                     CategoryType;                                             // 0x0014(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	int                                                SubCategoryType;                                          // 0x0018(0x0004) (Edit)
	struct FString                                     IconPath;                                                 // 0x001C(0x0010) (Edit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x002C(0x0004) (Edit)
	struct FString                                     SoundTheme;                                               // 0x0030(0x0010) (Edit, NeedCtorLink)
	struct FString                                     SoundEvent;                                               // 0x0040(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_GameNote
// 0x0004
struct FEFTriggerSceneEventInfo_GameNote
{
	int                                                GameNoteIndex;                                            // 0x0000(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_MapSymbol
// 0x0014
struct FEFTriggerSceneEventInfo_MapSymbol
{
	int                                                MapSymbolIndex;                                           // 0x0000(0x0004) (Edit)
	TArray<int>                                        SpawnIndexList;                                           // 0x0004(0x0010) (Edit, NeedCtorLink, EditInline)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerSceneEventInfo_Fading
// 0x0009
struct FEFTriggerSceneEventInfo_Fading
{
	TEnumAsByte<ETriggerKismetFadingType>              FadingType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              FadingTime;                                               // 0x0004(0x0004) (Edit)
	TEnumAsByte<ETriggerSceneEventFlagType>            EventFlag;                                                // 0x0008(0x0001) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerRandomCaseInfo
// 0x0014
struct FEFTriggerRandomCaseInfo
{
	struct FString                                     OutputString;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Percentage;                                               // 0x0010(0x0004) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerTeleportNPCInfo
// 0x0020
struct FEFTriggerTeleportNPCInfo
{
	int                                                SpawnIndex;                                               // 0x0000(0x0004) (Edit, EditInline)
	int                                                TransitSpawnIndex;                                        // 0x0004(0x0004) (Edit, EditInline)
	struct FVector                                     TeleportLocation;                                         // 0x0008(0x000C) (Edit)
	struct FRotator                                    TeleportRotation;                                         // 0x0014(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerFactionRevivePositionInfo
// 0x0010
struct FEFTriggerFactionRevivePositionInfo
{
	TEnumAsByte<EFactionType>                          FactionType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     RevivePosition;                                           // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerTroopUnitRevivePositionInfo
// 0x0010
struct FEFTriggerTroopUnitRevivePositionInfo
{
	TEnumAsByte<ETroopUnit>                            TroopUnitIndex;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     RevivePosition;                                           // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerFactionTeleportPositionInfo
// 0x0010
struct FEFTriggerFactionTeleportPositionInfo
{
	TEnumAsByte<EFactionType>                          FactionType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     TeleportPosition;                                         // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerTroopUnitTeleportPositionInfo
// 0x0010
struct FEFTriggerTroopUnitTeleportPositionInfo
{
	TEnumAsByte<ETroopUnit>                            TroopUnitIndex;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     TeleportPosition;                                         // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.EFTriggerTroopUnitDefaultWarpPositionInfo
// 0x0010
struct FEFTriggerTroopUnitDefaultWarpPositionInfo
{
	TEnumAsByte<ETroopUnit>                            TroopUnitIndex;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     TeleportPosition;                                         // 0x0004(0x000C) (Edit)
};

// ScriptStruct EFGame.EFTriggerDataDefine.FEFTriggerInstanceTimerEventInfo
// 0x0008
struct FFEFTriggerInstanceTimerEventInfo
{
	TEnumAsByte<ETriggerSignalType>                    EventIndex;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Time;                                                     // 0x0004(0x0004) (Edit)
};

// ScriptStruct EFGame.EFUIDataDefine.UIControlBindingInfo
// 0x003C
struct FUIControlBindingInfo
{
	struct FString                                     InstanceName;                                             // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     BindingDescription;                                       // 0x0010(0x0010) (Edit, NeedCtorLink)
	class UClass*                                      SubWidgetBinding;                                         // 0x0020(0x0008) (Edit)
	struct FString                                     SubWidgetBindingPath;                                     // 0x0028(0x0010) (EditConst, NeedCtorLink)
	unsigned long                                      ComponentOff : 1;                                         // 0x0038(0x0004) (Edit)
};

// ScriptStruct EFGame.EFUIDataDefine.UIStructureInfo
// 0x0040
struct FUIStructureInfo
{
	TArray<struct FUIControlBindingInfo>               BindingInfo;                                              // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FString                                     FrameName;                                                // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      OptionImmortal : 1;                                       // 0x0020(0x0004) (Edit)
	unsigned long                                      OptionShowWhenActive : 1;                                 // 0x0020(0x0004) (Edit)
	unsigned long                                      OptionHitTest : 1;                                        // 0x0020(0x0004) (Edit)
	class UClass*                                      WidgetBinding;                                            // 0x0024(0x0008) (Edit)
	struct FString                                     WidgetBindingPath;                                        // 0x002C(0x0010) (EditConst, NeedCtorLink)
	unsigned long                                      OptionModal : 1;                                          // 0x003C(0x0004) (Edit)
};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
